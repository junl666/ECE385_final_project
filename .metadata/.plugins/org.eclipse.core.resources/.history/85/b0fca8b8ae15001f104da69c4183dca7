/*
 * text_mode_vga_color.c
 * Minimal driver for text mode VGA support
 * This is for Week 2, with color support
 *
 *  Created on: Oct 25, 2021
 *      Author: zuofu
 */

#include "text_mode_vga_color.h"


//void test_init()
//{
//	vga_ctrl->VRAM[0] = my_char.x << 22 | my_char.y << 12 | my_char.state;
////	vga_ctrl->VRAM[1] = 0b01000000000100000000000000000000;
//	for (int i = 1; i < 8; i++)
//	{
//		vga_ctrl->VRAM[i] = 0xFFFFFFFF;
//	}
//}
//
//void test01()
//{
//	test_init();
//	while (1)
//	{
//		vga_ctrl->VRAM[0] += 0b00001000000000100000000000000000;
//		usleep (100000);
//	}
//}
//
//void test02(int keycode)
//{
////	vga_ctrl->VRAM[1] += 0b00000000100000000000000000000000;
//
//	if (keycode == 7 || keycode == (7 << 8)) // key: D -- move right
//	{
//		vga_ctrl->VRAM[0] += horizontal_move << 22;
//	}
//	else if (keycode == 4 || keycode == (4 << 8)) // key: A -- move left
//	{
//		vga_ctrl->VRAM[0] -= horizontal_move << 22;
//	}
//	else if (keycode == 26 || keycode == (26 << 8)) // key: w -- up
//	{
//		vga_ctrl->VRAM[0] -= vertical_move << 12;
//	}
//	else if (keycode == 22 || keycode == (22 << 8)) // key: s -- down
//	{
//		vga_ctrl->VRAM[0] += vertical_move << 12;
//	}
//	else if ((keycode == (7 | (26 << 8))) || (keycode == (26 | (7 << 8))))	// right and up
//	{
//		vga_ctrl->VRAM[0] += horizontal_move << 22;
//		vga_ctrl->VRAM[0] -= vertical_move << 12;
//	}
//	else
//	{
//
//	}
//}

void game_init()
{
	vga_ctrl->VRAM[0] = LIFE__POS_X << 22 | LIFE_POS_Y << 12 | life5;
	vga_ctrl->VRAM[1] = CHAR_POS_INIT_X << 22 | CHAR_POS_INIT_Y << 12 | char_still_r;
	for (int i = 2; i < 8; i++)
	{
		vga_ctrl->VRAM[i] = 0;
	}
}


void game_run(int keycode)
{
	if (keycode == 7 || keycode == (7 << 8)) // key: D -- move right
	{
		my_char.x += HORIZONTAL_MOVE;
		if (my_char.state == char_still_r)
		{
			my_char.state = char_r1;
		}
		else if (my_char.state == char_r1)
		{
			my_char.state = char_r2;
		}
		else if (my_char.state == char_r2)
		{
			my_char.state = char_r3;
		}
		else if (my_char.state == char_r3)
		{
			my_char.state = char_r1;
		}
		else
		{
			my_char.state = char_r1;
		}
		vga_ctrl->VRAM[1] = my_char.x << 22 | my_char.y << 12 | my_char.state;
		
	}
	else if (keycode == 4 || keycode == (4 << 8)) // key: A -- move left
	{
		my_char.x -= HORIZONTAL_MOVE;
		if (my_char.state == char_still_l)
		{
			my_char.state = char_l1;
		}
		else if (my_char.state == char_l1)
		{
			my_char.state = char_l2;
		}
		else if (my_char.state == char_l2)
		{
			my_char.state = char_l3;
		}
		else if (my_char.state == char_l3)
		{
			my_char.state = char_l1;
		}
		else
		{
			my_char.state = char_l1;
		}
		vga_ctrl->VRAM[1] = my_char.x << 22 | my_char.y << 12 | my_char.state;

	}
	else if (keycode == 26 || keycode == (26 << 8)) // key: w -- up
	{
		my_char.y -= VERTICAL_MOVE;
		vga_ctrl->VRAM[1] = my_char.x << 22 | my_char.y << 12 | my_char.state;
	}
	else if (keycode == 22 || keycode == (22 << 8)) // key: s -- down
	{
		my_char.y += VERTICAL_MOVE;
		vga_ctrl->VRAM[1] = my_char.x << 22 | my_char.y << 12 | my_char.state;
	}
	else if (keycode == 1 || keycode == (1 << 8)) // key: 1 -- life 1
	{
		vga_ctrl->VRAM[0] = (vga_ctrl->VRAM[0] & 0xFFFFFFF0) | life1;
	}
	else if (keycode == 2 || keycode == (2 << 8)) // key: 2 -- life 2
	{
		vga_ctrl->VRAM[0] = (vga_ctrl->VRAM[0] & 0xFFFFFFF0) | life2;
	}
	else if (keycode == 3 || keycode == (3 << 8)) // key: 3 -- life 3
	{
		vga_ctrl->VRAM[0] = (vga_ctrl->VRAM[0] & 0xFFFFFFF0) | life3;
	}
	else if (keycode == 5 || keycode == (5 << 8)) // key: 5 -- life 5
	{
	}	
	else
	{
		vga_ctrl->VRAM[1] = (vga_ctrl->VRAM[1] & 0xFFFFFFF0) | char_still_r;
	}
}
