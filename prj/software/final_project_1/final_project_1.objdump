
final_project_1.elf:     file format elf32-littlenios2
final_project_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000143e0 memsz 0x000143e0 flags r-x
    LOAD off    0x00015400 vaddr 0x10014400 paddr 0x10015ef4 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x000179e8 vaddr 0x100179e8 paddr 0x100179e8 align 2**12
         filesz 0x00000000 memsz 0x000001c0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013740  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a90  10013970  10013970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  10014400  10015ef4  00015400  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001c0  100179e8  100179e8  000179e8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00016ef4  2**0
                  CONTENTS
  7 .sdram        00000000  10017ba8  10017ba8  00016ef4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00016ef4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fe0  00000000  00000000  00016f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000251ee  00000000  00000000  00017ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009846  00000000  00000000  0003d0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c475  00000000  00000000  0004692c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000028c8  00000000  00000000  00052da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003f70  00000000  00000000  0005566c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000178c4  00000000  00000000  000595dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00070ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018e8  00000000  00000000  00070ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00076266  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00076269  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00076275  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00076276  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00076277  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007627b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007627f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00076283  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007628e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00076299  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000013  00000000  00000000  000762a4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002c  00000000  00000000  000762b7  2**0
                  CONTENTS, READONLY
 30 .jdi          00005d35  00000000  00000000  000762e3  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000773db  00000000  00000000  0007c018  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10013970 l    d  .rodata	00000000 .rodata
10014400 l    d  .rwdata	00000000 .rwdata
100179e8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10017ba8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_1_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ball_attack.c
00000000 l    df *ABS*	00000000 character.c
100179e8 l     O .bss	00000004 char_hurting_count
00000000 l    df *ABS*	00000000 enemy.c
100179ec l     O .bss	00000004 still_count
100179f0 l     O .bss	00000004 enemy_hurting_count
00000000 l    df *ABS*	00000000 game.c
100179f4 l     O .bss	00000004 char_hurting_count
100179f8 l     O .bss	00000004 still_count
100179fc l     O .bss	00000004 enemy_hurting_count
10015eac l     O .rwdata	00000004 vga_ctrl
10017a00 l     O .bss	00000004 is_enemy_attacked
10017a04 l     O .bss	00000004 is_character_attacked
10017a08 l     O .bss	00000004 is_win
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 life_bar.c
00000000 l    df *ABS*	00000000 main.c
10017a2c l     O .bss	00000004 char_hurting_count
10017a30 l     O .bss	00000004 still_count
10017a34 l     O .bss	00000004 enemy_hurting_count
10015eb0 l     O .rwdata	00000004 vga_ctrl
10017a38 l     O .bss	00000004 is_enemy_attacked
10017a3c l     O .bss	00000004 is_character_attacked
10017a40 l     O .bss	00000004 is_win
10017a44 l     O .bss	00000002 ctl_reg.3608
10017a46 l     O .bss	00000002 no_device.3609
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10014146 l     O .rodata	00000010 zeroes.4404
10006f40 l     F .text	000000bc __sbprintf
10014156 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10007150 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10008ca8 l     F .text	00000008 __fp_unlock
10008cbc l     F .text	0000019c __sinit.part.1
10008e58 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10014808 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
10014c4c l     O .rwdata	00000020 lc_ctype_charset
10014c2c l     O .rwdata	00000020 lc_message_charset
10014c6c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10014188 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000bacc l     F .text	000000fc __sprint_r.part.0
100142ac l     O .rodata	00000010 zeroes.4349
1000d108 l     F .text	000000bc __sbprintf
100142bc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10011150 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10011264 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10011290 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10011384 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1001146c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10011558 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10011734 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10015ee4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
100119d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10011b14 l     F .text	00000034 alt_dev_reg
10014e4c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10011df0 l     F .text	0000020c altera_avalon_jtag_uart_irq
10011ffc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100128d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10012d38 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10012e98 l     F .text	0000003c alt_get_errno
10012ed4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10017a0c g     O .bss	00000004 enemy5
10017a7c g     O .bss	00000004 alt_instruction_exception_handler
1000b164 g     F .text	00000074 _mprec_log10
1000b250 g     F .text	0000008c __any_on
1000d6bc g     F .text	00000054 _isatty_r
10014194 g     O .rodata	00000028 __mprec_tinytens
10000788 g     F .text	0000002c char_update_y_speed
10011670 g     F .text	0000007c alt_main
10004a88 g     F .text	000000c0 _puts_r
10017aa8 g     O .bss	00000100 alt_irq
1000d710 g     F .text	00000060 _lseek_r
10015ef4 g       *ABS*	00000000 __flash_rwdata_start
1000fb28 g     F .text	00000088 .hidden __eqdf2
10017ba8 g       *ABS*	00000000 __alt_heap_start
10017a10 g     O .bss	00000004 enemy1
10000e58 g     F .text	00000060 char_reset
10004a4c g     F .text	0000003c printf
1000d928 g     F .text	0000009c _wcrtomb_r
1000b98c g     F .text	0000005c __sseek
10009008 g     F .text	00000010 __sinit
1000d7d0 g     F .text	00000140 __swbuf_r
1000105c g     F .text	00000044 enemy_update_x
10009adc g     F .text	0000007c _setlocale_r
10008e60 g     F .text	00000078 __sfmoreglue
10011710 g     F .text	00000024 __malloc_unlock
100040e8 g     F .text	00000080 UsbGetRetryCnt
10009fa0 g     F .text	0000015c memmove
10001f54 g     F .text	000000b0 IO_init
10000850 g     F .text	0000009c char_is_l
10008ff0 g     F .text	00000018 _cleanup
1000a224 g     F .text	000000a8 _Balloc
1000fbb0 g     F .text	000000dc .hidden __gtdf2
100132c0 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000d660 g     F .text	0000005c _fstat_r
100011ec g     F .text	0000030c enemy_update_state
10017a54 g     O .bss	00000004 errno
1000b908 g     F .text	00000008 __seofread
10001b54 g     F .text	000002b4 isEnemyAttacked
10017a68 g     O .bss	00000004 alt_argv
1001deac g       *ABS*	00000000 _gp
100119a8 g     F .text	00000030 usleep
10014ccc g     O .rwdata	00000180 alt_fd_list
100132e4 g     F .text	00000090 alt_find_dev
10009e58 g     F .text	00000148 memcpy
10008cb0 g     F .text	0000000c _cleanup_r
10010f68 g     F .text	000000dc .hidden __floatsidf
10012e1c g     F .text	0000007c alt_io_redirect
1000fc8c g     F .text	000000f4 .hidden __ltdf2
10013970 g       *ABS*	00000000 __DTOR_END__
10004b48 g     F .text	00000014 puts
10013540 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000b840 g     F .text	00000074 __fpclassifyd
1000b0c0 g     F .text	000000a4 __ratio
1000d0ec g     F .text	0000001c __vfiprintf_internal
100121f4 g     F .text	0000021c altera_avalon_jtag_uart_read
100041e8 g     F .text	00000014 malloc
10004a1c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000e7c8 g     F .text	00000064 .hidden __udivsi3
100113c0 g     F .text	000000ac isatty
100141e4 g     O .rodata	000000c8 __mprec_tens
10009b58 g     F .text	0000000c __locale_charset
10000998 g     F .text	000000b0 char_get_y_speed
10001ef0 g     F .text	00000064 isWin
10017a50 g     O .bss	00000004 __malloc_top_pad
10003774 g     F .text	00000268 UsbGetConfigDesc2
10015ec4 g     O .rwdata	00000004 __mb_cur_max
10009b88 g     F .text	0000000c _localeconv_r
1000a658 g     F .text	0000003c __i2b
1000948c g     F .text	000004c8 __sfvwrite_r
100010a0 g     F .text	0000014c enemy_update_x_speed
10004b5c g     F .text	00000054 _sbrk_r
10000eb8 g     F .text	000000cc enemy_init
1000d770 g     F .text	00000060 _read_r
10015edc g     O .rwdata	00000004 alt_max_fd
1000d354 g     F .text	000000f0 _fclose_r
10008c78 g     F .text	00000030 fflush
10017a4c g     O .bss	00000004 __malloc_max_sbrked_mem
1000e8ac g     F .text	000008ac .hidden __adddf3
10001e08 g     F .text	000000e8 isCharacterAttacked
1000ae68 g     F .text	0000010c __b2d
1000e10c g     F .text	000005c4 .hidden __umoddi3
10011594 g     F .text	000000dc lseek
10015ebc g     O .rwdata	00000004 _global_impure_ptr
1000b2dc g     F .text	00000564 _realloc_r
10017ba8 g       *ABS*	00000000 __bss_end
10012c48 g     F .text	000000f0 alt_iic_isr_register
100131b8 g     F .text	00000108 alt_tick
1000db10 g     F .text	000005fc .hidden __udivdi3
1000d5bc g     F .text	00000024 _fputwc_r
100141bc g     O .rodata	00000028 __mprec_bigtens
1000a43c g     F .text	00000104 __s2b
10011044 g     F .text	000000a8 .hidden __floatunsidf
1000aba8 g     F .text	00000060 __mcmp
100031c4 g     F .text	00000100 UsbSetAddress
10009028 g     F .text	00000018 __fp_lock_all
10012bfc g     F .text	0000004c alt_ic_irq_enabled
1001311c g     F .text	0000009c alt_alarm_stop
10017a70 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10014ca4 g     O .rwdata	00000028 alt_dev_null
1000159c g     F .text	00000054 is_patrolling
10017a14 g     O .bss	00000004 enemy4
10000f84 g     F .text	000000d8 enemy_run
100128b8 g     F .text	00000020 alt_dcache_flush_all
1000a540 g     F .text	00000068 __hi0bits
1000208c g     F .text	00000080 IO_read
10010ee8 g     F .text	00000080 .hidden __fixdfsi
10015ef4 g       *ABS*	00000000 __ram_rwdata_end
10015ed4 g     O .rwdata	00000008 alt_dev_list
10011a14 g     F .text	00000100 write
10014400 g       *ABS*	00000000 __ram_rodata_end
100112cc g     F .text	000000b8 fstat
10002190 g     F .text	00000160 life_bar_update_state
1000fc8c g     F .text	000000f4 .hidden __ledf2
10004168 g     F .text	00000080 UsbPrintMem
1000a920 g     F .text	00000140 __pow5mult
1000bbe0 g     F .text	0000150c ___vfiprintf_internal_r
10017a60 g     O .bss	00000004 __nlocale_changed
1000e82c g     F .text	00000058 .hidden __umodsi3
10017ba8 g       *ABS*	00000000 end
10011d30 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10013970 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100110ec g     F .text	00000064 .hidden __clzsi2
10012410 g     F .text	00000224 altera_avalon_jtag_uart_write
10009018 g     F .text	00000004 __sfp_lock_acquire
10009d74 g     F .text	000000e4 memchr
10004c48 g     F .text	000022dc ___vfprintf_internal_r
10003adc g     F .text	00000100 UsbClassRequest
1000917c g     F .text	00000310 _free_r
10009b64 g     F .text	00000010 __locale_mb_cur_max
100137bc g     F .text	00000180 __call_exitprocs
10017a5c g     O .bss	00000004 __mlocale_changed
100014f8 g     F .text	0000004c enemy_update_life
10015eb4 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10017a74 g     O .bss	00000004 _alt_tick_rate
10017a18 g     O .bss	00000004 life_bar
1000aa60 g     F .text	00000148 __lshift
1000044c g     F .text	00000040 ball_attack_update_x
10017a78 g     O .bss	00000004 _alt_nticks
10000730 g     F .text	00000058 char_update_y
10011770 g     F .text	00000104 read
10011b80 g     F .text	0000004c alt_sys_init
100136a4 g     F .text	00000118 __register_exitproc
1000a694 g     F .text	0000028c __multiply
1001209c g     F .text	00000068 altera_avalon_jtag_uart_close
100015f0 g     F .text	00000124 is_close_to_character
1000e884 g     F .text	00000028 .hidden __mulsi3
10014400 g       *ABS*	00000000 __ram_rwdata_start
10013970 g       *ABS*	00000000 __ram_rodata_start
10017a80 g     O .bss	00000028 __malloc_current_mallinfo
1000af74 g     F .text	0000014c __d2b
100032c4 g     F .text	00000148 UsbGetDeviceDesc1
10011bcc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1001347c g     F .text	000000c4 alt_get_fd
10012760 g     F .text	00000158 alt_busy_sleep
1000d224 g     F .text	00000054 _close_r
10001544 g     F .text	00000058 enemy_reset
10013628 g     F .text	0000007c memcmp
10011c8c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10017ba8 g       *ABS*	00000000 __alt_stack_base
10011cdc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10006ffc g     F .text	00000154 __swsetup_r
1000f158 g     F .text	000009d0 .hidden __divdf3
10008ed8 g     F .text	00000118 __sfp
100018c0 g     F .text	0000020c game_run
10017a1c g     O .bss	00000004 my_char
1000b1d8 g     F .text	00000078 __copybits
10014400 g     O .rwdata	00000408 __malloc_av_
10009024 g     F .text	00000004 __sinit_lock_release
10017a20 g     O .bss	00000004 ball_attack
1000fd80 g     F .text	0000086c .hidden __muldf3
10017a24 g     O .bss	00000004 enemy2
1000b8b4 g     F .text	00000054 __sread
10004064 g     F .text	00000084 UsbWaitTDListDone
10000588 g     F .text	00000090 char_init
10013374 g     F .text	00000108 alt_find_file
10012914 g     F .text	000000a4 alt_dev_llist_insert
100116ec g     F .text	00000024 __malloc_lock
100118f8 g     F .text	000000b0 sbrk
10008c1c g     F .text	0000005c _fflush_r
1000d278 g     F .text	000000dc _calloc_r
100179e8 g       *ABS*	00000000 __bss_start
1000a0fc g     F .text	00000128 memset
100022f0 g     F .text	00000d84 main
10017a6c g     O .bss	00000004 alt_envp
10017a48 g     O .bss	00000004 __malloc_max_total_mem
10011c2c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100039dc g     F .text	00000100 UsbSetConfig
1000d910 g     F .text	00000018 __swbuf
1000b9e8 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000d444 g     F .text	00000014 fclose
10007378 g     F .text	00001688 _dtoa_r
10004210 g     F .text	0000080c _malloc_r
1000da84 g     F .text	00000030 __ascii_wctomb
10015ee0 g     O .rwdata	00000004 alt_errno
10009954 g     F .text	000000c4 _fwalk
1000e6d0 g     F .text	00000084 .hidden __divsi3
10009058 g     F .text	00000124 _malloc_trim_r
10003bdc g     F .text	00000148 UsbGetHidDesc
10013970 g       *ABS*	00000000 __CTOR_END__
1000026c g     F .text	00000070 ball_attack_init
100007b4 g     F .text	0000009c char_is_r
1000b9f0 g     F .text	000000dc strcmp
10013970 g       *ABS*	00000000 __flash_rodata_start
10013970 g       *ABS*	00000000 __DTOR_LIST__
1000fb28 g     F .text	00000088 .hidden __nedf2
100030cc g     F .text	00000044 UsbRead
10011b48 g     F .text	00000038 alt_irq_init
10011874 g     F .text	00000084 alt_release_fd
10001acc g     F .text	00000088 game_free
100142cc g     O .rodata	00000100 .hidden __clz_tab
10017a58 g     O .bss	00000004 _PathLocale
100135dc g     F .text	00000014 atexit
1000d1c4 g     F .text	00000060 _write_r
10000a48 g     F .text	00000410 char_update_state
10009b94 g     F .text	00000018 setlocale
10001714 g     F .text	000001ac game_init
10015ec0 g     O .rwdata	00000004 _impure_ptr
10017a64 g     O .bss	00000004 alt_argc
10008a00 g     F .text	0000021c __sflush_r
10012a18 g     F .text	00000060 _do_dtors
10009b80 g     F .text	00000008 __locale_cjk_lang
10000618 g     F .text	000000d8 char_run
100002dc g     F .text	00000170 ball_attack_run
1000210c g     F .text	00000084 life_bar_init
10000020 g       .exceptions	00000000 alt_irq_entry
1000ae04 g     F .text	00000064 __ulp
10009040 g     F .text	00000018 __fp_unlock_all
10015ecc g     O .rwdata	00000008 alt_fs_list
10003d24 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10009bac g     F .text	0000000c localeconv
10012a98 g     F .text	00000050 alt_ic_isr_register
10015ef4 g       *ABS*	00000000 _edata
10017ba8 g       *ABS*	00000000 _end
10003074 g     F .text	00000058 UsbWrite
1000d458 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10012104 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10012b70 g     F .text	0000008c alt_ic_irq_disable
100006f0 g     F .text	00000040 char_update_x
1000b910 g     F .text	0000007c __swrite
10015eb8 g     O .rwdata	00000004 __malloc_trim_threshold
10009b74 g     F .text	0000000c __locale_msgcharset
100135f0 g     F .text	00000038 exit
10009a18 g     F .text	000000c4 _fwalk_reent
1000048c g     F .text	000000fc ball_reset
1000ac08 g     F .text	000001fc __mdiff
1000e754 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000901c g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10002004 g     F .text	00000088 IO_write
1001393c g     F .text	00000034 _exit
10012634 g     F .text	0000012c alt_alarm_start
10009bb8 g     F .text	000001bc __smakebuf_r
10004bb0 g     F .text	00000098 strlen
10012fc0 g     F .text	0000015c open
1000fbb0 g     F .text	000000dc .hidden __gedf2
10015ec8 g     O .rwdata	00000004 __wctomb
1000bbc8 g     F .text	00000018 __sprint_r
10012a78 g     F .text	00000020 alt_icache_flush_all
10017a28 g     O .bss	00000004 enemy3
10015ee8 g     O .rwdata	00000004 alt_priority_mask
10012ae8 g     F .text	00000088 alt_ic_irq_enable
10006f24 g     F .text	0000001c __vfprintf_internal
1000dab4 g     F .text	0000005c _wctomb_r
100105ec g     F .text	000008fc .hidden __subdf3
1000a5a8 g     F .text	000000b0 __lo0bits
100035e4 g     F .text	00000190 UsbGetConfigDesc1
100008ec g     F .text	000000ac char_get_x_speed
10015eec g     O .rwdata	00000008 alt_alarm_list
100129b8 g     F .text	00000060 _do_ctors
10003110 g     F .text	000000b4 UsbSoftReset
1000d9c4 g     F .text	000000c0 wcrtomb
1001118c g     F .text	000000d8 close
1000340c g     F .text	000001d8 UsbGetDeviceDesc2
100114d4 g     F .text	00000084 alt_load
1000d5e0 g     F .text	00000080 fputwc
100041fc g     F .text	00000014 free
10009020 g     F .text	00000004 __sinit_lock_acquire
1000a2f4 g     F .text	00000148 __multadd
1000a2cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	109eaa04 	addi	r2,r2,31400
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	109eaa04 	addi	r2,r2,31400
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6f417 	ldw	r2,-25648(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6f417 	ldw	r2,-25648(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b7ab14 	ori	gp,gp,57004
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	109e7a14 	ori	r2,r2,31208

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18deea14 	ori	r3,r3,31656

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	00114d40 	call	100114d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00116700 	call	10011670 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <ball_attack_init>:
#include "ball_attack.h"


alt_u32 ball_attack_init(BALL_ATTACK* this)
{
1000026c:	defffe04 	addi	sp,sp,-8
10000270:	df000115 	stw	fp,4(sp)
10000274:	df000104 	addi	fp,sp,4
10000278:	e13fff15 	stw	r4,-4(fp)
    this->is_active = 0;
1000027c:	e0bfff17 	ldw	r2,-4(fp)
10000280:	10000015 	stw	zero,0(r2)
    this->x = 0;
10000284:	e0bfff17 	ldw	r2,-4(fp)
10000288:	10000115 	stw	zero,4(r2)
    this->y = 0;
1000028c:	e0bfff17 	ldw	r2,-4(fp)
10000290:	10000215 	stw	zero,8(r2)
    this->x_speed = 0;
10000294:	e0bfff17 	ldw	r2,-4(fp)
10000298:	10000515 	stw	zero,20(r2)
    this->state = 0;    // blank
1000029c:	e0bfff17 	ldw	r2,-4(fp)
100002a0:	10000615 	stw	zero,24(r2)
    return (this->x << 22) | (this->y << 12) | (this->state);
100002a4:	e0bfff17 	ldw	r2,-4(fp)
100002a8:	10800117 	ldw	r2,4(r2)
100002ac:	100695ba 	slli	r3,r2,22
100002b0:	e0bfff17 	ldw	r2,-4(fp)
100002b4:	10800217 	ldw	r2,8(r2)
100002b8:	1004933a 	slli	r2,r2,12
100002bc:	1886b03a 	or	r3,r3,r2
100002c0:	e0bfff17 	ldw	r2,-4(fp)
100002c4:	10800617 	ldw	r2,24(r2)
100002c8:	1884b03a 	or	r2,r3,r2
}
100002cc:	e037883a 	mov	sp,fp
100002d0:	df000017 	ldw	fp,0(sp)
100002d4:	dec00104 	addi	sp,sp,4
100002d8:	f800283a 	ret

100002dc <ball_attack_run>:

alt_u32 ball_attack_run(BALL_ATTACK* this, int char_x, int char_y, int char_is_r, int keycode, int is_enemy_attacked)
{
100002dc:	defffa04 	addi	sp,sp,-24
100002e0:	dfc00515 	stw	ra,20(sp)
100002e4:	df000415 	stw	fp,16(sp)
100002e8:	df000404 	addi	fp,sp,16
100002ec:	e13ffc15 	stw	r4,-16(fp)
100002f0:	e17ffd15 	stw	r5,-12(fp)
100002f4:	e1bffe15 	stw	r6,-8(fp)
100002f8:	e1ffff15 	stw	r7,-4(fp)
    if (this->is_active == 0)
100002fc:	e0bffc17 	ldw	r2,-16(fp)
10000300:	10800017 	ldw	r2,0(r2)
10000304:	1000331e 	bne	r2,zero,100003d4 <ball_attack_run+0xf8>
    {
        if (((keycode&0xFF) == KEY_J) || (((keycode>>8) & 0xFF) == KEY_J))
10000308:	e0800217 	ldw	r2,8(fp)
1000030c:	10803fcc 	andi	r2,r2,255
10000310:	10800360 	cmpeqi	r2,r2,13
10000314:	1000051e 	bne	r2,zero,1000032c <ball_attack_run+0x50>
10000318:	e0800217 	ldw	r2,8(fp)
1000031c:	1005d23a 	srai	r2,r2,8
10000320:	10803fcc 	andi	r2,r2,255
10000324:	10800358 	cmpnei	r2,r2,13
10000328:	1000391e 	bne	r2,zero,10000410 <ball_attack_run+0x134>
        {
            this->is_active = 1;
1000032c:	e0bffc17 	ldw	r2,-16(fp)
10000330:	00c00044 	movi	r3,1
10000334:	10c00015 	stw	r3,0(r2)
            this->x = (char_is_r) ? (char_x + BALL_REMOVE_BIAS) : (char_x - BALL_REMOVE_BIAS);
10000338:	e0bfff17 	ldw	r2,-4(fp)
1000033c:	10000326 	beq	r2,zero,1000034c <ball_attack_run+0x70>
10000340:	e0bffd17 	ldw	r2,-12(fp)
10000344:	10800504 	addi	r2,r2,20
10000348:	00000206 	br	10000354 <ball_attack_run+0x78>
1000034c:	e0bffd17 	ldw	r2,-12(fp)
10000350:	10bffb04 	addi	r2,r2,-20
10000354:	e0fffc17 	ldw	r3,-16(fp)
10000358:	18800115 	stw	r2,4(r3)
            this->y = char_y;
1000035c:	e0bffc17 	ldw	r2,-16(fp)
10000360:	e0fffe17 	ldw	r3,-8(fp)
10000364:	10c00215 	stw	r3,8(r2)
            this->x_origin = (char_is_r) ? (char_x + BALL_REMOVE_BIAS) : (char_x - BALL_REMOVE_BIAS);
10000368:	e0bfff17 	ldw	r2,-4(fp)
1000036c:	10000326 	beq	r2,zero,1000037c <ball_attack_run+0xa0>
10000370:	e0bffd17 	ldw	r2,-12(fp)
10000374:	10800504 	addi	r2,r2,20
10000378:	00000206 	br	10000384 <ball_attack_run+0xa8>
1000037c:	e0bffd17 	ldw	r2,-12(fp)
10000380:	10bffb04 	addi	r2,r2,-20
10000384:	e0fffc17 	ldw	r3,-16(fp)
10000388:	18800315 	stw	r2,12(r3)
            this->y_origin = char_y;
1000038c:	e0bffc17 	ldw	r2,-16(fp)
10000390:	e0fffe17 	ldw	r3,-8(fp)
10000394:	10c00415 	stw	r3,16(r2)
            this->state = (char_is_r) ? ball_attack_r : ball_attack_l;
10000398:	e0bfff17 	ldw	r2,-4(fp)
1000039c:	10000226 	beq	r2,zero,100003a8 <ball_attack_run+0xcc>
100003a0:	00800704 	movi	r2,28
100003a4:	00000106 	br	100003ac <ball_attack_run+0xd0>
100003a8:	00800744 	movi	r2,29
100003ac:	e0fffc17 	ldw	r3,-16(fp)
100003b0:	18800615 	stw	r2,24(r3)
            this->x_speed = (char_is_r) ? BALL_HORIZONTAL_MOVE : -BALL_HORIZONTAL_MOVE;
100003b4:	e0bfff17 	ldw	r2,-4(fp)
100003b8:	10000226 	beq	r2,zero,100003c4 <ball_attack_run+0xe8>
100003bc:	00800184 	movi	r2,6
100003c0:	00000106 	br	100003c8 <ball_attack_run+0xec>
100003c4:	00bffe84 	movi	r2,-6
100003c8:	e0fffc17 	ldw	r3,-16(fp)
100003cc:	18800515 	stw	r2,20(r3)
100003d0:	00000f06 	br	10000410 <ball_attack_run+0x134>

        }
    }
    else
    {
        ball_attack_update_x(this);
100003d4:	e13ffc17 	ldw	r4,-16(fp)
100003d8:	000044c0 	call	1000044c <ball_attack_update_x>
        if (ball_reset(this, keycode, is_enemy_attacked))
100003dc:	e1800317 	ldw	r6,12(fp)
100003e0:	e1400217 	ldw	r5,8(fp)
100003e4:	e13ffc17 	ldw	r4,-16(fp)
100003e8:	000048c0 	call	1000048c <ball_reset>
100003ec:	10000826 	beq	r2,zero,10000410 <ball_attack_run+0x134>
        {
            this->x = 0;
100003f0:	e0bffc17 	ldw	r2,-16(fp)
100003f4:	10000115 	stw	zero,4(r2)
            this->y = 0;
100003f8:	e0bffc17 	ldw	r2,-16(fp)
100003fc:	10000215 	stw	zero,8(r2)
            this->is_active = 0;
10000400:	e0bffc17 	ldw	r2,-16(fp)
10000404:	10000015 	stw	zero,0(r2)
            this->state = 0;
10000408:	e0bffc17 	ldw	r2,-16(fp)
1000040c:	10000615 	stw	zero,24(r2)
        }
    }

    return (this->x << 22) | (this->y << 12) | (this->state);
10000410:	e0bffc17 	ldw	r2,-16(fp)
10000414:	10800117 	ldw	r2,4(r2)
10000418:	100695ba 	slli	r3,r2,22
1000041c:	e0bffc17 	ldw	r2,-16(fp)
10000420:	10800217 	ldw	r2,8(r2)
10000424:	1004933a 	slli	r2,r2,12
10000428:	1886b03a 	or	r3,r3,r2
1000042c:	e0bffc17 	ldw	r2,-16(fp)
10000430:	10800617 	ldw	r2,24(r2)
10000434:	1884b03a 	or	r2,r3,r2
}
10000438:	e037883a 	mov	sp,fp
1000043c:	dfc00117 	ldw	ra,4(sp)
10000440:	df000017 	ldw	fp,0(sp)
10000444:	dec00204 	addi	sp,sp,8
10000448:	f800283a 	ret

1000044c <ball_attack_update_x>:

void ball_attack_update_x(BALL_ATTACK* this)
{
1000044c:	defffe04 	addi	sp,sp,-8
10000450:	df000115 	stw	fp,4(sp)
10000454:	df000104 	addi	fp,sp,4
10000458:	e13fff15 	stw	r4,-4(fp)
    this->x = this->x + this->x_speed;
1000045c:	e0bfff17 	ldw	r2,-4(fp)
10000460:	10c00117 	ldw	r3,4(r2)
10000464:	e0bfff17 	ldw	r2,-4(fp)
10000468:	10800517 	ldw	r2,20(r2)
1000046c:	1887883a 	add	r3,r3,r2
10000470:	e0bfff17 	ldw	r2,-4(fp)
10000474:	10c00115 	stw	r3,4(r2)
}
10000478:	0001883a 	nop
1000047c:	e037883a 	mov	sp,fp
10000480:	df000017 	ldw	fp,0(sp)
10000484:	dec00104 	addi	sp,sp,4
10000488:	f800283a 	ret

1000048c <ball_reset>:

int ball_reset(BALL_ATTACK* this, int keycode, int is_enemy_attacked)
{
1000048c:	defffc04 	addi	sp,sp,-16
10000490:	df000315 	stw	fp,12(sp)
10000494:	df000304 	addi	fp,sp,12
10000498:	e13ffd15 	stw	r4,-12(fp)
1000049c:	e17ffe15 	stw	r5,-8(fp)
100004a0:	e1bfff15 	stw	r6,-4(fp)
    if ((this->x > 640) || (this->x < 0) || (this->x - this->x_origin > BALL_MAX_DISTANCE) || (this->x_origin - this->x > BALL_MAX_DISTANCE))
100004a4:	e0bffd17 	ldw	r2,-12(fp)
100004a8:	10800117 	ldw	r2,4(r2)
100004ac:	1080a048 	cmpgei	r2,r2,641
100004b0:	1000111e 	bne	r2,zero,100004f8 <ball_reset+0x6c>
100004b4:	e0bffd17 	ldw	r2,-12(fp)
100004b8:	10800117 	ldw	r2,4(r2)
100004bc:	10000e16 	blt	r2,zero,100004f8 <ball_reset+0x6c>
100004c0:	e0bffd17 	ldw	r2,-12(fp)
100004c4:	10c00117 	ldw	r3,4(r2)
100004c8:	e0bffd17 	ldw	r2,-12(fp)
100004cc:	10800317 	ldw	r2,12(r2)
100004d0:	1885c83a 	sub	r2,r3,r2
100004d4:	108025c8 	cmpgei	r2,r2,151
100004d8:	1000071e 	bne	r2,zero,100004f8 <ball_reset+0x6c>
100004dc:	e0bffd17 	ldw	r2,-12(fp)
100004e0:	10c00317 	ldw	r3,12(r2)
100004e4:	e0bffd17 	ldw	r2,-12(fp)
100004e8:	10800117 	ldw	r2,4(r2)
100004ec:	1885c83a 	sub	r2,r3,r2
100004f0:	108025d0 	cmplti	r2,r2,151
100004f4:	1000021e 	bne	r2,zero,10000500 <ball_reset+0x74>
    {
        return 1;
100004f8:	00800044 	movi	r2,1
100004fc:	00001e06 	br	10000578 <ball_reset+0xec>
    }
    else if ((((keycode&0xFF) == KEY_J) || (((keycode>>8) & 0xFF) == KEY_J)) && ((this->x - this->x_origin > BALL_RESET_Threshold) || (this->x_origin - this->x > BALL_RESET_Threshold)))
10000500:	e0bffe17 	ldw	r2,-8(fp)
10000504:	10803fcc 	andi	r2,r2,255
10000508:	10800360 	cmpeqi	r2,r2,13
1000050c:	1000051e 	bne	r2,zero,10000524 <ball_reset+0x98>
10000510:	e0bffe17 	ldw	r2,-8(fp)
10000514:	1005d23a 	srai	r2,r2,8
10000518:	10803fcc 	andi	r2,r2,255
1000051c:	10800358 	cmpnei	r2,r2,13
10000520:	1000101e 	bne	r2,zero,10000564 <ball_reset+0xd8>
10000524:	e0bffd17 	ldw	r2,-12(fp)
10000528:	10c00117 	ldw	r3,4(r2)
1000052c:	e0bffd17 	ldw	r2,-12(fp)
10000530:	10800317 	ldw	r2,12(r2)
10000534:	1885c83a 	sub	r2,r3,r2
10000538:	108004c8 	cmpgei	r2,r2,19
1000053c:	1000071e 	bne	r2,zero,1000055c <ball_reset+0xd0>
10000540:	e0bffd17 	ldw	r2,-12(fp)
10000544:	10c00317 	ldw	r3,12(r2)
10000548:	e0bffd17 	ldw	r2,-12(fp)
1000054c:	10800117 	ldw	r2,4(r2)
10000550:	1885c83a 	sub	r2,r3,r2
10000554:	108004d0 	cmplti	r2,r2,19
10000558:	1000021e 	bne	r2,zero,10000564 <ball_reset+0xd8>
    {
        return 1;
1000055c:	00800044 	movi	r2,1
10000560:	00000506 	br	10000578 <ball_reset+0xec>
    }
    else if (is_enemy_attacked)
10000564:	e0bfff17 	ldw	r2,-4(fp)
10000568:	10000226 	beq	r2,zero,10000574 <ball_reset+0xe8>
    {
        return 1;
1000056c:	00800044 	movi	r2,1
10000570:	00000106 	br	10000578 <ball_reset+0xec>
    }
    else
    {
        return 0;
10000574:	0005883a 	mov	r2,zero
    }
10000578:	e037883a 	mov	sp,fp
1000057c:	df000017 	ldw	fp,0(sp)
10000580:	dec00104 	addi	sp,sp,4
10000584:	f800283a 	ret

10000588 <char_init>:
#include"character.h"

alt_u32 char_init(CHARACTER* this)
{
10000588:	defffe04 	addi	sp,sp,-8
1000058c:	df000115 	stw	fp,4(sp)
10000590:	df000104 	addi	fp,sp,4
10000594:	e13fff15 	stw	r4,-4(fp)
    this->x = CHAR_POS_INIT_X;
10000598:	e0bfff17 	ldw	r2,-4(fp)
1000059c:	00c02004 	movi	r3,128
100005a0:	10c00015 	stw	r3,0(r2)
    this->y = CHAR_POS_INIT_Y;
100005a4:	e0bfff17 	ldw	r2,-4(fp)
100005a8:	00c05784 	movi	r3,350
100005ac:	10c00115 	stw	r3,4(r2)
    this->state = char_still_r;
100005b0:	e0bfff17 	ldw	r2,-4(fp)
100005b4:	00c00284 	movi	r3,10
100005b8:	10c00215 	stw	r3,8(r2)
    this->x_speed = 0;
100005bc:	e0bfff17 	ldw	r2,-4(fp)
100005c0:	10000315 	stw	zero,12(r2)
    this->y_speed = 0;
100005c4:	e0bfff17 	ldw	r2,-4(fp)
100005c8:	10000415 	stw	zero,16(r2)
    this->in_air = 0;
100005cc:	e0bfff17 	ldw	r2,-4(fp)
100005d0:	10000515 	stw	zero,20(r2)
	this->life = CHAR_LIFE;
100005d4:	e0bfff17 	ldw	r2,-4(fp)
100005d8:	00c00144 	movi	r3,5
100005dc:	10c00615 	stw	r3,24(r2)
    return (this->x << 22) | (this->y << 12) | (this->state);
100005e0:	e0bfff17 	ldw	r2,-4(fp)
100005e4:	10800017 	ldw	r2,0(r2)
100005e8:	100695ba 	slli	r3,r2,22
100005ec:	e0bfff17 	ldw	r2,-4(fp)
100005f0:	10800117 	ldw	r2,4(r2)
100005f4:	1004933a 	slli	r2,r2,12
100005f8:	1886b03a 	or	r3,r3,r2
100005fc:	e0bfff17 	ldw	r2,-4(fp)
10000600:	10800217 	ldw	r2,8(r2)
10000604:	1884b03a 	or	r2,r3,r2
}
10000608:	e037883a 	mov	sp,fp
1000060c:	df000017 	ldw	fp,0(sp)
10000610:	dec00104 	addi	sp,sp,4
10000614:	f800283a 	ret

10000618 <char_run>:

alt_u32 char_run(CHARACTER* this,  int keycode, int is_character_attacked)
{
10000618:	defffb04 	addi	sp,sp,-20
1000061c:	dfc00415 	stw	ra,16(sp)
10000620:	df000315 	stw	fp,12(sp)
10000624:	df000304 	addi	fp,sp,12
10000628:	e13ffd15 	stw	r4,-12(fp)
1000062c:	e17ffe15 	stw	r5,-8(fp)
10000630:	e1bfff15 	stw	r6,-4(fp)
	char_get_x_speed(this, keycode);
10000634:	e17ffe17 	ldw	r5,-8(fp)
10000638:	e13ffd17 	ldw	r4,-12(fp)
1000063c:	00008ec0 	call	100008ec <char_get_x_speed>
	char_get_y_speed(this, keycode);
10000640:	e17ffe17 	ldw	r5,-8(fp)
10000644:	e13ffd17 	ldw	r4,-12(fp)
10000648:	00009980 	call	10000998 <char_get_y_speed>
	char_update_x(this);
1000064c:	e13ffd17 	ldw	r4,-12(fp)
10000650:	00006f00 	call	100006f0 <char_update_x>
	char_update_y(this);
10000654:	e13ffd17 	ldw	r4,-12(fp)
10000658:	00007300 	call	10000730 <char_update_y>
	this->in_air = (this->y == CHAR_POS_INIT_Y) ? 0 : 1;
1000065c:	e0bffd17 	ldw	r2,-12(fp)
10000660:	10800117 	ldw	r2,4(r2)
10000664:	10805798 	cmpnei	r2,r2,350
10000668:	10c03fcc 	andi	r3,r2,255
1000066c:	e0bffd17 	ldw	r2,-12(fp)
10000670:	10c00515 	stw	r3,20(r2)
//	 printf("y: %d, y_speed: %d\n", this->y, this->y_speed);
	char_update_state(this, keycode, is_character_attacked);
10000674:	e1bfff17 	ldw	r6,-4(fp)
10000678:	e17ffe17 	ldw	r5,-8(fp)
1000067c:	e13ffd17 	ldw	r4,-12(fp)
10000680:	0000a480 	call	10000a48 <char_update_state>
	if (is_character_attacked){
10000684:	e0bfff17 	ldw	r2,-4(fp)
10000688:	10000a26 	beq	r2,zero,100006b4 <char_run+0x9c>
		if ((--(this->life)) == 0){
1000068c:	e0bffd17 	ldw	r2,-12(fp)
10000690:	10800617 	ldw	r2,24(r2)
10000694:	10ffffc4 	addi	r3,r2,-1
10000698:	e0bffd17 	ldw	r2,-12(fp)
1000069c:	10c00615 	stw	r3,24(r2)
100006a0:	e0bffd17 	ldw	r2,-12(fp)
100006a4:	10800617 	ldw	r2,24(r2)
100006a8:	1000021e 	bne	r2,zero,100006b4 <char_run+0x9c>
			char_reset(this);
100006ac:	e13ffd17 	ldw	r4,-12(fp)
100006b0:	0000e580 	call	10000e58 <char_reset>
		}
	}
	return (this->x << 22) | (this->y << 12) | (this->state);
100006b4:	e0bffd17 	ldw	r2,-12(fp)
100006b8:	10800017 	ldw	r2,0(r2)
100006bc:	100695ba 	slli	r3,r2,22
100006c0:	e0bffd17 	ldw	r2,-12(fp)
100006c4:	10800117 	ldw	r2,4(r2)
100006c8:	1004933a 	slli	r2,r2,12
100006cc:	1886b03a 	or	r3,r3,r2
100006d0:	e0bffd17 	ldw	r2,-12(fp)
100006d4:	10800217 	ldw	r2,8(r2)
100006d8:	1884b03a 	or	r2,r3,r2
}
100006dc:	e037883a 	mov	sp,fp
100006e0:	dfc00117 	ldw	ra,4(sp)
100006e4:	df000017 	ldw	fp,0(sp)
100006e8:	dec00204 	addi	sp,sp,8
100006ec:	f800283a 	ret

100006f0 <char_update_x>:

void char_update_x(CHARACTER* this)
{
100006f0:	defffe04 	addi	sp,sp,-8
100006f4:	df000115 	stw	fp,4(sp)
100006f8:	df000104 	addi	fp,sp,4
100006fc:	e13fff15 	stw	r4,-4(fp)
	this->x = this->x + this->x_speed;
10000700:	e0bfff17 	ldw	r2,-4(fp)
10000704:	10c00017 	ldw	r3,0(r2)
10000708:	e0bfff17 	ldw	r2,-4(fp)
1000070c:	10800317 	ldw	r2,12(r2)
10000710:	1887883a 	add	r3,r3,r2
10000714:	e0bfff17 	ldw	r2,-4(fp)
10000718:	10c00015 	stw	r3,0(r2)
}
1000071c:	0001883a 	nop
10000720:	e037883a 	mov	sp,fp
10000724:	df000017 	ldw	fp,0(sp)
10000728:	dec00104 	addi	sp,sp,4
1000072c:	f800283a 	ret

10000730 <char_update_y>:

void char_update_y(CHARACTER* this)
{
10000730:	defffe04 	addi	sp,sp,-8
10000734:	df000115 	stw	fp,4(sp)
10000738:	df000104 	addi	fp,sp,4
1000073c:	e13fff15 	stw	r4,-4(fp)
	this->y = (this->y > CHAR_POS_INIT_Y) ? CHAR_POS_INIT_Y : (this->y + this->y_speed);
10000740:	e0bfff17 	ldw	r2,-4(fp)
10000744:	10800117 	ldw	r2,4(r2)
10000748:	108057c8 	cmpgei	r2,r2,351
1000074c:	1000061e 	bne	r2,zero,10000768 <char_update_y+0x38>
10000750:	e0bfff17 	ldw	r2,-4(fp)
10000754:	10c00117 	ldw	r3,4(r2)
10000758:	e0bfff17 	ldw	r2,-4(fp)
1000075c:	10800417 	ldw	r2,16(r2)
10000760:	1885883a 	add	r2,r3,r2
10000764:	00000106 	br	1000076c <char_update_y+0x3c>
10000768:	00805784 	movi	r2,350
1000076c:	e0ffff17 	ldw	r3,-4(fp)
10000770:	18800115 	stw	r2,4(r3)
}
10000774:	0001883a 	nop
10000778:	e037883a 	mov	sp,fp
1000077c:	df000017 	ldw	fp,0(sp)
10000780:	dec00104 	addi	sp,sp,4
10000784:	f800283a 	ret

10000788 <char_update_y_speed>:

int char_update_y_speed(CHARACTER* this)
{
10000788:	defffe04 	addi	sp,sp,-8
1000078c:	df000115 	stw	fp,4(sp)
10000790:	df000104 	addi	fp,sp,4
10000794:	e13fff15 	stw	r4,-4(fp)
	return (this->y_speed + GRAVITY);
10000798:	e0bfff17 	ldw	r2,-4(fp)
1000079c:	10800417 	ldw	r2,16(r2)
100007a0:	10800044 	addi	r2,r2,1
}
100007a4:	e037883a 	mov	sp,fp
100007a8:	df000017 	ldw	fp,0(sp)
100007ac:	dec00104 	addi	sp,sp,4
100007b0:	f800283a 	ret

100007b4 <char_is_r>:

int char_is_r(CHARACTER* this)
{
100007b4:	defffe04 	addi	sp,sp,-8
100007b8:	df000115 	stw	fp,4(sp)
100007bc:	df000104 	addi	fp,sp,4
100007c0:	e13fff15 	stw	r4,-4(fp)
	return ((this->state == char_still_r) || (this->state == char_r1) || (this->state == char_r2) || 
100007c4:	e0bfff17 	ldw	r2,-4(fp)
100007c8:	10800217 	ldw	r2,8(r2)
            (this->state == char_r3) || (this->state == char_jump_r1) || (this->state == char_jump_r2) ||
100007cc:	108002a0 	cmpeqi	r2,r2,10
100007d0:	1000181e 	bne	r2,zero,10000834 <char_is_r+0x80>
	return (this->y_speed + GRAVITY);
}

int char_is_r(CHARACTER* this)
{
	return ((this->state == char_still_r) || (this->state == char_r1) || (this->state == char_r2) || 
100007d4:	e0bfff17 	ldw	r2,-4(fp)
100007d8:	10800217 	ldw	r2,8(r2)
100007dc:	10800320 	cmpeqi	r2,r2,12
100007e0:	1000141e 	bne	r2,zero,10000834 <char_is_r+0x80>
100007e4:	e0bfff17 	ldw	r2,-4(fp)
100007e8:	10800217 	ldw	r2,8(r2)
100007ec:	10800360 	cmpeqi	r2,r2,13
100007f0:	1000101e 	bne	r2,zero,10000834 <char_is_r+0x80>
            (this->state == char_r3) || (this->state == char_jump_r1) || (this->state == char_jump_r2) ||
100007f4:	e0bfff17 	ldw	r2,-4(fp)
100007f8:	10800217 	ldw	r2,8(r2)
	return (this->y_speed + GRAVITY);
}

int char_is_r(CHARACTER* this)
{
	return ((this->state == char_still_r) || (this->state == char_r1) || (this->state == char_r2) || 
100007fc:	108003a0 	cmpeqi	r2,r2,14
10000800:	10000c1e 	bne	r2,zero,10000834 <char_is_r+0x80>
            (this->state == char_r3) || (this->state == char_jump_r1) || (this->state == char_jump_r2) ||
10000804:	e0bfff17 	ldw	r2,-4(fp)
10000808:	10800217 	ldw	r2,8(r2)
1000080c:	108004a0 	cmpeqi	r2,r2,18
10000810:	1000081e 	bne	r2,zero,10000834 <char_is_r+0x80>
10000814:	e0bfff17 	ldw	r2,-4(fp)
10000818:	10800217 	ldw	r2,8(r2)
1000081c:	108004e0 	cmpeqi	r2,r2,19
10000820:	1000041e 	bne	r2,zero,10000834 <char_is_r+0x80>
            (this->state == char_attack_r));
10000824:	e0bfff17 	ldw	r2,-4(fp)
10000828:	10800217 	ldw	r2,8(r2)
}

int char_is_r(CHARACTER* this)
{
	return ((this->state == char_still_r) || (this->state == char_r1) || (this->state == char_r2) || 
            (this->state == char_r3) || (this->state == char_jump_r1) || (this->state == char_jump_r2) ||
1000082c:	10800598 	cmpnei	r2,r2,22
10000830:	1000021e 	bne	r2,zero,1000083c <char_is_r+0x88>
10000834:	00800044 	movi	r2,1
10000838:	00000106 	br	10000840 <char_is_r+0x8c>
1000083c:	0005883a 	mov	r2,zero
            (this->state == char_attack_r));
}
10000840:	e037883a 	mov	sp,fp
10000844:	df000017 	ldw	fp,0(sp)
10000848:	dec00104 	addi	sp,sp,4
1000084c:	f800283a 	ret

10000850 <char_is_l>:

int char_is_l(CHARACTER* this)
{
10000850:	defffe04 	addi	sp,sp,-8
10000854:	df000115 	stw	fp,4(sp)
10000858:	df000104 	addi	fp,sp,4
1000085c:	e13fff15 	stw	r4,-4(fp)
	return ((this->state == char_still_l) || (this->state == char_l1) || (this->state == char_l2) || 
10000860:	e0bfff17 	ldw	r2,-4(fp)
10000864:	10800217 	ldw	r2,8(r2)
            (this->state == char_l3) || (this->state == char_jump_l1) || (this->state == char_jump_l2) ||
10000868:	108002e0 	cmpeqi	r2,r2,11
1000086c:	1000181e 	bne	r2,zero,100008d0 <char_is_l+0x80>
            (this->state == char_attack_r));
}

int char_is_l(CHARACTER* this)
{
	return ((this->state == char_still_l) || (this->state == char_l1) || (this->state == char_l2) || 
10000870:	e0bfff17 	ldw	r2,-4(fp)
10000874:	10800217 	ldw	r2,8(r2)
10000878:	108003e0 	cmpeqi	r2,r2,15
1000087c:	1000141e 	bne	r2,zero,100008d0 <char_is_l+0x80>
10000880:	e0bfff17 	ldw	r2,-4(fp)
10000884:	10800217 	ldw	r2,8(r2)
10000888:	10800420 	cmpeqi	r2,r2,16
1000088c:	1000101e 	bne	r2,zero,100008d0 <char_is_l+0x80>
            (this->state == char_l3) || (this->state == char_jump_l1) || (this->state == char_jump_l2) ||
10000890:	e0bfff17 	ldw	r2,-4(fp)
10000894:	10800217 	ldw	r2,8(r2)
            (this->state == char_attack_r));
}

int char_is_l(CHARACTER* this)
{
	return ((this->state == char_still_l) || (this->state == char_l1) || (this->state == char_l2) || 
10000898:	10800460 	cmpeqi	r2,r2,17
1000089c:	10000c1e 	bne	r2,zero,100008d0 <char_is_l+0x80>
            (this->state == char_l3) || (this->state == char_jump_l1) || (this->state == char_jump_l2) ||
100008a0:	e0bfff17 	ldw	r2,-4(fp)
100008a4:	10800217 	ldw	r2,8(r2)
100008a8:	10800520 	cmpeqi	r2,r2,20
100008ac:	1000081e 	bne	r2,zero,100008d0 <char_is_l+0x80>
100008b0:	e0bfff17 	ldw	r2,-4(fp)
100008b4:	10800217 	ldw	r2,8(r2)
100008b8:	10800560 	cmpeqi	r2,r2,21
100008bc:	1000041e 	bne	r2,zero,100008d0 <char_is_l+0x80>
            (this->state == char_attack_l));
100008c0:	e0bfff17 	ldw	r2,-4(fp)
100008c4:	10800217 	ldw	r2,8(r2)
}

int char_is_l(CHARACTER* this)
{
	return ((this->state == char_still_l) || (this->state == char_l1) || (this->state == char_l2) || 
            (this->state == char_l3) || (this->state == char_jump_l1) || (this->state == char_jump_l2) ||
100008c8:	108005d8 	cmpnei	r2,r2,23
100008cc:	1000021e 	bne	r2,zero,100008d8 <char_is_l+0x88>
100008d0:	00800044 	movi	r2,1
100008d4:	00000106 	br	100008dc <char_is_l+0x8c>
100008d8:	0005883a 	mov	r2,zero
            (this->state == char_attack_l));
}
100008dc:	e037883a 	mov	sp,fp
100008e0:	df000017 	ldw	fp,0(sp)
100008e4:	dec00104 	addi	sp,sp,4
100008e8:	f800283a 	ret

100008ec <char_get_x_speed>:

void char_get_x_speed(CHARACTER* this, int keycode)
{
100008ec:	defffd04 	addi	sp,sp,-12
100008f0:	df000215 	stw	fp,8(sp)
100008f4:	df000204 	addi	fp,sp,8
100008f8:	e13ffe15 	stw	r4,-8(fp)
100008fc:	e17fff15 	stw	r5,-4(fp)
	if (this->state == char_dead)	return;
10000900:	e0bffe17 	ldw	r2,-8(fp)
10000904:	10800217 	ldw	r2,8(r2)
10000908:	10800698 	cmpnei	r2,r2,26
1000090c:	10001d26 	beq	r2,zero,10000984 <char_get_x_speed+0x98>
	if (((keycode&0xFF) == KEY_D) || (((keycode>>8) & 0xFF) == KEY_D)){
10000910:	e0bfff17 	ldw	r2,-4(fp)
10000914:	10803fcc 	andi	r2,r2,255
10000918:	108001e0 	cmpeqi	r2,r2,7
1000091c:	1000051e 	bne	r2,zero,10000934 <char_get_x_speed+0x48>
10000920:	e0bfff17 	ldw	r2,-4(fp)
10000924:	1005d23a 	srai	r2,r2,8
10000928:	10803fcc 	andi	r2,r2,255
1000092c:	108001d8 	cmpnei	r2,r2,7
10000930:	1000041e 	bne	r2,zero,10000944 <char_get_x_speed+0x58>
		this->x_speed = CHAR_HORIZONTAL_MOVE;
10000934:	e0bffe17 	ldw	r2,-8(fp)
10000938:	00c00144 	movi	r3,5
1000093c:	10c00315 	stw	r3,12(r2)
10000940:	00001106 	br	10000988 <char_get_x_speed+0x9c>
	}
	else if  (((keycode&0xFF) == KEY_A) || (((keycode>>8) & 0xFF) == KEY_A)){
10000944:	e0bfff17 	ldw	r2,-4(fp)
10000948:	10803fcc 	andi	r2,r2,255
1000094c:	10800120 	cmpeqi	r2,r2,4
10000950:	1000051e 	bne	r2,zero,10000968 <char_get_x_speed+0x7c>
10000954:	e0bfff17 	ldw	r2,-4(fp)
10000958:	1005d23a 	srai	r2,r2,8
1000095c:	10803fcc 	andi	r2,r2,255
10000960:	10800118 	cmpnei	r2,r2,4
10000964:	1000041e 	bne	r2,zero,10000978 <char_get_x_speed+0x8c>
		this->x_speed = -CHAR_HORIZONTAL_MOVE;
10000968:	e0bffe17 	ldw	r2,-8(fp)
1000096c:	00fffec4 	movi	r3,-5
10000970:	10c00315 	stw	r3,12(r2)
10000974:	00000406 	br	10000988 <char_get_x_speed+0x9c>
	}	
	else{
		this->x_speed = 0;
10000978:	e0bffe17 	ldw	r2,-8(fp)
1000097c:	10000315 	stw	zero,12(r2)
10000980:	00000106 	br	10000988 <char_get_x_speed+0x9c>
            (this->state == char_attack_l));
}

void char_get_x_speed(CHARACTER* this, int keycode)
{
	if (this->state == char_dead)	return;
10000984:	0001883a 	nop
		this->x_speed = -CHAR_HORIZONTAL_MOVE;
	}	
	else{
		this->x_speed = 0;
	}
}
10000988:	e037883a 	mov	sp,fp
1000098c:	df000017 	ldw	fp,0(sp)
10000990:	dec00104 	addi	sp,sp,4
10000994:	f800283a 	ret

10000998 <char_get_y_speed>:

void char_get_y_speed(CHARACTER* this, int keycode)
{
10000998:	defffc04 	addi	sp,sp,-16
1000099c:	dfc00315 	stw	ra,12(sp)
100009a0:	df000215 	stw	fp,8(sp)
100009a4:	df000204 	addi	fp,sp,8
100009a8:	e13ffe15 	stw	r4,-8(fp)
100009ac:	e17fff15 	stw	r5,-4(fp)
	if (this->state == char_dead)	return;
100009b0:	e0bffe17 	ldw	r2,-8(fp)
100009b4:	10800217 	ldw	r2,8(r2)
100009b8:	10800698 	cmpnei	r2,r2,26
100009bc:	10001c26 	beq	r2,zero,10000a30 <char_get_y_speed+0x98>
	if ( (((keycode&0xFF) == KEY_K) || (((keycode>>8) & 0xFF) == KEY_K)) && (!this->in_air)){
100009c0:	e0bfff17 	ldw	r2,-4(fp)
100009c4:	10803fcc 	andi	r2,r2,255
100009c8:	108003a0 	cmpeqi	r2,r2,14
100009cc:	1000051e 	bne	r2,zero,100009e4 <char_get_y_speed+0x4c>
100009d0:	e0bfff17 	ldw	r2,-4(fp)
100009d4:	1005d23a 	srai	r2,r2,8
100009d8:	10803fcc 	andi	r2,r2,255
100009dc:	10800398 	cmpnei	r2,r2,14
100009e0:	1000071e 	bne	r2,zero,10000a00 <char_get_y_speed+0x68>
100009e4:	e0bffe17 	ldw	r2,-8(fp)
100009e8:	10800517 	ldw	r2,20(r2)
100009ec:	1000041e 	bne	r2,zero,10000a00 <char_get_y_speed+0x68>
		this->y_speed = CHAR_JUMP_SPEED_INIT;
100009f0:	e0bffe17 	ldw	r2,-8(fp)
100009f4:	00fffd04 	movi	r3,-12
100009f8:	10c00415 	stw	r3,16(r2)
100009fc:	00000d06 	br	10000a34 <char_get_y_speed+0x9c>
	}
	else if (this->in_air){
10000a00:	e0bffe17 	ldw	r2,-8(fp)
10000a04:	10800517 	ldw	r2,20(r2)
10000a08:	10000626 	beq	r2,zero,10000a24 <char_get_y_speed+0x8c>
		this->y_speed = char_update_y_speed(this);
10000a0c:	e13ffe17 	ldw	r4,-8(fp)
10000a10:	00007880 	call	10000788 <char_update_y_speed>
10000a14:	1007883a 	mov	r3,r2
10000a18:	e0bffe17 	ldw	r2,-8(fp)
10000a1c:	10c00415 	stw	r3,16(r2)
10000a20:	00000406 	br	10000a34 <char_get_y_speed+0x9c>
	}
	else{
		this->y_speed = 0;
10000a24:	e0bffe17 	ldw	r2,-8(fp)
10000a28:	10000415 	stw	zero,16(r2)
10000a2c:	00000106 	br	10000a34 <char_get_y_speed+0x9c>
	}
}

void char_get_y_speed(CHARACTER* this, int keycode)
{
	if (this->state == char_dead)	return;
10000a30:	0001883a 	nop
		this->y_speed = char_update_y_speed(this);
	}
	else{
		this->y_speed = 0;
	}
}
10000a34:	e037883a 	mov	sp,fp
10000a38:	dfc00117 	ldw	ra,4(sp)
10000a3c:	df000017 	ldw	fp,0(sp)
10000a40:	dec00204 	addi	sp,sp,8
10000a44:	f800283a 	ret

10000a48 <char_update_state>:

void char_update_state(CHARACTER* this, int keycode, int is_character_attacked)
{
10000a48:	defffb04 	addi	sp,sp,-20
10000a4c:	dfc00415 	stw	ra,16(sp)
10000a50:	df000315 	stw	fp,12(sp)
10000a54:	df000304 	addi	fp,sp,12
10000a58:	e13ffd15 	stw	r4,-12(fp)
10000a5c:	e17ffe15 	stw	r5,-8(fp)
10000a60:	e1bfff15 	stw	r6,-4(fp)
	if (this->state == char_dead)	return;
10000a64:	e0bffd17 	ldw	r2,-12(fp)
10000a68:	10800217 	ldw	r2,8(r2)
10000a6c:	10800698 	cmpnei	r2,r2,26
10000a70:	1000f326 	beq	r2,zero,10000e40 <char_update_state+0x3f8>

    if (((keycode&0xFF) == KEY_J) || (((keycode>>8) & 0xFF) == KEY_J)) // attack
10000a74:	e0bffe17 	ldw	r2,-8(fp)
10000a78:	10803fcc 	andi	r2,r2,255
10000a7c:	10800360 	cmpeqi	r2,r2,13
10000a80:	1000051e 	bne	r2,zero,10000a98 <char_update_state+0x50>
10000a84:	e0bffe17 	ldw	r2,-8(fp)
10000a88:	1005d23a 	srai	r2,r2,8
10000a8c:	10803fcc 	andi	r2,r2,255
10000a90:	10800358 	cmpnei	r2,r2,13
10000a94:	10000b1e 	bne	r2,zero,10000ac4 <char_update_state+0x7c>
    {
        if (char_is_r(this)) 	this->state = char_attack_r;
10000a98:	e13ffd17 	ldw	r4,-12(fp)
10000a9c:	00007b40 	call	100007b4 <char_is_r>
10000aa0:	10000426 	beq	r2,zero,10000ab4 <char_update_state+0x6c>
10000aa4:	e0bffd17 	ldw	r2,-12(fp)
10000aa8:	00c00584 	movi	r3,22
10000aac:	10c00215 	stw	r3,8(r2)
        else					this->state = char_attack_l;
        return;
10000ab0:	0000e406 	br	10000e44 <char_update_state+0x3fc>
	if (this->state == char_dead)	return;

    if (((keycode&0xFF) == KEY_J) || (((keycode>>8) & 0xFF) == KEY_J)) // attack
    {
        if (char_is_r(this)) 	this->state = char_attack_r;
        else					this->state = char_attack_l;
10000ab4:	e0bffd17 	ldw	r2,-12(fp)
10000ab8:	00c005c4 	movi	r3,23
10000abc:	10c00215 	stw	r3,8(r2)
        return;
10000ac0:	0000e006 	br	10000e44 <char_update_state+0x3fc>
    }

	if (is_character_attacked)
10000ac4:	e0bfff17 	ldw	r2,-4(fp)
10000ac8:	10000b26 	beq	r2,zero,10000af8 <char_update_state+0xb0>
	{
		if (char_is_r(this))	this->state = char_hurt_r;
10000acc:	e13ffd17 	ldw	r4,-12(fp)
10000ad0:	00007b40 	call	100007b4 <char_is_r>
10000ad4:	10000426 	beq	r2,zero,10000ae8 <char_update_state+0xa0>
10000ad8:	e0bffd17 	ldw	r2,-12(fp)
10000adc:	00c00604 	movi	r3,24
10000ae0:	10c00215 	stw	r3,8(r2)
		else					this->state = char_hurt_l;
		return;
10000ae4:	0000d706 	br	10000e44 <char_update_state+0x3fc>
    }

	if (is_character_attacked)
	{
		if (char_is_r(this))	this->state = char_hurt_r;
		else					this->state = char_hurt_l;
10000ae8:	e0bffd17 	ldw	r2,-12(fp)
10000aec:	00c00644 	movi	r3,25
10000af0:	10c00215 	stw	r3,8(r2)
		return;
10000af4:	0000d306 	br	10000e44 <char_update_state+0x3fc>
	}



	if (this->y == CHAR_POS_INIT_Y)  // moving left or moving right or staning left or standing right
10000af8:	e0bffd17 	ldw	r2,-12(fp)
10000afc:	10800117 	ldw	r2,4(r2)
10000b00:	10805798 	cmpnei	r2,r2,350
10000b04:	1000801e 	bne	r2,zero,10000d08 <char_update_state+0x2c0>
	{
		if (this->x_speed > 0)
10000b08:	e0bffd17 	ldw	r2,-12(fp)
10000b0c:	10800317 	ldw	r2,12(r2)
10000b10:	0080240e 	bge	zero,r2,10000ba4 <char_update_state+0x15c>
		{
			if (this->state == char_still_r)		this->state = char_r1;
10000b14:	e0bffd17 	ldw	r2,-12(fp)
10000b18:	10800217 	ldw	r2,8(r2)
10000b1c:	10800298 	cmpnei	r2,r2,10
10000b20:	1000041e 	bne	r2,zero,10000b34 <char_update_state+0xec>
10000b24:	e0bffd17 	ldw	r2,-12(fp)
10000b28:	00c00304 	movi	r3,12
10000b2c:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000b30:	0000c406 	br	10000e44 <char_update_state+0x3fc>
	if (this->y == CHAR_POS_INIT_Y)  // moving left or moving right or staning left or standing right
	{
		if (this->x_speed > 0)
		{
			if (this->state == char_still_r)		this->state = char_r1;
			else if (this->state == char_r1)		this->state = char_r2;
10000b34:	e0bffd17 	ldw	r2,-12(fp)
10000b38:	10800217 	ldw	r2,8(r2)
10000b3c:	10800318 	cmpnei	r2,r2,12
10000b40:	1000041e 	bne	r2,zero,10000b54 <char_update_state+0x10c>
10000b44:	e0bffd17 	ldw	r2,-12(fp)
10000b48:	00c00344 	movi	r3,13
10000b4c:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000b50:	0000bc06 	br	10000e44 <char_update_state+0x3fc>
	{
		if (this->x_speed > 0)
		{
			if (this->state == char_still_r)		this->state = char_r1;
			else if (this->state == char_r1)		this->state = char_r2;
			else if (this->state == char_r2)		this->state = char_r3;
10000b54:	e0bffd17 	ldw	r2,-12(fp)
10000b58:	10800217 	ldw	r2,8(r2)
10000b5c:	10800358 	cmpnei	r2,r2,13
10000b60:	1000041e 	bne	r2,zero,10000b74 <char_update_state+0x12c>
10000b64:	e0bffd17 	ldw	r2,-12(fp)
10000b68:	00c00384 	movi	r3,14
10000b6c:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000b70:	0000b406 	br	10000e44 <char_update_state+0x3fc>
		if (this->x_speed > 0)
		{
			if (this->state == char_still_r)		this->state = char_r1;
			else if (this->state == char_r1)		this->state = char_r2;
			else if (this->state == char_r2)		this->state = char_r3;
			else if (this->state == char_r3)		this->state = char_r1;
10000b74:	e0bffd17 	ldw	r2,-12(fp)
10000b78:	10800217 	ldw	r2,8(r2)
10000b7c:	10800398 	cmpnei	r2,r2,14
10000b80:	1000041e 	bne	r2,zero,10000b94 <char_update_state+0x14c>
10000b84:	e0bffd17 	ldw	r2,-12(fp)
10000b88:	00c00304 	movi	r3,12
10000b8c:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000b90:	0000ac06 	br	10000e44 <char_update_state+0x3fc>
		{
			if (this->state == char_still_r)		this->state = char_r1;
			else if (this->state == char_r1)		this->state = char_r2;
			else if (this->state == char_r2)		this->state = char_r3;
			else if (this->state == char_r3)		this->state = char_r1;
			else									this->state = char_r1;
10000b94:	e0bffd17 	ldw	r2,-12(fp)
10000b98:	00c00304 	movi	r3,12
10000b9c:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000ba0:	0000a806 	br	10000e44 <char_update_state+0x3fc>
			else if (this->state == char_r1)		this->state = char_r2;
			else if (this->state == char_r2)		this->state = char_r3;
			else if (this->state == char_r3)		this->state = char_r1;
			else									this->state = char_r1;
		}
		else if (this->x_speed < 0)
10000ba4:	e0bffd17 	ldw	r2,-12(fp)
10000ba8:	10800317 	ldw	r2,12(r2)
10000bac:	1000240e 	bge	r2,zero,10000c40 <char_update_state+0x1f8>
		{
			if (this->state == char_still_l)		this->state = char_l1;
10000bb0:	e0bffd17 	ldw	r2,-12(fp)
10000bb4:	10800217 	ldw	r2,8(r2)
10000bb8:	108002d8 	cmpnei	r2,r2,11
10000bbc:	1000041e 	bne	r2,zero,10000bd0 <char_update_state+0x188>
10000bc0:	e0bffd17 	ldw	r2,-12(fp)
10000bc4:	00c003c4 	movi	r3,15
10000bc8:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000bcc:	00009d06 	br	10000e44 <char_update_state+0x3fc>
			else									this->state = char_r1;
		}
		else if (this->x_speed < 0)
		{
			if (this->state == char_still_l)		this->state = char_l1;
			else if (this->state == char_l1)		this->state = char_l2;
10000bd0:	e0bffd17 	ldw	r2,-12(fp)
10000bd4:	10800217 	ldw	r2,8(r2)
10000bd8:	108003d8 	cmpnei	r2,r2,15
10000bdc:	1000041e 	bne	r2,zero,10000bf0 <char_update_state+0x1a8>
10000be0:	e0bffd17 	ldw	r2,-12(fp)
10000be4:	00c00404 	movi	r3,16
10000be8:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000bec:	00009506 	br	10000e44 <char_update_state+0x3fc>
		}
		else if (this->x_speed < 0)
		{
			if (this->state == char_still_l)		this->state = char_l1;
			else if (this->state == char_l1)		this->state = char_l2;
			else if (this->state == char_l2)		this->state = char_l3;
10000bf0:	e0bffd17 	ldw	r2,-12(fp)
10000bf4:	10800217 	ldw	r2,8(r2)
10000bf8:	10800418 	cmpnei	r2,r2,16
10000bfc:	1000041e 	bne	r2,zero,10000c10 <char_update_state+0x1c8>
10000c00:	e0bffd17 	ldw	r2,-12(fp)
10000c04:	00c00444 	movi	r3,17
10000c08:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000c0c:	00008d06 	br	10000e44 <char_update_state+0x3fc>
		else if (this->x_speed < 0)
		{
			if (this->state == char_still_l)		this->state = char_l1;
			else if (this->state == char_l1)		this->state = char_l2;
			else if (this->state == char_l2)		this->state = char_l3;
			else if (this->state == char_l3)		this->state = char_l1;
10000c10:	e0bffd17 	ldw	r2,-12(fp)
10000c14:	10800217 	ldw	r2,8(r2)
10000c18:	10800458 	cmpnei	r2,r2,17
10000c1c:	1000041e 	bne	r2,zero,10000c30 <char_update_state+0x1e8>
10000c20:	e0bffd17 	ldw	r2,-12(fp)
10000c24:	00c003c4 	movi	r3,15
10000c28:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000c2c:	00008506 	br	10000e44 <char_update_state+0x3fc>
		{
			if (this->state == char_still_l)		this->state = char_l1;
			else if (this->state == char_l1)		this->state = char_l2;
			else if (this->state == char_l2)		this->state = char_l3;
			else if (this->state == char_l3)		this->state = char_l1;
			else									this->state = char_l1;
10000c30:	e0bffd17 	ldw	r2,-12(fp)
10000c34:	00c003c4 	movi	r3,15
10000c38:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000c3c:	00008106 	br	10000e44 <char_update_state+0x3fc>
			else if (this->state == char_l3)		this->state = char_l1;
			else									this->state = char_l1;
		}
		else
		{
			if (char_is_r(this))			this->state = char_still_r;
10000c40:	e13ffd17 	ldw	r4,-12(fp)
10000c44:	00007b40 	call	100007b4 <char_is_r>
10000c48:	10000426 	beq	r2,zero,10000c5c <char_update_state+0x214>
10000c4c:	e0bffd17 	ldw	r2,-12(fp)
10000c50:	00c00284 	movi	r3,10
10000c54:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000c58:	00007a06 	br	10000e44 <char_update_state+0x3fc>
			else									this->state = char_l1;
		}
		else
		{
			if (char_is_r(this))			this->state = char_still_r;
			else if (char_is_l(this))		this->state = char_still_l;
10000c5c:	e13ffd17 	ldw	r4,-12(fp)
10000c60:	00008500 	call	10000850 <char_is_l>
10000c64:	10000426 	beq	r2,zero,10000c78 <char_update_state+0x230>
10000c68:	e0bffd17 	ldw	r2,-12(fp)
10000c6c:	00c002c4 	movi	r3,11
10000c70:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000c74:	00007306 	br	10000e44 <char_update_state+0x3fc>
		}
		else
		{
			if (char_is_r(this))			this->state = char_still_r;
			else if (char_is_l(this))		this->state = char_still_l;
			else if (this->state == char_hurt_r){
10000c78:	e0bffd17 	ldw	r2,-12(fp)
10000c7c:	10800217 	ldw	r2,8(r2)
10000c80:	10800618 	cmpnei	r2,r2,24
10000c84:	10000c1e 	bne	r2,zero,10000cb8 <char_update_state+0x270>
				if (char_hurting_count == CHAR_HURTING_MAX){
10000c88:	d0a6cf17 	ldw	r2,-25796(gp)
10000c8c:	10800058 	cmpnei	r2,r2,1
10000c90:	1000051e 	bne	r2,zero,10000ca8 <char_update_state+0x260>
					char_hurting_count = 0;
10000c94:	d026cf15 	stw	zero,-25796(gp)
					this->state = char_still_r;
10000c98:	e0bffd17 	ldw	r2,-12(fp)
10000c9c:	00c00284 	movi	r3,10
10000ca0:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000ca4:	00006706 	br	10000e44 <char_update_state+0x3fc>
				if (char_hurting_count == CHAR_HURTING_MAX){
					char_hurting_count = 0;
					this->state = char_still_r;
				}
				else{
					char_hurting_count++;
10000ca8:	d0a6cf17 	ldw	r2,-25796(gp)
10000cac:	10800044 	addi	r2,r2,1
10000cb0:	d0a6cf15 	stw	r2,-25796(gp)
				}	
			}
			
		}
	}
	return;
10000cb4:	00006306 	br	10000e44 <char_update_state+0x3fc>
				}
				else{
					char_hurting_count++;
				}
			}
			else if (this->state == char_hurt_l){
10000cb8:	e0bffd17 	ldw	r2,-12(fp)
10000cbc:	10800217 	ldw	r2,8(r2)
10000cc0:	10800658 	cmpnei	r2,r2,25
10000cc4:	10000c1e 	bne	r2,zero,10000cf8 <char_update_state+0x2b0>
				if (char_hurting_count == CHAR_HURTING_MAX){
10000cc8:	d0a6cf17 	ldw	r2,-25796(gp)
10000ccc:	10800058 	cmpnei	r2,r2,1
10000cd0:	1000051e 	bne	r2,zero,10000ce8 <char_update_state+0x2a0>
					char_hurting_count = 0;
10000cd4:	d026cf15 	stw	zero,-25796(gp)
					this->state = char_still_l;
10000cd8:	e0bffd17 	ldw	r2,-12(fp)
10000cdc:	00c002c4 	movi	r3,11
10000ce0:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000ce4:	00005706 	br	10000e44 <char_update_state+0x3fc>
				if (char_hurting_count == CHAR_HURTING_MAX){
					char_hurting_count = 0;
					this->state = char_still_l;
				}
				else{
					char_hurting_count++;
10000ce8:	d0a6cf17 	ldw	r2,-25796(gp)
10000cec:	10800044 	addi	r2,r2,1
10000cf0:	d0a6cf15 	stw	r2,-25796(gp)
				}	
			}
			
		}
	}
	return;
10000cf4:	00005306 	br	10000e44 <char_update_state+0x3fc>
				}
				else{
					char_hurting_count++;
				}
			}
			else							this->state = char_still_r;
10000cf8:	e0bffd17 	ldw	r2,-12(fp)
10000cfc:	00c00284 	movi	r3,10
10000d00:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000d04:	00004f06 	br	10000e44 <char_update_state+0x3fc>
			else							this->state = char_still_r;
		}
	}
	else
	{
		if (this->y_speed <= 0)   // moving up
10000d08:	e0bffd17 	ldw	r2,-12(fp)
10000d0c:	10800417 	ldw	r2,16(r2)
10000d10:	00802516 	blt	zero,r2,10000da8 <char_update_state+0x360>
		{
            if (char_is_r(this))
10000d14:	e13ffd17 	ldw	r4,-12(fp)
10000d18:	00007b40 	call	100007b4 <char_is_r>
10000d1c:	10001126 	beq	r2,zero,10000d64 <char_update_state+0x31c>
            {
				if (((keycode&0xFF) == KEY_A) || (((keycode>>8) & 0xFF) == KEY_A)) 
10000d20:	e0bffe17 	ldw	r2,-8(fp)
10000d24:	10803fcc 	andi	r2,r2,255
10000d28:	10800120 	cmpeqi	r2,r2,4
10000d2c:	1000051e 	bne	r2,zero,10000d44 <char_update_state+0x2fc>
10000d30:	e0bffe17 	ldw	r2,-8(fp)
10000d34:	1005d23a 	srai	r2,r2,8
10000d38:	10803fcc 	andi	r2,r2,255
10000d3c:	10800118 	cmpnei	r2,r2,4
10000d40:	1000041e 	bne	r2,zero,10000d54 <char_update_state+0x30c>
				{
					this->state = char_jump_l1;
10000d44:	e0bffd17 	ldw	r2,-12(fp)
10000d48:	00c00504 	movi	r3,20
10000d4c:	10c00215 	stw	r3,8(r2)
10000d50:	00003906 	br	10000e38 <char_update_state+0x3f0>
				}	
				else
				{
					this->state = char_jump_r1;
10000d54:	e0bffd17 	ldw	r2,-12(fp)
10000d58:	00c00484 	movi	r3,18
10000d5c:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000d60:	00003806 	br	10000e44 <char_update_state+0x3fc>
					this->state = char_jump_r1;
				}               
            }
            else
            {
                if (((keycode&0xFF) == KEY_D) || (((keycode>>8) & 0xFF) == KEY_D))
10000d64:	e0bffe17 	ldw	r2,-8(fp)
10000d68:	10803fcc 	andi	r2,r2,255
10000d6c:	108001e0 	cmpeqi	r2,r2,7
10000d70:	1000051e 	bne	r2,zero,10000d88 <char_update_state+0x340>
10000d74:	e0bffe17 	ldw	r2,-8(fp)
10000d78:	1005d23a 	srai	r2,r2,8
10000d7c:	10803fcc 	andi	r2,r2,255
10000d80:	108001d8 	cmpnei	r2,r2,7
10000d84:	1000041e 	bne	r2,zero,10000d98 <char_update_state+0x350>
                {
                    this->state = char_jump_r1;
10000d88:	e0bffd17 	ldw	r2,-12(fp)
10000d8c:	00c00484 	movi	r3,18
10000d90:	10c00215 	stw	r3,8(r2)
10000d94:	00002806 	br	10000e38 <char_update_state+0x3f0>
                }
                else
                {
                    this->state = char_jump_l1;
10000d98:	e0bffd17 	ldw	r2,-12(fp)
10000d9c:	00c00504 	movi	r3,20
10000da0:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000da4:	00002706 	br	10000e44 <char_update_state+0x3fc>
                }
		    }
        }
		else				// moving down
		{
			if (char_is_r(this))
10000da8:	e13ffd17 	ldw	r4,-12(fp)
10000dac:	00007b40 	call	100007b4 <char_is_r>
10000db0:	10001126 	beq	r2,zero,10000df8 <char_update_state+0x3b0>
			{
				if (((keycode&0xFF) == KEY_A) || (((keycode>>8) & 0xFF) == KEY_A))
10000db4:	e0bffe17 	ldw	r2,-8(fp)
10000db8:	10803fcc 	andi	r2,r2,255
10000dbc:	10800120 	cmpeqi	r2,r2,4
10000dc0:	1000051e 	bne	r2,zero,10000dd8 <char_update_state+0x390>
10000dc4:	e0bffe17 	ldw	r2,-8(fp)
10000dc8:	1005d23a 	srai	r2,r2,8
10000dcc:	10803fcc 	andi	r2,r2,255
10000dd0:	10800118 	cmpnei	r2,r2,4
10000dd4:	1000041e 	bne	r2,zero,10000de8 <char_update_state+0x3a0>
				{
					this->state = char_jump_l2;
10000dd8:	e0bffd17 	ldw	r2,-12(fp)
10000ddc:	00c00544 	movi	r3,21
10000de0:	10c00215 	stw	r3,8(r2)
10000de4:	00001406 	br	10000e38 <char_update_state+0x3f0>
				}
				else
				{
					this->state = char_jump_r2;
10000de8:	e0bffd17 	ldw	r2,-12(fp)
10000dec:	00c004c4 	movi	r3,19
10000df0:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000df4:	00001306 	br	10000e44 <char_update_state+0x3fc>
				
				}
			}
			else
			{
				if (((keycode&0xFF) == KEY_D) || (((keycode>>8) & 0xFF) == KEY_D))
10000df8:	e0bffe17 	ldw	r2,-8(fp)
10000dfc:	10803fcc 	andi	r2,r2,255
10000e00:	108001e0 	cmpeqi	r2,r2,7
10000e04:	1000051e 	bne	r2,zero,10000e1c <char_update_state+0x3d4>
10000e08:	e0bffe17 	ldw	r2,-8(fp)
10000e0c:	1005d23a 	srai	r2,r2,8
10000e10:	10803fcc 	andi	r2,r2,255
10000e14:	108001d8 	cmpnei	r2,r2,7
10000e18:	1000041e 	bne	r2,zero,10000e2c <char_update_state+0x3e4>
				{
					this->state = char_jump_r2;
10000e1c:	e0bffd17 	ldw	r2,-12(fp)
10000e20:	00c004c4 	movi	r3,19
10000e24:	10c00215 	stw	r3,8(r2)
10000e28:	00000306 	br	10000e38 <char_update_state+0x3f0>
				}
				else
				{
					this->state = char_jump_l2;
10000e2c:	e0bffd17 	ldw	r2,-12(fp)
10000e30:	00c00544 	movi	r3,21
10000e34:	10c00215 	stw	r3,8(r2)
				}	
			}
			
		}
	}
	return;
10000e38:	0001883a 	nop
10000e3c:	00000106 	br	10000e44 <char_update_state+0x3fc>
	}
}

void char_update_state(CHARACTER* this, int keycode, int is_character_attacked)
{
	if (this->state == char_dead)	return;
10000e40:	0001883a 	nop
			}
			
		}
	}
	return;
}
10000e44:	e037883a 	mov	sp,fp
10000e48:	dfc00117 	ldw	ra,4(sp)
10000e4c:	df000017 	ldw	fp,0(sp)
10000e50:	dec00204 	addi	sp,sp,8
10000e54:	f800283a 	ret

10000e58 <char_reset>:

void char_reset(CHARACTER* this)
{
10000e58:	defffe04 	addi	sp,sp,-8
10000e5c:	df000115 	stw	fp,4(sp)
10000e60:	df000104 	addi	fp,sp,4
10000e64:	e13fff15 	stw	r4,-4(fp)
	this->x = 0;
10000e68:	e0bfff17 	ldw	r2,-4(fp)
10000e6c:	10000015 	stw	zero,0(r2)
	this->y = 0;
10000e70:	e0bfff17 	ldw	r2,-4(fp)
10000e74:	10000115 	stw	zero,4(r2)
	this->state = char_dead;
10000e78:	e0bfff17 	ldw	r2,-4(fp)
10000e7c:	00c00684 	movi	r3,26
10000e80:	10c00215 	stw	r3,8(r2)
	this->x_speed = 0;
10000e84:	e0bfff17 	ldw	r2,-4(fp)
10000e88:	10000315 	stw	zero,12(r2)
	this->y_speed = 0;
10000e8c:	e0bfff17 	ldw	r2,-4(fp)
10000e90:	10000415 	stw	zero,16(r2)
	this->in_air = 0;
10000e94:	e0bfff17 	ldw	r2,-4(fp)
10000e98:	10000515 	stw	zero,20(r2)
	this->life = 0;
10000e9c:	e0bfff17 	ldw	r2,-4(fp)
10000ea0:	10000615 	stw	zero,24(r2)
10000ea4:	0001883a 	nop
10000ea8:	e037883a 	mov	sp,fp
10000eac:	df000017 	ldw	fp,0(sp)
10000eb0:	dec00104 	addi	sp,sp,4
10000eb4:	f800283a 	ret

10000eb8 <enemy_init>:
#include "enemy.h"

alt_u32 enemy_init(ENEMY* this, int enemy_index, int patrolStartX, int patrolEndX)
{
10000eb8:	defffb04 	addi	sp,sp,-20
10000ebc:	df000415 	stw	fp,16(sp)
10000ec0:	df000404 	addi	fp,sp,16
10000ec4:	e13ffc15 	stw	r4,-16(fp)
10000ec8:	e17ffd15 	stw	r5,-12(fp)
10000ecc:	e1bffe15 	stw	r6,-8(fp)
10000ed0:	e1ffff15 	stw	r7,-4(fp)
    this->index = enemy_index;
10000ed4:	e0bffc17 	ldw	r2,-16(fp)
10000ed8:	e0fffd17 	ldw	r3,-12(fp)
10000edc:	10c00015 	stw	r3,0(r2)
    this->x = (patrolStartX +  patrolEndX) / 2;
10000ee0:	e0fffe17 	ldw	r3,-8(fp)
10000ee4:	e0bfff17 	ldw	r2,-4(fp)
10000ee8:	1885883a 	add	r2,r3,r2
10000eec:	1006d7fa 	srli	r3,r2,31
10000ef0:	1885883a 	add	r2,r3,r2
10000ef4:	1005d07a 	srai	r2,r2,1
10000ef8:	1007883a 	mov	r3,r2
10000efc:	e0bffc17 	ldw	r2,-16(fp)
10000f00:	10c00115 	stw	r3,4(r2)
    this->y = ENEMY_POS_INIT_Y;
10000f04:	e0bffc17 	ldw	r2,-16(fp)
10000f08:	00c05784 	movi	r3,350
10000f0c:	10c00215 	stw	r3,8(r2)
    this->state = 0;
10000f10:	e0bffc17 	ldw	r2,-16(fp)
10000f14:	10000315 	stw	zero,12(r2)
    this->x_speed = 0;
10000f18:	e0bffc17 	ldw	r2,-16(fp)
10000f1c:	10000415 	stw	zero,16(r2)
    this->patrolStartX = patrolStartX;
10000f20:	e0bffc17 	ldw	r2,-16(fp)
10000f24:	e0fffe17 	ldw	r3,-8(fp)
10000f28:	10c00515 	stw	r3,20(r2)
    this->patrolEndX = patrolEndX;
10000f2c:	e0bffc17 	ldw	r2,-16(fp)
10000f30:	e0ffff17 	ldw	r3,-4(fp)
10000f34:	10c00615 	stw	r3,24(r2)
    this->is_active = 0;
10000f38:	e0bffc17 	ldw	r2,-16(fp)
10000f3c:	10000715 	stw	zero,28(r2)
    this->life = ENEMY_LIFE;
10000f40:	e0bffc17 	ldw	r2,-16(fp)
10000f44:	00c00284 	movi	r3,10
10000f48:	10c00815 	stw	r3,32(r2)
    return (this->x << 22) | (this->y << 12) | (this->state);
10000f4c:	e0bffc17 	ldw	r2,-16(fp)
10000f50:	10800117 	ldw	r2,4(r2)
10000f54:	100695ba 	slli	r3,r2,22
10000f58:	e0bffc17 	ldw	r2,-16(fp)
10000f5c:	10800217 	ldw	r2,8(r2)
10000f60:	1004933a 	slli	r2,r2,12
10000f64:	1886b03a 	or	r3,r3,r2
10000f68:	e0bffc17 	ldw	r2,-16(fp)
10000f6c:	10800317 	ldw	r2,12(r2)
10000f70:	1884b03a 	or	r2,r3,r2
}
10000f74:	e037883a 	mov	sp,fp
10000f78:	df000017 	ldw	fp,0(sp)
10000f7c:	dec00104 	addi	sp,sp,4
10000f80:	f800283a 	ret

10000f84 <enemy_run>:

alt_u32 enemy_run(ENEMY* this, int char_x, int char_y, int is_enemy_attacked)
{
10000f84:	defffa04 	addi	sp,sp,-24
10000f88:	dfc00515 	stw	ra,20(sp)
10000f8c:	df000415 	stw	fp,16(sp)
10000f90:	df000404 	addi	fp,sp,16
10000f94:	e13ffc15 	stw	r4,-16(fp)
10000f98:	e17ffd15 	stw	r5,-12(fp)
10000f9c:	e1bffe15 	stw	r6,-8(fp)
10000fa0:	e1ffff15 	stw	r7,-4(fp)
    if (this->is_active == 0 && this->life > 0){
10000fa4:	e0bffc17 	ldw	r2,-16(fp)
10000fa8:	10800717 	ldw	r2,28(r2)
10000fac:	1000061e 	bne	r2,zero,10000fc8 <enemy_run+0x44>
10000fb0:	e0bffc17 	ldw	r2,-16(fp)
10000fb4:	10800817 	ldw	r2,32(r2)
10000fb8:	0080030e 	bge	zero,r2,10000fc8 <enemy_run+0x44>
        this->is_active = 1;
10000fbc:	e0bffc17 	ldw	r2,-16(fp)
10000fc0:	00c00044 	movi	r3,1
10000fc4:	10c00715 	stw	r3,28(r2)
    }

    if (this->is_active){
10000fc8:	e0bffc17 	ldw	r2,-16(fp)
10000fcc:	10800717 	ldw	r2,28(r2)
10000fd0:	10001326 	beq	r2,zero,10001020 <enemy_run+0x9c>
        enemy_update_x_speed(this, char_x, char_y, is_enemy_attacked);
10000fd4:	e1ffff17 	ldw	r7,-4(fp)
10000fd8:	e1bffe17 	ldw	r6,-8(fp)
10000fdc:	e17ffd17 	ldw	r5,-12(fp)
10000fe0:	e13ffc17 	ldw	r4,-16(fp)
10000fe4:	00010a00 	call	100010a0 <enemy_update_x_speed>
        enemy_update_x(this, char_x);
10000fe8:	e17ffd17 	ldw	r5,-12(fp)
10000fec:	e13ffc17 	ldw	r4,-16(fp)
10000ff0:	000105c0 	call	1000105c <enemy_update_x>
        enemy_update_life(this, is_enemy_attacked);
10000ff4:	e17fff17 	ldw	r5,-4(fp)
10000ff8:	e13ffc17 	ldw	r4,-16(fp)
10000ffc:	00014f80 	call	100014f8 <enemy_update_life>
        enemy_update_state(this, is_enemy_attacked);
10001000:	e17fff17 	ldw	r5,-4(fp)
10001004:	e13ffc17 	ldw	r4,-16(fp)
10001008:	00011ec0 	call	100011ec <enemy_update_state>
        if (this->life == 0){
1000100c:	e0bffc17 	ldw	r2,-16(fp)
10001010:	10800817 	ldw	r2,32(r2)
10001014:	1000021e 	bne	r2,zero,10001020 <enemy_run+0x9c>
            enemy_reset(this);
10001018:	e13ffc17 	ldw	r4,-16(fp)
1000101c:	00015440 	call	10001544 <enemy_reset>
        }        
    }
    // printf("x: %d, x_speed: %d, state: %d\n", this->x, this->x_speed, this->state);
    return (this->x << 22) | (this->y << 12) | (this->state);
10001020:	e0bffc17 	ldw	r2,-16(fp)
10001024:	10800117 	ldw	r2,4(r2)
10001028:	100695ba 	slli	r3,r2,22
1000102c:	e0bffc17 	ldw	r2,-16(fp)
10001030:	10800217 	ldw	r2,8(r2)
10001034:	1004933a 	slli	r2,r2,12
10001038:	1886b03a 	or	r3,r3,r2
1000103c:	e0bffc17 	ldw	r2,-16(fp)
10001040:	10800317 	ldw	r2,12(r2)
10001044:	1884b03a 	or	r2,r3,r2
}
10001048:	e037883a 	mov	sp,fp
1000104c:	dfc00117 	ldw	ra,4(sp)
10001050:	df000017 	ldw	fp,0(sp)
10001054:	dec00204 	addi	sp,sp,8
10001058:	f800283a 	ret

1000105c <enemy_update_x>:

void enemy_update_x(ENEMY* this, int char_x)
{
1000105c:	defffd04 	addi	sp,sp,-12
10001060:	df000215 	stw	fp,8(sp)
10001064:	df000204 	addi	fp,sp,8
10001068:	e13ffe15 	stw	r4,-8(fp)
1000106c:	e17fff15 	stw	r5,-4(fp)
    this->x += this->x_speed;
10001070:	e0bffe17 	ldw	r2,-8(fp)
10001074:	10c00117 	ldw	r3,4(r2)
10001078:	e0bffe17 	ldw	r2,-8(fp)
1000107c:	10800417 	ldw	r2,16(r2)
10001080:	1887883a 	add	r3,r3,r2
10001084:	e0bffe17 	ldw	r2,-8(fp)
10001088:	10c00115 	stw	r3,4(r2)
}
1000108c:	0001883a 	nop
10001090:	e037883a 	mov	sp,fp
10001094:	df000017 	ldw	fp,0(sp)
10001098:	dec00104 	addi	sp,sp,4
1000109c:	f800283a 	ret

100010a0 <enemy_update_x_speed>:

void enemy_update_x_speed(ENEMY* this, int char_x, int char_y, int is_enemy_attacked)
{
100010a0:	defffa04 	addi	sp,sp,-24
100010a4:	dfc00515 	stw	ra,20(sp)
100010a8:	df000415 	stw	fp,16(sp)
100010ac:	df000404 	addi	fp,sp,16
100010b0:	e13ffc15 	stw	r4,-16(fp)
100010b4:	e17ffd15 	stw	r5,-12(fp)
100010b8:	e1bffe15 	stw	r6,-8(fp)
100010bc:	e1ffff15 	stw	r7,-4(fp)
    if (is_enemy_attacked == this->index || this->state == enemy_hurt_r || this->state == enemy_hurt_l){
100010c0:	e0bffc17 	ldw	r2,-16(fp)
100010c4:	10c00017 	ldw	r3,0(r2)
100010c8:	e0bfff17 	ldw	r2,-4(fp)
100010cc:	18800826 	beq	r3,r2,100010f0 <enemy_update_x_speed+0x50>
100010d0:	e0bffc17 	ldw	r2,-16(fp)
100010d4:	10800317 	ldw	r2,12(r2)
100010d8:	10800920 	cmpeqi	r2,r2,36
100010dc:	1000041e 	bne	r2,zero,100010f0 <enemy_update_x_speed+0x50>
100010e0:	e0bffc17 	ldw	r2,-16(fp)
100010e4:	10800317 	ldw	r2,12(r2)
100010e8:	10800958 	cmpnei	r2,r2,37
100010ec:	1000031e 	bne	r2,zero,100010fc <enemy_update_x_speed+0x5c>
        this->x_speed = 0;
100010f0:	e0bffc17 	ldw	r2,-16(fp)
100010f4:	10000415 	stw	zero,16(r2)
        return;
100010f8:	00003706 	br	100011d8 <enemy_update_x_speed+0x138>
    }
    if(is_patrolling(this, char_x)){
100010fc:	e17ffd17 	ldw	r5,-12(fp)
10001100:	e13ffc17 	ldw	r4,-16(fp)
10001104:	000159c0 	call	1000159c <is_patrolling>
10001108:	10803fcc 	andi	r2,r2,255
1000110c:	10001c26 	beq	r2,zero,10001180 <enemy_update_x_speed+0xe0>
        if (this->x >= this->patrolEndX){
10001110:	e0bffc17 	ldw	r2,-16(fp)
10001114:	10c00117 	ldw	r3,4(r2)
10001118:	e0bffc17 	ldw	r2,-16(fp)
1000111c:	10800617 	ldw	r2,24(r2)
10001120:	18800416 	blt	r3,r2,10001134 <enemy_update_x_speed+0x94>
            this->x_speed = -ENEMY_HORIZONTAL_MOVE;     // patrolling left
10001124:	e0bffc17 	ldw	r2,-16(fp)
10001128:	00ffff84 	movi	r3,-2
1000112c:	10c00415 	stw	r3,16(r2)
10001130:	00002906 	br	100011d8 <enemy_update_x_speed+0x138>
        } 
        else if (this->x <= this->patrolStartX){
10001134:	e0bffc17 	ldw	r2,-16(fp)
10001138:	10800117 	ldw	r2,4(r2)
1000113c:	e0fffc17 	ldw	r3,-16(fp)
10001140:	18c00517 	ldw	r3,20(r3)
10001144:	18800416 	blt	r3,r2,10001158 <enemy_update_x_speed+0xb8>
            this->x_speed = ENEMY_HORIZONTAL_MOVE;      // patrolling right
10001148:	e0bffc17 	ldw	r2,-16(fp)
1000114c:	00c00084 	movi	r3,2
10001150:	10c00415 	stw	r3,16(r2)
10001154:	00002006 	br	100011d8 <enemy_update_x_speed+0x138>
        }
        else{
            this->x_speed = (this->x_speed == 0) ? -ENEMY_HORIZONTAL_MOVE : this->x_speed;
10001158:	e0bffc17 	ldw	r2,-16(fp)
1000115c:	10800417 	ldw	r2,16(r2)
10001160:	10000326 	beq	r2,zero,10001170 <enemy_update_x_speed+0xd0>
10001164:	e0bffc17 	ldw	r2,-16(fp)
10001168:	10800417 	ldw	r2,16(r2)
1000116c:	00000106 	br	10001174 <enemy_update_x_speed+0xd4>
10001170:	00bfff84 	movi	r2,-2
10001174:	e0fffc17 	ldw	r3,-16(fp)
10001178:	18800415 	stw	r2,16(r3)
1000117c:	00001606 	br	100011d8 <enemy_update_x_speed+0x138>
        }
    }
    else{
        if (!is_close_to_character(this, char_x, char_y)){
10001180:	e1bffe17 	ldw	r6,-8(fp)
10001184:	e17ffd17 	ldw	r5,-12(fp)
10001188:	e13ffc17 	ldw	r4,-16(fp)
1000118c:	00015f00 	call	100015f0 <is_close_to_character>
10001190:	1080005c 	xori	r2,r2,1
10001194:	10803fcc 	andi	r2,r2,255
10001198:	10000a26 	beq	r2,zero,100011c4 <enemy_update_x_speed+0x124>
            this->x_speed = (char_x > this->x) ? ENEMY_HORIZONTAL_MOVE : -ENEMY_HORIZONTAL_MOVE;
1000119c:	e0bffc17 	ldw	r2,-16(fp)
100011a0:	10c00117 	ldw	r3,4(r2)
100011a4:	e0bffd17 	ldw	r2,-12(fp)
100011a8:	1880020e 	bge	r3,r2,100011b4 <enemy_update_x_speed+0x114>
100011ac:	00800084 	movi	r2,2
100011b0:	00000106 	br	100011b8 <enemy_update_x_speed+0x118>
100011b4:	00bfff84 	movi	r2,-2
100011b8:	e0fffc17 	ldw	r3,-16(fp)
100011bc:	18800415 	stw	r2,16(r3)
100011c0:	00000506 	br	100011d8 <enemy_update_x_speed+0x138>
        }
        else{
            this->x_speed = 0;
100011c4:	e0bffc17 	ldw	r2,-16(fp)
100011c8:	10000415 	stw	zero,16(r2)
            still_count++;
100011cc:	d0a6d017 	ldw	r2,-25792(gp)
100011d0:	10800044 	addi	r2,r2,1
100011d4:	d0a6d015 	stw	r2,-25792(gp)
        }
    }
}
100011d8:	e037883a 	mov	sp,fp
100011dc:	dfc00117 	ldw	ra,4(sp)
100011e0:	df000017 	ldw	fp,0(sp)
100011e4:	dec00204 	addi	sp,sp,8
100011e8:	f800283a 	ret

100011ec <enemy_update_state>:

void enemy_update_state(ENEMY* this, int is_enemy_attacked)
{
100011ec:	defffc04 	addi	sp,sp,-16
100011f0:	dfc00315 	stw	ra,12(sp)
100011f4:	df000215 	stw	fp,8(sp)
100011f8:	df000204 	addi	fp,sp,8
100011fc:	e13ffe15 	stw	r4,-8(fp)
10001200:	e17fff15 	stw	r5,-4(fp)
    if (this->state == enemy_hurt_r)  {
10001204:	e0bffe17 	ldw	r2,-8(fp)
10001208:	10800317 	ldw	r2,12(r2)
1000120c:	10800918 	cmpnei	r2,r2,36
10001210:	1000111e 	bne	r2,zero,10001258 <enemy_update_state+0x6c>
        printf("enemy_hurting_count: %d\n", enemy_hurting_count);
10001214:	d0a6d117 	ldw	r2,-25788(gp)
10001218:	100b883a 	mov	r5,r2
1000121c:	01040074 	movhi	r4,4097
10001220:	210e5c04 	addi	r4,r4,14704
10001224:	0004a4c0 	call	10004a4c <printf>
        if (enemy_hurting_count == ENEMY_HURTING_MAX){
10001228:	d0a6d117 	ldw	r2,-25788(gp)
1000122c:	10800158 	cmpnei	r2,r2,5
10001230:	1000051e 	bne	r2,zero,10001248 <enemy_update_state+0x5c>
            enemy_hurting_count = 0;
10001234:	d026d115 	stw	zero,-25788(gp)
            this->state = enemy_r1;
10001238:	e0bffe17 	ldw	r2,-8(fp)
1000123c:	00c00784 	movi	r3,30
10001240:	10c00315 	stw	r3,12(r2)
            }
        }        
    }


}
10001244:	0000a606 	br	100014e0 <enemy_update_state+0x2f4>
        if (enemy_hurting_count == ENEMY_HURTING_MAX){
            enemy_hurting_count = 0;
            this->state = enemy_r1;
        }
        else{
            enemy_hurting_count++;
10001248:	d0a6d117 	ldw	r2,-25788(gp)
1000124c:	10800044 	addi	r2,r2,1
10001250:	d0a6d115 	stw	r2,-25788(gp)
            }
        }        
    }


}
10001254:	0000a206 	br	100014e0 <enemy_update_state+0x2f4>
        }
        else{
            enemy_hurting_count++;
        }
    }
    else if (this->state == enemy_hurt_l){
10001258:	e0bffe17 	ldw	r2,-8(fp)
1000125c:	10800317 	ldw	r2,12(r2)
10001260:	10800958 	cmpnei	r2,r2,37
10001264:	10000c1e 	bne	r2,zero,10001298 <enemy_update_state+0xac>
        if (enemy_hurting_count == ENEMY_HURTING_MAX){
10001268:	d0a6d117 	ldw	r2,-25788(gp)
1000126c:	10800158 	cmpnei	r2,r2,5
10001270:	1000051e 	bne	r2,zero,10001288 <enemy_update_state+0x9c>
            enemy_hurting_count = 0;
10001274:	d026d115 	stw	zero,-25788(gp)
            this->state = enemy_l1;
10001278:	e0bffe17 	ldw	r2,-8(fp)
1000127c:	00c00804 	movi	r3,32
10001280:	10c00315 	stw	r3,12(r2)
            }
        }        
    }


}
10001284:	00009606 	br	100014e0 <enemy_update_state+0x2f4>
        if (enemy_hurting_count == ENEMY_HURTING_MAX){
            enemy_hurting_count = 0;
            this->state = enemy_l1;
        }
        else{
            enemy_hurting_count++;
10001288:	d0a6d117 	ldw	r2,-25788(gp)
1000128c:	10800044 	addi	r2,r2,1
10001290:	d0a6d115 	stw	r2,-25788(gp)
            }
        }        
    }


}
10001294:	00009206 	br	100014e0 <enemy_update_state+0x2f4>
        else{
            enemy_hurting_count++;
        }
    } 
    else{
        if (this->x_speed > 0){
10001298:	e0bffe17 	ldw	r2,-8(fp)
1000129c:	10800417 	ldw	r2,16(r2)
100012a0:	00800a0e 	bge	zero,r2,100012cc <enemy_update_state+0xe0>
            this->state =  (this->state == enemy_r1) ? enemy_r2 : enemy_r1;
100012a4:	e0bffe17 	ldw	r2,-8(fp)
100012a8:	10800317 	ldw	r2,12(r2)
100012ac:	10800798 	cmpnei	r2,r2,30
100012b0:	1000021e 	bne	r2,zero,100012bc <enemy_update_state+0xd0>
100012b4:	008007c4 	movi	r2,31
100012b8:	00000106 	br	100012c0 <enemy_update_state+0xd4>
100012bc:	00800784 	movi	r2,30
100012c0:	e0fffe17 	ldw	r3,-8(fp)
100012c4:	18800315 	stw	r2,12(r3)
            }
        }        
    }


}
100012c8:	00008506 	br	100014e0 <enemy_update_state+0x2f4>
    } 
    else{
        if (this->x_speed > 0){
            this->state =  (this->state == enemy_r1) ? enemy_r2 : enemy_r1;
        }
        else if (this->x_speed < 0){
100012cc:	e0bffe17 	ldw	r2,-8(fp)
100012d0:	10800417 	ldw	r2,16(r2)
100012d4:	10000a0e 	bge	r2,zero,10001300 <enemy_update_state+0x114>
            this->state =  (this->state == enemy_l1) ? enemy_l2 : enemy_l1;
100012d8:	e0bffe17 	ldw	r2,-8(fp)
100012dc:	10800317 	ldw	r2,12(r2)
100012e0:	10800818 	cmpnei	r2,r2,32
100012e4:	1000021e 	bne	r2,zero,100012f0 <enemy_update_state+0x104>
100012e8:	00800844 	movi	r2,33
100012ec:	00000106 	br	100012f4 <enemy_update_state+0x108>
100012f0:	00800804 	movi	r2,32
100012f4:	e0fffe17 	ldw	r3,-8(fp)
100012f8:	18800315 	stw	r2,12(r3)
            }
        }        
    }


}
100012fc:	00007806 	br	100014e0 <enemy_update_state+0x2f4>
        }
        else if (this->x_speed < 0){
            this->state =  (this->state == enemy_l1) ? enemy_l2 : enemy_l1;
        }
        else{
            if (still_count == STILL_COUNT_MAX){
10001300:	d0a6d017 	ldw	r2,-25792(gp)
10001304:	10800298 	cmpnei	r2,r2,10
10001308:	10000f1e 	bne	r2,zero,10001348 <enemy_update_state+0x15c>
                still_count = 0;
1000130c:	d026d015 	stw	zero,-25792(gp)
                this->state = ((this->state == enemy_r1)||(this->state == enemy_r2)) ? enemy_attack_r: enemy_attack_l;
10001310:	e0bffe17 	ldw	r2,-8(fp)
10001314:	10800317 	ldw	r2,12(r2)
10001318:	108007a0 	cmpeqi	r2,r2,30
1000131c:	1000041e 	bne	r2,zero,10001330 <enemy_update_state+0x144>
10001320:	e0bffe17 	ldw	r2,-8(fp)
10001324:	10800317 	ldw	r2,12(r2)
10001328:	108007d8 	cmpnei	r2,r2,31
1000132c:	1000021e 	bne	r2,zero,10001338 <enemy_update_state+0x14c>
10001330:	00800884 	movi	r2,34
10001334:	00000106 	br	1000133c <enemy_update_state+0x150>
10001338:	008008c4 	movi	r2,35
1000133c:	e0fffe17 	ldw	r3,-8(fp)
10001340:	18800315 	stw	r2,12(r3)
            }
        }        
    }


}
10001344:	00006606 	br	100014e0 <enemy_update_state+0x2f4>
        else{
            if (still_count == STILL_COUNT_MAX){
                still_count = 0;
                this->state = ((this->state == enemy_r1)||(this->state == enemy_r2)) ? enemy_attack_r: enemy_attack_l;
            }
            else if (is_enemy_attacked == this->index){
10001348:	e0bffe17 	ldw	r2,-8(fp)
1000134c:	10c00017 	ldw	r3,0(r2)
10001350:	e0bfff17 	ldw	r2,-4(fp)
10001354:	1880281e 	bne	r3,r2,100013f8 <enemy_update_state+0x20c>
                if (this->state == enemy_r1 || this->state == enemy_r2 || this->state == enemy_attack_r || this->state == enemy_hurt_r){
10001358:	e0bffe17 	ldw	r2,-8(fp)
1000135c:	10800317 	ldw	r2,12(r2)
10001360:	108007a0 	cmpeqi	r2,r2,30
10001364:	10000c1e 	bne	r2,zero,10001398 <enemy_update_state+0x1ac>
10001368:	e0bffe17 	ldw	r2,-8(fp)
1000136c:	10800317 	ldw	r2,12(r2)
10001370:	108007e0 	cmpeqi	r2,r2,31
10001374:	1000081e 	bne	r2,zero,10001398 <enemy_update_state+0x1ac>
10001378:	e0bffe17 	ldw	r2,-8(fp)
1000137c:	10800317 	ldw	r2,12(r2)
10001380:	108008a0 	cmpeqi	r2,r2,34
10001384:	1000041e 	bne	r2,zero,10001398 <enemy_update_state+0x1ac>
10001388:	e0bffe17 	ldw	r2,-8(fp)
1000138c:	10800317 	ldw	r2,12(r2)
10001390:	10800918 	cmpnei	r2,r2,36
10001394:	1000041e 	bne	r2,zero,100013a8 <enemy_update_state+0x1bc>
                    // printf("-------------------enemy_hurt_r--------------------------\n");
                    this->state = enemy_hurt_r;
10001398:	e0bffe17 	ldw	r2,-8(fp)
1000139c:	00c00904 	movi	r3,36
100013a0:	10c00315 	stw	r3,12(r2)
            }
        }        
    }


}
100013a4:	00004e06 	br	100014e0 <enemy_update_state+0x2f4>
            else if (is_enemy_attacked == this->index){
                if (this->state == enemy_r1 || this->state == enemy_r2 || this->state == enemy_attack_r || this->state == enemy_hurt_r){
                    // printf("-------------------enemy_hurt_r--------------------------\n");
                    this->state = enemy_hurt_r;
                }
                else if (this->state == enemy_l1 || this->state == enemy_l2 || this->state == enemy_attack_l || this->state == enemy_hurt_l){
100013a8:	e0bffe17 	ldw	r2,-8(fp)
100013ac:	10800317 	ldw	r2,12(r2)
100013b0:	10800820 	cmpeqi	r2,r2,32
100013b4:	10000c1e 	bne	r2,zero,100013e8 <enemy_update_state+0x1fc>
100013b8:	e0bffe17 	ldw	r2,-8(fp)
100013bc:	10800317 	ldw	r2,12(r2)
100013c0:	10800860 	cmpeqi	r2,r2,33
100013c4:	1000081e 	bne	r2,zero,100013e8 <enemy_update_state+0x1fc>
100013c8:	e0bffe17 	ldw	r2,-8(fp)
100013cc:	10800317 	ldw	r2,12(r2)
100013d0:	108008e0 	cmpeqi	r2,r2,35
100013d4:	1000041e 	bne	r2,zero,100013e8 <enemy_update_state+0x1fc>
100013d8:	e0bffe17 	ldw	r2,-8(fp)
100013dc:	10800317 	ldw	r2,12(r2)
100013e0:	10800958 	cmpnei	r2,r2,37
100013e4:	10003e1e 	bne	r2,zero,100014e0 <enemy_update_state+0x2f4>
                    // printf("-------------------enemy_hurt_l--------------------------\n");  
                    this->state = enemy_hurt_l;
100013e8:	e0bffe17 	ldw	r2,-8(fp)
100013ec:	00c00944 	movi	r3,37
100013f0:	10c00315 	stw	r3,12(r2)
            }
        }        
    }


}
100013f4:	00003a06 	br	100014e0 <enemy_update_state+0x2f4>
                }
                else{
                }
            }
            else{
                if      (this->state == 0)              this->state = enemy_l1;
100013f8:	e0bffe17 	ldw	r2,-8(fp)
100013fc:	10800317 	ldw	r2,12(r2)
10001400:	1000041e 	bne	r2,zero,10001414 <enemy_update_state+0x228>
10001404:	e0bffe17 	ldw	r2,-8(fp)
10001408:	00c00804 	movi	r3,32
1000140c:	10c00315 	stw	r3,12(r2)
            }
        }        
    }


}
10001410:	00003306 	br	100014e0 <enemy_update_state+0x2f4>
                else{
                }
            }
            else{
                if      (this->state == 0)              this->state = enemy_l1;
                else if (this->state == enemy_r1)       this->state = enemy_r2;
10001414:	e0bffe17 	ldw	r2,-8(fp)
10001418:	10800317 	ldw	r2,12(r2)
1000141c:	10800798 	cmpnei	r2,r2,30
10001420:	1000041e 	bne	r2,zero,10001434 <enemy_update_state+0x248>
10001424:	e0bffe17 	ldw	r2,-8(fp)
10001428:	00c007c4 	movi	r3,31
1000142c:	10c00315 	stw	r3,12(r2)
            }
        }        
    }


}
10001430:	00002b06 	br	100014e0 <enemy_update_state+0x2f4>
                }
            }
            else{
                if      (this->state == 0)              this->state = enemy_l1;
                else if (this->state == enemy_r1)       this->state = enemy_r2;
                else if (this->state == enemy_r2)       this->state = enemy_r1;
10001434:	e0bffe17 	ldw	r2,-8(fp)
10001438:	10800317 	ldw	r2,12(r2)
1000143c:	108007d8 	cmpnei	r2,r2,31
10001440:	1000041e 	bne	r2,zero,10001454 <enemy_update_state+0x268>
10001444:	e0bffe17 	ldw	r2,-8(fp)
10001448:	00c00784 	movi	r3,30
1000144c:	10c00315 	stw	r3,12(r2)
            }
        }        
    }


}
10001450:	00002306 	br	100014e0 <enemy_update_state+0x2f4>
            }
            else{
                if      (this->state == 0)              this->state = enemy_l1;
                else if (this->state == enemy_r1)       this->state = enemy_r2;
                else if (this->state == enemy_r2)       this->state = enemy_r1;
                else if (this->state == enemy_l1)       this->state = enemy_l2;
10001454:	e0bffe17 	ldw	r2,-8(fp)
10001458:	10800317 	ldw	r2,12(r2)
1000145c:	10800818 	cmpnei	r2,r2,32
10001460:	1000041e 	bne	r2,zero,10001474 <enemy_update_state+0x288>
10001464:	e0bffe17 	ldw	r2,-8(fp)
10001468:	00c00844 	movi	r3,33
1000146c:	10c00315 	stw	r3,12(r2)
            }
        }        
    }


}
10001470:	00001b06 	br	100014e0 <enemy_update_state+0x2f4>
            else{
                if      (this->state == 0)              this->state = enemy_l1;
                else if (this->state == enemy_r1)       this->state = enemy_r2;
                else if (this->state == enemy_r2)       this->state = enemy_r1;
                else if (this->state == enemy_l1)       this->state = enemy_l2;
                else if (this->state == enemy_l2)       this->state = enemy_l1;   
10001474:	e0bffe17 	ldw	r2,-8(fp)
10001478:	10800317 	ldw	r2,12(r2)
1000147c:	10800858 	cmpnei	r2,r2,33
10001480:	1000041e 	bne	r2,zero,10001494 <enemy_update_state+0x2a8>
10001484:	e0bffe17 	ldw	r2,-8(fp)
10001488:	00c00804 	movi	r3,32
1000148c:	10c00315 	stw	r3,12(r2)
            }
        }        
    }


}
10001490:	00001306 	br	100014e0 <enemy_update_state+0x2f4>
                if      (this->state == 0)              this->state = enemy_l1;
                else if (this->state == enemy_r1)       this->state = enemy_r2;
                else if (this->state == enemy_r2)       this->state = enemy_r1;
                else if (this->state == enemy_l1)       this->state = enemy_l2;
                else if (this->state == enemy_l2)       this->state = enemy_l1;   
                else if (this->state == enemy_attack_r) this->state = enemy_r1;  
10001494:	e0bffe17 	ldw	r2,-8(fp)
10001498:	10800317 	ldw	r2,12(r2)
1000149c:	10800898 	cmpnei	r2,r2,34
100014a0:	1000041e 	bne	r2,zero,100014b4 <enemy_update_state+0x2c8>
100014a4:	e0bffe17 	ldw	r2,-8(fp)
100014a8:	00c00784 	movi	r3,30
100014ac:	10c00315 	stw	r3,12(r2)
            }
        }        
    }


}
100014b0:	00000b06 	br	100014e0 <enemy_update_state+0x2f4>
                else if (this->state == enemy_r1)       this->state = enemy_r2;
                else if (this->state == enemy_r2)       this->state = enemy_r1;
                else if (this->state == enemy_l1)       this->state = enemy_l2;
                else if (this->state == enemy_l2)       this->state = enemy_l1;   
                else if (this->state == enemy_attack_r) this->state = enemy_r1;  
                else if (this->state == enemy_attack_l) this->state = enemy_l1;   
100014b4:	e0bffe17 	ldw	r2,-8(fp)
100014b8:	10800317 	ldw	r2,12(r2)
100014bc:	108008d8 	cmpnei	r2,r2,35
100014c0:	1000041e 	bne	r2,zero,100014d4 <enemy_update_state+0x2e8>
100014c4:	e0bffe17 	ldw	r2,-8(fp)
100014c8:	00c00804 	movi	r3,32
100014cc:	10c00315 	stw	r3,12(r2)
            }
        }        
    }


}
100014d0:	00000306 	br	100014e0 <enemy_update_state+0x2f4>
                else if (this->state == enemy_l1)       this->state = enemy_l2;
                else if (this->state == enemy_l2)       this->state = enemy_l1;   
                else if (this->state == enemy_attack_r) this->state = enemy_r1;  
                else if (this->state == enemy_attack_l) this->state = enemy_l1;   
                else{
                    printf("Error: enemy state not found\n");
100014d4:	01040074 	movhi	r4,4097
100014d8:	210e6304 	addi	r4,r4,14732
100014dc:	0004b480 	call	10004b48 <puts>
            }
        }        
    }


}
100014e0:	0001883a 	nop
100014e4:	e037883a 	mov	sp,fp
100014e8:	dfc00117 	ldw	ra,4(sp)
100014ec:	df000017 	ldw	fp,0(sp)
100014f0:	dec00204 	addi	sp,sp,8
100014f4:	f800283a 	ret

100014f8 <enemy_update_life>:

void enemy_update_life(ENEMY* this, int is_enemy_attacked)
{
100014f8:	defffd04 	addi	sp,sp,-12
100014fc:	df000215 	stw	fp,8(sp)
10001500:	df000204 	addi	fp,sp,8
10001504:	e13ffe15 	stw	r4,-8(fp)
10001508:	e17fff15 	stw	r5,-4(fp)
    if (is_enemy_attacked == this->index){
1000150c:	e0bffe17 	ldw	r2,-8(fp)
10001510:	10c00017 	ldw	r3,0(r2)
10001514:	e0bfff17 	ldw	r2,-4(fp)
10001518:	1880051e 	bne	r3,r2,10001530 <enemy_update_life+0x38>
        this->life--;
1000151c:	e0bffe17 	ldw	r2,-8(fp)
10001520:	10800817 	ldw	r2,32(r2)
10001524:	10ffffc4 	addi	r3,r2,-1
10001528:	e0bffe17 	ldw	r2,-8(fp)
1000152c:	10c00815 	stw	r3,32(r2)
    }
}
10001530:	0001883a 	nop
10001534:	e037883a 	mov	sp,fp
10001538:	df000017 	ldw	fp,0(sp)
1000153c:	dec00104 	addi	sp,sp,4
10001540:	f800283a 	ret

10001544 <enemy_reset>:

void enemy_reset(ENEMY* this)
{
10001544:	defffe04 	addi	sp,sp,-8
10001548:	df000115 	stw	fp,4(sp)
1000154c:	df000104 	addi	fp,sp,4
10001550:	e13fff15 	stw	r4,-4(fp)
    this->x = 0;
10001554:	e0bfff17 	ldw	r2,-4(fp)
10001558:	10000115 	stw	zero,4(r2)
    this->y = 0;
1000155c:	e0bfff17 	ldw	r2,-4(fp)
10001560:	10000215 	stw	zero,8(r2)
    this->state = enemy_dead;
10001564:	e0bfff17 	ldw	r2,-4(fp)
10001568:	00c00984 	movi	r3,38
1000156c:	10c00315 	stw	r3,12(r2)
    this->x_speed = 0;
10001570:	e0bfff17 	ldw	r2,-4(fp)
10001574:	10000415 	stw	zero,16(r2)
    this->is_active = 0;
10001578:	e0bfff17 	ldw	r2,-4(fp)
1000157c:	10000715 	stw	zero,28(r2)
    this->life = 0;
10001580:	e0bfff17 	ldw	r2,-4(fp)
10001584:	10000815 	stw	zero,32(r2)
}
10001588:	0001883a 	nop
1000158c:	e037883a 	mov	sp,fp
10001590:	df000017 	ldw	fp,0(sp)
10001594:	dec00104 	addi	sp,sp,4
10001598:	f800283a 	ret

1000159c <is_patrolling>:

bool is_patrolling(ENEMY* this, int char_x)
{
1000159c:	defffd04 	addi	sp,sp,-12
100015a0:	df000215 	stw	fp,8(sp)
100015a4:	df000204 	addi	fp,sp,8
100015a8:	e13ffe15 	stw	r4,-8(fp)
100015ac:	e17fff15 	stw	r5,-4(fp)
    return !(char_x >= this->patrolStartX && char_x <= this->patrolEndX);
100015b0:	e0bffe17 	ldw	r2,-8(fp)
100015b4:	10800517 	ldw	r2,20(r2)
100015b8:	e0ffff17 	ldw	r3,-4(fp)
100015bc:	18800416 	blt	r3,r2,100015d0 <is_patrolling+0x34>
100015c0:	e0bffe17 	ldw	r2,-8(fp)
100015c4:	10c00617 	ldw	r3,24(r2)
100015c8:	e0bfff17 	ldw	r2,-4(fp)
100015cc:	1880020e 	bge	r3,r2,100015d8 <is_patrolling+0x3c>
100015d0:	00800044 	movi	r2,1
100015d4:	00000106 	br	100015dc <is_patrolling+0x40>
100015d8:	0005883a 	mov	r2,zero
100015dc:	1080004c 	andi	r2,r2,1
}
100015e0:	e037883a 	mov	sp,fp
100015e4:	df000017 	ldw	fp,0(sp)
100015e8:	dec00104 	addi	sp,sp,4
100015ec:	f800283a 	ret

100015f0 <is_close_to_character>:

bool is_close_to_character(ENEMY* this, int char_x, int char_y)
{
100015f0:	defffc04 	addi	sp,sp,-16
100015f4:	df000315 	stw	fp,12(sp)
100015f8:	df000304 	addi	fp,sp,12
100015fc:	e13ffd15 	stw	r4,-12(fp)
10001600:	e17ffe15 	stw	r5,-8(fp)
10001604:	e1bfff15 	stw	r6,-4(fp)
    if ((this->state == enemy_l1) ||( this->state == enemy_l2) || (this->state == enemy_attack_l)){
10001608:	e0bffd17 	ldw	r2,-12(fp)
1000160c:	10800317 	ldw	r2,12(r2)
10001610:	10800820 	cmpeqi	r2,r2,32
10001614:	1000081e 	bne	r2,zero,10001638 <is_close_to_character+0x48>
10001618:	e0bffd17 	ldw	r2,-12(fp)
1000161c:	10800317 	ldw	r2,12(r2)
10001620:	10800860 	cmpeqi	r2,r2,33
10001624:	1000041e 	bne	r2,zero,10001638 <is_close_to_character+0x48>
10001628:	e0bffd17 	ldw	r2,-12(fp)
1000162c:	10800317 	ldw	r2,12(r2)
10001630:	108008d8 	cmpnei	r2,r2,35
10001634:	1000131e 	bne	r2,zero,10001684 <is_close_to_character+0x94>
        if ((abs(char_x - this->x) <= CLOSE_THRESHOLD) && (char_y == ENEMY_POS_INIT_Y)){
10001638:	e0bffd17 	ldw	r2,-12(fp)
1000163c:	10800117 	ldw	r2,4(r2)
10001640:	e0fffe17 	ldw	r3,-8(fp)
10001644:	1885c83a 	sub	r2,r3,r2
10001648:	10bff910 	cmplti	r2,r2,-28
1000164c:	10000b1e 	bne	r2,zero,1000167c <is_close_to_character+0x8c>
10001650:	e0bffd17 	ldw	r2,-12(fp)
10001654:	10800117 	ldw	r2,4(r2)
10001658:	e0fffe17 	ldw	r3,-8(fp)
1000165c:	1885c83a 	sub	r2,r3,r2
10001660:	10800748 	cmpgei	r2,r2,29
10001664:	1000051e 	bne	r2,zero,1000167c <is_close_to_character+0x8c>
10001668:	e0bfff17 	ldw	r2,-4(fp)
1000166c:	10805798 	cmpnei	r2,r2,350
10001670:	1000021e 	bne	r2,zero,1000167c <is_close_to_character+0x8c>
            return true;
10001674:	00800044 	movi	r2,1
10001678:	00002206 	br	10001704 <is_close_to_character+0x114>
        }
        else{
            return false;
1000167c:	0005883a 	mov	r2,zero
10001680:	00002006 	br	10001704 <is_close_to_character+0x114>
        }
    }
    else if (this->state == enemy_r1 || this->state == enemy_r2|| (this->state == enemy_attack_r)){
10001684:	e0bffd17 	ldw	r2,-12(fp)
10001688:	10800317 	ldw	r2,12(r2)
1000168c:	108007a0 	cmpeqi	r2,r2,30
10001690:	1000081e 	bne	r2,zero,100016b4 <is_close_to_character+0xc4>
10001694:	e0bffd17 	ldw	r2,-12(fp)
10001698:	10800317 	ldw	r2,12(r2)
1000169c:	108007e0 	cmpeqi	r2,r2,31
100016a0:	1000041e 	bne	r2,zero,100016b4 <is_close_to_character+0xc4>
100016a4:	e0bffd17 	ldw	r2,-12(fp)
100016a8:	10800317 	ldw	r2,12(r2)
100016ac:	10800898 	cmpnei	r2,r2,34
100016b0:	1000131e 	bne	r2,zero,10001700 <is_close_to_character+0x110>
        if (abs(char_x - this->x) <= CLOSE_THRESHOLD && (char_y == ENEMY_POS_INIT_Y)){
100016b4:	e0bffd17 	ldw	r2,-12(fp)
100016b8:	10800117 	ldw	r2,4(r2)
100016bc:	e0fffe17 	ldw	r3,-8(fp)
100016c0:	1885c83a 	sub	r2,r3,r2
100016c4:	10bff910 	cmplti	r2,r2,-28
100016c8:	10000b1e 	bne	r2,zero,100016f8 <is_close_to_character+0x108>
100016cc:	e0bffd17 	ldw	r2,-12(fp)
100016d0:	10800117 	ldw	r2,4(r2)
100016d4:	e0fffe17 	ldw	r3,-8(fp)
100016d8:	1885c83a 	sub	r2,r3,r2
100016dc:	10800748 	cmpgei	r2,r2,29
100016e0:	1000051e 	bne	r2,zero,100016f8 <is_close_to_character+0x108>
100016e4:	e0bfff17 	ldw	r2,-4(fp)
100016e8:	10805798 	cmpnei	r2,r2,350
100016ec:	1000021e 	bne	r2,zero,100016f8 <is_close_to_character+0x108>
            return true;
100016f0:	00800044 	movi	r2,1
100016f4:	00000306 	br	10001704 <is_close_to_character+0x114>
        }
        else{
            return false;
100016f8:	0005883a 	mov	r2,zero
100016fc:	00000106 	br	10001704 <is_close_to_character+0x114>
        }
    }
    else{
        return false;
10001700:	0005883a 	mov	r2,zero
    }
}
10001704:	e037883a 	mov	sp,fp
10001708:	df000017 	ldw	fp,0(sp)
1000170c:	dec00104 	addi	sp,sp,4
10001710:	f800283a 	ret

10001714 <game_init>:
#include "game.h"


void game_init()
{
10001714:	defffd04 	addi	sp,sp,-12
10001718:	dfc00215 	stw	ra,8(sp)
1000171c:	df000115 	stw	fp,4(sp)
10001720:	dc000015 	stw	r16,0(sp)
10001724:	df000104 	addi	fp,sp,4
	my_char = malloc(sizeof(CHARACTER));
10001728:	01000704 	movi	r4,28
1000172c:	00041e80 	call	100041e8 <malloc>
10001730:	d0a6dc15 	stw	r2,-25744(gp)
	ball_attack = malloc(sizeof(BALL_ATTACK));
10001734:	01000704 	movi	r4,28
10001738:	00041e80 	call	100041e8 <malloc>
1000173c:	d0a6dd15 	stw	r2,-25740(gp)
	enemy1 = malloc(sizeof(ENEMY));
10001740:	01000904 	movi	r4,36
10001744:	00041e80 	call	100041e8 <malloc>
10001748:	d0a6d915 	stw	r2,-25756(gp)
	enemy2 = malloc(sizeof(ENEMY));
1000174c:	01000904 	movi	r4,36
10001750:	00041e80 	call	100041e8 <malloc>
10001754:	d0a6de15 	stw	r2,-25736(gp)
	enemy3 = malloc(sizeof(ENEMY));
10001758:	01000904 	movi	r4,36
1000175c:	00041e80 	call	100041e8 <malloc>
10001760:	d0a6df15 	stw	r2,-25732(gp)
	enemy4 = malloc(sizeof(ENEMY));
10001764:	01000904 	movi	r4,36
10001768:	00041e80 	call	100041e8 <malloc>
1000176c:	d0a6da15 	stw	r2,-25752(gp)
	enemy5 = malloc(sizeof(ENEMY));
10001770:	01000904 	movi	r4,36
10001774:	00041e80 	call	100041e8 <malloc>
10001778:	d0a6d815 	stw	r2,-25760(gp)
	life_bar = malloc(sizeof(LIFE_BAR));
1000177c:	01000404 	movi	r4,16
10001780:	00041e80 	call	100041e8 <malloc>
10001784:	d0a6db15 	stw	r2,-25748(gp)

	if (my_char)		vga_ctrl->VRAM[1] = char_init(my_char);
10001788:	d0a6dc17 	ldw	r2,-25744(gp)
1000178c:	10000526 	beq	r2,zero,100017a4 <game_init+0x90>
10001790:	d4200017 	ldw	r16,-32768(gp)
10001794:	d0a6dc17 	ldw	r2,-25744(gp)
10001798:	1009883a 	mov	r4,r2
1000179c:	00005880 	call	10000588 <char_init>
100017a0:	80800115 	stw	r2,4(r16)
	if (ball_attack)	vga_ctrl->VRAM[2] = ball_attack_init(ball_attack);
100017a4:	d0a6dd17 	ldw	r2,-25740(gp)
100017a8:	10000526 	beq	r2,zero,100017c0 <game_init+0xac>
100017ac:	d4200017 	ldw	r16,-32768(gp)
100017b0:	d0a6dd17 	ldw	r2,-25740(gp)
100017b4:	1009883a 	mov	r4,r2
100017b8:	000026c0 	call	1000026c <ball_attack_init>
100017bc:	80800215 	stw	r2,8(r16)
	if (enemy1)			vga_ctrl->VRAM[3] = enemy_init(enemy1, 1, 450, 600);
100017c0:	d0a6d917 	ldw	r2,-25756(gp)
100017c4:	10000826 	beq	r2,zero,100017e8 <game_init+0xd4>
100017c8:	d4200017 	ldw	r16,-32768(gp)
100017cc:	d0a6d917 	ldw	r2,-25756(gp)
100017d0:	01c09604 	movi	r7,600
100017d4:	01807084 	movi	r6,450
100017d8:	01400044 	movi	r5,1
100017dc:	1009883a 	mov	r4,r2
100017e0:	0000eb80 	call	10000eb8 <enemy_init>
100017e4:	80800315 	stw	r2,12(r16)
	if (enemy2)			vga_ctrl->VRAM[4] = enemy_init(enemy2, 2, 30, 150);
100017e8:	d0a6de17 	ldw	r2,-25736(gp)
100017ec:	10000826 	beq	r2,zero,10001810 <game_init+0xfc>
100017f0:	d4200017 	ldw	r16,-32768(gp)
100017f4:	d0a6de17 	ldw	r2,-25736(gp)
100017f8:	01c02584 	movi	r7,150
100017fc:	01800784 	movi	r6,30
10001800:	01400084 	movi	r5,2
10001804:	1009883a 	mov	r4,r2
10001808:	0000eb80 	call	10000eb8 <enemy_init>
1000180c:	80800415 	stw	r2,16(r16)
	if (enemy3)			vga_ctrl->VRAM[5] = enemy_init(enemy3, 3, 180, 330);
10001810:	d0a6df17 	ldw	r2,-25732(gp)
10001814:	10000826 	beq	r2,zero,10001838 <game_init+0x124>
10001818:	d4200017 	ldw	r16,-32768(gp)
1000181c:	d0a6df17 	ldw	r2,-25732(gp)
10001820:	01c05284 	movi	r7,330
10001824:	01802d04 	movi	r6,180
10001828:	014000c4 	movi	r5,3
1000182c:	1009883a 	mov	r4,r2
10001830:	0000eb80 	call	10000eb8 <enemy_init>
10001834:	80800515 	stw	r2,20(r16)
	if (enemy4)			vga_ctrl->VRAM[6] = enemy_init(enemy4, 4, 350, 500);
10001838:	d0a6da17 	ldw	r2,-25752(gp)
1000183c:	10000826 	beq	r2,zero,10001860 <game_init+0x14c>
10001840:	d4200017 	ldw	r16,-32768(gp)
10001844:	d0a6da17 	ldw	r2,-25752(gp)
10001848:	01c07d04 	movi	r7,500
1000184c:	01805784 	movi	r6,350
10001850:	01400104 	movi	r5,4
10001854:	1009883a 	mov	r4,r2
10001858:	0000eb80 	call	10000eb8 <enemy_init>
1000185c:	80800615 	stw	r2,24(r16)
	if (enemy5)			vga_ctrl->VRAM[7] = enemy_init(enemy5, 5, 530, 600);
10001860:	d0a6d817 	ldw	r2,-25760(gp)
10001864:	10000826 	beq	r2,zero,10001888 <game_init+0x174>
10001868:	d4200017 	ldw	r16,-32768(gp)
1000186c:	d0a6d817 	ldw	r2,-25760(gp)
10001870:	01c09604 	movi	r7,600
10001874:	01808484 	movi	r6,530
10001878:	01400144 	movi	r5,5
1000187c:	1009883a 	mov	r4,r2
10001880:	0000eb80 	call	10000eb8 <enemy_init>
10001884:	80800715 	stw	r2,28(r16)
	if (life_bar)		vga_ctrl->VRAM[0] = life_bar_init(life_bar);
10001888:	d0a6db17 	ldw	r2,-25748(gp)
1000188c:	10000526 	beq	r2,zero,100018a4 <game_init+0x190>
10001890:	d4200017 	ldw	r16,-32768(gp)
10001894:	d0a6db17 	ldw	r2,-25748(gp)
10001898:	1009883a 	mov	r4,r2
1000189c:	000210c0 	call	1000210c <life_bar_init>
100018a0:	80800015 	stw	r2,0(r16)
}
100018a4:	0001883a 	nop
100018a8:	e6ffff04 	addi	sp,fp,-4
100018ac:	dfc00217 	ldw	ra,8(sp)
100018b0:	df000117 	ldw	fp,4(sp)
100018b4:	dc000017 	ldw	r16,0(sp)
100018b8:	dec00304 	addi	sp,sp,12
100018bc:	f800283a 	ret

100018c0 <game_run>:

void game_run(int keycode)
{
100018c0:	defff704 	addi	sp,sp,-36
100018c4:	dfc00815 	stw	ra,32(sp)
100018c8:	df000715 	stw	fp,28(sp)
100018cc:	dcc00615 	stw	r19,24(sp)
100018d0:	dc800515 	stw	r18,20(sp)
100018d4:	dc400415 	stw	r17,16(sp)
100018d8:	dc000315 	stw	r16,12(sp)
100018dc:	df000704 	addi	fp,sp,28
100018e0:	e13ffb15 	stw	r4,-20(fp)
	vga_ctrl->VRAM[0] = life_bar_update_state(life_bar, my_char->life, is_win);
100018e4:	d4200017 	ldw	r16,-32768(gp)
100018e8:	d0e6db17 	ldw	r3,-25748(gp)
100018ec:	d0a6dc17 	ldw	r2,-25744(gp)
100018f0:	10800617 	ldw	r2,24(r2)
100018f4:	d126d717 	ldw	r4,-25764(gp)
100018f8:	200d883a 	mov	r6,r4
100018fc:	100b883a 	mov	r5,r2
10001900:	1809883a 	mov	r4,r3
10001904:	00021900 	call	10002190 <life_bar_update_state>
10001908:	80800015 	stw	r2,0(r16)
    vga_ctrl->VRAM[1] = char_run(my_char,  keycode, is_character_attacked);
1000190c:	d4200017 	ldw	r16,-32768(gp)
10001910:	d0a6dc17 	ldw	r2,-25744(gp)
10001914:	d0e6d617 	ldw	r3,-25768(gp)
10001918:	180d883a 	mov	r6,r3
1000191c:	e17ffb17 	ldw	r5,-20(fp)
10001920:	1009883a 	mov	r4,r2
10001924:	00006180 	call	10000618 <char_run>
10001928:	80800115 	stw	r2,4(r16)
   	vga_ctrl->VRAM[2] = ball_attack_run(ball_attack, my_char->x, my_char->y, char_is_r(my_char), keycode, is_enemy_attacked);
1000192c:	d4200017 	ldw	r16,-32768(gp)
10001930:	d466dd17 	ldw	r17,-25740(gp)
10001934:	d0a6dc17 	ldw	r2,-25744(gp)
10001938:	14800017 	ldw	r18,0(r2)
1000193c:	d0a6dc17 	ldw	r2,-25744(gp)
10001940:	14c00117 	ldw	r19,4(r2)
10001944:	d0a6dc17 	ldw	r2,-25744(gp)
10001948:	1009883a 	mov	r4,r2
1000194c:	00007b40 	call	100007b4 <char_is_r>
10001950:	1007883a 	mov	r3,r2
10001954:	d0a6d517 	ldw	r2,-25772(gp)
10001958:	d8800115 	stw	r2,4(sp)
1000195c:	e0bffb17 	ldw	r2,-20(fp)
10001960:	d8800015 	stw	r2,0(sp)
10001964:	180f883a 	mov	r7,r3
10001968:	980d883a 	mov	r6,r19
1000196c:	900b883a 	mov	r5,r18
10001970:	8809883a 	mov	r4,r17
10001974:	00002dc0 	call	100002dc <ball_attack_run>
10001978:	80800215 	stw	r2,8(r16)
	vga_ctrl->VRAM[3] = enemy_run(enemy1, my_char->x, my_char->y, is_enemy_attacked);
1000197c:	d4200017 	ldw	r16,-32768(gp)
10001980:	d0e6d917 	ldw	r3,-25756(gp)
10001984:	d0a6dc17 	ldw	r2,-25744(gp)
10001988:	11000017 	ldw	r4,0(r2)
1000198c:	d0a6dc17 	ldw	r2,-25744(gp)
10001990:	10800117 	ldw	r2,4(r2)
10001994:	d166d517 	ldw	r5,-25772(gp)
10001998:	280f883a 	mov	r7,r5
1000199c:	100d883a 	mov	r6,r2
100019a0:	200b883a 	mov	r5,r4
100019a4:	1809883a 	mov	r4,r3
100019a8:	0000f840 	call	10000f84 <enemy_run>
100019ac:	80800315 	stw	r2,12(r16)
	if (enemy1->life == 0)
100019b0:	d0a6d917 	ldw	r2,-25756(gp)
100019b4:	10800817 	ldw	r2,32(r2)
100019b8:	1000341e 	bne	r2,zero,10001a8c <game_run+0x1cc>
	{
	
		vga_ctrl->VRAM[4] = enemy_run(enemy2, my_char->x, my_char->y, is_enemy_attacked);
100019bc:	d4200017 	ldw	r16,-32768(gp)
100019c0:	d0e6de17 	ldw	r3,-25736(gp)
100019c4:	d0a6dc17 	ldw	r2,-25744(gp)
100019c8:	11000017 	ldw	r4,0(r2)
100019cc:	d0a6dc17 	ldw	r2,-25744(gp)
100019d0:	10800117 	ldw	r2,4(r2)
100019d4:	d166d517 	ldw	r5,-25772(gp)
100019d8:	280f883a 	mov	r7,r5
100019dc:	100d883a 	mov	r6,r2
100019e0:	200b883a 	mov	r5,r4
100019e4:	1809883a 	mov	r4,r3
100019e8:	0000f840 	call	10000f84 <enemy_run>
100019ec:	80800415 	stw	r2,16(r16)
		vga_ctrl->VRAM[5] = enemy_run(enemy3, my_char->x, my_char->y, is_enemy_attacked);
100019f0:	d4200017 	ldw	r16,-32768(gp)
100019f4:	d0e6df17 	ldw	r3,-25732(gp)
100019f8:	d0a6dc17 	ldw	r2,-25744(gp)
100019fc:	11000017 	ldw	r4,0(r2)
10001a00:	d0a6dc17 	ldw	r2,-25744(gp)
10001a04:	10800117 	ldw	r2,4(r2)
10001a08:	d166d517 	ldw	r5,-25772(gp)
10001a0c:	280f883a 	mov	r7,r5
10001a10:	100d883a 	mov	r6,r2
10001a14:	200b883a 	mov	r5,r4
10001a18:	1809883a 	mov	r4,r3
10001a1c:	0000f840 	call	10000f84 <enemy_run>
10001a20:	80800515 	stw	r2,20(r16)
		vga_ctrl->VRAM[6] = enemy_run(enemy4, my_char->x, my_char->y, is_enemy_attacked);
10001a24:	d4200017 	ldw	r16,-32768(gp)
10001a28:	d0e6da17 	ldw	r3,-25752(gp)
10001a2c:	d0a6dc17 	ldw	r2,-25744(gp)
10001a30:	11000017 	ldw	r4,0(r2)
10001a34:	d0a6dc17 	ldw	r2,-25744(gp)
10001a38:	10800117 	ldw	r2,4(r2)
10001a3c:	d166d517 	ldw	r5,-25772(gp)
10001a40:	280f883a 	mov	r7,r5
10001a44:	100d883a 	mov	r6,r2
10001a48:	200b883a 	mov	r5,r4
10001a4c:	1809883a 	mov	r4,r3
10001a50:	0000f840 	call	10000f84 <enemy_run>
10001a54:	80800615 	stw	r2,24(r16)
		vga_ctrl->VRAM[7] = enemy_run(enemy5, my_char->x, my_char->y, is_enemy_attacked);
10001a58:	d4200017 	ldw	r16,-32768(gp)
10001a5c:	d0e6d817 	ldw	r3,-25760(gp)
10001a60:	d0a6dc17 	ldw	r2,-25744(gp)
10001a64:	11000017 	ldw	r4,0(r2)
10001a68:	d0a6dc17 	ldw	r2,-25744(gp)
10001a6c:	10800117 	ldw	r2,4(r2)
10001a70:	d166d517 	ldw	r5,-25772(gp)
10001a74:	280f883a 	mov	r7,r5
10001a78:	100d883a 	mov	r6,r2
10001a7c:	200b883a 	mov	r5,r4
10001a80:	1809883a 	mov	r4,r3
10001a84:	0000f840 	call	10000f84 <enemy_run>
10001a88:	80800715 	stw	r2,28(r16)
	}
	is_enemy_attacked = isEnemyAttacked();
10001a8c:	0001b540 	call	10001b54 <isEnemyAttacked>
10001a90:	d0a6d515 	stw	r2,-25772(gp)
	is_character_attacked = isCharacterAttacked();
10001a94:	0001e080 	call	10001e08 <isCharacterAttacked>
10001a98:	d0a6d615 	stw	r2,-25768(gp)
	is_win = isWin();
10001a9c:	0001ef00 	call	10001ef0 <isWin>
10001aa0:	d0a6d715 	stw	r2,-25764(gp)
	// printf("is_enemy_attacked: %d\n", is_enemy_attacked);
}
10001aa4:	0001883a 	nop
10001aa8:	e6fffc04 	addi	sp,fp,-16
10001aac:	dfc00517 	ldw	ra,20(sp)
10001ab0:	df000417 	ldw	fp,16(sp)
10001ab4:	dcc00317 	ldw	r19,12(sp)
10001ab8:	dc800217 	ldw	r18,8(sp)
10001abc:	dc400117 	ldw	r17,4(sp)
10001ac0:	dc000017 	ldw	r16,0(sp)
10001ac4:	dec00604 	addi	sp,sp,24
10001ac8:	f800283a 	ret

10001acc <game_free>:

void game_free()
{
10001acc:	defffe04 	addi	sp,sp,-8
10001ad0:	dfc00115 	stw	ra,4(sp)
10001ad4:	df000015 	stw	fp,0(sp)
10001ad8:	d839883a 	mov	fp,sp
    free(my_char);
10001adc:	d0a6dc17 	ldw	r2,-25744(gp)
10001ae0:	1009883a 	mov	r4,r2
10001ae4:	00041fc0 	call	100041fc <free>
    free(ball_attack);
10001ae8:	d0a6dd17 	ldw	r2,-25740(gp)
10001aec:	1009883a 	mov	r4,r2
10001af0:	00041fc0 	call	100041fc <free>
	free(enemy1);
10001af4:	d0a6d917 	ldw	r2,-25756(gp)
10001af8:	1009883a 	mov	r4,r2
10001afc:	00041fc0 	call	100041fc <free>
	free(enemy2);
10001b00:	d0a6de17 	ldw	r2,-25736(gp)
10001b04:	1009883a 	mov	r4,r2
10001b08:	00041fc0 	call	100041fc <free>
	free(enemy3);
10001b0c:	d0a6df17 	ldw	r2,-25732(gp)
10001b10:	1009883a 	mov	r4,r2
10001b14:	00041fc0 	call	100041fc <free>
	free(enemy4);
10001b18:	d0a6da17 	ldw	r2,-25752(gp)
10001b1c:	1009883a 	mov	r4,r2
10001b20:	00041fc0 	call	100041fc <free>
	free(enemy5);
10001b24:	d0a6d817 	ldw	r2,-25760(gp)
10001b28:	1009883a 	mov	r4,r2
10001b2c:	00041fc0 	call	100041fc <free>
	free(life_bar);
10001b30:	d0a6db17 	ldw	r2,-25748(gp)
10001b34:	1009883a 	mov	r4,r2
10001b38:	00041fc0 	call	100041fc <free>
}
10001b3c:	0001883a 	nop
10001b40:	e037883a 	mov	sp,fp
10001b44:	dfc00117 	ldw	ra,4(sp)
10001b48:	df000017 	ldw	fp,0(sp)
10001b4c:	dec00204 	addi	sp,sp,8
10001b50:	f800283a 	ret

10001b54 <isEnemyAttacked>:

int isEnemyAttacked()
{
10001b54:	deffff04 	addi	sp,sp,-4
10001b58:	df000015 	stw	fp,0(sp)
10001b5c:	d839883a 	mov	fp,sp
	if ((abs(ball_attack->x - enemy1->x) <= 30) && (abs(ball_attack->y - enemy1->y) <= 30) && (enemy1->is_active))
10001b60:	d0a6dd17 	ldw	r2,-25740(gp)
10001b64:	10c00117 	ldw	r3,4(r2)
10001b68:	d0a6d917 	ldw	r2,-25756(gp)
10001b6c:	10800117 	ldw	r2,4(r2)
10001b70:	1885c83a 	sub	r2,r3,r2
10001b74:	10bff890 	cmplti	r2,r2,-30
10001b78:	10001a1e 	bne	r2,zero,10001be4 <isEnemyAttacked+0x90>
10001b7c:	d0a6dd17 	ldw	r2,-25740(gp)
10001b80:	10c00117 	ldw	r3,4(r2)
10001b84:	d0a6d917 	ldw	r2,-25756(gp)
10001b88:	10800117 	ldw	r2,4(r2)
10001b8c:	1885c83a 	sub	r2,r3,r2
10001b90:	108007c8 	cmpgei	r2,r2,31
10001b94:	1000131e 	bne	r2,zero,10001be4 <isEnemyAttacked+0x90>
10001b98:	d0a6dd17 	ldw	r2,-25740(gp)
10001b9c:	10c00217 	ldw	r3,8(r2)
10001ba0:	d0a6d917 	ldw	r2,-25756(gp)
10001ba4:	10800217 	ldw	r2,8(r2)
10001ba8:	1885c83a 	sub	r2,r3,r2
10001bac:	10bff890 	cmplti	r2,r2,-30
10001bb0:	10000c1e 	bne	r2,zero,10001be4 <isEnemyAttacked+0x90>
10001bb4:	d0a6dd17 	ldw	r2,-25740(gp)
10001bb8:	10c00217 	ldw	r3,8(r2)
10001bbc:	d0a6d917 	ldw	r2,-25756(gp)
10001bc0:	10800217 	ldw	r2,8(r2)
10001bc4:	1885c83a 	sub	r2,r3,r2
10001bc8:	108007c8 	cmpgei	r2,r2,31
10001bcc:	1000051e 	bne	r2,zero,10001be4 <isEnemyAttacked+0x90>
10001bd0:	d0a6d917 	ldw	r2,-25756(gp)
10001bd4:	10800717 	ldw	r2,28(r2)
10001bd8:	10000226 	beq	r2,zero,10001be4 <isEnemyAttacked+0x90>
	{
		return 1;
10001bdc:	00800044 	movi	r2,1
10001be0:	00008506 	br	10001df8 <isEnemyAttacked+0x2a4>
	}
	else if ((abs(ball_attack->x - enemy2->x) <= 30) && (abs(ball_attack->y - enemy2->y) <= 30) && (enemy2->is_active))
10001be4:	d0a6dd17 	ldw	r2,-25740(gp)
10001be8:	10c00117 	ldw	r3,4(r2)
10001bec:	d0a6de17 	ldw	r2,-25736(gp)
10001bf0:	10800117 	ldw	r2,4(r2)
10001bf4:	1885c83a 	sub	r2,r3,r2
10001bf8:	10bff890 	cmplti	r2,r2,-30
10001bfc:	10001a1e 	bne	r2,zero,10001c68 <isEnemyAttacked+0x114>
10001c00:	d0a6dd17 	ldw	r2,-25740(gp)
10001c04:	10c00117 	ldw	r3,4(r2)
10001c08:	d0a6de17 	ldw	r2,-25736(gp)
10001c0c:	10800117 	ldw	r2,4(r2)
10001c10:	1885c83a 	sub	r2,r3,r2
10001c14:	108007c8 	cmpgei	r2,r2,31
10001c18:	1000131e 	bne	r2,zero,10001c68 <isEnemyAttacked+0x114>
10001c1c:	d0a6dd17 	ldw	r2,-25740(gp)
10001c20:	10c00217 	ldw	r3,8(r2)
10001c24:	d0a6de17 	ldw	r2,-25736(gp)
10001c28:	10800217 	ldw	r2,8(r2)
10001c2c:	1885c83a 	sub	r2,r3,r2
10001c30:	10bff890 	cmplti	r2,r2,-30
10001c34:	10000c1e 	bne	r2,zero,10001c68 <isEnemyAttacked+0x114>
10001c38:	d0a6dd17 	ldw	r2,-25740(gp)
10001c3c:	10c00217 	ldw	r3,8(r2)
10001c40:	d0a6de17 	ldw	r2,-25736(gp)
10001c44:	10800217 	ldw	r2,8(r2)
10001c48:	1885c83a 	sub	r2,r3,r2
10001c4c:	108007c8 	cmpgei	r2,r2,31
10001c50:	1000051e 	bne	r2,zero,10001c68 <isEnemyAttacked+0x114>
10001c54:	d0a6de17 	ldw	r2,-25736(gp)
10001c58:	10800717 	ldw	r2,28(r2)
10001c5c:	10000226 	beq	r2,zero,10001c68 <isEnemyAttacked+0x114>
	{
		return 2;
10001c60:	00800084 	movi	r2,2
10001c64:	00006406 	br	10001df8 <isEnemyAttacked+0x2a4>
	}
	else if ((abs(ball_attack->x - enemy3->x) <= 30) && (abs(ball_attack->y - enemy3->y) <= 30) && (enemy3->is_active))
10001c68:	d0a6dd17 	ldw	r2,-25740(gp)
10001c6c:	10c00117 	ldw	r3,4(r2)
10001c70:	d0a6df17 	ldw	r2,-25732(gp)
10001c74:	10800117 	ldw	r2,4(r2)
10001c78:	1885c83a 	sub	r2,r3,r2
10001c7c:	10bff890 	cmplti	r2,r2,-30
10001c80:	10001a1e 	bne	r2,zero,10001cec <isEnemyAttacked+0x198>
10001c84:	d0a6dd17 	ldw	r2,-25740(gp)
10001c88:	10c00117 	ldw	r3,4(r2)
10001c8c:	d0a6df17 	ldw	r2,-25732(gp)
10001c90:	10800117 	ldw	r2,4(r2)
10001c94:	1885c83a 	sub	r2,r3,r2
10001c98:	108007c8 	cmpgei	r2,r2,31
10001c9c:	1000131e 	bne	r2,zero,10001cec <isEnemyAttacked+0x198>
10001ca0:	d0a6dd17 	ldw	r2,-25740(gp)
10001ca4:	10c00217 	ldw	r3,8(r2)
10001ca8:	d0a6df17 	ldw	r2,-25732(gp)
10001cac:	10800217 	ldw	r2,8(r2)
10001cb0:	1885c83a 	sub	r2,r3,r2
10001cb4:	10bff890 	cmplti	r2,r2,-30
10001cb8:	10000c1e 	bne	r2,zero,10001cec <isEnemyAttacked+0x198>
10001cbc:	d0a6dd17 	ldw	r2,-25740(gp)
10001cc0:	10c00217 	ldw	r3,8(r2)
10001cc4:	d0a6df17 	ldw	r2,-25732(gp)
10001cc8:	10800217 	ldw	r2,8(r2)
10001ccc:	1885c83a 	sub	r2,r3,r2
10001cd0:	108007c8 	cmpgei	r2,r2,31
10001cd4:	1000051e 	bne	r2,zero,10001cec <isEnemyAttacked+0x198>
10001cd8:	d0a6df17 	ldw	r2,-25732(gp)
10001cdc:	10800717 	ldw	r2,28(r2)
10001ce0:	10000226 	beq	r2,zero,10001cec <isEnemyAttacked+0x198>
	{
		return 3;
10001ce4:	008000c4 	movi	r2,3
10001ce8:	00004306 	br	10001df8 <isEnemyAttacked+0x2a4>
	}
	else if ((abs(ball_attack->x - enemy4->x) <= 30) && (abs(ball_attack->y - enemy4->y) <= 30) && (enemy4->is_active))
10001cec:	d0a6dd17 	ldw	r2,-25740(gp)
10001cf0:	10c00117 	ldw	r3,4(r2)
10001cf4:	d0a6da17 	ldw	r2,-25752(gp)
10001cf8:	10800117 	ldw	r2,4(r2)
10001cfc:	1885c83a 	sub	r2,r3,r2
10001d00:	10bff890 	cmplti	r2,r2,-30
10001d04:	10001a1e 	bne	r2,zero,10001d70 <isEnemyAttacked+0x21c>
10001d08:	d0a6dd17 	ldw	r2,-25740(gp)
10001d0c:	10c00117 	ldw	r3,4(r2)
10001d10:	d0a6da17 	ldw	r2,-25752(gp)
10001d14:	10800117 	ldw	r2,4(r2)
10001d18:	1885c83a 	sub	r2,r3,r2
10001d1c:	108007c8 	cmpgei	r2,r2,31
10001d20:	1000131e 	bne	r2,zero,10001d70 <isEnemyAttacked+0x21c>
10001d24:	d0a6dd17 	ldw	r2,-25740(gp)
10001d28:	10c00217 	ldw	r3,8(r2)
10001d2c:	d0a6da17 	ldw	r2,-25752(gp)
10001d30:	10800217 	ldw	r2,8(r2)
10001d34:	1885c83a 	sub	r2,r3,r2
10001d38:	10bff890 	cmplti	r2,r2,-30
10001d3c:	10000c1e 	bne	r2,zero,10001d70 <isEnemyAttacked+0x21c>
10001d40:	d0a6dd17 	ldw	r2,-25740(gp)
10001d44:	10c00217 	ldw	r3,8(r2)
10001d48:	d0a6da17 	ldw	r2,-25752(gp)
10001d4c:	10800217 	ldw	r2,8(r2)
10001d50:	1885c83a 	sub	r2,r3,r2
10001d54:	108007c8 	cmpgei	r2,r2,31
10001d58:	1000051e 	bne	r2,zero,10001d70 <isEnemyAttacked+0x21c>
10001d5c:	d0a6da17 	ldw	r2,-25752(gp)
10001d60:	10800717 	ldw	r2,28(r2)
10001d64:	10000226 	beq	r2,zero,10001d70 <isEnemyAttacked+0x21c>
	{
		return 4;
10001d68:	00800104 	movi	r2,4
10001d6c:	00002206 	br	10001df8 <isEnemyAttacked+0x2a4>
	}
	else if ((abs(ball_attack->x - enemy5->x) <= 30) && (abs(ball_attack->y - enemy5->y) <= 30) && (enemy5->is_active))
10001d70:	d0a6dd17 	ldw	r2,-25740(gp)
10001d74:	10c00117 	ldw	r3,4(r2)
10001d78:	d0a6d817 	ldw	r2,-25760(gp)
10001d7c:	10800117 	ldw	r2,4(r2)
10001d80:	1885c83a 	sub	r2,r3,r2
10001d84:	10bff890 	cmplti	r2,r2,-30
10001d88:	10001a1e 	bne	r2,zero,10001df4 <isEnemyAttacked+0x2a0>
10001d8c:	d0a6dd17 	ldw	r2,-25740(gp)
10001d90:	10c00117 	ldw	r3,4(r2)
10001d94:	d0a6d817 	ldw	r2,-25760(gp)
10001d98:	10800117 	ldw	r2,4(r2)
10001d9c:	1885c83a 	sub	r2,r3,r2
10001da0:	108007c8 	cmpgei	r2,r2,31
10001da4:	1000131e 	bne	r2,zero,10001df4 <isEnemyAttacked+0x2a0>
10001da8:	d0a6dd17 	ldw	r2,-25740(gp)
10001dac:	10c00217 	ldw	r3,8(r2)
10001db0:	d0a6d817 	ldw	r2,-25760(gp)
10001db4:	10800217 	ldw	r2,8(r2)
10001db8:	1885c83a 	sub	r2,r3,r2
10001dbc:	10bff890 	cmplti	r2,r2,-30
10001dc0:	10000c1e 	bne	r2,zero,10001df4 <isEnemyAttacked+0x2a0>
10001dc4:	d0a6dd17 	ldw	r2,-25740(gp)
10001dc8:	10c00217 	ldw	r3,8(r2)
10001dcc:	d0a6d817 	ldw	r2,-25760(gp)
10001dd0:	10800217 	ldw	r2,8(r2)
10001dd4:	1885c83a 	sub	r2,r3,r2
10001dd8:	108007c8 	cmpgei	r2,r2,31
10001ddc:	1000051e 	bne	r2,zero,10001df4 <isEnemyAttacked+0x2a0>
10001de0:	d0a6d817 	ldw	r2,-25760(gp)
10001de4:	10800717 	ldw	r2,28(r2)
10001de8:	10000226 	beq	r2,zero,10001df4 <isEnemyAttacked+0x2a0>
	{
		return 5;
10001dec:	00800144 	movi	r2,5
10001df0:	00000106 	br	10001df8 <isEnemyAttacked+0x2a4>
	}
	else
	{
		return 0;
10001df4:	0005883a 	mov	r2,zero
	}
}
10001df8:	e037883a 	mov	sp,fp
10001dfc:	df000017 	ldw	fp,0(sp)
10001e00:	dec00104 	addi	sp,sp,4
10001e04:	f800283a 	ret

10001e08 <isCharacterAttacked>:

int isCharacterAttacked()
{
10001e08:	deffff04 	addi	sp,sp,-4
10001e0c:	df000015 	stw	fp,0(sp)
10001e10:	d839883a 	mov	fp,sp
	if (enemy1->state == enemy_attack_r || enemy1->state == enemy_attack_l){
10001e14:	d0a6d917 	ldw	r2,-25756(gp)
10001e18:	10800317 	ldw	r2,12(r2)
10001e1c:	108008a0 	cmpeqi	r2,r2,34
10001e20:	1000041e 	bne	r2,zero,10001e34 <isCharacterAttacked+0x2c>
10001e24:	d0a6d917 	ldw	r2,-25756(gp)
10001e28:	10800317 	ldw	r2,12(r2)
10001e2c:	108008d8 	cmpnei	r2,r2,35
10001e30:	1000021e 	bne	r2,zero,10001e3c <isCharacterAttacked+0x34>
		return 1;
10001e34:	00800044 	movi	r2,1
10001e38:	00002906 	br	10001ee0 <isCharacterAttacked+0xd8>
	}
	else if (enemy2->state == enemy_attack_r || enemy2->state == enemy_attack_l){
10001e3c:	d0a6de17 	ldw	r2,-25736(gp)
10001e40:	10800317 	ldw	r2,12(r2)
10001e44:	108008a0 	cmpeqi	r2,r2,34
10001e48:	1000041e 	bne	r2,zero,10001e5c <isCharacterAttacked+0x54>
10001e4c:	d0a6de17 	ldw	r2,-25736(gp)
10001e50:	10800317 	ldw	r2,12(r2)
10001e54:	108008d8 	cmpnei	r2,r2,35
10001e58:	1000021e 	bne	r2,zero,10001e64 <isCharacterAttacked+0x5c>
		return 2;
10001e5c:	00800084 	movi	r2,2
10001e60:	00001f06 	br	10001ee0 <isCharacterAttacked+0xd8>
	}
	else if (enemy3->state == enemy_attack_r || enemy3->state == enemy_attack_l){
10001e64:	d0a6df17 	ldw	r2,-25732(gp)
10001e68:	10800317 	ldw	r2,12(r2)
10001e6c:	108008a0 	cmpeqi	r2,r2,34
10001e70:	1000041e 	bne	r2,zero,10001e84 <isCharacterAttacked+0x7c>
10001e74:	d0a6df17 	ldw	r2,-25732(gp)
10001e78:	10800317 	ldw	r2,12(r2)
10001e7c:	108008d8 	cmpnei	r2,r2,35
10001e80:	1000021e 	bne	r2,zero,10001e8c <isCharacterAttacked+0x84>
		return 3;
10001e84:	008000c4 	movi	r2,3
10001e88:	00001506 	br	10001ee0 <isCharacterAttacked+0xd8>
	}
	else if (enemy4->state == enemy_attack_r || enemy4->state == enemy_attack_l){
10001e8c:	d0a6da17 	ldw	r2,-25752(gp)
10001e90:	10800317 	ldw	r2,12(r2)
10001e94:	108008a0 	cmpeqi	r2,r2,34
10001e98:	1000041e 	bne	r2,zero,10001eac <isCharacterAttacked+0xa4>
10001e9c:	d0a6da17 	ldw	r2,-25752(gp)
10001ea0:	10800317 	ldw	r2,12(r2)
10001ea4:	108008d8 	cmpnei	r2,r2,35
10001ea8:	1000021e 	bne	r2,zero,10001eb4 <isCharacterAttacked+0xac>
		return 4;
10001eac:	00800104 	movi	r2,4
10001eb0:	00000b06 	br	10001ee0 <isCharacterAttacked+0xd8>
	}
	else if (enemy5->state == enemy_attack_r || enemy5->state == enemy_attack_l){
10001eb4:	d0a6d817 	ldw	r2,-25760(gp)
10001eb8:	10800317 	ldw	r2,12(r2)
10001ebc:	108008a0 	cmpeqi	r2,r2,34
10001ec0:	1000041e 	bne	r2,zero,10001ed4 <isCharacterAttacked+0xcc>
10001ec4:	d0a6d817 	ldw	r2,-25760(gp)
10001ec8:	10800317 	ldw	r2,12(r2)
10001ecc:	108008d8 	cmpnei	r2,r2,35
10001ed0:	1000021e 	bne	r2,zero,10001edc <isCharacterAttacked+0xd4>
		return 5;
10001ed4:	00800144 	movi	r2,5
10001ed8:	00000106 	br	10001ee0 <isCharacterAttacked+0xd8>
	}
	else
	{
		return 0;
10001edc:	0005883a 	mov	r2,zero
	}
}
10001ee0:	e037883a 	mov	sp,fp
10001ee4:	df000017 	ldw	fp,0(sp)
10001ee8:	dec00104 	addi	sp,sp,4
10001eec:	f800283a 	ret

10001ef0 <isWin>:

int isWin()
{
10001ef0:	deffff04 	addi	sp,sp,-4
10001ef4:	df000015 	stw	fp,0(sp)
10001ef8:	d839883a 	mov	fp,sp
	if (enemy1->life == 0 && enemy2->life == 0 && enemy3->life == 0 && enemy4->life == 0 && enemy5->life == 0)
10001efc:	d0a6d917 	ldw	r2,-25756(gp)
10001f00:	10800817 	ldw	r2,32(r2)
10001f04:	10000e1e 	bne	r2,zero,10001f40 <isWin+0x50>
10001f08:	d0a6de17 	ldw	r2,-25736(gp)
10001f0c:	10800817 	ldw	r2,32(r2)
10001f10:	10000b1e 	bne	r2,zero,10001f40 <isWin+0x50>
10001f14:	d0a6df17 	ldw	r2,-25732(gp)
10001f18:	10800817 	ldw	r2,32(r2)
10001f1c:	1000081e 	bne	r2,zero,10001f40 <isWin+0x50>
10001f20:	d0a6da17 	ldw	r2,-25752(gp)
10001f24:	10800817 	ldw	r2,32(r2)
10001f28:	1000051e 	bne	r2,zero,10001f40 <isWin+0x50>
10001f2c:	d0a6d817 	ldw	r2,-25760(gp)
10001f30:	10800817 	ldw	r2,32(r2)
10001f34:	1000021e 	bne	r2,zero,10001f40 <isWin+0x50>
	{
		return 1;
10001f38:	00800044 	movi	r2,1
10001f3c:	00000106 	br	10001f44 <isWin+0x54>
	}
	else
	{
		return 0;
10001f40:	0005883a 	mov	r2,zero
	}
}
10001f44:	e037883a 	mov	sp,fp
10001f48:	df000017 	ldw	fp,0(sp)
10001f4c:	dec00104 	addi	sp,sp,4
10001f50:	f800283a 	ret

10001f54 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
10001f54:	deffff04 	addi	sp,sp,-4
10001f58:	df000015 	stw	fp,0(sp)
10001f5c:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10001f60:	00800074 	movhi	r2,1
10001f64:	10840c04 	addi	r2,r2,4144
10001f68:	00c00044 	movi	r3,1
10001f6c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10001f70:	00800074 	movhi	r2,1
10001f74:	10841004 	addi	r2,r2,4160
10001f78:	00c00044 	movi	r3,1
10001f7c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10001f80:	00800074 	movhi	r2,1
10001f84:	10841804 	addi	r2,r2,4192
10001f88:	00c00044 	movi	r3,1
10001f8c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10001f90:	00800074 	movhi	r2,1
10001f94:	10841404 	addi	r2,r2,4176
10001f98:	00c00044 	movi	r3,1
10001f9c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10001fa0:	00800074 	movhi	r2,1
10001fa4:	10842004 	addi	r2,r2,4224
10001fa8:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10001fac:	00800074 	movhi	r2,1
10001fb0:	10841c04 	addi	r2,r2,4208
10001fb4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10001fb8:	00800074 	movhi	r2,1
10001fbc:	10841004 	addi	r2,r2,4160
10001fc0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
10001fc4:	00800074 	movhi	r2,1
10001fc8:	10840c04 	addi	r2,r2,4144
10001fcc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10001fd0:	00800074 	movhi	r2,1
10001fd4:	10840c04 	addi	r2,r2,4144
10001fd8:	00c00044 	movi	r3,1
10001fdc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10001fe0:	00800074 	movhi	r2,1
10001fe4:	10841004 	addi	r2,r2,4160
10001fe8:	00c00044 	movi	r3,1
10001fec:	10c00005 	stb	r3,0(r2)
}
10001ff0:	0001883a 	nop
10001ff4:	e037883a 	mov	sp,fp
10001ff8:	df000017 	ldw	fp,0(sp)
10001ffc:	dec00104 	addi	sp,sp,4
10002000:	f800283a 	ret

10002004 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10002004:	defffd04 	addi	sp,sp,-12
10002008:	df000215 	stw	fp,8(sp)
1000200c:	df000204 	addi	fp,sp,8
10002010:	2007883a 	mov	r3,r4
10002014:	2805883a 	mov	r2,r5
10002018:	e0fffe05 	stb	r3,-8(fp)
1000201c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10002020:	00800074 	movhi	r2,1
10002024:	10842004 	addi	r2,r2,4224
10002028:	e0fffe03 	ldbu	r3,-8(fp)
1000202c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10002030:	00800074 	movhi	r2,1
10002034:	10841c04 	addi	r2,r2,4208
10002038:	e0ffff0b 	ldhu	r3,-4(fp)
1000203c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10002040:	00800074 	movhi	r2,1
10002044:	10841004 	addi	r2,r2,4160
10002048:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
1000204c:	00800074 	movhi	r2,1
10002050:	10841404 	addi	r2,r2,4176
10002054:	10000005 	stb	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_w = 1;
10002058:	00800074 	movhi	r2,1
1000205c:	10841404 	addi	r2,r2,4176
10002060:	00c00044 	movi	r3,1
10002064:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10002068:	00800074 	movhi	r2,1
1000206c:	10841004 	addi	r2,r2,4160
10002070:	00c00044 	movi	r3,1
10002074:	10c00005 	stb	r3,0(r2)
}
10002078:	0001883a 	nop
1000207c:	e037883a 	mov	sp,fp
10002080:	df000017 	ldw	fp,0(sp)
10002084:	dec00104 	addi	sp,sp,4
10002088:	f800283a 	ret

1000208c <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
1000208c:	defffd04 	addi	sp,sp,-12
10002090:	df000215 	stw	fp,8(sp)
10002094:	df000204 	addi	fp,sp,8
10002098:	2005883a 	mov	r2,r4
1000209c:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
100020a0:	00800074 	movhi	r2,1
100020a4:	10842004 	addi	r2,r2,4224
100020a8:	e0ffff03 	ldbu	r3,-4(fp)
100020ac:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
100020b0:	00800074 	movhi	r2,1
100020b4:	10841804 	addi	r2,r2,4192
100020b8:	10000005 	stb	zero,0(r2)
	*otg_hpi_cs = 0;
100020bc:	00800074 	movhi	r2,1
100020c0:	10841004 	addi	r2,r2,4160
100020c4:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
100020c8:	00800074 	movhi	r2,1
100020cc:	10841c04 	addi	r2,r2,4208
100020d0:	10800017 	ldw	r2,0(r2)
100020d4:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
100020d8:	00800074 	movhi	r2,1
100020dc:	10841804 	addi	r2,r2,4192
100020e0:	00c00044 	movi	r3,1
100020e4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100020e8:	00800074 	movhi	r2,1
100020ec:	10841004 	addi	r2,r2,4160
100020f0:	00c00044 	movi	r3,1
100020f4:	10c00005 	stb	r3,0(r2)
//	printf("%x\n",temp);
	return temp;
100020f8:	e0bffe0b 	ldhu	r2,-8(fp)
}
100020fc:	e037883a 	mov	sp,fp
10002100:	df000017 	ldw	fp,0(sp)
10002104:	dec00104 	addi	sp,sp,4
10002108:	f800283a 	ret

1000210c <life_bar_init>:
#include "life_bar.h"

alt_u32 life_bar_init(LIFE_BAR* this)
{
1000210c:	defffe04 	addi	sp,sp,-8
10002110:	df000115 	stw	fp,4(sp)
10002114:	df000104 	addi	fp,sp,4
10002118:	e13fff15 	stw	r4,-4(fp)
    this->x = LIFE_BAR_X;
1000211c:	e0bfff17 	ldw	r2,-4(fp)
10002120:	00c00a04 	movi	r3,40
10002124:	10c00015 	stw	r3,0(r2)
    this->y = LIFE_BAR_Y;
10002128:	e0bfff17 	ldw	r2,-4(fp)
1000212c:	00c01404 	movi	r3,80
10002130:	10c00115 	stw	r3,4(r2)
    this->state = life5;
10002134:	e0bfff17 	ldw	r2,-4(fp)
10002138:	00c00044 	movi	r3,1
1000213c:	10c00215 	stw	r3,8(r2)
    this->game_status = GAME_STATUA_CONTINUE;
10002140:	e0bfff17 	ldw	r2,-4(fp)
10002144:	10000315 	stw	zero,12(r2)
    return (this->x << 22) | (this->y << 12) | (this->game_status << 7) | (this->state);
10002148:	e0bfff17 	ldw	r2,-4(fp)
1000214c:	10800017 	ldw	r2,0(r2)
10002150:	100695ba 	slli	r3,r2,22
10002154:	e0bfff17 	ldw	r2,-4(fp)
10002158:	10800117 	ldw	r2,4(r2)
1000215c:	1004933a 	slli	r2,r2,12
10002160:	1886b03a 	or	r3,r3,r2
10002164:	e0bfff17 	ldw	r2,-4(fp)
10002168:	10800317 	ldw	r2,12(r2)
1000216c:	100491fa 	slli	r2,r2,7
10002170:	1886b03a 	or	r3,r3,r2
10002174:	e0bfff17 	ldw	r2,-4(fp)
10002178:	10800217 	ldw	r2,8(r2)
1000217c:	1884b03a 	or	r2,r3,r2
}
10002180:	e037883a 	mov	sp,fp
10002184:	df000017 	ldw	fp,0(sp)
10002188:	dec00104 	addi	sp,sp,4
1000218c:	f800283a 	ret

10002190 <life_bar_update_state>:


alt_u32 life_bar_update_state(LIFE_BAR* this, int char_life, int is_win)
{
10002190:	defffc04 	addi	sp,sp,-16
10002194:	df000315 	stw	fp,12(sp)
10002198:	df000304 	addi	fp,sp,12
1000219c:	e13ffd15 	stw	r4,-12(fp)
100021a0:	e17ffe15 	stw	r5,-8(fp)
100021a4:	e1bfff15 	stw	r6,-4(fp)
    if (is_win)
100021a8:	e0bfff17 	ldw	r2,-4(fp)
100021ac:	10001226 	beq	r2,zero,100021f8 <life_bar_update_state+0x68>
    {
        this->game_status = GAME_STATUS_WIN;
100021b0:	e0bffd17 	ldw	r2,-12(fp)
100021b4:	00c000c4 	movi	r3,3
100021b8:	10c00315 	stw	r3,12(r2)
        return (this->x << 22) | (this->y << 12) | (this->game_status << 7) | (this->state);
100021bc:	e0bffd17 	ldw	r2,-12(fp)
100021c0:	10800017 	ldw	r2,0(r2)
100021c4:	100695ba 	slli	r3,r2,22
100021c8:	e0bffd17 	ldw	r2,-12(fp)
100021cc:	10800117 	ldw	r2,4(r2)
100021d0:	1004933a 	slli	r2,r2,12
100021d4:	1886b03a 	or	r3,r3,r2
100021d8:	e0bffd17 	ldw	r2,-12(fp)
100021dc:	10800317 	ldw	r2,12(r2)
100021e0:	100491fa 	slli	r2,r2,7
100021e4:	1886b03a 	or	r3,r3,r2
100021e8:	e0bffd17 	ldw	r2,-12(fp)
100021ec:	10800217 	ldw	r2,8(r2)
100021f0:	1884b03a 	or	r2,r3,r2
100021f4:	00003a06 	br	100022e0 <life_bar_update_state+0x150>
    }
    switch (char_life)
100021f8:	e0bffe17 	ldw	r2,-8(fp)
100021fc:	108001a8 	cmpgeui	r2,r2,6
10002200:	1000281e 	bne	r2,zero,100022a4 <life_bar_update_state+0x114>
10002204:	e0bffe17 	ldw	r2,-8(fp)
10002208:	100690ba 	slli	r3,r2,2
1000220c:	00840034 	movhi	r2,4096
10002210:	10888804 	addi	r2,r2,8736
10002214:	1885883a 	add	r2,r3,r2
10002218:	10800017 	ldw	r2,0(r2)
1000221c:	1000683a 	jmp	r2
10002220:	10002288 	cmpgei	zero,r2,138
10002224:	10002278 	rdprs	zero,r2,137
10002228:	10002268 	cmpgeui	zero,r2,137
1000222c:	10002258 	cmpnei	zero,r2,137
10002230:	10002248 	cmpgei	zero,r2,137
10002234:	10002238 	rdprs	zero,r2,136
    {
        case 5:
            this->state = life5;
10002238:	e0bffd17 	ldw	r2,-12(fp)
1000223c:	00c00044 	movi	r3,1
10002240:	10c00215 	stw	r3,8(r2)
            break;
10002244:	00001806 	br	100022a8 <life_bar_update_state+0x118>
        case 4:
            this->state = life4;
10002248:	e0bffd17 	ldw	r2,-12(fp)
1000224c:	00c00084 	movi	r3,2
10002250:	10c00215 	stw	r3,8(r2)
            break;
10002254:	00001406 	br	100022a8 <life_bar_update_state+0x118>
        case 3:
            this->state = life3;
10002258:	e0bffd17 	ldw	r2,-12(fp)
1000225c:	00c000c4 	movi	r3,3
10002260:	10c00215 	stw	r3,8(r2)
            break;
10002264:	00001006 	br	100022a8 <life_bar_update_state+0x118>
        case 2:
            this->state = life2;
10002268:	e0bffd17 	ldw	r2,-12(fp)
1000226c:	00c00104 	movi	r3,4
10002270:	10c00215 	stw	r3,8(r2)
            break;
10002274:	00000c06 	br	100022a8 <life_bar_update_state+0x118>
        case 1:
            this->state = life1;
10002278:	e0bffd17 	ldw	r2,-12(fp)
1000227c:	00c00144 	movi	r3,5
10002280:	10c00215 	stw	r3,8(r2)
            break;
10002284:	00000806 	br	100022a8 <life_bar_update_state+0x118>
        case 0:
            this->state = life0;
10002288:	e0bffd17 	ldw	r2,-12(fp)
1000228c:	00c00184 	movi	r3,6
10002290:	10c00215 	stw	r3,8(r2)
            this->game_status = GAME_STATUS_LOSE;
10002294:	e0bffd17 	ldw	r2,-12(fp)
10002298:	00c00084 	movi	r3,2
1000229c:	10c00315 	stw	r3,12(r2)
            break;
100022a0:	00000106 	br	100022a8 <life_bar_update_state+0x118>
        default:
            break;
100022a4:	0001883a 	nop
    }
    return (this->x << 22) | (this->y << 12) | (this->game_status << 7) | (this->state);
100022a8:	e0bffd17 	ldw	r2,-12(fp)
100022ac:	10800017 	ldw	r2,0(r2)
100022b0:	100695ba 	slli	r3,r2,22
100022b4:	e0bffd17 	ldw	r2,-12(fp)
100022b8:	10800117 	ldw	r2,4(r2)
100022bc:	1004933a 	slli	r2,r2,12
100022c0:	1886b03a 	or	r3,r3,r2
100022c4:	e0bffd17 	ldw	r2,-12(fp)
100022c8:	10800317 	ldw	r2,12(r2)
100022cc:	100491fa 	slli	r2,r2,7
100022d0:	1886b03a 	or	r3,r3,r2
100022d4:	e0bffd17 	ldw	r2,-12(fp)
100022d8:	10800217 	ldw	r2,8(r2)
100022dc:	1884b03a 	or	r2,r3,r2
100022e0:	e037883a 	mov	sp,fp
100022e4:	df000017 	ldw	fp,0(sp)
100022e8:	dec00104 	addi	sp,sp,4
100022ec:	f800283a 	ret

100022f0 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100022f0:	defff804 	addi	sp,sp,-32
100022f4:	dfc00715 	stw	ra,28(sp)
100022f8:	df000615 	stw	fp,24(sp)
100022fc:	df000604 	addi	fp,sp,24
	IO_init();
10002300:	0001f540 	call	10001f54 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10002304:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
10002308:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
1000230c:	e03ffa85 	stb	zero,-22(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
10002310:	01040074 	movhi	r4,4097
10002314:	210e6b04 	addi	r4,r4,14764
10002318:	0004b480 	call	10004b48 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
1000231c:	00031100 	call	10003110 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10002320:	000b883a 	mov	r5,zero
10002324:	01005104 	movi	r4,324
10002328:	00030740 	call	10003074 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000232c:	017fffd4 	movui	r5,65535
10002330:	01302414 	movui	r4,49296
10002334:	00030740 	call	10003074 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10002338:	01409604 	movi	r5,600
1000233c:	01006d04 	movi	r4,436
10002340:	00030740 	call	10003074 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10002344:	00811004 	movi	r2,1088
10002348:	e0bffa0d 	sth	r2,-24(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
1000234c:	e0bffa0b 	ldhu	r2,-24(fp)
10002350:	100b883a 	mov	r5,r2
10002354:	01005084 	movi	r4,322
10002358:	00030740 	call	10003074 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
1000235c:	00808404 	movi	r2,528
10002360:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10002364:	e0bffe0b 	ldhu	r2,-8(fp)
10002368:	100b883a 	mov	r5,r2
1000236c:	01302314 	movui	r4,49292
10002370:	00030740 	call	10003074 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10002374:	000b883a 	mov	r5,zero
10002378:	01007104 	movi	r4,452
1000237c:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10002380:	000b883a 	mov	r5,zero
10002384:	01007184 	movi	r4,454
10002388:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
1000238c:	000b883a 	mov	r5,zero
10002390:	01007204 	movi	r4,456
10002394:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10002398:	000b883a 	mov	r5,zero
1000239c:	01007284 	movi	r4,458
100023a0:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100023a4:	000b883a 	mov	r5,zero
100023a8:	01007304 	movi	r4,460
100023ac:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100023b0:	000b883a 	mov	r5,zero
100023b4:	01007384 	movi	r4,462
100023b8:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100023bc:	000b883a 	mov	r5,zero
100023c0:	01007404 	movi	r4,464
100023c4:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100023c8:	000b883a 	mov	r5,zero
100023cc:	01007484 	movi	r4,466
100023d0:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100023d4:	000b883a 	mov	r5,zero
100023d8:	01007504 	movi	r4,468
100023dc:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100023e0:	000b883a 	mov	r5,zero
100023e4:	01007584 	movi	r4,470
100023e8:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100023ec:	000b883a 	mov	r5,zero
100023f0:	01007604 	movi	r4,472
100023f4:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100023f8:	000b883a 	mov	r5,zero
100023fc:	01007684 	movi	r4,474
10002400:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10002404:	000b883a 	mov	r5,zero
10002408:	01007704 	movi	r4,476
1000240c:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10002410:	000b883a 	mov	r5,zero
10002414:	01007784 	movi	r4,478
10002418:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
1000241c:	01401c84 	movi	r5,114
10002420:	01007084 	movi	r4,450
10002424:	00030740 	call	10003074 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10002428:	01738054 	movui	r5,52737
1000242c:	01000044 	movi	r4,1
10002430:	00020040 	call	10002004 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10002434:	0001883a 	nop
10002438:	010000c4 	movi	r4,3
1000243c:	000208c0 	call	1000208c <IO_read>
10002440:	10bfffcc 	andi	r2,r2,65535
10002444:	103ffc26 	beq	r2,zero,10002438 <__alt_data_end+0xf8002438>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10002448:	00000806 	br	1000246c <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000244c:	01000044 	movi	r4,1
10002450:	000208c0 	call	1000208c <IO_read>
10002454:	10bfffcc 	andi	r2,r2,65535
10002458:	100b883a 	mov	r5,r2
1000245c:	01040074 	movhi	r4,4097
10002460:	210e7104 	addi	r4,r4,14788
10002464:	0004a4c0 	call	10004a4c <printf>
		goto USB_HOT_PLUG;
10002468:	003fac06 	br	1000231c <__alt_data_end+0xf800231c>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000246c:	01000044 	movi	r4,1
10002470:	000208c0 	call	1000208c <IO_read>
10002474:	10bfffcc 	andi	r2,r2,65535
10002478:	1083fb58 	cmpnei	r2,r2,4077
1000247c:	103ff31e 	bne	r2,zero,1000244c <__alt_data_end+0xf800244c>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10002480:	01040074 	movhi	r4,4097
10002484:	210e7a04 	addi	r4,r4,14824
10002488:	0004a4c0 	call	10004a4c <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
1000248c:	01401d04 	movi	r5,116
10002490:	01007084 	movi	r4,450
10002494:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10002498:	01400f04 	movi	r5,60
1000249c:	01007104 	movi	r4,452
100024a0:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100024a4:	000b883a 	mov	r5,zero
100024a8:	01007184 	movi	r4,454
100024ac:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100024b0:	000b883a 	mov	r5,zero
100024b4:	01007204 	movi	r4,456
100024b8:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100024bc:	000b883a 	mov	r5,zero
100024c0:	01007284 	movi	r4,458
100024c4:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100024c8:	000b883a 	mov	r5,zero
100024cc:	01007304 	movi	r4,460
100024d0:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100024d4:	000b883a 	mov	r5,zero
100024d8:	01007384 	movi	r4,462
100024dc:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100024e0:	000b883a 	mov	r5,zero
100024e4:	01007404 	movi	r4,464
100024e8:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100024ec:	000b883a 	mov	r5,zero
100024f0:	01007484 	movi	r4,466
100024f4:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100024f8:	000b883a 	mov	r5,zero
100024fc:	01007504 	movi	r4,468
10002500:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10002504:	000b883a 	mov	r5,zero
10002508:	01007584 	movi	r4,470
1000250c:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10002510:	000b883a 	mov	r5,zero
10002514:	01007604 	movi	r4,472
10002518:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
1000251c:	000b883a 	mov	r5,zero
10002520:	01007684 	movi	r4,474
10002524:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10002528:	000b883a 	mov	r5,zero
1000252c:	01007704 	movi	r4,476
10002530:	00030740 	call	10003074 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10002534:	000b883a 	mov	r5,zero
10002538:	01007784 	movi	r4,478
1000253c:	00030740 	call	10003074 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10002540:	01738054 	movui	r5,52737
10002544:	01000044 	movi	r4,1
10002548:	00020040 	call	10002004 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000254c:	0001883a 	nop
10002550:	01000044 	movi	r4,1
10002554:	000208c0 	call	1000208c <IO_read>
10002558:	10bfffcc 	andi	r2,r2,65535
1000255c:	1083fb58 	cmpnei	r2,r2,4077
10002560:	10000826 	beq	r2,zero,10002584 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10002564:	01000044 	movi	r4,1
10002568:	000208c0 	call	1000208c <IO_read>
1000256c:	10bfffcc 	andi	r2,r2,65535
10002570:	100b883a 	mov	r5,r2
10002574:	01040074 	movhi	r4,4097
10002578:	210e7104 	addi	r4,r4,14788
1000257c:	0004a4c0 	call	10004a4c <printf>
		goto USB_HOT_PLUG;
10002580:	003f6606 	br	1000231c <__alt_data_end+0xf800231c>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10002584:	00b02284 	movi	r2,-16246
10002588:	d0a6e60d 	sth	r2,-25704(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
1000258c:	008c0004 	movi	r2,12288
10002590:	d0a6e68d 	sth	r2,-25702(gp)
	fs_device = A_DP_STAT;
10002594:	00880004 	movi	r2,8192
10002598:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
1000259c:	d0a6e60b 	ldhu	r2,-25704(gp)
100025a0:	10bfffcc 	andi	r2,r2,65535
100025a4:	1009883a 	mov	r4,r2
100025a8:	00030cc0 	call	100030cc <UsbRead>
100025ac:	e0bffa0d 	sth	r2,-24(fp)

	if (!(usb_ctl_val & no_device))
100025b0:	d0a6e68b 	ldhu	r2,-25702(gp)
100025b4:	e0fffa0b 	ldhu	r3,-24(fp)
100025b8:	1884703a 	and	r2,r3,r2
100025bc:	10bfffcc 	andi	r2,r2,65535
100025c0:	1000351e 	bne	r2,zero,10002698 <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100025c4:	e03ffac5 	stb	zero,-21(fp)
100025c8:	00000f06 	br	10002608 <main+0x318>
		{
			usleep(5*1000);
100025cc:	0104e204 	movi	r4,5000
100025d0:	00119a80 	call	100119a8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100025d4:	d0a6e60b 	ldhu	r2,-25704(gp)
100025d8:	10bfffcc 	andi	r2,r2,65535
100025dc:	1009883a 	mov	r4,r2
100025e0:	00030cc0 	call	100030cc <UsbRead>
100025e4:	e0bffa0d 	sth	r2,-24(fp)
			if(usb_ctl_val & no_device) break;
100025e8:	d0a6e68b 	ldhu	r2,-25702(gp)
100025ec:	e0fffa0b 	ldhu	r3,-24(fp)
100025f0:	1884703a 	and	r2,r3,r2
100025f4:	10bfffcc 	andi	r2,r2,65535
100025f8:	1000071e 	bne	r2,zero,10002618 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100025fc:	e0bffac3 	ldbu	r2,-21(fp)
10002600:	10800044 	addi	r2,r2,1
10002604:	e0bffac5 	stb	r2,-21(fp)
10002608:	e0bffac3 	ldbu	r2,-21(fp)
1000260c:	10800170 	cmpltui	r2,r2,5
10002610:	103fee1e 	bne	r2,zero,100025cc <__alt_data_end+0xf80025cc>
10002614:	00000106 	br	1000261c <main+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10002618:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
1000261c:	d0a6e68b 	ldhu	r2,-25702(gp)
10002620:	e0fffa0b 	ldhu	r3,-24(fp)
10002624:	1884703a 	and	r2,r3,r2
10002628:	10bfffcc 	andi	r2,r2,65535
1000262c:	1000261e 	bne	r2,zero,100026c8 <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10002630:	01040074 	movhi	r4,4097
10002634:	210e7e04 	addi	r4,r4,14840
10002638:	0004b480 	call	10004b48 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
1000263c:	01040074 	movhi	r4,4097
10002640:	210e8804 	addi	r4,r4,14880
10002644:	0004b480 	call	10004b48 <puts>
			while (!(usb_ctl_val & no_device))
10002648:	00000d06 	br	10002680 <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
1000264c:	d0a6e60b 	ldhu	r2,-25704(gp)
10002650:	10bfffcc 	andi	r2,r2,65535
10002654:	1009883a 	mov	r4,r2
10002658:	00030cc0 	call	100030cc <UsbRead>
1000265c:	e0bffa0d 	sth	r2,-24(fp)
				if(usb_ctl_val & no_device)
10002660:	d0a6e68b 	ldhu	r2,-25702(gp)
10002664:	e0fffa0b 	ldhu	r3,-24(fp)
10002668:	1884703a 	and	r2,r3,r2
1000266c:	10bfffcc 	andi	r2,r2,65535
10002670:	10000126 	beq	r2,zero,10002678 <main+0x388>
					goto USB_HOT_PLUG;
10002674:	003f2906 	br	1000231c <__alt_data_end+0xf800231c>

				usleep(2000);
10002678:	0101f404 	movi	r4,2000
1000267c:	00119a80 	call	100119a8 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10002680:	d0a6e68b 	ldhu	r2,-25702(gp)
10002684:	e0fffa0b 	ldhu	r3,-24(fp)
10002688:	1884703a 	and	r2,r3,r2
1000268c:	10bfffcc 	andi	r2,r2,65535
10002690:	103fee26 	beq	r2,zero,1000264c <__alt_data_end+0xf800264c>
10002694:	00000c06 	br	100026c8 <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10002698:	e0fffa0b 	ldhu	r3,-24(fp)
1000269c:	e0bffc0b 	ldhu	r2,-16(fp)
100026a0:	1884703a 	and	r2,r3,r2
100026a4:	10bfffcc 	andi	r2,r2,65535
100026a8:	10000426 	beq	r2,zero,100026bc <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
100026ac:	01040074 	movhi	r4,4097
100026b0:	210e9404 	addi	r4,r4,14928
100026b4:	0004b480 	call	10004b48 <puts>
100026b8:	00000306 	br	100026c8 <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
100026bc:	01040074 	movhi	r4,4097
100026c0:	210e9b04 	addi	r4,r4,14956
100026c4:	0004b480 	call	10004b48 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
100026c8:	00031c40 	call	100031c4 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100026cc:	00000306 	br	100026dc <main+0x3ec>
	{
		UsbSetAddress();
100026d0:	00031c40 	call	100031c4 <UsbSetAddress>
		usleep(10*1000);
100026d4:	0109c404 	movi	r4,10000
100026d8:	00119a80 	call	100119a8 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100026dc:	010000c4 	movi	r4,3
100026e0:	000208c0 	call	1000208c <IO_read>
100026e4:	10bfffcc 	andi	r2,r2,65535
100026e8:	1080040c 	andi	r2,r2,16
100026ec:	103ff826 	beq	r2,zero,100026d0 <__alt_data_end+0xf80026d0>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100026f0:	00040640 	call	10004064 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100026f4:	01414184 	movi	r5,1286
100026f8:	01000084 	movi	r4,2
100026fc:	00020040 	call	10002004 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10002700:	0009883a 	mov	r4,zero
10002704:	000208c0 	call	1000208c <IO_read>
10002708:	10bfffcc 	andi	r2,r2,65535
1000270c:	100b883a 	mov	r5,r2
10002710:	01040074 	movhi	r4,4097
10002714:	210ea204 	addi	r4,r4,14984
10002718:	0004a4c0 	call	10004a4c <printf>

	IO_write(HPI_ADDR,0x0508); // n
1000271c:	01414204 	movi	r5,1288
10002720:	01000084 	movi	r4,2
10002724:	00020040 	call	10002004 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002728:	0009883a 	mov	r4,zero
1000272c:	000208c0 	call	1000208c <IO_read>
10002730:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10002734:	e0bffa0b 	ldhu	r2,-24(fp)
10002738:	100b883a 	mov	r5,r2
1000273c:	01040074 	movhi	r4,4097
10002740:	210ead04 	addi	r4,r4,15028
10002744:	0004a4c0 	call	10004a4c <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10002748:	e0bffa0b 	ldhu	r2,-24(fp)
1000274c:	108000e0 	cmpeqi	r2,r2,3
10002750:	1000031e 	bne	r2,zero,10002760 <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
10002754:	00040e80 	call	100040e8 <UsbGetRetryCnt>
10002758:	e0bffa0d 	sth	r2,-24(fp)

		goto USB_HOT_PLUG;
1000275c:	003eef06 	br	1000231c <__alt_data_end+0xf800231c>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10002760:	01040074 	movhi	r4,4097
10002764:	210eb904 	addi	r4,r4,15076
10002768:	0004b480 	call	10004b48 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
1000276c:	00032c40 	call	100032c4 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002770:	00000306 	br	10002780 <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10002774:	00032c40 	call	100032c4 <UsbGetDeviceDesc1>
		usleep(10*1000);
10002778:	0109c404 	movi	r4,10000
1000277c:	00119a80 	call	100119a8 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002780:	010000c4 	movi	r4,3
10002784:	000208c0 	call	1000208c <IO_read>
10002788:	10bfffcc 	andi	r2,r2,65535
1000278c:	1080040c 	andi	r2,r2,16
10002790:	103ff826 	beq	r2,zero,10002774 <__alt_data_end+0xf8002774>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10002794:	00040640 	call	10004064 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10002798:	01414184 	movi	r5,1286
1000279c:	01000084 	movi	r4,2
100027a0:	00020040 	call	10002004 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100027a4:	0009883a 	mov	r4,zero
100027a8:	000208c0 	call	1000208c <IO_read>
100027ac:	10bfffcc 	andi	r2,r2,65535
100027b0:	100b883a 	mov	r5,r2
100027b4:	01040074 	movhi	r4,4097
100027b8:	210ec804 	addi	r4,r4,15136
100027bc:	0004a4c0 	call	10004a4c <printf>

	IO_write(HPI_ADDR,0x0508);
100027c0:	01414204 	movi	r5,1288
100027c4:	01000084 	movi	r4,2
100027c8:	00020040 	call	10002004 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100027cc:	0009883a 	mov	r4,zero
100027d0:	000208c0 	call	1000208c <IO_read>
100027d4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100027d8:	e0bffa0b 	ldhu	r2,-24(fp)
100027dc:	100b883a 	mov	r5,r2
100027e0:	01040074 	movhi	r4,4097
100027e4:	210ed304 	addi	r4,r4,15180
100027e8:	0004a4c0 	call	10004a4c <printf>
	while (usb_ctl_val != 0x03)
100027ec:	00000206 	br	100027f8 <main+0x508>
	{
		usb_ctl_val = UsbGetRetryCnt();
100027f0:	00040e80 	call	100040e8 <UsbGetRetryCnt>
100027f4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100027f8:	e0bffa0b 	ldhu	r2,-24(fp)
100027fc:	108000d8 	cmpnei	r2,r2,3
10002800:	103ffb1e 	bne	r2,zero,100027f0 <__alt_data_end+0xf80027f0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10002804:	01040074 	movhi	r4,4097
10002808:	210edf04 	addi	r4,r4,15228
1000280c:	0004b480 	call	10004b48 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10002810:	000340c0 	call	1000340c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002814:	00000306 	br	10002824 <main+0x534>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10002818:	000340c0 	call	1000340c <UsbGetDeviceDesc2>
		usleep(10*1000);
1000281c:	0109c404 	movi	r4,10000
10002820:	00119a80 	call	100119a8 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002824:	010000c4 	movi	r4,3
10002828:	000208c0 	call	1000208c <IO_read>
1000282c:	10bfffcc 	andi	r2,r2,65535
10002830:	1080040c 	andi	r2,r2,16
10002834:	103ff826 	beq	r2,zero,10002818 <__alt_data_end+0xf8002818>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10002838:	00040640 	call	10004064 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000283c:	01414184 	movi	r5,1286
10002840:	01000084 	movi	r4,2
10002844:	00020040 	call	10002004 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10002848:	0009883a 	mov	r4,zero
1000284c:	000208c0 	call	1000208c <IO_read>
10002850:	10bfffcc 	andi	r2,r2,65535
10002854:	100b883a 	mov	r5,r2
10002858:	01040074 	movhi	r4,4097
1000285c:	210ec804 	addi	r4,r4,15136
10002860:	0004a4c0 	call	10004a4c <printf>

	IO_write(HPI_ADDR,0x0508);
10002864:	01414204 	movi	r5,1288
10002868:	01000084 	movi	r4,2
1000286c:	00020040 	call	10002004 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002870:	0009883a 	mov	r4,zero
10002874:	000208c0 	call	1000208c <IO_read>
10002878:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
1000287c:	e0bffa0b 	ldhu	r2,-24(fp)
10002880:	100b883a 	mov	r5,r2
10002884:	01040074 	movhi	r4,4097
10002888:	210ed304 	addi	r4,r4,15180
1000288c:	0004a4c0 	call	10004a4c <printf>
	while (usb_ctl_val != 0x03)
10002890:	00000206 	br	1000289c <main+0x5ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
10002894:	00040e80 	call	100040e8 <UsbGetRetryCnt>
10002898:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000289c:	e0bffa0b 	ldhu	r2,-24(fp)
100028a0:	108000d8 	cmpnei	r2,r2,3
100028a4:	103ffb1e 	bne	r2,zero,10002894 <__alt_data_end+0xf8002894>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100028a8:	01040074 	movhi	r4,4097
100028ac:	210ef304 	addi	r4,r4,15308
100028b0:	0004b480 	call	10004b48 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
100028b4:	00035e40 	call	100035e4 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100028b8:	00000306 	br	100028c8 <main+0x5d8>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100028bc:	00035e40 	call	100035e4 <UsbGetConfigDesc1>
		usleep(10*1000);
100028c0:	0109c404 	movi	r4,10000
100028c4:	00119a80 	call	100119a8 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100028c8:	010000c4 	movi	r4,3
100028cc:	000208c0 	call	1000208c <IO_read>
100028d0:	10bfffcc 	andi	r2,r2,65535
100028d4:	1080040c 	andi	r2,r2,16
100028d8:	103ff826 	beq	r2,zero,100028bc <__alt_data_end+0xf80028bc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100028dc:	00040640 	call	10004064 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100028e0:	01414184 	movi	r5,1286
100028e4:	01000084 	movi	r4,2
100028e8:	00020040 	call	10002004 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
100028ec:	0009883a 	mov	r4,zero
100028f0:	000208c0 	call	1000208c <IO_read>
100028f4:	10bfffcc 	andi	r2,r2,65535
100028f8:	100b883a 	mov	r5,r2
100028fc:	01040074 	movhi	r4,4097
10002900:	210f0504 	addi	r4,r4,15380
10002904:	0004a4c0 	call	10004a4c <printf>

	IO_write(HPI_ADDR,0x0508);
10002908:	01414204 	movi	r5,1288
1000290c:	01000084 	movi	r4,2
10002910:	00020040 	call	10002004 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002914:	0009883a 	mov	r4,zero
10002918:	000208c0 	call	1000208c <IO_read>
1000291c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10002920:	e0bffa0b 	ldhu	r2,-24(fp)
10002924:	100b883a 	mov	r5,r2
10002928:	01040074 	movhi	r4,4097
1000292c:	210f1004 	addi	r4,r4,15424
10002930:	0004a4c0 	call	10004a4c <printf>
	while (usb_ctl_val != 0x03)
10002934:	00000206 	br	10002940 <main+0x650>
	{
		usb_ctl_val = UsbGetRetryCnt();
10002938:	00040e80 	call	100040e8 <UsbGetRetryCnt>
1000293c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10002940:	e0bffa0b 	ldhu	r2,-24(fp)
10002944:	108000d8 	cmpnei	r2,r2,3
10002948:	103ffb1e 	bne	r2,zero,10002938 <__alt_data_end+0xf8002938>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
1000294c:	01040074 	movhi	r4,4097
10002950:	210f1c04 	addi	r4,r4,15472
10002954:	0004b480 	call	10004b48 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10002958:	00037740 	call	10003774 <UsbGetConfigDesc2>

	usleep(100*1000);
1000295c:	010000b4 	movhi	r4,2
10002960:	2121a804 	addi	r4,r4,-31072
10002964:	00119a80 	call	100119a8 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002968:	00000306 	br	10002978 <main+0x688>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
1000296c:	00037740 	call	10003774 <UsbGetConfigDesc2>
		usleep(10*1000);
10002970:	0109c404 	movi	r4,10000
10002974:	00119a80 	call	100119a8 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002978:	010000c4 	movi	r4,3
1000297c:	000208c0 	call	1000208c <IO_read>
10002980:	10bfffcc 	andi	r2,r2,65535
10002984:	1080040c 	andi	r2,r2,16
10002988:	103ff826 	beq	r2,zero,1000296c <__alt_data_end+0xf800296c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000298c:	00040640 	call	10004064 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10002990:	01414184 	movi	r5,1286
10002994:	01000084 	movi	r4,2
10002998:	00020040 	call	10002004 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000299c:	0009883a 	mov	r4,zero
100029a0:	000208c0 	call	1000208c <IO_read>
100029a4:	10bfffcc 	andi	r2,r2,65535
100029a8:	100b883a 	mov	r5,r2
100029ac:	01040074 	movhi	r4,4097
100029b0:	210f2f04 	addi	r4,r4,15548
100029b4:	0004a4c0 	call	10004a4c <printf>

	IO_write(HPI_ADDR,0x0508);
100029b8:	01414204 	movi	r5,1288
100029bc:	01000084 	movi	r4,2
100029c0:	00020040 	call	10002004 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100029c4:	0009883a 	mov	r4,zero
100029c8:	000208c0 	call	1000208c <IO_read>
100029cc:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
100029d0:	e0bffa0b 	ldhu	r2,-24(fp)
100029d4:	100b883a 	mov	r5,r2
100029d8:	01040074 	movhi	r4,4097
100029dc:	210f3a04 	addi	r4,r4,15592
100029e0:	0004a4c0 	call	10004a4c <printf>
	while (usb_ctl_val != 0x03)
100029e4:	00000206 	br	100029f0 <main+0x700>
	{
		usb_ctl_val = UsbGetRetryCnt();
100029e8:	00040e80 	call	100040e8 <UsbGetRetryCnt>
100029ec:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100029f0:	e0bffa0b 	ldhu	r2,-24(fp)
100029f4:	108000d8 	cmpnei	r2,r2,3
100029f8:	103ffb1e 	bne	r2,zero,100029e8 <__alt_data_end+0xf80029e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
100029fc:	01040074 	movhi	r4,4097
10002a00:	210f4604 	addi	r4,r4,15640
10002a04:	0004b480 	call	10004b48 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10002a08:	01415b04 	movi	r5,1388
10002a0c:	01000084 	movi	r4,2
10002a10:	00020040 	call	10002004 <IO_write>
	code = IO_read(HPI_DATA);
10002a14:	0009883a 	mov	r4,zero
10002a18:	000208c0 	call	1000208c <IO_read>
10002a1c:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10002a20:	e0bffe8b 	ldhu	r2,-6(fp)
10002a24:	108000cc 	andi	r2,r2,3
10002a28:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10002a2c:	e0bffe8b 	ldhu	r2,-6(fp)
10002a30:	100b883a 	mov	r5,r2
10002a34:	01040074 	movhi	r4,4097
10002a38:	210f5904 	addi	r4,r4,15716
10002a3c:	0004a4c0 	call	10004a4c <printf>

	if (code == 0x01)
10002a40:	e0bffe8b 	ldhu	r2,-6(fp)
10002a44:	10800058 	cmpnei	r2,r2,1
10002a48:	1000041e 	bne	r2,zero,10002a5c <main+0x76c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10002a4c:	01040074 	movhi	r4,4097
10002a50:	210f5c04 	addi	r4,r4,15728
10002a54:	0004b480 	call	10004b48 <puts>
10002a58:	00000306 	br	10002a68 <main+0x778>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10002a5c:	01040074 	movhi	r4,4097
10002a60:	210f6b04 	addi	r4,r4,15788
10002a64:	0004b480 	call	10004b48 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10002a68:	01415d84 	movi	r5,1398
10002a6c:	01000084 	movi	r4,2
10002a70:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x073F);
10002a74:	0141cfc4 	movi	r5,1855
10002a78:	0009883a 	mov	r4,zero
10002a7c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x8105);
10002a80:	01604154 	movui	r5,33029
10002a84:	0009883a 	mov	r4,zero
10002a88:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0003);
10002a8c:	014000c4 	movi	r5,3
10002a90:	0009883a 	mov	r4,zero
10002a94:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);
10002a98:	01400204 	movi	r5,8
10002a9c:	0009883a 	mov	r4,zero
10002aa0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10002aa4:	016b0294 	movui	r5,44042
10002aa8:	0009883a 	mov	r4,zero
10002aac:	00020040 	call	10002004 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10002ab0:	01415d84 	movi	r5,1398
10002ab4:	01006c04 	movi	r4,432
10002ab8:	00030740 	call	10003074 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10002abc:	01415f04 	movi	r5,1404
10002ac0:	01000084 	movi	r4,2
10002ac4:	00020040 	call	10002004 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10002ac8:	0009883a 	mov	r4,zero
10002acc:	000208c0 	call	1000208c <IO_read>
10002ad0:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10002ad4:	e0bfff03 	ldbu	r2,-4(fp)
10002ad8:	100b883a 	mov	r5,r2
10002adc:	01040074 	movhi	r4,4097
10002ae0:	210f7404 	addi	r4,r4,15824
10002ae4:	0004a4c0 	call	10004a4c <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10002ae8:	00039dc0 	call	100039dc <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002aec:	00000306 	br	10002afc <main+0x80c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10002af0:	00039dc0 	call	100039dc <UsbSetConfig>
		usleep(10*1000);
10002af4:	0109c404 	movi	r4,10000
10002af8:	00119a80 	call	100119a8 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002afc:	010000c4 	movi	r4,3
10002b00:	000208c0 	call	1000208c <IO_read>
10002b04:	10bfffcc 	andi	r2,r2,65535
10002b08:	1080040c 	andi	r2,r2,16
10002b0c:	103ff826 	beq	r2,zero,10002af0 <__alt_data_end+0xf8002af0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10002b10:	00040640 	call	10004064 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10002b14:	01414184 	movi	r5,1286
10002b18:	01000084 	movi	r4,2
10002b1c:	00020040 	call	10002004 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10002b20:	0009883a 	mov	r4,zero
10002b24:	000208c0 	call	1000208c <IO_read>
10002b28:	10bfffcc 	andi	r2,r2,65535
10002b2c:	100b883a 	mov	r5,r2
10002b30:	01040074 	movhi	r4,4097
10002b34:	210f7e04 	addi	r4,r4,15864
10002b38:	0004a4c0 	call	10004a4c <printf>

	IO_write(HPI_ADDR,0x0508);
10002b3c:	01414204 	movi	r5,1288
10002b40:	01000084 	movi	r4,2
10002b44:	00020040 	call	10002004 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002b48:	0009883a 	mov	r4,zero
10002b4c:	000208c0 	call	1000208c <IO_read>
10002b50:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10002b54:	e0bffa0b 	ldhu	r2,-24(fp)
10002b58:	100b883a 	mov	r5,r2
10002b5c:	01040074 	movhi	r4,4097
10002b60:	210f8904 	addi	r4,r4,15908
10002b64:	0004a4c0 	call	10004a4c <printf>
	while (usb_ctl_val != 0x03)
10002b68:	00000206 	br	10002b74 <main+0x884>
	{
		usb_ctl_val = UsbGetRetryCnt();
10002b6c:	00040e80 	call	100040e8 <UsbGetRetryCnt>
10002b70:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10002b74:	e0bffa0b 	ldhu	r2,-24(fp)
10002b78:	108000d8 	cmpnei	r2,r2,3
10002b7c:	103ffb1e 	bne	r2,zero,10002b6c <__alt_data_end+0xf8002b6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10002b80:	01040074 	movhi	r4,4097
10002b84:	210f9504 	addi	r4,r4,15956
10002b88:	0004b480 	call	10004b48 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10002b8c:	0003adc0 	call	10003adc <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002b90:	00000306 	br	10002ba0 <main+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10002b94:	0003adc0 	call	10003adc <UsbClassRequest>
		usleep(10*1000);
10002b98:	0109c404 	movi	r4,10000
10002b9c:	00119a80 	call	100119a8 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002ba0:	010000c4 	movi	r4,3
10002ba4:	000208c0 	call	1000208c <IO_read>
10002ba8:	10bfffcc 	andi	r2,r2,65535
10002bac:	1080040c 	andi	r2,r2,16
10002bb0:	103ff826 	beq	r2,zero,10002b94 <__alt_data_end+0xf8002b94>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10002bb4:	00040640 	call	10004064 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10002bb8:	01414184 	movi	r5,1286
10002bbc:	01000084 	movi	r4,2
10002bc0:	00020040 	call	10002004 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10002bc4:	0009883a 	mov	r4,zero
10002bc8:	000208c0 	call	1000208c <IO_read>
10002bcc:	10bfffcc 	andi	r2,r2,65535
10002bd0:	100b883a 	mov	r5,r2
10002bd4:	01040074 	movhi	r4,4097
10002bd8:	210fa704 	addi	r4,r4,16028
10002bdc:	0004a4c0 	call	10004a4c <printf>

	IO_write(HPI_ADDR,0x0508);
10002be0:	01414204 	movi	r5,1288
10002be4:	01000084 	movi	r4,2
10002be8:	00020040 	call	10002004 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002bec:	0009883a 	mov	r4,zero
10002bf0:	000208c0 	call	1000208c <IO_read>
10002bf4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10002bf8:	e0bffa0b 	ldhu	r2,-24(fp)
10002bfc:	100b883a 	mov	r5,r2
10002c00:	01040074 	movhi	r4,4097
10002c04:	210fb204 	addi	r4,r4,16072
10002c08:	0004a4c0 	call	10004a4c <printf>
	while (usb_ctl_val != 0x03)
10002c0c:	00000206 	br	10002c18 <main+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
10002c10:	00040e80 	call	100040e8 <UsbGetRetryCnt>
10002c14:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10002c18:	e0bffa0b 	ldhu	r2,-24(fp)
10002c1c:	108000d8 	cmpnei	r2,r2,3
10002c20:	103ffb1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10002c24:	01040074 	movhi	r4,4097
10002c28:	210fbe04 	addi	r4,r4,16120
10002c2c:	0004b480 	call	10004b48 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10002c30:	0003bdc0 	call	10003bdc <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002c34:	00000306 	br	10002c44 <main+0x954>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10002c38:	0003bdc0 	call	10003bdc <UsbGetHidDesc>
		usleep(10*1000);
10002c3c:	0109c404 	movi	r4,10000
10002c40:	00119a80 	call	100119a8 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002c44:	010000c4 	movi	r4,3
10002c48:	000208c0 	call	1000208c <IO_read>
10002c4c:	10bfffcc 	andi	r2,r2,65535
10002c50:	1080040c 	andi	r2,r2,16
10002c54:	103ff826 	beq	r2,zero,10002c38 <__alt_data_end+0xf8002c38>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10002c58:	00040640 	call	10004064 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10002c5c:	01414184 	movi	r5,1286
10002c60:	01000084 	movi	r4,2
10002c64:	00020040 	call	10002004 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10002c68:	0009883a 	mov	r4,zero
10002c6c:	000208c0 	call	1000208c <IO_read>
10002c70:	10bfffcc 	andi	r2,r2,65535
10002c74:	100b883a 	mov	r5,r2
10002c78:	01040074 	movhi	r4,4097
10002c7c:	210fa704 	addi	r4,r4,16028
10002c80:	0004a4c0 	call	10004a4c <printf>

	IO_write(HPI_ADDR,0x0508);
10002c84:	01414204 	movi	r5,1288
10002c88:	01000084 	movi	r4,2
10002c8c:	00020040 	call	10002004 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002c90:	0009883a 	mov	r4,zero
10002c94:	000208c0 	call	1000208c <IO_read>
10002c98:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10002c9c:	e0bffa0b 	ldhu	r2,-24(fp)
10002ca0:	100b883a 	mov	r5,r2
10002ca4:	01040074 	movhi	r4,4097
10002ca8:	210fb204 	addi	r4,r4,16072
10002cac:	0004a4c0 	call	10004a4c <printf>
	while (usb_ctl_val != 0x03)
10002cb0:	00000206 	br	10002cbc <main+0x9cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10002cb4:	00040e80 	call	100040e8 <UsbGetRetryCnt>
10002cb8:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10002cbc:	e0bffa0b 	ldhu	r2,-24(fp)
10002cc0:	108000d8 	cmpnei	r2,r2,3
10002cc4:	103ffb1e 	bne	r2,zero,10002cb4 <__alt_data_end+0xf8002cb4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10002cc8:	01040074 	movhi	r4,4097
10002ccc:	210fd004 	addi	r4,r4,16192
10002cd0:	0004b480 	call	10004b48 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10002cd4:	0003d240 	call	10003d24 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002cd8:	00000306 	br	10002ce8 <main+0x9f8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10002cdc:	0003d240 	call	10003d24 <UsbGetReportDesc>
		usleep(10*1000);
10002ce0:	0109c404 	movi	r4,10000
10002ce4:	00119a80 	call	100119a8 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002ce8:	010000c4 	movi	r4,3
10002cec:	000208c0 	call	1000208c <IO_read>
10002cf0:	10bfffcc 	andi	r2,r2,65535
10002cf4:	1080040c 	andi	r2,r2,16
10002cf8:	103ff826 	beq	r2,zero,10002cdc <__alt_data_end+0xf8002cdc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10002cfc:	00040640 	call	10004064 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10002d00:	01414184 	movi	r5,1286
10002d04:	01000084 	movi	r4,2
10002d08:	00020040 	call	10002004 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10002d0c:	0009883a 	mov	r4,zero
10002d10:	000208c0 	call	1000208c <IO_read>
10002d14:	10bfffcc 	andi	r2,r2,65535
10002d18:	100b883a 	mov	r5,r2
10002d1c:	01040074 	movhi	r4,4097
10002d20:	210fe404 	addi	r4,r4,16272
10002d24:	0004a4c0 	call	10004a4c <printf>

	IO_write(HPI_ADDR,0x0508);
10002d28:	01414204 	movi	r5,1288
10002d2c:	01000084 	movi	r4,2
10002d30:	00020040 	call	10002004 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002d34:	0009883a 	mov	r4,zero
10002d38:	000208c0 	call	1000208c <IO_read>
10002d3c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10002d40:	e0bffa0b 	ldhu	r2,-24(fp)
10002d44:	100b883a 	mov	r5,r2
10002d48:	01040074 	movhi	r4,4097
10002d4c:	210ff004 	addi	r4,r4,16320
10002d50:	0004a4c0 	call	10004a4c <printf>
	while (usb_ctl_val != 0x03)
10002d54:	00000206 	br	10002d60 <main+0xa70>
	{
		usb_ctl_val = UsbGetRetryCnt();
10002d58:	00040e80 	call	100040e8 <UsbGetRetryCnt>
10002d5c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10002d60:	e0bffa0b 	ldhu	r2,-24(fp)
10002d64:	108000d8 	cmpnei	r2,r2,3
10002d68:	103ffb1e 	bne	r2,zero,10002d58 <__alt_data_end+0xf8002d58>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10002d6c:	01040074 	movhi	r4,4097
10002d70:	210ffc04 	addi	r4,r4,16368
10002d74:	0004b480 	call	10004b48 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10002d78:	0109c404 	movi	r4,10000
10002d7c:	00119a80 	call	100119a8 <usleep>
	// test_init();
	game_init();
10002d80:	00017140 	call	10001714 <game_init>
	int game_active = 0;
10002d84:	e03ffb15 	stw	zero,-20(fp)
	while(1)
	{
		toggle++;
10002d88:	e0bffa83 	ldbu	r2,-22(fp)
10002d8c:	10800044 	addi	r2,r2,1
10002d90:	e0bffa85 	stb	r2,-22(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10002d94:	01414004 	movi	r5,1280
10002d98:	01000084 	movi	r4,2
10002d9c:	00020040 	call	10002004 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10002da0:	01414704 	movi	r5,1308
10002da4:	0009883a 	mov	r4,zero
10002da8:	00020040 	call	10002004 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10002dac:	e0bfff03 	ldbu	r2,-4(fp)
10002db0:	108003cc 	andi	r2,r2,15
10002db4:	100b883a 	mov	r5,r2
10002db8:	0009883a 	mov	r4,zero
10002dbc:	00020040 	call	10002004 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10002dc0:	0140a444 	movi	r5,657
10002dc4:	0009883a 	mov	r4,zero
10002dc8:	00020040 	call	10002004 <IO_write>
		if(toggle%2)
10002dcc:	e0bffa83 	ldbu	r2,-22(fp)
10002dd0:	1080004c 	andi	r2,r2,1
10002dd4:	10803fcc 	andi	r2,r2,255
10002dd8:	10000426 	beq	r2,zero,10002dec <main+0xafc>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10002ddc:	01400044 	movi	r5,1
10002de0:	0009883a 	mov	r4,zero
10002de4:	00020040 	call	10002004 <IO_write>
10002de8:	00000306 	br	10002df8 <main+0xb08>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10002dec:	01401044 	movi	r5,65
10002df0:	0009883a 	mov	r4,zero
10002df4:	00020040 	call	10002004 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10002df8:	014004c4 	movi	r5,19
10002dfc:	0009883a 	mov	r4,zero
10002e00:	00020040 	call	10002004 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10002e04:	000b883a 	mov	r5,zero
10002e08:	0009883a 	mov	r4,zero
10002e0c:	00020040 	call	10002004 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002e10:	01414004 	movi	r5,1280
10002e14:	01006c04 	movi	r4,432
10002e18:	00030740 	call	10003074 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002e1c:	00002406 	br	10002eb0 <main+0xbc0>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10002e20:	01414004 	movi	r5,1280
10002e24:	01000084 	movi	r4,2
10002e28:	00020040 	call	10002004 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10002e2c:	01414704 	movi	r5,1308
10002e30:	0009883a 	mov	r4,zero
10002e34:	00020040 	call	10002004 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10002e38:	e0bfff03 	ldbu	r2,-4(fp)
10002e3c:	108003cc 	andi	r2,r2,15
10002e40:	100b883a 	mov	r5,r2
10002e44:	0009883a 	mov	r4,zero
10002e48:	00020040 	call	10002004 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10002e4c:	0140a444 	movi	r5,657
10002e50:	0009883a 	mov	r4,zero
10002e54:	00020040 	call	10002004 <IO_write>
			if(toggle%2)
10002e58:	e0bffa83 	ldbu	r2,-22(fp)
10002e5c:	1080004c 	andi	r2,r2,1
10002e60:	10803fcc 	andi	r2,r2,255
10002e64:	10000426 	beq	r2,zero,10002e78 <main+0xb88>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10002e68:	01400044 	movi	r5,1
10002e6c:	0009883a 	mov	r4,zero
10002e70:	00020040 	call	10002004 <IO_write>
10002e74:	00000306 	br	10002e84 <main+0xb94>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10002e78:	01401044 	movi	r5,65
10002e7c:	0009883a 	mov	r4,zero
10002e80:	00020040 	call	10002004 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10002e84:	014004c4 	movi	r5,19
10002e88:	0009883a 	mov	r4,zero
10002e8c:	00020040 	call	10002004 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10002e90:	000b883a 	mov	r5,zero
10002e94:	0009883a 	mov	r4,zero
10002e98:	00020040 	call	10002004 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002e9c:	01414004 	movi	r5,1280
10002ea0:	01006c04 	movi	r4,432
10002ea4:	00030740 	call	10003074 <UsbWrite>
			usleep(10*1000);
10002ea8:	0109c404 	movi	r4,10000
10002eac:	00119a80 	call	100119a8 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002eb0:	010000c4 	movi	r4,3
10002eb4:	000208c0 	call	1000208c <IO_read>
10002eb8:	10bfffcc 	andi	r2,r2,65535
10002ebc:	1080040c 	andi	r2,r2,16
10002ec0:	103fd726 	beq	r2,zero,10002e20 <__alt_data_end+0xf8002e20>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10002ec4:	00040640 	call	10004064 <UsbWaitTDListDone>
10002ec8:	e0bffa0d 	sth	r2,-24(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in
		// subsequent addresses.
		keycode = UsbRead(0x051e);
10002ecc:	01014784 	movi	r4,1310
10002ed0:	00030cc0 	call	100030cc <UsbRead>
10002ed4:	10bfffcc 	andi	r2,r2,65535
10002ed8:	e0bffd15 	stw	r2,-12(fp)

		// -------------------------------main algorithm begin-------------------------------
		if (game_active)
10002edc:	e0bffb17 	ldw	r2,-20(fp)
10002ee0:	10000326 	beq	r2,zero,10002ef0 <main+0xc00>
		{
			game_run(keycode);
10002ee4:	e13ffd17 	ldw	r4,-12(fp)
10002ee8:	00018c00 	call	100018c0 <game_run>
10002eec:	00000b06 	br	10002f1c <main+0xc2c>
		}
		else
		{
			if (((keycode&0xFF) == KEY_SPACE) || (((keycode>>8) & 0xFF) == KEY_SPACE))  // if space key is pressed
10002ef0:	e0bffd17 	ldw	r2,-12(fp)
10002ef4:	10803fcc 	andi	r2,r2,255
10002ef8:	10800b20 	cmpeqi	r2,r2,44
10002efc:	1000051e 	bne	r2,zero,10002f14 <main+0xc24>
10002f00:	e0bffd17 	ldw	r2,-12(fp)
10002f04:	1005d23a 	srai	r2,r2,8
10002f08:	10803fcc 	andi	r2,r2,255
10002f0c:	10800b18 	cmpnei	r2,r2,44
10002f10:	1000021e 	bne	r2,zero,10002f1c <main+0xc2c>
			{
				game_active = 1;
10002f14:	00800044 	movi	r2,1
10002f18:	e0bffb15 	stw	r2,-20(fp)
		// -------------------------------main algorithm end-------------------------------

//		printf("\nfirst two keycode values are %04x\n",keycode);
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff;
10002f1c:	00800074 	movhi	r2,1
10002f20:	10842404 	addi	r2,r2,4240
10002f24:	e0fffd17 	ldw	r3,-12(fp)
10002f28:	18c03fcc 	andi	r3,r3,255
10002f2c:	10c0000d 	sth	r3,0(r2)

		usleep(200);//usleep(5000);
10002f30:	01003204 	movi	r4,200
10002f34:	00119a80 	call	100119a8 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10002f38:	d0a6e60b 	ldhu	r2,-25704(gp)
10002f3c:	10bfffcc 	andi	r2,r2,65535
10002f40:	1009883a 	mov	r4,r2
10002f44:	00030cc0 	call	100030cc <UsbRead>
10002f48:	e0bffa0d 	sth	r2,-24(fp)

		if(!(usb_ctl_val & no_device))
10002f4c:	d0a6e68b 	ldhu	r2,-25702(gp)
10002f50:	e0fffa0b 	ldhu	r3,-24(fp)
10002f54:	1884703a 	and	r2,r3,r2
10002f58:	10bfffcc 	andi	r2,r2,65535
10002f5c:	10003f1e 	bne	r2,zero,1000305c <main+0xd6c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10002f60:	e03ffac5 	stb	zero,-21(fp)
10002f64:	00000f06 	br	10002fa4 <main+0xcb4>
			{
				usleep(5*1000);
10002f68:	0104e204 	movi	r4,5000
10002f6c:	00119a80 	call	100119a8 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10002f70:	d0a6e60b 	ldhu	r2,-25704(gp)
10002f74:	10bfffcc 	andi	r2,r2,65535
10002f78:	1009883a 	mov	r4,r2
10002f7c:	00030cc0 	call	100030cc <UsbRead>
10002f80:	e0bffa0d 	sth	r2,-24(fp)
				if(usb_ctl_val & no_device) break;
10002f84:	d0a6e68b 	ldhu	r2,-25702(gp)
10002f88:	e0fffa0b 	ldhu	r3,-24(fp)
10002f8c:	1884703a 	and	r2,r3,r2
10002f90:	10bfffcc 	andi	r2,r2,65535
10002f94:	1000071e 	bne	r2,zero,10002fb4 <main+0xcc4>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10002f98:	e0bffac3 	ldbu	r2,-21(fp)
10002f9c:	10800044 	addi	r2,r2,1
10002fa0:	e0bffac5 	stb	r2,-21(fp)
10002fa4:	e0bffac3 	ldbu	r2,-21(fp)
10002fa8:	108001f0 	cmpltui	r2,r2,7
10002fac:	103fee1e 	bne	r2,zero,10002f68 <__alt_data_end+0xf8002f68>
10002fb0:	00000106 	br	10002fb8 <main+0xcc8>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
10002fb4:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10002fb8:	d0a6e68b 	ldhu	r2,-25702(gp)
10002fbc:	e0fffa0b 	ldhu	r3,-24(fp)
10002fc0:	1884703a 	and	r2,r3,r2
10002fc4:	10bfffcc 	andi	r2,r2,65535
10002fc8:	1000241e 	bne	r2,zero,1000305c <main+0xd6c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10002fcc:	01040074 	movhi	r4,4097
10002fd0:	21101004 	addi	r4,r4,16448
10002fd4:	0004b480 	call	10004b48 <puts>
				printf("[INFO]: please insert again!!! \n");
10002fd8:	01040074 	movhi	r4,4097
10002fdc:	21101b04 	addi	r4,r4,16492
10002fe0:	0004b480 	call	10004b48 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10002fe4:	00001d06 	br	1000305c <main+0xd6c>
		{
			usb_ctl_val = UsbRead(ctl_reg);
10002fe8:	d0a6e60b 	ldhu	r2,-25704(gp)
10002fec:	10bfffcc 	andi	r2,r2,65535
10002ff0:	1009883a 	mov	r4,r2
10002ff4:	00030cc0 	call	100030cc <UsbRead>
10002ff8:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
10002ffc:	0104e204 	movi	r4,5000
10003000:	00119a80 	call	100119a8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10003004:	d0a6e60b 	ldhu	r2,-25704(gp)
10003008:	10bfffcc 	andi	r2,r2,65535
1000300c:	1009883a 	mov	r4,r2
10003010:	00030cc0 	call	100030cc <UsbRead>
10003014:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
10003018:	0104e204 	movi	r4,5000
1000301c:	00119a80 	call	100119a8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10003020:	d0a6e60b 	ldhu	r2,-25704(gp)
10003024:	10bfffcc 	andi	r2,r2,65535
10003028:	1009883a 	mov	r4,r2
1000302c:	00030cc0 	call	100030cc <UsbRead>
10003030:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
10003034:	0104e204 	movi	r4,5000
10003038:	00119a80 	call	100119a8 <usleep>

			if(usb_ctl_val & no_device)
1000303c:	d0a6e68b 	ldhu	r2,-25702(gp)
10003040:	e0fffa0b 	ldhu	r3,-24(fp)
10003044:	1884703a 	and	r2,r3,r2
10003048:	10bfffcc 	andi	r2,r2,65535
1000304c:	10000126 	beq	r2,zero,10003054 <main+0xd64>
				goto USB_HOT_PLUG;
10003050:	003cb206 	br	1000231c <__alt_data_end+0xf800231c>

			usleep(200);
10003054:	01003204 	movi	r4,200
10003058:	00119a80 	call	100119a8 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
1000305c:	d0a6e68b 	ldhu	r2,-25702(gp)
10003060:	e0fffa0b 	ldhu	r3,-24(fp)
10003064:	1884703a 	and	r2,r3,r2
10003068:	10bfffcc 	andi	r2,r2,65535
1000306c:	103fde26 	beq	r2,zero,10002fe8 <__alt_data_end+0xf8002fe8>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
10003070:	003f4506 	br	10002d88 <__alt_data_end+0xf8002d88>

10003074 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10003074:	defffc04 	addi	sp,sp,-16
10003078:	dfc00315 	stw	ra,12(sp)
1000307c:	df000215 	stw	fp,8(sp)
10003080:	df000204 	addi	fp,sp,8
10003084:	2007883a 	mov	r3,r4
10003088:	2805883a 	mov	r2,r5
1000308c:	e0fffe0d 	sth	r3,-8(fp)
10003090:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10003094:	e0bffe0b 	ldhu	r2,-8(fp)
10003098:	100b883a 	mov	r5,r2
1000309c:	01000084 	movi	r4,2
100030a0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA, Data);
100030a4:	e0bfff0b 	ldhu	r2,-4(fp)
100030a8:	100b883a 	mov	r5,r2
100030ac:	0009883a 	mov	r4,zero
100030b0:	00020040 	call	10002004 <IO_write>
}
100030b4:	0001883a 	nop
100030b8:	e037883a 	mov	sp,fp
100030bc:	dfc00117 	ldw	ra,4(sp)
100030c0:	df000017 	ldw	fp,0(sp)
100030c4:	dec00204 	addi	sp,sp,8
100030c8:	f800283a 	ret

100030cc <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
100030cc:	defffd04 	addi	sp,sp,-12
100030d0:	dfc00215 	stw	ra,8(sp)
100030d4:	df000115 	stw	fp,4(sp)
100030d8:	df000104 	addi	fp,sp,4
100030dc:	2005883a 	mov	r2,r4
100030e0:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
100030e4:	e0bfff0b 	ldhu	r2,-4(fp)
100030e8:	100b883a 	mov	r5,r2
100030ec:	01000084 	movi	r4,2
100030f0:	00020040 	call	10002004 <IO_write>
	return IO_read(HPI_DATA);
100030f4:	0009883a 	mov	r4,zero
100030f8:	000208c0 	call	1000208c <IO_read>
}
100030fc:	e037883a 	mov	sp,fp
10003100:	dfc00117 	ldw	ra,4(sp)
10003104:	df000017 	ldw	fp,0(sp)
10003108:	dec00204 	addi	sp,sp,8
1000310c:	f800283a 	ret

10003110 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10003110:	defffe04 	addi	sp,sp,-8
10003114:	dfc00115 	stw	ra,4(sp)
10003118:	df000015 	stw	fp,0(sp)
1000311c:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10003120:	017e9414 	movui	r5,64080
10003124:	01000044 	movi	r4,1
10003128:	00020040 	call	10002004 <IO_write>
	usleep(100000);
1000312c:	010000b4 	movhi	r4,2
10003130:	2121a804 	addi	r4,r4,-31072
10003134:	00119a80 	call	100119a8 <usleep>
	printf("[USB INIT]:reset finished!\n");
10003138:	01040074 	movhi	r4,4097
1000313c:	21102304 	addi	r4,r4,16524
10003140:	0004b480 	call	10004b48 <puts>

	usleep(500000);
10003144:	01000234 	movhi	r4,8
10003148:	21284804 	addi	r4,r4,-24288
1000314c:	00119a80 	call	100119a8 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10003150:	01040074 	movhi	r4,4097
10003154:	21102a04 	addi	r4,r4,16552
10003158:	0004b480 	call	10004b48 <puts>
	IO_read(HPI_MAILBOX);
1000315c:	01000044 	movi	r4,1
10003160:	000208c0 	call	1000208c <IO_read>
	IO_read(HPI_STATUS);
10003164:	010000c4 	movi	r4,3
10003168:	000208c0 	call	1000208c <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
1000316c:	01005104 	movi	r4,324
10003170:	00030cc0 	call	100030cc <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10003174:	000b883a 	mov	r5,zero
10003178:	01005104 	movi	r4,324
1000317c:	00030740 	call	10003074 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10003180:	01005204 	movi	r4,328
10003184:	00030cc0 	call	100030cc <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10003188:	000b883a 	mov	r5,zero
1000318c:	01005204 	movi	r4,328
10003190:	00030740 	call	10003074 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10003194:	017fffd4 	movui	r5,65535
10003198:	01302414 	movui	r4,49296
1000319c:	00030740 	call	10003074 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
100031a0:	017fffd4 	movui	r5,65535
100031a4:	01302c14 	movui	r4,49328
100031a8:	00030740 	call	10003074 <UsbWrite>
}
100031ac:	0001883a 	nop
100031b0:	e037883a 	mov	sp,fp
100031b4:	dfc00117 	ldw	ra,4(sp)
100031b8:	df000017 	ldw	fp,0(sp)
100031bc:	dec00204 	addi	sp,sp,8
100031c0:	f800283a 	ret

100031c4 <UsbSetAddress>:


void UsbSetAddress()
{
100031c4:	defffe04 	addi	sp,sp,-8
100031c8:	dfc00115 	stw	ra,4(sp)
100031cc:	df000015 	stw	fp,0(sp)
100031d0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100031d4:	01414004 	movi	r5,1280
100031d8:	01000084 	movi	r4,2
100031dc:	00020040 	call	10002004 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100031e0:	01414304 	movi	r5,1292
100031e4:	0009883a 	mov	r4,zero
100031e8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100031ec:	01400204 	movi	r5,8
100031f0:	0009883a 	mov	r4,zero
100031f4:	00020040 	call	10002004 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100031f8:	01403404 	movi	r5,208
100031fc:	0009883a 	mov	r4,zero
10003200:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003204:	01400044 	movi	r5,1
10003208:	0009883a 	mov	r4,zero
1000320c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003210:	014004c4 	movi	r5,19
10003214:	0009883a 	mov	r4,zero
10003218:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000321c:	01414504 	movi	r5,1300
10003220:	0009883a 	mov	r4,zero
10003224:	00020040 	call	10002004 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10003228:	01414004 	movi	r5,1280
1000322c:	0009883a 	mov	r4,zero
10003230:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0002);
10003234:	01400084 	movi	r5,2
10003238:	0009883a 	mov	r4,zero
1000323c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003240:	000b883a 	mov	r5,zero
10003244:	0009883a 	mov	r4,zero
10003248:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000324c:	000b883a 	mov	r5,zero
10003250:	0009883a 	mov	r4,zero
10003254:	00020040 	call	10002004 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10003258:	000b883a 	mov	r5,zero
1000325c:	0009883a 	mov	r4,zero
10003260:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10003264:	000b883a 	mov	r5,zero
10003268:	0009883a 	mov	r4,zero
1000326c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10003270:	01402404 	movi	r5,144
10003274:	0009883a 	mov	r4,zero
10003278:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000327c:	01401044 	movi	r5,65
10003280:	0009883a 	mov	r4,zero
10003284:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003288:	014004c4 	movi	r5,19
1000328c:	0009883a 	mov	r4,zero
10003290:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003294:	000b883a 	mov	r5,zero
10003298:	0009883a 	mov	r4,zero
1000329c:	00020040 	call	10002004 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100032a0:	01414004 	movi	r5,1280
100032a4:	01006c04 	movi	r4,432
100032a8:	00030740 	call	10003074 <UsbWrite>
}
100032ac:	0001883a 	nop
100032b0:	e037883a 	mov	sp,fp
100032b4:	dfc00117 	ldw	ra,4(sp)
100032b8:	df000017 	ldw	fp,0(sp)
100032bc:	dec00204 	addi	sp,sp,8
100032c0:	f800283a 	ret

100032c4 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
100032c4:	defffe04 	addi	sp,sp,-8
100032c8:	dfc00115 	stw	ra,4(sp)
100032cc:	df000015 	stw	fp,0(sp)
100032d0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100032d4:	01414004 	movi	r5,1280
100032d8:	01000084 	movi	r4,2
100032dc:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x050C);
100032e0:	01414304 	movi	r5,1292
100032e4:	0009883a 	mov	r4,zero
100032e8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100032ec:	01400204 	movi	r5,8
100032f0:	0009883a 	mov	r4,zero
100032f4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100032f8:	0140b404 	movi	r5,720
100032fc:	0009883a 	mov	r4,zero
10003300:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003304:	01400044 	movi	r5,1
10003308:	0009883a 	mov	r4,zero
1000330c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003310:	014004c4 	movi	r5,19
10003314:	0009883a 	mov	r4,zero
10003318:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000331c:	01414504 	movi	r5,1300
10003320:	0009883a 	mov	r4,zero
10003324:	00020040 	call	10002004 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10003328:	0141a004 	movi	r5,1664
1000332c:	0009883a 	mov	r4,zero
10003330:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10003334:	01404004 	movi	r5,256
10003338:	0009883a 	mov	r4,zero
1000333c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003340:	000b883a 	mov	r5,zero
10003344:	0009883a 	mov	r4,zero
10003348:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);
1000334c:	01400204 	movi	r5,8
10003350:	0009883a 	mov	r4,zero
10003354:	00020040 	call	10002004 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10003358:	01414b04 	movi	r5,1324
1000335c:	0009883a 	mov	r4,zero
10003360:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10003364:	01400204 	movi	r5,8
10003368:	0009883a 	mov	r4,zero
1000336c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10003370:	0140a404 	movi	r5,656
10003374:	0009883a 	mov	r4,zero
10003378:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000337c:	01401044 	movi	r5,65
10003380:	0009883a 	mov	r4,zero
10003384:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003388:	014004c4 	movi	r5,19
1000338c:	0009883a 	mov	r4,zero
10003390:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0520);
10003394:	01414804 	movi	r5,1312
10003398:	0009883a 	mov	r4,zero
1000339c:	00020040 	call	10002004 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
100033a0:	000b883a 	mov	r5,zero
100033a4:	0009883a 	mov	r4,zero
100033a8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100033ac:	000b883a 	mov	r5,zero
100033b0:	0009883a 	mov	r4,zero
100033b4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
100033b8:	01408404 	movi	r5,528
100033bc:	0009883a 	mov	r4,zero
100033c0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);
100033c4:	01401044 	movi	r5,65
100033c8:	0009883a 	mov	r4,zero
100033cc:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
100033d0:	014004c4 	movi	r5,19
100033d4:	0009883a 	mov	r4,zero
100033d8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);
100033dc:	000b883a 	mov	r5,zero
100033e0:	0009883a 	mov	r4,zero
100033e4:	00020040 	call	10002004 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100033e8:	01414004 	movi	r5,1280
100033ec:	01006c04 	movi	r4,432
100033f0:	00030740 	call	10003074 <UsbWrite>
}
100033f4:	0001883a 	nop
100033f8:	e037883a 	mov	sp,fp
100033fc:	dfc00117 	ldw	ra,4(sp)
10003400:	df000017 	ldw	fp,0(sp)
10003404:	dec00204 	addi	sp,sp,8
10003408:	f800283a 	ret

1000340c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
1000340c:	defffe04 	addi	sp,sp,-8
10003410:	dfc00115 	stw	ra,4(sp)
10003414:	df000015 	stw	fp,0(sp)
10003418:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000341c:	01414004 	movi	r5,1280
10003420:	01000084 	movi	r4,2
10003424:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003428:	01414304 	movi	r5,1292
1000342c:	0009883a 	mov	r4,zero
10003430:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003434:	01400204 	movi	r5,8
10003438:	0009883a 	mov	r4,zero
1000343c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003440:	0140b404 	movi	r5,720
10003444:	0009883a 	mov	r4,zero
10003448:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000344c:	01400044 	movi	r5,1
10003450:	0009883a 	mov	r4,zero
10003454:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003458:	014004c4 	movi	r5,19
1000345c:	0009883a 	mov	r4,zero
10003460:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003464:	01414504 	movi	r5,1300
10003468:	0009883a 	mov	r4,zero
1000346c:	00020040 	call	10002004 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10003470:	0141a004 	movi	r5,1664
10003474:	0009883a 	mov	r4,zero
10003478:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
1000347c:	01404004 	movi	r5,256
10003480:	0009883a 	mov	r4,zero
10003484:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003488:	000b883a 	mov	r5,zero
1000348c:	0009883a 	mov	r4,zero
10003490:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10003494:	01400484 	movi	r5,18
10003498:	0009883a 	mov	r4,zero
1000349c:	00020040 	call	10002004 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100034a0:	01415104 	movi	r5,1348
100034a4:	0009883a 	mov	r4,zero
100034a8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100034ac:	01400204 	movi	r5,8
100034b0:	0009883a 	mov	r4,zero
100034b4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100034b8:	0140a404 	movi	r5,656
100034bc:	0009883a 	mov	r4,zero
100034c0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100034c4:	01401044 	movi	r5,65
100034c8:	0009883a 	mov	r4,zero
100034cc:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100034d0:	014004c4 	movi	r5,19
100034d4:	0009883a 	mov	r4,zero
100034d8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100034dc:	01414804 	movi	r5,1312
100034e0:	0009883a 	mov	r4,zero
100034e4:	00020040 	call	10002004 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100034e8:	01415304 	movi	r5,1356
100034ec:	0009883a 	mov	r4,zero
100034f0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100034f4:	01400204 	movi	r5,8
100034f8:	0009883a 	mov	r4,zero
100034fc:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003500:	0140a404 	movi	r5,656
10003504:	0009883a 	mov	r4,zero
10003508:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
1000350c:	01400044 	movi	r5,1
10003510:	0009883a 	mov	r4,zero
10003514:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003518:	014004c4 	movi	r5,19
1000351c:	0009883a 	mov	r4,zero
10003520:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10003524:	01414b04 	movi	r5,1324
10003528:	0009883a 	mov	r4,zero
1000352c:	00020040 	call	10002004 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10003530:	01415504 	movi	r5,1364
10003534:	0009883a 	mov	r4,zero
10003538:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
1000353c:	01400084 	movi	r5,2
10003540:	0009883a 	mov	r4,zero
10003544:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10003548:	0140a404 	movi	r5,656
1000354c:	0009883a 	mov	r4,zero
10003550:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003554:	01401044 	movi	r5,65
10003558:	0009883a 	mov	r4,zero
1000355c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003560:	014004c4 	movi	r5,19
10003564:	0009883a 	mov	r4,zero
10003568:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000356c:	01414e04 	movi	r5,1336
10003570:	0009883a 	mov	r4,zero
10003574:	00020040 	call	10002004 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10003578:	000b883a 	mov	r5,zero
1000357c:	0009883a 	mov	r4,zero
10003580:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10003584:	000b883a 	mov	r5,zero
10003588:	0009883a 	mov	r4,zero
1000358c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10003590:	01408404 	movi	r5,528
10003594:	0009883a 	mov	r4,zero
10003598:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
1000359c:	01401044 	movi	r5,65
100035a0:	0009883a 	mov	r4,zero
100035a4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100035a8:	014004c4 	movi	r5,19
100035ac:	0009883a 	mov	r4,zero
100035b0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100035b4:	000b883a 	mov	r5,zero
100035b8:	0009883a 	mov	r4,zero
100035bc:	00020040 	call	10002004 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100035c0:	01414004 	movi	r5,1280
100035c4:	01006c04 	movi	r4,432
100035c8:	00030740 	call	10003074 <UsbWrite>
}
100035cc:	0001883a 	nop
100035d0:	e037883a 	mov	sp,fp
100035d4:	dfc00117 	ldw	ra,4(sp)
100035d8:	df000017 	ldw	fp,0(sp)
100035dc:	dec00204 	addi	sp,sp,8
100035e0:	f800283a 	ret

100035e4 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100035e4:	defffe04 	addi	sp,sp,-8
100035e8:	dfc00115 	stw	ra,4(sp)
100035ec:	df000015 	stw	fp,0(sp)
100035f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100035f4:	01414004 	movi	r5,1280
100035f8:	01000084 	movi	r4,2
100035fc:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003600:	01414304 	movi	r5,1292
10003604:	0009883a 	mov	r4,zero
10003608:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000360c:	01400204 	movi	r5,8
10003610:	0009883a 	mov	r4,zero
10003614:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003618:	0140b404 	movi	r5,720
1000361c:	0009883a 	mov	r4,zero
10003620:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003624:	01400044 	movi	r5,1
10003628:	0009883a 	mov	r4,zero
1000362c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003630:	014004c4 	movi	r5,19
10003634:	0009883a 	mov	r4,zero
10003638:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000363c:	01414504 	movi	r5,1300
10003640:	0009883a 	mov	r4,zero
10003644:	00020040 	call	10002004 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10003648:	0141a004 	movi	r5,1664
1000364c:	0009883a 	mov	r4,zero
10003650:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10003654:	01408004 	movi	r5,512
10003658:	0009883a 	mov	r4,zero
1000365c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003660:	000b883a 	mov	r5,zero
10003664:	0009883a 	mov	r4,zero
10003668:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
1000366c:	01400244 	movi	r5,9
10003670:	0009883a 	mov	r4,zero
10003674:	00020040 	call	10002004 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10003678:	01415104 	movi	r5,1348
1000367c:	0009883a 	mov	r4,zero
10003680:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003684:	01400204 	movi	r5,8
10003688:	0009883a 	mov	r4,zero
1000368c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003690:	0140a404 	movi	r5,656
10003694:	0009883a 	mov	r4,zero
10003698:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000369c:	01401044 	movi	r5,65
100036a0:	0009883a 	mov	r4,zero
100036a4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100036a8:	014004c4 	movi	r5,19
100036ac:	0009883a 	mov	r4,zero
100036b0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100036b4:	01414804 	movi	r5,1312
100036b8:	0009883a 	mov	r4,zero
100036bc:	00020040 	call	10002004 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100036c0:	01415304 	movi	r5,1356
100036c4:	0009883a 	mov	r4,zero
100036c8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100036cc:	01400044 	movi	r5,1
100036d0:	0009883a 	mov	r4,zero
100036d4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100036d8:	0140a404 	movi	r5,656
100036dc:	0009883a 	mov	r4,zero
100036e0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100036e4:	01400044 	movi	r5,1
100036e8:	0009883a 	mov	r4,zero
100036ec:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100036f0:	014004c4 	movi	r5,19
100036f4:	0009883a 	mov	r4,zero
100036f8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100036fc:	01414b04 	movi	r5,1324
10003700:	0009883a 	mov	r4,zero
10003704:	00020040 	call	10002004 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10003708:	000b883a 	mov	r5,zero
1000370c:	0009883a 	mov	r4,zero
10003710:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003714:	000b883a 	mov	r5,zero
10003718:	0009883a 	mov	r4,zero
1000371c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10003720:	01408404 	movi	r5,528
10003724:	0009883a 	mov	r4,zero
10003728:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000372c:	01401044 	movi	r5,65
10003730:	0009883a 	mov	r4,zero
10003734:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003738:	014004c4 	movi	r5,19
1000373c:	0009883a 	mov	r4,zero
10003740:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10003744:	000b883a 	mov	r5,zero
10003748:	0009883a 	mov	r4,zero
1000374c:	00020040 	call	10002004 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003750:	01414004 	movi	r5,1280
10003754:	01006c04 	movi	r4,432
10003758:	00030740 	call	10003074 <UsbWrite>
}
1000375c:	0001883a 	nop
10003760:	e037883a 	mov	sp,fp
10003764:	dfc00117 	ldw	ra,4(sp)
10003768:	df000017 	ldw	fp,0(sp)
1000376c:	dec00204 	addi	sp,sp,8
10003770:	f800283a 	ret

10003774 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10003774:	defffe04 	addi	sp,sp,-8
10003778:	dfc00115 	stw	ra,4(sp)
1000377c:	df000015 	stw	fp,0(sp)
10003780:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003784:	01414004 	movi	r5,1280
10003788:	01000084 	movi	r4,2
1000378c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003790:	01414304 	movi	r5,1292
10003794:	0009883a 	mov	r4,zero
10003798:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000379c:	01400204 	movi	r5,8
100037a0:	0009883a 	mov	r4,zero
100037a4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100037a8:	0140b404 	movi	r5,720
100037ac:	0009883a 	mov	r4,zero
100037b0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);
100037b4:	01400044 	movi	r5,1
100037b8:	0009883a 	mov	r4,zero
100037bc:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
100037c0:	014004c4 	movi	r5,19
100037c4:	0009883a 	mov	r4,zero
100037c8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0514);
100037cc:	01414504 	movi	r5,1300
100037d0:	0009883a 	mov	r4,zero
100037d4:	00020040 	call	10002004 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100037d8:	0141a004 	movi	r5,1664
100037dc:	0009883a 	mov	r4,zero
100037e0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100037e4:	01408004 	movi	r5,512
100037e8:	0009883a 	mov	r4,zero
100037ec:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100037f0:	000b883a 	mov	r5,zero
100037f4:	0009883a 	mov	r4,zero
100037f8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100037fc:	01403fc4 	movi	r5,255
10003800:	0009883a 	mov	r4,zero
10003804:	00020040 	call	10002004 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10003808:	01415704 	movi	r5,1372
1000380c:	0009883a 	mov	r4,zero
10003810:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003814:	01400204 	movi	r5,8
10003818:	0009883a 	mov	r4,zero
1000381c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003820:	0140a404 	movi	r5,656
10003824:	0009883a 	mov	r4,zero
10003828:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000382c:	01401044 	movi	r5,65
10003830:	0009883a 	mov	r4,zero
10003834:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003838:	014004c4 	movi	r5,19
1000383c:	0009883a 	mov	r4,zero
10003840:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003844:	01414804 	movi	r5,1312
10003848:	0009883a 	mov	r4,zero
1000384c:	00020040 	call	10002004 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10003850:	01415904 	movi	r5,1380
10003854:	0009883a 	mov	r4,zero
10003858:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000385c:	01400204 	movi	r5,8
10003860:	0009883a 	mov	r4,zero
10003864:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003868:	0140a404 	movi	r5,656
1000386c:	0009883a 	mov	r4,zero
10003870:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003874:	01400044 	movi	r5,1
10003878:	0009883a 	mov	r4,zero
1000387c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003880:	014004c4 	movi	r5,19
10003884:	0009883a 	mov	r4,zero
10003888:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000388c:	01414b04 	movi	r5,1324
10003890:	0009883a 	mov	r4,zero
10003894:	00020040 	call	10002004 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10003898:	01415b04 	movi	r5,1388
1000389c:	0009883a 	mov	r4,zero
100038a0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100038a4:	01400204 	movi	r5,8
100038a8:	0009883a 	mov	r4,zero
100038ac:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100038b0:	0140a404 	movi	r5,656
100038b4:	0009883a 	mov	r4,zero
100038b8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100038bc:	01401044 	movi	r5,65
100038c0:	0009883a 	mov	r4,zero
100038c4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100038c8:	014004c4 	movi	r5,19
100038cc:	0009883a 	mov	r4,zero
100038d0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100038d4:	01414e04 	movi	r5,1336
100038d8:	0009883a 	mov	r4,zero
100038dc:	00020040 	call	10002004 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100038e0:	01415d04 	movi	r5,1396
100038e4:	0009883a 	mov	r4,zero
100038e8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100038ec:	01400204 	movi	r5,8
100038f0:	0009883a 	mov	r4,zero
100038f4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100038f8:	0140a404 	movi	r5,656
100038fc:	0009883a 	mov	r4,zero
10003900:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003904:	01400044 	movi	r5,1
10003908:	0009883a 	mov	r4,zero
1000390c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10003910:	014004c4 	movi	r5,19
10003914:	0009883a 	mov	r4,zero
10003918:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
1000391c:	01415104 	movi	r5,1348
10003920:	0009883a 	mov	r4,zero
10003924:	00020040 	call	10002004 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10003928:	01415f04 	movi	r5,1404
1000392c:	0009883a 	mov	r4,zero
10003930:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10003934:	01400084 	movi	r5,2
10003938:	0009883a 	mov	r4,zero
1000393c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003940:	0140a404 	movi	r5,656
10003944:	0009883a 	mov	r4,zero
10003948:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000394c:	01401044 	movi	r5,65
10003950:	0009883a 	mov	r4,zero
10003954:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003958:	014004c4 	movi	r5,19
1000395c:	0009883a 	mov	r4,zero
10003960:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10003964:	01415404 	movi	r5,1360
10003968:	0009883a 	mov	r4,zero
1000396c:	00020040 	call	10002004 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10003970:	000b883a 	mov	r5,zero
10003974:	0009883a 	mov	r4,zero
10003978:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000397c:	000b883a 	mov	r5,zero
10003980:	0009883a 	mov	r4,zero
10003984:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10003988:	01408404 	movi	r5,528
1000398c:	0009883a 	mov	r4,zero
10003990:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10003994:	01401044 	movi	r5,65
10003998:	0009883a 	mov	r4,zero
1000399c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100039a0:	014004c4 	movi	r5,19
100039a4:	0009883a 	mov	r4,zero
100039a8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100039ac:	000b883a 	mov	r5,zero
100039b0:	0009883a 	mov	r4,zero
100039b4:	00020040 	call	10002004 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100039b8:	01414004 	movi	r5,1280
100039bc:	01006c04 	movi	r4,432
100039c0:	00030740 	call	10003074 <UsbWrite>
}
100039c4:	0001883a 	nop
100039c8:	e037883a 	mov	sp,fp
100039cc:	dfc00117 	ldw	ra,4(sp)
100039d0:	df000017 	ldw	fp,0(sp)
100039d4:	dec00204 	addi	sp,sp,8
100039d8:	f800283a 	ret

100039dc <UsbSetConfig>:

void UsbSetConfig()
{
100039dc:	defffe04 	addi	sp,sp,-8
100039e0:	dfc00115 	stw	ra,4(sp)
100039e4:	df000015 	stw	fp,0(sp)
100039e8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100039ec:	01414004 	movi	r5,1280
100039f0:	01000084 	movi	r4,2
100039f4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x050C);
100039f8:	01414304 	movi	r5,1292
100039fc:	0009883a 	mov	r4,zero
10003a00:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003a04:	01400204 	movi	r5,8
10003a08:	0009883a 	mov	r4,zero
10003a0c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003a10:	0140b404 	movi	r5,720
10003a14:	0009883a 	mov	r4,zero
10003a18:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003a1c:	01400044 	movi	r5,1
10003a20:	0009883a 	mov	r4,zero
10003a24:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003a28:	014004c4 	movi	r5,19
10003a2c:	0009883a 	mov	r4,zero
10003a30:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003a34:	01414504 	movi	r5,1300
10003a38:	0009883a 	mov	r4,zero
10003a3c:	00020040 	call	10002004 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10003a40:	01424004 	movi	r5,2304
10003a44:	0009883a 	mov	r4,zero
10003a48:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10003a4c:	01400044 	movi	r5,1
10003a50:	0009883a 	mov	r4,zero
10003a54:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003a58:	000b883a 	mov	r5,zero
10003a5c:	0009883a 	mov	r4,zero
10003a60:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003a64:	000b883a 	mov	r5,zero
10003a68:	0009883a 	mov	r4,zero
10003a6c:	00020040 	call	10002004 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10003a70:	000b883a 	mov	r5,zero
10003a74:	0009883a 	mov	r4,zero
10003a78:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10003a7c:	000b883a 	mov	r5,zero
10003a80:	0009883a 	mov	r4,zero
10003a84:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10003a88:	0140a404 	movi	r5,656
10003a8c:	0009883a 	mov	r4,zero
10003a90:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10003a94:	01401044 	movi	r5,65
10003a98:	0009883a 	mov	r4,zero
10003a9c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003aa0:	014004c4 	movi	r5,19
10003aa4:	0009883a 	mov	r4,zero
10003aa8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003aac:	000b883a 	mov	r5,zero
10003ab0:	0009883a 	mov	r4,zero
10003ab4:	00020040 	call	10002004 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003ab8:	01414004 	movi	r5,1280
10003abc:	01006c04 	movi	r4,432
10003ac0:	00030740 	call	10003074 <UsbWrite>

}
10003ac4:	0001883a 	nop
10003ac8:	e037883a 	mov	sp,fp
10003acc:	dfc00117 	ldw	ra,4(sp)
10003ad0:	df000017 	ldw	fp,0(sp)
10003ad4:	dec00204 	addi	sp,sp,8
10003ad8:	f800283a 	ret

10003adc <UsbClassRequest>:

void UsbClassRequest()
{
10003adc:	defffe04 	addi	sp,sp,-8
10003ae0:	dfc00115 	stw	ra,4(sp)
10003ae4:	df000015 	stw	fp,0(sp)
10003ae8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003aec:	01414004 	movi	r5,1280
10003af0:	01000084 	movi	r4,2
10003af4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003af8:	01414304 	movi	r5,1292
10003afc:	0009883a 	mov	r4,zero
10003b00:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003b04:	01400204 	movi	r5,8
10003b08:	0009883a 	mov	r4,zero
10003b0c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003b10:	0140b404 	movi	r5,720
10003b14:	0009883a 	mov	r4,zero
10003b18:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003b1c:	01400044 	movi	r5,1
10003b20:	0009883a 	mov	r4,zero
10003b24:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003b28:	014004c4 	movi	r5,19
10003b2c:	0009883a 	mov	r4,zero
10003b30:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003b34:	01414504 	movi	r5,1300
10003b38:	0009883a 	mov	r4,zero
10003b3c:	00020040 	call	10002004 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10003b40:	01428844 	movi	r5,2593
10003b44:	0009883a 	mov	r4,zero
10003b48:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10003b4c:	000b883a 	mov	r5,zero
10003b50:	0009883a 	mov	r4,zero
10003b54:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003b58:	000b883a 	mov	r5,zero
10003b5c:	0009883a 	mov	r4,zero
10003b60:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003b64:	000b883a 	mov	r5,zero
10003b68:	0009883a 	mov	r4,zero
10003b6c:	00020040 	call	10002004 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10003b70:	000b883a 	mov	r5,zero
10003b74:	0009883a 	mov	r4,zero
10003b78:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10003b7c:	000b883a 	mov	r5,zero
10003b80:	0009883a 	mov	r4,zero
10003b84:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10003b88:	0140a404 	movi	r5,656
10003b8c:	0009883a 	mov	r4,zero
10003b90:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10003b94:	01401044 	movi	r5,65
10003b98:	0009883a 	mov	r4,zero
10003b9c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003ba0:	014004c4 	movi	r5,19
10003ba4:	0009883a 	mov	r4,zero
10003ba8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003bac:	000b883a 	mov	r5,zero
10003bb0:	0009883a 	mov	r4,zero
10003bb4:	00020040 	call	10002004 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003bb8:	01414004 	movi	r5,1280
10003bbc:	01006c04 	movi	r4,432
10003bc0:	00030740 	call	10003074 <UsbWrite>
}
10003bc4:	0001883a 	nop
10003bc8:	e037883a 	mov	sp,fp
10003bcc:	dfc00117 	ldw	ra,4(sp)
10003bd0:	df000017 	ldw	fp,0(sp)
10003bd4:	dec00204 	addi	sp,sp,8
10003bd8:	f800283a 	ret

10003bdc <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10003bdc:	defffe04 	addi	sp,sp,-8
10003be0:	dfc00115 	stw	ra,4(sp)
10003be4:	df000015 	stw	fp,0(sp)
10003be8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003bec:	01414004 	movi	r5,1280
10003bf0:	01000084 	movi	r4,2
10003bf4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003bf8:	01414304 	movi	r5,1292
10003bfc:	0009883a 	mov	r4,zero
10003c00:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003c04:	01400204 	movi	r5,8
10003c08:	0009883a 	mov	r4,zero
10003c0c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003c10:	0140b404 	movi	r5,720
10003c14:	0009883a 	mov	r4,zero
10003c18:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003c1c:	01400044 	movi	r5,1
10003c20:	0009883a 	mov	r4,zero
10003c24:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003c28:	014004c4 	movi	r5,19
10003c2c:	0009883a 	mov	r4,zero
10003c30:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003c34:	01414504 	movi	r5,1300
10003c38:	0009883a 	mov	r4,zero
10003c3c:	00020040 	call	10002004 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10003c40:	0141a044 	movi	r5,1665
10003c44:	0009883a 	mov	r4,zero
10003c48:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10003c4c:	01484004 	movi	r5,8448
10003c50:	0009883a 	mov	r4,zero
10003c54:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003c58:	000b883a 	mov	r5,zero
10003c5c:	0009883a 	mov	r4,zero
10003c60:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10003c64:	01401ec4 	movi	r5,123
10003c68:	0009883a 	mov	r4,zero
10003c6c:	00020040 	call	10002004 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10003c70:	01415104 	movi	r5,1348
10003c74:	0009883a 	mov	r4,zero
10003c78:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003c7c:	01400204 	movi	r5,8
10003c80:	0009883a 	mov	r4,zero
10003c84:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003c88:	0140a404 	movi	r5,656
10003c8c:	0009883a 	mov	r4,zero
10003c90:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003c94:	01401044 	movi	r5,65
10003c98:	0009883a 	mov	r4,zero
10003c9c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003ca0:	014004c4 	movi	r5,19
10003ca4:	0009883a 	mov	r4,zero
10003ca8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003cac:	01414804 	movi	r5,1312
10003cb0:	0009883a 	mov	r4,zero
10003cb4:	00020040 	call	10002004 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10003cb8:	000b883a 	mov	r5,zero
10003cbc:	0009883a 	mov	r4,zero
10003cc0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003cc4:	000b883a 	mov	r5,zero
10003cc8:	0009883a 	mov	r4,zero
10003ccc:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10003cd0:	01408404 	movi	r5,528
10003cd4:	0009883a 	mov	r4,zero
10003cd8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003cdc:	01401044 	movi	r5,65
10003ce0:	0009883a 	mov	r4,zero
10003ce4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003ce8:	014004c4 	movi	r5,19
10003cec:	0009883a 	mov	r4,zero
10003cf0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10003cf4:	000b883a 	mov	r5,zero
10003cf8:	0009883a 	mov	r4,zero
10003cfc:	00020040 	call	10002004 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003d00:	01414004 	movi	r5,1280
10003d04:	01006c04 	movi	r4,432
10003d08:	00030740 	call	10003074 <UsbWrite>

}
10003d0c:	0001883a 	nop
10003d10:	e037883a 	mov	sp,fp
10003d14:	dfc00117 	ldw	ra,4(sp)
10003d18:	df000017 	ldw	fp,0(sp)
10003d1c:	dec00204 	addi	sp,sp,8
10003d20:	f800283a 	ret

10003d24 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10003d24:	defffe04 	addi	sp,sp,-8
10003d28:	dfc00115 	stw	ra,4(sp)
10003d2c:	df000015 	stw	fp,0(sp)
10003d30:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003d34:	01414004 	movi	r5,1280
10003d38:	01000084 	movi	r4,2
10003d3c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003d40:	01414304 	movi	r5,1292
10003d44:	0009883a 	mov	r4,zero
10003d48:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003d4c:	01400204 	movi	r5,8
10003d50:	0009883a 	mov	r4,zero
10003d54:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003d58:	0140b404 	movi	r5,720
10003d5c:	0009883a 	mov	r4,zero
10003d60:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003d64:	01400044 	movi	r5,1
10003d68:	0009883a 	mov	r4,zero
10003d6c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003d70:	014004c4 	movi	r5,19
10003d74:	0009883a 	mov	r4,zero
10003d78:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003d7c:	01414504 	movi	r5,1300
10003d80:	0009883a 	mov	r4,zero
10003d84:	00020040 	call	10002004 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10003d88:	0141a044 	movi	r5,1665
10003d8c:	0009883a 	mov	r4,zero
10003d90:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10003d94:	01488004 	movi	r5,8704
10003d98:	0009883a 	mov	r4,zero
10003d9c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003da0:	000b883a 	mov	r5,zero
10003da4:	0009883a 	mov	r4,zero
10003da8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10003dac:	01401ec4 	movi	r5,123
10003db0:	0009883a 	mov	r4,zero
10003db4:	00020040 	call	10002004 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10003db8:	01416004 	movi	r5,1408
10003dbc:	0009883a 	mov	r4,zero
10003dc0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003dc4:	01400204 	movi	r5,8
10003dc8:	0009883a 	mov	r4,zero
10003dcc:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003dd0:	0140a404 	movi	r5,656
10003dd4:	0009883a 	mov	r4,zero
10003dd8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003ddc:	01401044 	movi	r5,65
10003de0:	0009883a 	mov	r4,zero
10003de4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003de8:	014004c4 	movi	r5,19
10003dec:	0009883a 	mov	r4,zero
10003df0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003df4:	01414804 	movi	r5,1312
10003df8:	0009883a 	mov	r4,zero
10003dfc:	00020040 	call	10002004 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10003e00:	01416204 	movi	r5,1416
10003e04:	0009883a 	mov	r4,zero
10003e08:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10003e0c:	01400204 	movi	r5,8
10003e10:	0009883a 	mov	r4,zero
10003e14:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003e18:	0140a404 	movi	r5,656
10003e1c:	0009883a 	mov	r4,zero
10003e20:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003e24:	01400044 	movi	r5,1
10003e28:	0009883a 	mov	r4,zero
10003e2c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003e30:	014004c4 	movi	r5,19
10003e34:	0009883a 	mov	r4,zero
10003e38:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10003e3c:	01414b04 	movi	r5,1324
10003e40:	0009883a 	mov	r4,zero
10003e44:	00020040 	call	10002004 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10003e48:	01416404 	movi	r5,1424
10003e4c:	0009883a 	mov	r4,zero
10003e50:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003e54:	01400204 	movi	r5,8
10003e58:	0009883a 	mov	r4,zero
10003e5c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10003e60:	0140a404 	movi	r5,656
10003e64:	0009883a 	mov	r4,zero
10003e68:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003e6c:	01401044 	movi	r5,65
10003e70:	0009883a 	mov	r4,zero
10003e74:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003e78:	014004c4 	movi	r5,19
10003e7c:	0009883a 	mov	r4,zero
10003e80:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10003e84:	01414e04 	movi	r5,1336
10003e88:	0009883a 	mov	r4,zero
10003e8c:	00020040 	call	10002004 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10003e90:	01416604 	movi	r5,1432
10003e94:	0009883a 	mov	r4,zero
10003e98:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10003e9c:	01400204 	movi	r5,8
10003ea0:	0009883a 	mov	r4,zero
10003ea4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003ea8:	0140a404 	movi	r5,656
10003eac:	0009883a 	mov	r4,zero
10003eb0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003eb4:	01400044 	movi	r5,1
10003eb8:	0009883a 	mov	r4,zero
10003ebc:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10003ec0:	014004c4 	movi	r5,19
10003ec4:	0009883a 	mov	r4,zero
10003ec8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10003ecc:	01415104 	movi	r5,1348
10003ed0:	0009883a 	mov	r4,zero
10003ed4:	00020040 	call	10002004 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10003ed8:	01416804 	movi	r5,1440
10003edc:	0009883a 	mov	r4,zero
10003ee0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003ee4:	01400204 	movi	r5,8
10003ee8:	0009883a 	mov	r4,zero
10003eec:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003ef0:	0140a404 	movi	r5,656
10003ef4:	0009883a 	mov	r4,zero
10003ef8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10003efc:	01401044 	movi	r5,65
10003f00:	0009883a 	mov	r4,zero
10003f04:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003f08:	014004c4 	movi	r5,19
10003f0c:	0009883a 	mov	r4,zero
10003f10:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10003f14:	01415404 	movi	r5,1360
10003f18:	0009883a 	mov	r4,zero
10003f1c:	00020040 	call	10002004 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10003f20:	01416a04 	movi	r5,1448
10003f24:	0009883a 	mov	r4,zero
10003f28:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10003f2c:	01400204 	movi	r5,8
10003f30:	0009883a 	mov	r4,zero
10003f34:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003f38:	0140a404 	movi	r5,656
10003f3c:	0009883a 	mov	r4,zero
10003f40:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003f44:	01400044 	movi	r5,1
10003f48:	0009883a 	mov	r4,zero
10003f4c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003f50:	014004c4 	movi	r5,19
10003f54:	0009883a 	mov	r4,zero
10003f58:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10003f5c:	01415704 	movi	r5,1372
10003f60:	0009883a 	mov	r4,zero
10003f64:	00020040 	call	10002004 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10003f68:	01416c04 	movi	r5,1456
10003f6c:	0009883a 	mov	r4,zero
10003f70:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003f74:	01400204 	movi	r5,8
10003f78:	0009883a 	mov	r4,zero
10003f7c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10003f80:	0140a404 	movi	r5,656
10003f84:	0009883a 	mov	r4,zero
10003f88:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10003f8c:	01401044 	movi	r5,65
10003f90:	0009883a 	mov	r4,zero
10003f94:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003f98:	014004c4 	movi	r5,19
10003f9c:	0009883a 	mov	r4,zero
10003fa0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10003fa4:	01415a04 	movi	r5,1384
10003fa8:	0009883a 	mov	r4,zero
10003fac:	00020040 	call	10002004 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10003fb0:	01416e04 	movi	r5,1464
10003fb4:	0009883a 	mov	r4,zero
10003fb8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10003fbc:	014000c4 	movi	r5,3
10003fc0:	0009883a 	mov	r4,zero
10003fc4:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003fc8:	0140a404 	movi	r5,656
10003fcc:	0009883a 	mov	r4,zero
10003fd0:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003fd4:	01400044 	movi	r5,1
10003fd8:	0009883a 	mov	r4,zero
10003fdc:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10003fe0:	014004c4 	movi	r5,19
10003fe4:	0009883a 	mov	r4,zero
10003fe8:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10003fec:	01415d04 	movi	r5,1396
10003ff0:	0009883a 	mov	r4,zero
10003ff4:	00020040 	call	10002004 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10003ff8:	000b883a 	mov	r5,zero
10003ffc:	0009883a 	mov	r4,zero
10004000:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10004004:	000b883a 	mov	r5,zero
10004008:	0009883a 	mov	r4,zero
1000400c:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10004010:	01408404 	movi	r5,528
10004014:	0009883a 	mov	r4,zero
10004018:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000401c:	01401044 	movi	r5,65
10004020:	0009883a 	mov	r4,zero
10004024:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10004028:	014004c4 	movi	r5,19
1000402c:	0009883a 	mov	r4,zero
10004030:	00020040 	call	10002004 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10004034:	000b883a 	mov	r5,zero
10004038:	0009883a 	mov	r4,zero
1000403c:	00020040 	call	10002004 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004040:	01414004 	movi	r5,1280
10004044:	01006c04 	movi	r4,432
10004048:	00030740 	call	10003074 <UsbWrite>

}
1000404c:	0001883a 	nop
10004050:	e037883a 	mov	sp,fp
10004054:	dfc00117 	ldw	ra,4(sp)
10004058:	df000017 	ldw	fp,0(sp)
1000405c:	dec00204 	addi	sp,sp,8
10004060:	f800283a 	ret

10004064 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10004064:	defffd04 	addi	sp,sp,-12
10004068:	dfc00215 	stw	ra,8(sp)
1000406c:	df000115 	stw	fp,4(sp)
10004070:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10004074:	01005104 	movi	r4,324
10004078:	00030cc0 	call	100030cc <UsbRead>
1000407c:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10004080:	000b883a 	mov	r5,zero
10004084:	01005104 	movi	r4,324
10004088:	00030740 	call	10003074 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
1000408c:	00000d06 	br	100040c4 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10004090:	e0bfff0b 	ldhu	r2,-4(fp)
10004094:	10000526 	beq	r2,zero,100040ac <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10004098:	e0bfff0b 	ldhu	r2,-4(fp)
1000409c:	100b883a 	mov	r5,r2
100040a0:	01040074 	movhi	r4,4097
100040a4:	21103304 	addi	r4,r4,16588
100040a8:	0004a4c0 	call	10004a4c <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100040ac:	01005104 	movi	r4,324
100040b0:	00030cc0 	call	100030cc <UsbRead>
100040b4:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100040b8:	000b883a 	mov	r5,zero
100040bc:	01005104 	movi	r4,324
100040c0:	00030740 	call	10003074 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100040c4:	e0bfff0b 	ldhu	r2,-4(fp)
100040c8:	10840018 	cmpnei	r2,r2,4096
100040cc:	103ff01e 	bne	r2,zero,10004090 <__alt_data_end+0xf8004090>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
100040d0:	e0bfff0b 	ldhu	r2,-4(fp)
}
100040d4:	e037883a 	mov	sp,fp
100040d8:	dfc00117 	ldw	ra,4(sp)
100040dc:	df000017 	ldw	fp,0(sp)
100040e0:	dec00204 	addi	sp,sp,8
100040e4:	f800283a 	ret

100040e8 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
100040e8:	defffd04 	addi	sp,sp,-12
100040ec:	dfc00215 	stw	ra,8(sp)
100040f0:	df000115 	stw	fp,4(sp)
100040f4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
100040f8:	010000c4 	movi	r4,3
100040fc:	000208c0 	call	1000208c <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10004100:	01005104 	movi	r4,324
10004104:	00030cc0 	call	100030cc <UsbRead>
10004108:	10bfffcc 	andi	r2,r2,65535
1000410c:	10840018 	cmpnei	r2,r2,4096
10004110:	1000091e 	bne	r2,zero,10004138 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10004114:	000b883a 	mov	r5,zero
10004118:	01005104 	movi	r4,324
1000411c:	00030740 	call	10003074 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004120:	0001883a 	nop
10004124:	010000c4 	movi	r4,3
10004128:	000208c0 	call	1000208c <IO_read>
1000412c:	10bfffcc 	andi	r2,r2,65535
10004130:	1080040c 	andi	r2,r2,16
10004134:	103ffb26 	beq	r2,zero,10004124 <__alt_data_end+0xf8004124>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10004138:	01414204 	movi	r5,1288
1000413c:	01000084 	movi	r4,2
10004140:	00020040 	call	10002004 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10004144:	0009883a 	mov	r4,zero
10004148:	000208c0 	call	1000208c <IO_read>
1000414c:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10004150:	e0bfff0b 	ldhu	r2,-4(fp)
}
10004154:	e037883a 	mov	sp,fp
10004158:	dfc00117 	ldw	ra,4(sp)
1000415c:	df000017 	ldw	fp,0(sp)
10004160:	dec00204 	addi	sp,sp,8
10004164:	f800283a 	ret

10004168 <UsbPrintMem>:


void UsbPrintMem()
{
10004168:	defffc04 	addi	sp,sp,-16
1000416c:	dfc00315 	stw	ra,12(sp)
10004170:	df000215 	stw	fp,8(sp)
10004174:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10004178:	01414004 	movi	r5,1280
1000417c:	01000084 	movi	r4,2
10004180:	00020040 	call	10002004 <IO_write>
	for (i = 0; i <= 200; i += 2)
10004184:	e03ffe15 	stw	zero,-8(fp)
10004188:	00000e06 	br	100041c4 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
1000418c:	0009883a 	mov	r4,zero
10004190:	000208c0 	call	1000208c <IO_read>
10004194:	10bfffcc 	andi	r2,r2,65535
10004198:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
1000419c:	e0bffe17 	ldw	r2,-8(fp)
100041a0:	10814004 	addi	r2,r2,1280
100041a4:	e1bfff17 	ldw	r6,-4(fp)
100041a8:	100b883a 	mov	r5,r2
100041ac:	01040074 	movhi	r4,4097
100041b0:	21103b04 	addi	r4,r4,16620
100041b4:	0004a4c0 	call	10004a4c <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
100041b8:	e0bffe17 	ldw	r2,-8(fp)
100041bc:	10800084 	addi	r2,r2,2
100041c0:	e0bffe15 	stw	r2,-8(fp)
100041c4:	e0bffe17 	ldw	r2,-8(fp)
100041c8:	10803250 	cmplti	r2,r2,201
100041cc:	103fef1e 	bne	r2,zero,1000418c <__alt_data_end+0xf800418c>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
100041d0:	0001883a 	nop
100041d4:	e037883a 	mov	sp,fp
100041d8:	dfc00117 	ldw	ra,4(sp)
100041dc:	df000017 	ldw	fp,0(sp)
100041e0:	dec00204 	addi	sp,sp,8
100041e4:	f800283a 	ret

100041e8 <malloc>:
100041e8:	00840074 	movhi	r2,4097
100041ec:	1097b004 	addi	r2,r2,24256
100041f0:	200b883a 	mov	r5,r4
100041f4:	11000017 	ldw	r4,0(r2)
100041f8:	00042101 	jmpi	10004210 <_malloc_r>

100041fc <free>:
100041fc:	00840074 	movhi	r2,4097
10004200:	1097b004 	addi	r2,r2,24256
10004204:	200b883a 	mov	r5,r4
10004208:	11000017 	ldw	r4,0(r2)
1000420c:	000917c1 	jmpi	1000917c <_free_r>

10004210 <_malloc_r>:
10004210:	defff504 	addi	sp,sp,-44
10004214:	dc800315 	stw	r18,12(sp)
10004218:	dfc00a15 	stw	ra,40(sp)
1000421c:	df000915 	stw	fp,36(sp)
10004220:	ddc00815 	stw	r23,32(sp)
10004224:	dd800715 	stw	r22,28(sp)
10004228:	dd400615 	stw	r21,24(sp)
1000422c:	dd000515 	stw	r20,20(sp)
10004230:	dcc00415 	stw	r19,16(sp)
10004234:	dc400215 	stw	r17,8(sp)
10004238:	dc000115 	stw	r16,4(sp)
1000423c:	288002c4 	addi	r2,r5,11
10004240:	00c00584 	movi	r3,22
10004244:	2025883a 	mov	r18,r4
10004248:	18807f2e 	bgeu	r3,r2,10004448 <_malloc_r+0x238>
1000424c:	047ffe04 	movi	r17,-8
10004250:	1462703a 	and	r17,r2,r17
10004254:	8800a316 	blt	r17,zero,100044e4 <_malloc_r+0x2d4>
10004258:	8940a236 	bltu	r17,r5,100044e4 <_malloc_r+0x2d4>
1000425c:	00116ec0 	call	100116ec <__malloc_lock>
10004260:	00807dc4 	movi	r2,503
10004264:	1441e92e 	bgeu	r2,r17,10004a0c <_malloc_r+0x7fc>
10004268:	8804d27a 	srli	r2,r17,9
1000426c:	1000a126 	beq	r2,zero,100044f4 <_malloc_r+0x2e4>
10004270:	00c00104 	movi	r3,4
10004274:	18811e36 	bltu	r3,r2,100046f0 <_malloc_r+0x4e0>
10004278:	8804d1ba 	srli	r2,r17,6
1000427c:	12000e44 	addi	r8,r2,57
10004280:	11c00e04 	addi	r7,r2,56
10004284:	4209883a 	add	r4,r8,r8
10004288:	04c40074 	movhi	r19,4097
1000428c:	2109883a 	add	r4,r4,r4
10004290:	9cd10004 	addi	r19,r19,17408
10004294:	2109883a 	add	r4,r4,r4
10004298:	9909883a 	add	r4,r19,r4
1000429c:	24000117 	ldw	r16,4(r4)
100042a0:	213ffe04 	addi	r4,r4,-8
100042a4:	24009726 	beq	r4,r16,10004504 <_malloc_r+0x2f4>
100042a8:	80800117 	ldw	r2,4(r16)
100042ac:	01bfff04 	movi	r6,-4
100042b0:	014003c4 	movi	r5,15
100042b4:	1184703a 	and	r2,r2,r6
100042b8:	1447c83a 	sub	r3,r2,r17
100042bc:	28c00716 	blt	r5,r3,100042dc <_malloc_r+0xcc>
100042c0:	1800920e 	bge	r3,zero,1000450c <_malloc_r+0x2fc>
100042c4:	84000317 	ldw	r16,12(r16)
100042c8:	24008e26 	beq	r4,r16,10004504 <_malloc_r+0x2f4>
100042cc:	80800117 	ldw	r2,4(r16)
100042d0:	1184703a 	and	r2,r2,r6
100042d4:	1447c83a 	sub	r3,r2,r17
100042d8:	28fff90e 	bge	r5,r3,100042c0 <__alt_data_end+0xf80042c0>
100042dc:	3809883a 	mov	r4,r7
100042e0:	01840074 	movhi	r6,4097
100042e4:	9c000417 	ldw	r16,16(r19)
100042e8:	31910004 	addi	r6,r6,17408
100042ec:	32000204 	addi	r8,r6,8
100042f0:	82013426 	beq	r16,r8,100047c4 <_malloc_r+0x5b4>
100042f4:	80c00117 	ldw	r3,4(r16)
100042f8:	00bfff04 	movi	r2,-4
100042fc:	188e703a 	and	r7,r3,r2
10004300:	3c45c83a 	sub	r2,r7,r17
10004304:	00c003c4 	movi	r3,15
10004308:	18811f16 	blt	r3,r2,10004788 <_malloc_r+0x578>
1000430c:	32000515 	stw	r8,20(r6)
10004310:	32000415 	stw	r8,16(r6)
10004314:	10007f0e 	bge	r2,zero,10004514 <_malloc_r+0x304>
10004318:	00807fc4 	movi	r2,511
1000431c:	11c0fd36 	bltu	r2,r7,10004714 <_malloc_r+0x504>
10004320:	3806d0fa 	srli	r3,r7,3
10004324:	01c00044 	movi	r7,1
10004328:	30800117 	ldw	r2,4(r6)
1000432c:	19400044 	addi	r5,r3,1
10004330:	294b883a 	add	r5,r5,r5
10004334:	1807d0ba 	srai	r3,r3,2
10004338:	294b883a 	add	r5,r5,r5
1000433c:	294b883a 	add	r5,r5,r5
10004340:	298b883a 	add	r5,r5,r6
10004344:	38c6983a 	sll	r3,r7,r3
10004348:	29c00017 	ldw	r7,0(r5)
1000434c:	2a7ffe04 	addi	r9,r5,-8
10004350:	1886b03a 	or	r3,r3,r2
10004354:	82400315 	stw	r9,12(r16)
10004358:	81c00215 	stw	r7,8(r16)
1000435c:	30c00115 	stw	r3,4(r6)
10004360:	2c000015 	stw	r16,0(r5)
10004364:	3c000315 	stw	r16,12(r7)
10004368:	2005d0ba 	srai	r2,r4,2
1000436c:	01400044 	movi	r5,1
10004370:	288a983a 	sll	r5,r5,r2
10004374:	19406f36 	bltu	r3,r5,10004534 <_malloc_r+0x324>
10004378:	28c4703a 	and	r2,r5,r3
1000437c:	10000a1e 	bne	r2,zero,100043a8 <_malloc_r+0x198>
10004380:	00bfff04 	movi	r2,-4
10004384:	294b883a 	add	r5,r5,r5
10004388:	2088703a 	and	r4,r4,r2
1000438c:	28c4703a 	and	r2,r5,r3
10004390:	21000104 	addi	r4,r4,4
10004394:	1000041e 	bne	r2,zero,100043a8 <_malloc_r+0x198>
10004398:	294b883a 	add	r5,r5,r5
1000439c:	28c4703a 	and	r2,r5,r3
100043a0:	21000104 	addi	r4,r4,4
100043a4:	103ffc26 	beq	r2,zero,10004398 <__alt_data_end+0xf8004398>
100043a8:	02bfff04 	movi	r10,-4
100043ac:	024003c4 	movi	r9,15
100043b0:	21800044 	addi	r6,r4,1
100043b4:	318d883a 	add	r6,r6,r6
100043b8:	318d883a 	add	r6,r6,r6
100043bc:	318d883a 	add	r6,r6,r6
100043c0:	998d883a 	add	r6,r19,r6
100043c4:	333ffe04 	addi	r12,r6,-8
100043c8:	2017883a 	mov	r11,r4
100043cc:	31800104 	addi	r6,r6,4
100043d0:	34000017 	ldw	r16,0(r6)
100043d4:	31fffd04 	addi	r7,r6,-12
100043d8:	81c0041e 	bne	r16,r7,100043ec <_malloc_r+0x1dc>
100043dc:	0000fb06 	br	100047cc <_malloc_r+0x5bc>
100043e0:	1801030e 	bge	r3,zero,100047f0 <_malloc_r+0x5e0>
100043e4:	84000317 	ldw	r16,12(r16)
100043e8:	81c0f826 	beq	r16,r7,100047cc <_malloc_r+0x5bc>
100043ec:	80800117 	ldw	r2,4(r16)
100043f0:	1284703a 	and	r2,r2,r10
100043f4:	1447c83a 	sub	r3,r2,r17
100043f8:	48fff90e 	bge	r9,r3,100043e0 <__alt_data_end+0xf80043e0>
100043fc:	80800317 	ldw	r2,12(r16)
10004400:	81000217 	ldw	r4,8(r16)
10004404:	89400054 	ori	r5,r17,1
10004408:	81400115 	stw	r5,4(r16)
1000440c:	20800315 	stw	r2,12(r4)
10004410:	11000215 	stw	r4,8(r2)
10004414:	8463883a 	add	r17,r16,r17
10004418:	9c400515 	stw	r17,20(r19)
1000441c:	9c400415 	stw	r17,16(r19)
10004420:	18800054 	ori	r2,r3,1
10004424:	88800115 	stw	r2,4(r17)
10004428:	8a000315 	stw	r8,12(r17)
1000442c:	8a000215 	stw	r8,8(r17)
10004430:	88e3883a 	add	r17,r17,r3
10004434:	88c00015 	stw	r3,0(r17)
10004438:	9009883a 	mov	r4,r18
1000443c:	00117100 	call	10011710 <__malloc_unlock>
10004440:	80800204 	addi	r2,r16,8
10004444:	00001b06 	br	100044b4 <_malloc_r+0x2a4>
10004448:	04400404 	movi	r17,16
1000444c:	89402536 	bltu	r17,r5,100044e4 <_malloc_r+0x2d4>
10004450:	00116ec0 	call	100116ec <__malloc_lock>
10004454:	00800184 	movi	r2,6
10004458:	01000084 	movi	r4,2
1000445c:	04c40074 	movhi	r19,4097
10004460:	1085883a 	add	r2,r2,r2
10004464:	9cd10004 	addi	r19,r19,17408
10004468:	1085883a 	add	r2,r2,r2
1000446c:	9885883a 	add	r2,r19,r2
10004470:	14000117 	ldw	r16,4(r2)
10004474:	10fffe04 	addi	r3,r2,-8
10004478:	80c0d926 	beq	r16,r3,100047e0 <_malloc_r+0x5d0>
1000447c:	80c00117 	ldw	r3,4(r16)
10004480:	81000317 	ldw	r4,12(r16)
10004484:	00bfff04 	movi	r2,-4
10004488:	1884703a 	and	r2,r3,r2
1000448c:	81400217 	ldw	r5,8(r16)
10004490:	8085883a 	add	r2,r16,r2
10004494:	10c00117 	ldw	r3,4(r2)
10004498:	29000315 	stw	r4,12(r5)
1000449c:	21400215 	stw	r5,8(r4)
100044a0:	18c00054 	ori	r3,r3,1
100044a4:	10c00115 	stw	r3,4(r2)
100044a8:	9009883a 	mov	r4,r18
100044ac:	00117100 	call	10011710 <__malloc_unlock>
100044b0:	80800204 	addi	r2,r16,8
100044b4:	dfc00a17 	ldw	ra,40(sp)
100044b8:	df000917 	ldw	fp,36(sp)
100044bc:	ddc00817 	ldw	r23,32(sp)
100044c0:	dd800717 	ldw	r22,28(sp)
100044c4:	dd400617 	ldw	r21,24(sp)
100044c8:	dd000517 	ldw	r20,20(sp)
100044cc:	dcc00417 	ldw	r19,16(sp)
100044d0:	dc800317 	ldw	r18,12(sp)
100044d4:	dc400217 	ldw	r17,8(sp)
100044d8:	dc000117 	ldw	r16,4(sp)
100044dc:	dec00b04 	addi	sp,sp,44
100044e0:	f800283a 	ret
100044e4:	00800304 	movi	r2,12
100044e8:	90800015 	stw	r2,0(r18)
100044ec:	0005883a 	mov	r2,zero
100044f0:	003ff006 	br	100044b4 <__alt_data_end+0xf80044b4>
100044f4:	01002004 	movi	r4,128
100044f8:	02001004 	movi	r8,64
100044fc:	01c00fc4 	movi	r7,63
10004500:	003f6106 	br	10004288 <__alt_data_end+0xf8004288>
10004504:	4009883a 	mov	r4,r8
10004508:	003f7506 	br	100042e0 <__alt_data_end+0xf80042e0>
1000450c:	81000317 	ldw	r4,12(r16)
10004510:	003fde06 	br	1000448c <__alt_data_end+0xf800448c>
10004514:	81c5883a 	add	r2,r16,r7
10004518:	11400117 	ldw	r5,4(r2)
1000451c:	9009883a 	mov	r4,r18
10004520:	29400054 	ori	r5,r5,1
10004524:	11400115 	stw	r5,4(r2)
10004528:	00117100 	call	10011710 <__malloc_unlock>
1000452c:	80800204 	addi	r2,r16,8
10004530:	003fe006 	br	100044b4 <__alt_data_end+0xf80044b4>
10004534:	9c000217 	ldw	r16,8(r19)
10004538:	00bfff04 	movi	r2,-4
1000453c:	85800117 	ldw	r22,4(r16)
10004540:	b0ac703a 	and	r22,r22,r2
10004544:	b4400336 	bltu	r22,r17,10004554 <_malloc_r+0x344>
10004548:	b445c83a 	sub	r2,r22,r17
1000454c:	00c003c4 	movi	r3,15
10004550:	18805d16 	blt	r3,r2,100046c8 <_malloc_r+0x4b8>
10004554:	05c40074 	movhi	r23,4097
10004558:	00840074 	movhi	r2,4097
1000455c:	109e9404 	addi	r2,r2,31312
10004560:	bdd7ad04 	addi	r23,r23,24244
10004564:	15400017 	ldw	r21,0(r2)
10004568:	b8c00017 	ldw	r3,0(r23)
1000456c:	00bfffc4 	movi	r2,-1
10004570:	858d883a 	add	r6,r16,r22
10004574:	8d6b883a 	add	r21,r17,r21
10004578:	1880ea26 	beq	r3,r2,10004924 <_malloc_r+0x714>
1000457c:	ad4403c4 	addi	r21,r21,4111
10004580:	00bc0004 	movi	r2,-4096
10004584:	a8aa703a 	and	r21,r21,r2
10004588:	a80b883a 	mov	r5,r21
1000458c:	9009883a 	mov	r4,r18
10004590:	d9800015 	stw	r6,0(sp)
10004594:	0004b5c0 	call	10004b5c <_sbrk_r>
10004598:	1029883a 	mov	r20,r2
1000459c:	00bfffc4 	movi	r2,-1
100045a0:	d9800017 	ldw	r6,0(sp)
100045a4:	a080e826 	beq	r20,r2,10004948 <_malloc_r+0x738>
100045a8:	a180a636 	bltu	r20,r6,10004844 <_malloc_r+0x634>
100045ac:	07040074 	movhi	fp,4097
100045b0:	e71ea004 	addi	fp,fp,31360
100045b4:	e0800017 	ldw	r2,0(fp)
100045b8:	a887883a 	add	r3,r21,r2
100045bc:	e0c00015 	stw	r3,0(fp)
100045c0:	3500e626 	beq	r6,r20,1000495c <_malloc_r+0x74c>
100045c4:	b9000017 	ldw	r4,0(r23)
100045c8:	00bfffc4 	movi	r2,-1
100045cc:	2080ee26 	beq	r4,r2,10004988 <_malloc_r+0x778>
100045d0:	a185c83a 	sub	r2,r20,r6
100045d4:	10c5883a 	add	r2,r2,r3
100045d8:	e0800015 	stw	r2,0(fp)
100045dc:	a0c001cc 	andi	r3,r20,7
100045e0:	1800bc26 	beq	r3,zero,100048d4 <_malloc_r+0x6c4>
100045e4:	a0e9c83a 	sub	r20,r20,r3
100045e8:	00840204 	movi	r2,4104
100045ec:	a5000204 	addi	r20,r20,8
100045f0:	10c7c83a 	sub	r3,r2,r3
100045f4:	a545883a 	add	r2,r20,r21
100045f8:	1083ffcc 	andi	r2,r2,4095
100045fc:	18abc83a 	sub	r21,r3,r2
10004600:	a80b883a 	mov	r5,r21
10004604:	9009883a 	mov	r4,r18
10004608:	0004b5c0 	call	10004b5c <_sbrk_r>
1000460c:	00ffffc4 	movi	r3,-1
10004610:	10c0e126 	beq	r2,r3,10004998 <_malloc_r+0x788>
10004614:	1505c83a 	sub	r2,r2,r20
10004618:	1545883a 	add	r2,r2,r21
1000461c:	10800054 	ori	r2,r2,1
10004620:	e0c00017 	ldw	r3,0(fp)
10004624:	9d000215 	stw	r20,8(r19)
10004628:	a0800115 	stw	r2,4(r20)
1000462c:	a8c7883a 	add	r3,r21,r3
10004630:	e0c00015 	stw	r3,0(fp)
10004634:	84c00e26 	beq	r16,r19,10004670 <_malloc_r+0x460>
10004638:	018003c4 	movi	r6,15
1000463c:	3580a72e 	bgeu	r6,r22,100048dc <_malloc_r+0x6cc>
10004640:	81400117 	ldw	r5,4(r16)
10004644:	013ffe04 	movi	r4,-8
10004648:	b0bffd04 	addi	r2,r22,-12
1000464c:	1104703a 	and	r2,r2,r4
10004650:	2900004c 	andi	r4,r5,1
10004654:	2088b03a 	or	r4,r4,r2
10004658:	81000115 	stw	r4,4(r16)
1000465c:	01400144 	movi	r5,5
10004660:	8089883a 	add	r4,r16,r2
10004664:	21400115 	stw	r5,4(r4)
10004668:	21400215 	stw	r5,8(r4)
1000466c:	3080cd36 	bltu	r6,r2,100049a4 <_malloc_r+0x794>
10004670:	00840074 	movhi	r2,4097
10004674:	109e9304 	addi	r2,r2,31308
10004678:	11000017 	ldw	r4,0(r2)
1000467c:	20c0012e 	bgeu	r4,r3,10004684 <_malloc_r+0x474>
10004680:	10c00015 	stw	r3,0(r2)
10004684:	00840074 	movhi	r2,4097
10004688:	109e9204 	addi	r2,r2,31304
1000468c:	11000017 	ldw	r4,0(r2)
10004690:	9c000217 	ldw	r16,8(r19)
10004694:	20c0012e 	bgeu	r4,r3,1000469c <_malloc_r+0x48c>
10004698:	10c00015 	stw	r3,0(r2)
1000469c:	80c00117 	ldw	r3,4(r16)
100046a0:	00bfff04 	movi	r2,-4
100046a4:	1886703a 	and	r3,r3,r2
100046a8:	1c45c83a 	sub	r2,r3,r17
100046ac:	1c400236 	bltu	r3,r17,100046b8 <_malloc_r+0x4a8>
100046b0:	00c003c4 	movi	r3,15
100046b4:	18800416 	blt	r3,r2,100046c8 <_malloc_r+0x4b8>
100046b8:	9009883a 	mov	r4,r18
100046bc:	00117100 	call	10011710 <__malloc_unlock>
100046c0:	0005883a 	mov	r2,zero
100046c4:	003f7b06 	br	100044b4 <__alt_data_end+0xf80044b4>
100046c8:	88c00054 	ori	r3,r17,1
100046cc:	80c00115 	stw	r3,4(r16)
100046d0:	8463883a 	add	r17,r16,r17
100046d4:	10800054 	ori	r2,r2,1
100046d8:	9c400215 	stw	r17,8(r19)
100046dc:	88800115 	stw	r2,4(r17)
100046e0:	9009883a 	mov	r4,r18
100046e4:	00117100 	call	10011710 <__malloc_unlock>
100046e8:	80800204 	addi	r2,r16,8
100046ec:	003f7106 	br	100044b4 <__alt_data_end+0xf80044b4>
100046f0:	00c00504 	movi	r3,20
100046f4:	18804a2e 	bgeu	r3,r2,10004820 <_malloc_r+0x610>
100046f8:	00c01504 	movi	r3,84
100046fc:	18806e36 	bltu	r3,r2,100048b8 <_malloc_r+0x6a8>
10004700:	8804d33a 	srli	r2,r17,12
10004704:	12001bc4 	addi	r8,r2,111
10004708:	11c01b84 	addi	r7,r2,110
1000470c:	4209883a 	add	r4,r8,r8
10004710:	003edd06 	br	10004288 <__alt_data_end+0xf8004288>
10004714:	3804d27a 	srli	r2,r7,9
10004718:	00c00104 	movi	r3,4
1000471c:	1880442e 	bgeu	r3,r2,10004830 <_malloc_r+0x620>
10004720:	00c00504 	movi	r3,20
10004724:	18808136 	bltu	r3,r2,1000492c <_malloc_r+0x71c>
10004728:	11401704 	addi	r5,r2,92
1000472c:	10c016c4 	addi	r3,r2,91
10004730:	294b883a 	add	r5,r5,r5
10004734:	294b883a 	add	r5,r5,r5
10004738:	294b883a 	add	r5,r5,r5
1000473c:	994b883a 	add	r5,r19,r5
10004740:	28800017 	ldw	r2,0(r5)
10004744:	01840074 	movhi	r6,4097
10004748:	297ffe04 	addi	r5,r5,-8
1000474c:	31910004 	addi	r6,r6,17408
10004750:	28806526 	beq	r5,r2,100048e8 <_malloc_r+0x6d8>
10004754:	01bfff04 	movi	r6,-4
10004758:	10c00117 	ldw	r3,4(r2)
1000475c:	1986703a 	and	r3,r3,r6
10004760:	38c0022e 	bgeu	r7,r3,1000476c <_malloc_r+0x55c>
10004764:	10800217 	ldw	r2,8(r2)
10004768:	28bffb1e 	bne	r5,r2,10004758 <__alt_data_end+0xf8004758>
1000476c:	11400317 	ldw	r5,12(r2)
10004770:	98c00117 	ldw	r3,4(r19)
10004774:	81400315 	stw	r5,12(r16)
10004778:	80800215 	stw	r2,8(r16)
1000477c:	2c000215 	stw	r16,8(r5)
10004780:	14000315 	stw	r16,12(r2)
10004784:	003ef806 	br	10004368 <__alt_data_end+0xf8004368>
10004788:	88c00054 	ori	r3,r17,1
1000478c:	80c00115 	stw	r3,4(r16)
10004790:	8463883a 	add	r17,r16,r17
10004794:	34400515 	stw	r17,20(r6)
10004798:	34400415 	stw	r17,16(r6)
1000479c:	10c00054 	ori	r3,r2,1
100047a0:	8a000315 	stw	r8,12(r17)
100047a4:	8a000215 	stw	r8,8(r17)
100047a8:	88c00115 	stw	r3,4(r17)
100047ac:	88a3883a 	add	r17,r17,r2
100047b0:	88800015 	stw	r2,0(r17)
100047b4:	9009883a 	mov	r4,r18
100047b8:	00117100 	call	10011710 <__malloc_unlock>
100047bc:	80800204 	addi	r2,r16,8
100047c0:	003f3c06 	br	100044b4 <__alt_data_end+0xf80044b4>
100047c4:	30c00117 	ldw	r3,4(r6)
100047c8:	003ee706 	br	10004368 <__alt_data_end+0xf8004368>
100047cc:	5ac00044 	addi	r11,r11,1
100047d0:	588000cc 	andi	r2,r11,3
100047d4:	31800204 	addi	r6,r6,8
100047d8:	103efd1e 	bne	r2,zero,100043d0 <__alt_data_end+0xf80043d0>
100047dc:	00002406 	br	10004870 <_malloc_r+0x660>
100047e0:	14000317 	ldw	r16,12(r2)
100047e4:	143f251e 	bne	r2,r16,1000447c <__alt_data_end+0xf800447c>
100047e8:	21000084 	addi	r4,r4,2
100047ec:	003ebc06 	br	100042e0 <__alt_data_end+0xf80042e0>
100047f0:	8085883a 	add	r2,r16,r2
100047f4:	10c00117 	ldw	r3,4(r2)
100047f8:	81000317 	ldw	r4,12(r16)
100047fc:	81400217 	ldw	r5,8(r16)
10004800:	18c00054 	ori	r3,r3,1
10004804:	10c00115 	stw	r3,4(r2)
10004808:	29000315 	stw	r4,12(r5)
1000480c:	21400215 	stw	r5,8(r4)
10004810:	9009883a 	mov	r4,r18
10004814:	00117100 	call	10011710 <__malloc_unlock>
10004818:	80800204 	addi	r2,r16,8
1000481c:	003f2506 	br	100044b4 <__alt_data_end+0xf80044b4>
10004820:	12001704 	addi	r8,r2,92
10004824:	11c016c4 	addi	r7,r2,91
10004828:	4209883a 	add	r4,r8,r8
1000482c:	003e9606 	br	10004288 <__alt_data_end+0xf8004288>
10004830:	3804d1ba 	srli	r2,r7,6
10004834:	11400e44 	addi	r5,r2,57
10004838:	10c00e04 	addi	r3,r2,56
1000483c:	294b883a 	add	r5,r5,r5
10004840:	003fbc06 	br	10004734 <__alt_data_end+0xf8004734>
10004844:	84ff5926 	beq	r16,r19,100045ac <__alt_data_end+0xf80045ac>
10004848:	00840074 	movhi	r2,4097
1000484c:	10910004 	addi	r2,r2,17408
10004850:	14000217 	ldw	r16,8(r2)
10004854:	00bfff04 	movi	r2,-4
10004858:	80c00117 	ldw	r3,4(r16)
1000485c:	1886703a 	and	r3,r3,r2
10004860:	003f9106 	br	100046a8 <__alt_data_end+0xf80046a8>
10004864:	60800217 	ldw	r2,8(r12)
10004868:	213fffc4 	addi	r4,r4,-1
1000486c:	1300651e 	bne	r2,r12,10004a04 <_malloc_r+0x7f4>
10004870:	208000cc 	andi	r2,r4,3
10004874:	633ffe04 	addi	r12,r12,-8
10004878:	103ffa1e 	bne	r2,zero,10004864 <__alt_data_end+0xf8004864>
1000487c:	98800117 	ldw	r2,4(r19)
10004880:	0146303a 	nor	r3,zero,r5
10004884:	1884703a 	and	r2,r3,r2
10004888:	98800115 	stw	r2,4(r19)
1000488c:	294b883a 	add	r5,r5,r5
10004890:	117f2836 	bltu	r2,r5,10004534 <__alt_data_end+0xf8004534>
10004894:	283f2726 	beq	r5,zero,10004534 <__alt_data_end+0xf8004534>
10004898:	2886703a 	and	r3,r5,r2
1000489c:	5809883a 	mov	r4,r11
100048a0:	183ec31e 	bne	r3,zero,100043b0 <__alt_data_end+0xf80043b0>
100048a4:	294b883a 	add	r5,r5,r5
100048a8:	2886703a 	and	r3,r5,r2
100048ac:	21000104 	addi	r4,r4,4
100048b0:	183ffc26 	beq	r3,zero,100048a4 <__alt_data_end+0xf80048a4>
100048b4:	003ebe06 	br	100043b0 <__alt_data_end+0xf80043b0>
100048b8:	00c05504 	movi	r3,340
100048bc:	18801236 	bltu	r3,r2,10004908 <_malloc_r+0x6f8>
100048c0:	8804d3fa 	srli	r2,r17,15
100048c4:	12001e04 	addi	r8,r2,120
100048c8:	11c01dc4 	addi	r7,r2,119
100048cc:	4209883a 	add	r4,r8,r8
100048d0:	003e6d06 	br	10004288 <__alt_data_end+0xf8004288>
100048d4:	00c40004 	movi	r3,4096
100048d8:	003f4606 	br	100045f4 <__alt_data_end+0xf80045f4>
100048dc:	00800044 	movi	r2,1
100048e0:	a0800115 	stw	r2,4(r20)
100048e4:	003f7406 	br	100046b8 <__alt_data_end+0xf80046b8>
100048e8:	1805d0ba 	srai	r2,r3,2
100048ec:	01c00044 	movi	r7,1
100048f0:	30c00117 	ldw	r3,4(r6)
100048f4:	388e983a 	sll	r7,r7,r2
100048f8:	2805883a 	mov	r2,r5
100048fc:	38c6b03a 	or	r3,r7,r3
10004900:	30c00115 	stw	r3,4(r6)
10004904:	003f9b06 	br	10004774 <__alt_data_end+0xf8004774>
10004908:	00c15504 	movi	r3,1364
1000490c:	18801a36 	bltu	r3,r2,10004978 <_malloc_r+0x768>
10004910:	8804d4ba 	srli	r2,r17,18
10004914:	12001f44 	addi	r8,r2,125
10004918:	11c01f04 	addi	r7,r2,124
1000491c:	4209883a 	add	r4,r8,r8
10004920:	003e5906 	br	10004288 <__alt_data_end+0xf8004288>
10004924:	ad400404 	addi	r21,r21,16
10004928:	003f1706 	br	10004588 <__alt_data_end+0xf8004588>
1000492c:	00c01504 	movi	r3,84
10004930:	18802336 	bltu	r3,r2,100049c0 <_malloc_r+0x7b0>
10004934:	3804d33a 	srli	r2,r7,12
10004938:	11401bc4 	addi	r5,r2,111
1000493c:	10c01b84 	addi	r3,r2,110
10004940:	294b883a 	add	r5,r5,r5
10004944:	003f7b06 	br	10004734 <__alt_data_end+0xf8004734>
10004948:	9c000217 	ldw	r16,8(r19)
1000494c:	00bfff04 	movi	r2,-4
10004950:	80c00117 	ldw	r3,4(r16)
10004954:	1886703a 	and	r3,r3,r2
10004958:	003f5306 	br	100046a8 <__alt_data_end+0xf80046a8>
1000495c:	3083ffcc 	andi	r2,r6,4095
10004960:	103f181e 	bne	r2,zero,100045c4 <__alt_data_end+0xf80045c4>
10004964:	99000217 	ldw	r4,8(r19)
10004968:	b545883a 	add	r2,r22,r21
1000496c:	10800054 	ori	r2,r2,1
10004970:	20800115 	stw	r2,4(r4)
10004974:	003f3e06 	br	10004670 <__alt_data_end+0xf8004670>
10004978:	01003f84 	movi	r4,254
1000497c:	02001fc4 	movi	r8,127
10004980:	01c01f84 	movi	r7,126
10004984:	003e4006 	br	10004288 <__alt_data_end+0xf8004288>
10004988:	00840074 	movhi	r2,4097
1000498c:	1097ad04 	addi	r2,r2,24244
10004990:	15000015 	stw	r20,0(r2)
10004994:	003f1106 	br	100045dc <__alt_data_end+0xf80045dc>
10004998:	00800044 	movi	r2,1
1000499c:	002b883a 	mov	r21,zero
100049a0:	003f1f06 	br	10004620 <__alt_data_end+0xf8004620>
100049a4:	81400204 	addi	r5,r16,8
100049a8:	9009883a 	mov	r4,r18
100049ac:	000917c0 	call	1000917c <_free_r>
100049b0:	00840074 	movhi	r2,4097
100049b4:	109ea004 	addi	r2,r2,31360
100049b8:	10c00017 	ldw	r3,0(r2)
100049bc:	003f2c06 	br	10004670 <__alt_data_end+0xf8004670>
100049c0:	00c05504 	movi	r3,340
100049c4:	18800536 	bltu	r3,r2,100049dc <_malloc_r+0x7cc>
100049c8:	3804d3fa 	srli	r2,r7,15
100049cc:	11401e04 	addi	r5,r2,120
100049d0:	10c01dc4 	addi	r3,r2,119
100049d4:	294b883a 	add	r5,r5,r5
100049d8:	003f5606 	br	10004734 <__alt_data_end+0xf8004734>
100049dc:	00c15504 	movi	r3,1364
100049e0:	18800536 	bltu	r3,r2,100049f8 <_malloc_r+0x7e8>
100049e4:	3804d4ba 	srli	r2,r7,18
100049e8:	11401f44 	addi	r5,r2,125
100049ec:	10c01f04 	addi	r3,r2,124
100049f0:	294b883a 	add	r5,r5,r5
100049f4:	003f4f06 	br	10004734 <__alt_data_end+0xf8004734>
100049f8:	01403f84 	movi	r5,254
100049fc:	00c01f84 	movi	r3,126
10004a00:	003f4c06 	br	10004734 <__alt_data_end+0xf8004734>
10004a04:	98800117 	ldw	r2,4(r19)
10004a08:	003fa006 	br	1000488c <__alt_data_end+0xf800488c>
10004a0c:	8808d0fa 	srli	r4,r17,3
10004a10:	20800044 	addi	r2,r4,1
10004a14:	1085883a 	add	r2,r2,r2
10004a18:	003e9006 	br	1000445c <__alt_data_end+0xf800445c>

10004a1c <_printf_r>:
10004a1c:	defffd04 	addi	sp,sp,-12
10004a20:	2805883a 	mov	r2,r5
10004a24:	dfc00015 	stw	ra,0(sp)
10004a28:	d9800115 	stw	r6,4(sp)
10004a2c:	d9c00215 	stw	r7,8(sp)
10004a30:	21400217 	ldw	r5,8(r4)
10004a34:	d9c00104 	addi	r7,sp,4
10004a38:	100d883a 	mov	r6,r2
10004a3c:	0004c480 	call	10004c48 <___vfprintf_internal_r>
10004a40:	dfc00017 	ldw	ra,0(sp)
10004a44:	dec00304 	addi	sp,sp,12
10004a48:	f800283a 	ret

10004a4c <printf>:
10004a4c:	defffc04 	addi	sp,sp,-16
10004a50:	dfc00015 	stw	ra,0(sp)
10004a54:	d9400115 	stw	r5,4(sp)
10004a58:	d9800215 	stw	r6,8(sp)
10004a5c:	d9c00315 	stw	r7,12(sp)
10004a60:	00840074 	movhi	r2,4097
10004a64:	1097b004 	addi	r2,r2,24256
10004a68:	10800017 	ldw	r2,0(r2)
10004a6c:	200b883a 	mov	r5,r4
10004a70:	d9800104 	addi	r6,sp,4
10004a74:	11000217 	ldw	r4,8(r2)
10004a78:	0006f240 	call	10006f24 <__vfprintf_internal>
10004a7c:	dfc00017 	ldw	ra,0(sp)
10004a80:	dec00404 	addi	sp,sp,16
10004a84:	f800283a 	ret

10004a88 <_puts_r>:
10004a88:	defff604 	addi	sp,sp,-40
10004a8c:	dc000715 	stw	r16,28(sp)
10004a90:	2021883a 	mov	r16,r4
10004a94:	2809883a 	mov	r4,r5
10004a98:	dc400815 	stw	r17,32(sp)
10004a9c:	dfc00915 	stw	ra,36(sp)
10004aa0:	2823883a 	mov	r17,r5
10004aa4:	0004bb00 	call	10004bb0 <strlen>
10004aa8:	10c00044 	addi	r3,r2,1
10004aac:	d8800115 	stw	r2,4(sp)
10004ab0:	00840074 	movhi	r2,4097
10004ab4:	10904004 	addi	r2,r2,16640
10004ab8:	d8800215 	stw	r2,8(sp)
10004abc:	00800044 	movi	r2,1
10004ac0:	d8800315 	stw	r2,12(sp)
10004ac4:	00800084 	movi	r2,2
10004ac8:	dc400015 	stw	r17,0(sp)
10004acc:	d8c00615 	stw	r3,24(sp)
10004ad0:	dec00415 	stw	sp,16(sp)
10004ad4:	d8800515 	stw	r2,20(sp)
10004ad8:	80000226 	beq	r16,zero,10004ae4 <_puts_r+0x5c>
10004adc:	80800e17 	ldw	r2,56(r16)
10004ae0:	10001426 	beq	r2,zero,10004b34 <_puts_r+0xac>
10004ae4:	81400217 	ldw	r5,8(r16)
10004ae8:	2880030b 	ldhu	r2,12(r5)
10004aec:	10c8000c 	andi	r3,r2,8192
10004af0:	1800061e 	bne	r3,zero,10004b0c <_puts_r+0x84>
10004af4:	29001917 	ldw	r4,100(r5)
10004af8:	00f7ffc4 	movi	r3,-8193
10004afc:	10880014 	ori	r2,r2,8192
10004b00:	20c6703a 	and	r3,r4,r3
10004b04:	2880030d 	sth	r2,12(r5)
10004b08:	28c01915 	stw	r3,100(r5)
10004b0c:	d9800404 	addi	r6,sp,16
10004b10:	8009883a 	mov	r4,r16
10004b14:	000948c0 	call	1000948c <__sfvwrite_r>
10004b18:	1000091e 	bne	r2,zero,10004b40 <_puts_r+0xb8>
10004b1c:	00800284 	movi	r2,10
10004b20:	dfc00917 	ldw	ra,36(sp)
10004b24:	dc400817 	ldw	r17,32(sp)
10004b28:	dc000717 	ldw	r16,28(sp)
10004b2c:	dec00a04 	addi	sp,sp,40
10004b30:	f800283a 	ret
10004b34:	8009883a 	mov	r4,r16
10004b38:	00090080 	call	10009008 <__sinit>
10004b3c:	003fe906 	br	10004ae4 <__alt_data_end+0xf8004ae4>
10004b40:	00bfffc4 	movi	r2,-1
10004b44:	003ff606 	br	10004b20 <__alt_data_end+0xf8004b20>

10004b48 <puts>:
10004b48:	00840074 	movhi	r2,4097
10004b4c:	1097b004 	addi	r2,r2,24256
10004b50:	200b883a 	mov	r5,r4
10004b54:	11000017 	ldw	r4,0(r2)
10004b58:	0004a881 	jmpi	10004a88 <_puts_r>

10004b5c <_sbrk_r>:
10004b5c:	defffd04 	addi	sp,sp,-12
10004b60:	dc000015 	stw	r16,0(sp)
10004b64:	04040074 	movhi	r16,4097
10004b68:	dc400115 	stw	r17,4(sp)
10004b6c:	841e9504 	addi	r16,r16,31316
10004b70:	2023883a 	mov	r17,r4
10004b74:	2809883a 	mov	r4,r5
10004b78:	dfc00215 	stw	ra,8(sp)
10004b7c:	80000015 	stw	zero,0(r16)
10004b80:	00118f80 	call	100118f8 <sbrk>
10004b84:	00ffffc4 	movi	r3,-1
10004b88:	10c00526 	beq	r2,r3,10004ba0 <_sbrk_r+0x44>
10004b8c:	dfc00217 	ldw	ra,8(sp)
10004b90:	dc400117 	ldw	r17,4(sp)
10004b94:	dc000017 	ldw	r16,0(sp)
10004b98:	dec00304 	addi	sp,sp,12
10004b9c:	f800283a 	ret
10004ba0:	80c00017 	ldw	r3,0(r16)
10004ba4:	183ff926 	beq	r3,zero,10004b8c <__alt_data_end+0xf8004b8c>
10004ba8:	88c00015 	stw	r3,0(r17)
10004bac:	003ff706 	br	10004b8c <__alt_data_end+0xf8004b8c>

10004bb0 <strlen>:
10004bb0:	208000cc 	andi	r2,r4,3
10004bb4:	10002026 	beq	r2,zero,10004c38 <strlen+0x88>
10004bb8:	20800007 	ldb	r2,0(r4)
10004bbc:	10002026 	beq	r2,zero,10004c40 <strlen+0x90>
10004bc0:	2005883a 	mov	r2,r4
10004bc4:	00000206 	br	10004bd0 <strlen+0x20>
10004bc8:	10c00007 	ldb	r3,0(r2)
10004bcc:	18001826 	beq	r3,zero,10004c30 <strlen+0x80>
10004bd0:	10800044 	addi	r2,r2,1
10004bd4:	10c000cc 	andi	r3,r2,3
10004bd8:	183ffb1e 	bne	r3,zero,10004bc8 <__alt_data_end+0xf8004bc8>
10004bdc:	10c00017 	ldw	r3,0(r2)
10004be0:	01ffbff4 	movhi	r7,65279
10004be4:	39ffbfc4 	addi	r7,r7,-257
10004be8:	00ca303a 	nor	r5,zero,r3
10004bec:	01a02074 	movhi	r6,32897
10004bf0:	19c7883a 	add	r3,r3,r7
10004bf4:	31a02004 	addi	r6,r6,-32640
10004bf8:	1946703a 	and	r3,r3,r5
10004bfc:	1986703a 	and	r3,r3,r6
10004c00:	1800091e 	bne	r3,zero,10004c28 <strlen+0x78>
10004c04:	10800104 	addi	r2,r2,4
10004c08:	10c00017 	ldw	r3,0(r2)
10004c0c:	19cb883a 	add	r5,r3,r7
10004c10:	00c6303a 	nor	r3,zero,r3
10004c14:	28c6703a 	and	r3,r5,r3
10004c18:	1986703a 	and	r3,r3,r6
10004c1c:	183ff926 	beq	r3,zero,10004c04 <__alt_data_end+0xf8004c04>
10004c20:	00000106 	br	10004c28 <strlen+0x78>
10004c24:	10800044 	addi	r2,r2,1
10004c28:	10c00007 	ldb	r3,0(r2)
10004c2c:	183ffd1e 	bne	r3,zero,10004c24 <__alt_data_end+0xf8004c24>
10004c30:	1105c83a 	sub	r2,r2,r4
10004c34:	f800283a 	ret
10004c38:	2005883a 	mov	r2,r4
10004c3c:	003fe706 	br	10004bdc <__alt_data_end+0xf8004bdc>
10004c40:	0005883a 	mov	r2,zero
10004c44:	f800283a 	ret

10004c48 <___vfprintf_internal_r>:
10004c48:	deffb804 	addi	sp,sp,-288
10004c4c:	dfc04715 	stw	ra,284(sp)
10004c50:	ddc04515 	stw	r23,276(sp)
10004c54:	dd404315 	stw	r21,268(sp)
10004c58:	d9002d15 	stw	r4,180(sp)
10004c5c:	282f883a 	mov	r23,r5
10004c60:	302b883a 	mov	r21,r6
10004c64:	d9c02e15 	stw	r7,184(sp)
10004c68:	df004615 	stw	fp,280(sp)
10004c6c:	dd804415 	stw	r22,272(sp)
10004c70:	dd004215 	stw	r20,264(sp)
10004c74:	dcc04115 	stw	r19,260(sp)
10004c78:	dc804015 	stw	r18,256(sp)
10004c7c:	dc403f15 	stw	r17,252(sp)
10004c80:	dc003e15 	stw	r16,248(sp)
10004c84:	0009b880 	call	10009b88 <_localeconv_r>
10004c88:	10800017 	ldw	r2,0(r2)
10004c8c:	1009883a 	mov	r4,r2
10004c90:	d8803415 	stw	r2,208(sp)
10004c94:	0004bb00 	call	10004bb0 <strlen>
10004c98:	d8803715 	stw	r2,220(sp)
10004c9c:	d8802d17 	ldw	r2,180(sp)
10004ca0:	10000226 	beq	r2,zero,10004cac <___vfprintf_internal_r+0x64>
10004ca4:	10800e17 	ldw	r2,56(r2)
10004ca8:	1000fb26 	beq	r2,zero,10005098 <___vfprintf_internal_r+0x450>
10004cac:	b880030b 	ldhu	r2,12(r23)
10004cb0:	10c8000c 	andi	r3,r2,8192
10004cb4:	1800061e 	bne	r3,zero,10004cd0 <___vfprintf_internal_r+0x88>
10004cb8:	b9001917 	ldw	r4,100(r23)
10004cbc:	00f7ffc4 	movi	r3,-8193
10004cc0:	10880014 	ori	r2,r2,8192
10004cc4:	20c6703a 	and	r3,r4,r3
10004cc8:	b880030d 	sth	r2,12(r23)
10004ccc:	b8c01915 	stw	r3,100(r23)
10004cd0:	10c0020c 	andi	r3,r2,8
10004cd4:	1800c326 	beq	r3,zero,10004fe4 <___vfprintf_internal_r+0x39c>
10004cd8:	b8c00417 	ldw	r3,16(r23)
10004cdc:	1800c126 	beq	r3,zero,10004fe4 <___vfprintf_internal_r+0x39c>
10004ce0:	1080068c 	andi	r2,r2,26
10004ce4:	00c00284 	movi	r3,10
10004ce8:	10c0c626 	beq	r2,r3,10005004 <___vfprintf_internal_r+0x3bc>
10004cec:	d8c00404 	addi	r3,sp,16
10004cf0:	05040074 	movhi	r20,4097
10004cf4:	d9001e04 	addi	r4,sp,120
10004cf8:	a5105184 	addi	r20,r20,16710
10004cfc:	d8c01e15 	stw	r3,120(sp)
10004d00:	d8002015 	stw	zero,128(sp)
10004d04:	d8001f15 	stw	zero,124(sp)
10004d08:	d8003315 	stw	zero,204(sp)
10004d0c:	d8003615 	stw	zero,216(sp)
10004d10:	d8003815 	stw	zero,224(sp)
10004d14:	1811883a 	mov	r8,r3
10004d18:	d8003915 	stw	zero,228(sp)
10004d1c:	d8003a15 	stw	zero,232(sp)
10004d20:	d8002f15 	stw	zero,188(sp)
10004d24:	d9002815 	stw	r4,160(sp)
10004d28:	a8800007 	ldb	r2,0(r21)
10004d2c:	10028b26 	beq	r2,zero,1000575c <___vfprintf_internal_r+0xb14>
10004d30:	00c00944 	movi	r3,37
10004d34:	a823883a 	mov	r17,r21
10004d38:	10c0021e 	bne	r2,r3,10004d44 <___vfprintf_internal_r+0xfc>
10004d3c:	00001406 	br	10004d90 <___vfprintf_internal_r+0x148>
10004d40:	10c00326 	beq	r2,r3,10004d50 <___vfprintf_internal_r+0x108>
10004d44:	8c400044 	addi	r17,r17,1
10004d48:	88800007 	ldb	r2,0(r17)
10004d4c:	103ffc1e 	bne	r2,zero,10004d40 <__alt_data_end+0xf8004d40>
10004d50:	8d61c83a 	sub	r16,r17,r21
10004d54:	80000e26 	beq	r16,zero,10004d90 <___vfprintf_internal_r+0x148>
10004d58:	d8c02017 	ldw	r3,128(sp)
10004d5c:	d8801f17 	ldw	r2,124(sp)
10004d60:	45400015 	stw	r21,0(r8)
10004d64:	1c07883a 	add	r3,r3,r16
10004d68:	10800044 	addi	r2,r2,1
10004d6c:	d8c02015 	stw	r3,128(sp)
10004d70:	44000115 	stw	r16,4(r8)
10004d74:	d8801f15 	stw	r2,124(sp)
10004d78:	00c001c4 	movi	r3,7
10004d7c:	1880a916 	blt	r3,r2,10005024 <___vfprintf_internal_r+0x3dc>
10004d80:	42000204 	addi	r8,r8,8
10004d84:	d9402f17 	ldw	r5,188(sp)
10004d88:	2c0b883a 	add	r5,r5,r16
10004d8c:	d9402f15 	stw	r5,188(sp)
10004d90:	88800007 	ldb	r2,0(r17)
10004d94:	1000aa26 	beq	r2,zero,10005040 <___vfprintf_internal_r+0x3f8>
10004d98:	8d400044 	addi	r21,r17,1
10004d9c:	8c400047 	ldb	r17,1(r17)
10004da0:	0021883a 	mov	r16,zero
10004da4:	00bfffc4 	movi	r2,-1
10004da8:	0025883a 	mov	r18,zero
10004dac:	dc002905 	stb	r16,164(sp)
10004db0:	d8002785 	stb	zero,158(sp)
10004db4:	d8002b05 	stb	zero,172(sp)
10004db8:	d8802a15 	stw	r2,168(sp)
10004dbc:	d8003115 	stw	zero,196(sp)
10004dc0:	04c01604 	movi	r19,88
10004dc4:	05800244 	movi	r22,9
10004dc8:	9021883a 	mov	r16,r18
10004dcc:	4039883a 	mov	fp,r8
10004dd0:	ad400044 	addi	r21,r21,1
10004dd4:	88bff804 	addi	r2,r17,-32
10004dd8:	98833236 	bltu	r19,r2,10005aa4 <___vfprintf_internal_r+0xe5c>
10004ddc:	100490ba 	slli	r2,r2,2
10004de0:	00c40034 	movhi	r3,4096
10004de4:	18d37d04 	addi	r3,r3,19956
10004de8:	10c5883a 	add	r2,r2,r3
10004dec:	10800017 	ldw	r2,0(r2)
10004df0:	1000683a 	jmp	r2
10004df4:	1000599c 	xori	zero,r2,358
10004df8:	10005aa4 	muli	zero,r2,362
10004dfc:	10005aa4 	muli	zero,r2,362
10004e00:	100059bc 	xorhi	zero,r2,358
10004e04:	10005aa4 	muli	zero,r2,362
10004e08:	10005aa4 	muli	zero,r2,362
10004e0c:	10005aa4 	muli	zero,r2,362
10004e10:	10005aa4 	muli	zero,r2,362
10004e14:	10005aa4 	muli	zero,r2,362
10004e18:	10005aa4 	muli	zero,r2,362
10004e1c:	100050a4 	muli	zero,r2,322
10004e20:	100058ac 	andhi	zero,r2,354
10004e24:	10005aa4 	muli	zero,r2,362
10004e28:	10004f68 	cmpgeui	zero,r2,317
10004e2c:	100050c8 	cmpgei	zero,r2,323
10004e30:	10005aa4 	muli	zero,r2,362
10004e34:	10005118 	cmpnei	zero,r2,324
10004e38:	10005124 	muli	zero,r2,324
10004e3c:	10005124 	muli	zero,r2,324
10004e40:	10005124 	muli	zero,r2,324
10004e44:	10005124 	muli	zero,r2,324
10004e48:	10005124 	muli	zero,r2,324
10004e4c:	10005124 	muli	zero,r2,324
10004e50:	10005124 	muli	zero,r2,324
10004e54:	10005124 	muli	zero,r2,324
10004e58:	10005124 	muli	zero,r2,324
10004e5c:	10005aa4 	muli	zero,r2,362
10004e60:	10005aa4 	muli	zero,r2,362
10004e64:	10005aa4 	muli	zero,r2,362
10004e68:	10005aa4 	muli	zero,r2,362
10004e6c:	10005aa4 	muli	zero,r2,362
10004e70:	10005aa4 	muli	zero,r2,362
10004e74:	10005aa4 	muli	zero,r2,362
10004e78:	10005aa4 	muli	zero,r2,362
10004e7c:	10005aa4 	muli	zero,r2,362
10004e80:	10005aa4 	muli	zero,r2,362
10004e84:	10005160 	cmpeqi	zero,r2,325
10004e88:	10005228 	cmpgeui	zero,r2,328
10004e8c:	10005aa4 	muli	zero,r2,362
10004e90:	10005228 	cmpgeui	zero,r2,328
10004e94:	10005aa4 	muli	zero,r2,362
10004e98:	10005aa4 	muli	zero,r2,362
10004e9c:	10005aa4 	muli	zero,r2,362
10004ea0:	10005aa4 	muli	zero,r2,362
10004ea4:	100052d4 	ori	zero,r2,331
10004ea8:	10005aa4 	muli	zero,r2,362
10004eac:	10005aa4 	muli	zero,r2,362
10004eb0:	100052e0 	cmpeqi	zero,r2,331
10004eb4:	10005aa4 	muli	zero,r2,362
10004eb8:	10005aa4 	muli	zero,r2,362
10004ebc:	10005aa4 	muli	zero,r2,362
10004ec0:	10005aa4 	muli	zero,r2,362
10004ec4:	10005aa4 	muli	zero,r2,362
10004ec8:	10005764 	muli	zero,r2,349
10004ecc:	10005aa4 	muli	zero,r2,362
10004ed0:	10005aa4 	muli	zero,r2,362
10004ed4:	100057d0 	cmplti	zero,r2,351
10004ed8:	10005aa4 	muli	zero,r2,362
10004edc:	10005aa4 	muli	zero,r2,362
10004ee0:	10005aa4 	muli	zero,r2,362
10004ee4:	10005aa4 	muli	zero,r2,362
10004ee8:	10005aa4 	muli	zero,r2,362
10004eec:	10005aa4 	muli	zero,r2,362
10004ef0:	10005aa4 	muli	zero,r2,362
10004ef4:	10005aa4 	muli	zero,r2,362
10004ef8:	10005aa4 	muli	zero,r2,362
10004efc:	10005aa4 	muli	zero,r2,362
10004f00:	10005a48 	cmpgei	zero,r2,361
10004f04:	100059c8 	cmpgei	zero,r2,359
10004f08:	10005228 	cmpgeui	zero,r2,328
10004f0c:	10005228 	cmpgeui	zero,r2,328
10004f10:	10005228 	cmpgeui	zero,r2,328
10004f14:	100059e8 	cmpgeui	zero,r2,359
10004f18:	100059c8 	cmpgei	zero,r2,359
10004f1c:	10005aa4 	muli	zero,r2,362
10004f20:	10005aa4 	muli	zero,r2,362
10004f24:	100059f4 	orhi	zero,r2,359
10004f28:	10005aa4 	muli	zero,r2,362
10004f2c:	10005a08 	cmpgei	zero,r2,360
10004f30:	1000588c 	andi	zero,r2,354
10004f34:	10004f74 	orhi	zero,r2,317
10004f38:	100058c4 	addi	zero,r2,355
10004f3c:	10005aa4 	muli	zero,r2,362
10004f40:	100058d0 	cmplti	zero,r2,355
10004f44:	10005aa4 	muli	zero,r2,362
10004f48:	10005934 	orhi	zero,r2,356
10004f4c:	10005aa4 	muli	zero,r2,362
10004f50:	10005aa4 	muli	zero,r2,362
10004f54:	10005954 	ori	zero,r2,357
10004f58:	d8c03117 	ldw	r3,196(sp)
10004f5c:	d8802e15 	stw	r2,184(sp)
10004f60:	00c7c83a 	sub	r3,zero,r3
10004f64:	d8c03115 	stw	r3,196(sp)
10004f68:	84000114 	ori	r16,r16,4
10004f6c:	ac400007 	ldb	r17,0(r21)
10004f70:	003f9706 	br	10004dd0 <__alt_data_end+0xf8004dd0>
10004f74:	00800c04 	movi	r2,48
10004f78:	d8802705 	stb	r2,156(sp)
10004f7c:	00801e04 	movi	r2,120
10004f80:	d8802745 	stb	r2,157(sp)
10004f84:	d9002a17 	ldw	r4,168(sp)
10004f88:	d8802e17 	ldw	r2,184(sp)
10004f8c:	d8002785 	stb	zero,158(sp)
10004f90:	e011883a 	mov	r8,fp
10004f94:	10c00104 	addi	r3,r2,4
10004f98:	14c00017 	ldw	r19,0(r2)
10004f9c:	002d883a 	mov	r22,zero
10004fa0:	80800094 	ori	r2,r16,2
10004fa4:	2002ca16 	blt	r4,zero,10005ad0 <___vfprintf_internal_r+0xe88>
10004fa8:	00bfdfc4 	movi	r2,-129
10004fac:	80a4703a 	and	r18,r16,r2
10004fb0:	d8c02e15 	stw	r3,184(sp)
10004fb4:	94800094 	ori	r18,r18,2
10004fb8:	9802b41e 	bne	r19,zero,10005a8c <___vfprintf_internal_r+0xe44>
10004fbc:	01440074 	movhi	r5,4097
10004fc0:	29504a04 	addi	r5,r5,16680
10004fc4:	d9403915 	stw	r5,228(sp)
10004fc8:	04401e04 	movi	r17,120
10004fcc:	d8802a17 	ldw	r2,168(sp)
10004fd0:	0039883a 	mov	fp,zero
10004fd4:	1001fa26 	beq	r2,zero,100057c0 <___vfprintf_internal_r+0xb78>
10004fd8:	0027883a 	mov	r19,zero
10004fdc:	002d883a 	mov	r22,zero
10004fe0:	00021906 	br	10005848 <___vfprintf_internal_r+0xc00>
10004fe4:	d9002d17 	ldw	r4,180(sp)
10004fe8:	b80b883a 	mov	r5,r23
10004fec:	0006ffc0 	call	10006ffc <__swsetup_r>
10004ff0:	1005dc1e 	bne	r2,zero,10006764 <___vfprintf_internal_r+0x1b1c>
10004ff4:	b880030b 	ldhu	r2,12(r23)
10004ff8:	00c00284 	movi	r3,10
10004ffc:	1080068c 	andi	r2,r2,26
10005000:	10ff3a1e 	bne	r2,r3,10004cec <__alt_data_end+0xf8004cec>
10005004:	b880038f 	ldh	r2,14(r23)
10005008:	103f3816 	blt	r2,zero,10004cec <__alt_data_end+0xf8004cec>
1000500c:	d9c02e17 	ldw	r7,184(sp)
10005010:	d9002d17 	ldw	r4,180(sp)
10005014:	a80d883a 	mov	r6,r21
10005018:	b80b883a 	mov	r5,r23
1000501c:	0006f400 	call	10006f40 <__sbprintf>
10005020:	00001106 	br	10005068 <___vfprintf_internal_r+0x420>
10005024:	d9002d17 	ldw	r4,180(sp)
10005028:	d9801e04 	addi	r6,sp,120
1000502c:	b80b883a 	mov	r5,r23
10005030:	000bbc80 	call	1000bbc8 <__sprint_r>
10005034:	1000081e 	bne	r2,zero,10005058 <___vfprintf_internal_r+0x410>
10005038:	da000404 	addi	r8,sp,16
1000503c:	003f5106 	br	10004d84 <__alt_data_end+0xf8004d84>
10005040:	d8802017 	ldw	r2,128(sp)
10005044:	10000426 	beq	r2,zero,10005058 <___vfprintf_internal_r+0x410>
10005048:	d9002d17 	ldw	r4,180(sp)
1000504c:	d9801e04 	addi	r6,sp,120
10005050:	b80b883a 	mov	r5,r23
10005054:	000bbc80 	call	1000bbc8 <__sprint_r>
10005058:	b880030b 	ldhu	r2,12(r23)
1000505c:	1080100c 	andi	r2,r2,64
10005060:	1005c01e 	bne	r2,zero,10006764 <___vfprintf_internal_r+0x1b1c>
10005064:	d8802f17 	ldw	r2,188(sp)
10005068:	dfc04717 	ldw	ra,284(sp)
1000506c:	df004617 	ldw	fp,280(sp)
10005070:	ddc04517 	ldw	r23,276(sp)
10005074:	dd804417 	ldw	r22,272(sp)
10005078:	dd404317 	ldw	r21,268(sp)
1000507c:	dd004217 	ldw	r20,264(sp)
10005080:	dcc04117 	ldw	r19,260(sp)
10005084:	dc804017 	ldw	r18,256(sp)
10005088:	dc403f17 	ldw	r17,252(sp)
1000508c:	dc003e17 	ldw	r16,248(sp)
10005090:	dec04804 	addi	sp,sp,288
10005094:	f800283a 	ret
10005098:	d9002d17 	ldw	r4,180(sp)
1000509c:	00090080 	call	10009008 <__sinit>
100050a0:	003f0206 	br	10004cac <__alt_data_end+0xf8004cac>
100050a4:	d9002e17 	ldw	r4,184(sp)
100050a8:	d9402e17 	ldw	r5,184(sp)
100050ac:	21000017 	ldw	r4,0(r4)
100050b0:	28800104 	addi	r2,r5,4
100050b4:	d9003115 	stw	r4,196(sp)
100050b8:	203fa716 	blt	r4,zero,10004f58 <__alt_data_end+0xf8004f58>
100050bc:	d8802e15 	stw	r2,184(sp)
100050c0:	ac400007 	ldb	r17,0(r21)
100050c4:	003f4206 	br	10004dd0 <__alt_data_end+0xf8004dd0>
100050c8:	ac400007 	ldb	r17,0(r21)
100050cc:	01000a84 	movi	r4,42
100050d0:	a8c00044 	addi	r3,r21,1
100050d4:	89075826 	beq	r17,r4,10006e38 <___vfprintf_internal_r+0x21f0>
100050d8:	8cbff404 	addi	r18,r17,-48
100050dc:	b486ae36 	bltu	r22,r18,10006b98 <___vfprintf_internal_r+0x1f50>
100050e0:	0009883a 	mov	r4,zero
100050e4:	1823883a 	mov	r17,r3
100050e8:	01400284 	movi	r5,10
100050ec:	000e8840 	call	1000e884 <__mulsi3>
100050f0:	88c00007 	ldb	r3,0(r17)
100050f4:	1489883a 	add	r4,r2,r18
100050f8:	8d400044 	addi	r21,r17,1
100050fc:	1cbff404 	addi	r18,r3,-48
10005100:	a823883a 	mov	r17,r21
10005104:	b4bff82e 	bgeu	r22,r18,100050e8 <__alt_data_end+0xf80050e8>
10005108:	1823883a 	mov	r17,r3
1000510c:	2005f616 	blt	r4,zero,100068e8 <___vfprintf_internal_r+0x1ca0>
10005110:	d9002a15 	stw	r4,168(sp)
10005114:	003f2f06 	br	10004dd4 <__alt_data_end+0xf8004dd4>
10005118:	84002014 	ori	r16,r16,128
1000511c:	ac400007 	ldb	r17,0(r21)
10005120:	003f2b06 	br	10004dd0 <__alt_data_end+0xf8004dd0>
10005124:	8cbff404 	addi	r18,r17,-48
10005128:	d8003115 	stw	zero,196(sp)
1000512c:	0009883a 	mov	r4,zero
10005130:	a823883a 	mov	r17,r21
10005134:	01400284 	movi	r5,10
10005138:	000e8840 	call	1000e884 <__mulsi3>
1000513c:	88c00007 	ldb	r3,0(r17)
10005140:	9089883a 	add	r4,r18,r2
10005144:	ad400044 	addi	r21,r21,1
10005148:	1cbff404 	addi	r18,r3,-48
1000514c:	a823883a 	mov	r17,r21
10005150:	b4bff82e 	bgeu	r22,r18,10005134 <__alt_data_end+0xf8005134>
10005154:	1823883a 	mov	r17,r3
10005158:	d9003115 	stw	r4,196(sp)
1000515c:	003f1d06 	br	10004dd4 <__alt_data_end+0xf8004dd4>
10005160:	8025883a 	mov	r18,r16
10005164:	dc002903 	ldbu	r16,164(sp)
10005168:	e011883a 	mov	r8,fp
1000516c:	84003fcc 	andi	r16,r16,255
10005170:	8007531e 	bne	r16,zero,10006ec0 <___vfprintf_internal_r+0x2278>
10005174:	94800414 	ori	r18,r18,16
10005178:	9080080c 	andi	r2,r18,32
1000517c:	1003a326 	beq	r2,zero,1000600c <___vfprintf_internal_r+0x13c4>
10005180:	d9002e17 	ldw	r4,184(sp)
10005184:	20800117 	ldw	r2,4(r4)
10005188:	24c00017 	ldw	r19,0(r4)
1000518c:	21000204 	addi	r4,r4,8
10005190:	d9002e15 	stw	r4,184(sp)
10005194:	102d883a 	mov	r22,r2
10005198:	10047316 	blt	r2,zero,10006368 <___vfprintf_internal_r+0x1720>
1000519c:	d9002a17 	ldw	r4,168(sp)
100051a0:	df002783 	ldbu	fp,158(sp)
100051a4:	2003e416 	blt	r4,zero,10006138 <___vfprintf_internal_r+0x14f0>
100051a8:	00ffdfc4 	movi	r3,-129
100051ac:	9d84b03a 	or	r2,r19,r22
100051b0:	90e4703a 	and	r18,r18,r3
100051b4:	10018026 	beq	r2,zero,100057b8 <___vfprintf_internal_r+0xb70>
100051b8:	b003ab26 	beq	r22,zero,10006068 <___vfprintf_internal_r+0x1420>
100051bc:	dc402915 	stw	r17,164(sp)
100051c0:	dc001e04 	addi	r16,sp,120
100051c4:	b023883a 	mov	r17,r22
100051c8:	402d883a 	mov	r22,r8
100051cc:	9809883a 	mov	r4,r19
100051d0:	880b883a 	mov	r5,r17
100051d4:	01800284 	movi	r6,10
100051d8:	000f883a 	mov	r7,zero
100051dc:	000e10c0 	call	1000e10c <__umoddi3>
100051e0:	10800c04 	addi	r2,r2,48
100051e4:	843fffc4 	addi	r16,r16,-1
100051e8:	9809883a 	mov	r4,r19
100051ec:	880b883a 	mov	r5,r17
100051f0:	80800005 	stb	r2,0(r16)
100051f4:	01800284 	movi	r6,10
100051f8:	000f883a 	mov	r7,zero
100051fc:	000db100 	call	1000db10 <__udivdi3>
10005200:	1027883a 	mov	r19,r2
10005204:	10c4b03a 	or	r2,r2,r3
10005208:	1823883a 	mov	r17,r3
1000520c:	103fef1e 	bne	r2,zero,100051cc <__alt_data_end+0xf80051cc>
10005210:	d8c02817 	ldw	r3,160(sp)
10005214:	dc402917 	ldw	r17,164(sp)
10005218:	b011883a 	mov	r8,r22
1000521c:	1c07c83a 	sub	r3,r3,r16
10005220:	d8c02b15 	stw	r3,172(sp)
10005224:	00005f06 	br	100053a4 <___vfprintf_internal_r+0x75c>
10005228:	8025883a 	mov	r18,r16
1000522c:	dc002903 	ldbu	r16,164(sp)
10005230:	e011883a 	mov	r8,fp
10005234:	84003fcc 	andi	r16,r16,255
10005238:	80071e1e 	bne	r16,zero,10006eb4 <___vfprintf_internal_r+0x226c>
1000523c:	9080020c 	andi	r2,r18,8
10005240:	1004af26 	beq	r2,zero,10006500 <___vfprintf_internal_r+0x18b8>
10005244:	d9002e17 	ldw	r4,184(sp)
10005248:	d9402e17 	ldw	r5,184(sp)
1000524c:	d8802e17 	ldw	r2,184(sp)
10005250:	21000017 	ldw	r4,0(r4)
10005254:	29400117 	ldw	r5,4(r5)
10005258:	10800204 	addi	r2,r2,8
1000525c:	d9003615 	stw	r4,216(sp)
10005260:	d9403815 	stw	r5,224(sp)
10005264:	d8802e15 	stw	r2,184(sp)
10005268:	d9003617 	ldw	r4,216(sp)
1000526c:	d9403817 	ldw	r5,224(sp)
10005270:	da003d15 	stw	r8,244(sp)
10005274:	04000044 	movi	r16,1
10005278:	000b8400 	call	1000b840 <__fpclassifyd>
1000527c:	da003d17 	ldw	r8,244(sp)
10005280:	1404441e 	bne	r2,r16,10006394 <___vfprintf_internal_r+0x174c>
10005284:	d9003617 	ldw	r4,216(sp)
10005288:	d9403817 	ldw	r5,224(sp)
1000528c:	000d883a 	mov	r6,zero
10005290:	000f883a 	mov	r7,zero
10005294:	000fc8c0 	call	1000fc8c <__ledf2>
10005298:	da003d17 	ldw	r8,244(sp)
1000529c:	1005e316 	blt	r2,zero,10006a2c <___vfprintf_internal_r+0x1de4>
100052a0:	df002783 	ldbu	fp,158(sp)
100052a4:	008011c4 	movi	r2,71
100052a8:	1445580e 	bge	r2,r17,1000680c <___vfprintf_internal_r+0x1bc4>
100052ac:	04040074 	movhi	r16,4097
100052b0:	84104204 	addi	r16,r16,16648
100052b4:	00c000c4 	movi	r3,3
100052b8:	00bfdfc4 	movi	r2,-129
100052bc:	d8c02915 	stw	r3,164(sp)
100052c0:	90a4703a 	and	r18,r18,r2
100052c4:	d8c02b15 	stw	r3,172(sp)
100052c8:	d8002a15 	stw	zero,168(sp)
100052cc:	d8003215 	stw	zero,200(sp)
100052d0:	00003a06 	br	100053bc <___vfprintf_internal_r+0x774>
100052d4:	84000214 	ori	r16,r16,8
100052d8:	ac400007 	ldb	r17,0(r21)
100052dc:	003ebc06 	br	10004dd0 <__alt_data_end+0xf8004dd0>
100052e0:	8025883a 	mov	r18,r16
100052e4:	dc002903 	ldbu	r16,164(sp)
100052e8:	e011883a 	mov	r8,fp
100052ec:	84003fcc 	andi	r16,r16,255
100052f0:	8007001e 	bne	r16,zero,10006ef4 <___vfprintf_internal_r+0x22ac>
100052f4:	94800414 	ori	r18,r18,16
100052f8:	9080080c 	andi	r2,r18,32
100052fc:	1002fa26 	beq	r2,zero,10005ee8 <___vfprintf_internal_r+0x12a0>
10005300:	d9002e17 	ldw	r4,184(sp)
10005304:	d9402a17 	ldw	r5,168(sp)
10005308:	d8002785 	stb	zero,158(sp)
1000530c:	20800204 	addi	r2,r4,8
10005310:	24c00017 	ldw	r19,0(r4)
10005314:	25800117 	ldw	r22,4(r4)
10005318:	2804b116 	blt	r5,zero,100065e0 <___vfprintf_internal_r+0x1998>
1000531c:	013fdfc4 	movi	r4,-129
10005320:	9d86b03a 	or	r3,r19,r22
10005324:	d8802e15 	stw	r2,184(sp)
10005328:	9124703a 	and	r18,r18,r4
1000532c:	1802fb1e 	bne	r3,zero,10005f1c <___vfprintf_internal_r+0x12d4>
10005330:	d8c02a17 	ldw	r3,168(sp)
10005334:	0039883a 	mov	fp,zero
10005338:	1805e526 	beq	r3,zero,10006ad0 <___vfprintf_internal_r+0x1e88>
1000533c:	0027883a 	mov	r19,zero
10005340:	002d883a 	mov	r22,zero
10005344:	dc001e04 	addi	r16,sp,120
10005348:	9806d0fa 	srli	r3,r19,3
1000534c:	b008977a 	slli	r4,r22,29
10005350:	b02cd0fa 	srli	r22,r22,3
10005354:	9cc001cc 	andi	r19,r19,7
10005358:	98800c04 	addi	r2,r19,48
1000535c:	843fffc4 	addi	r16,r16,-1
10005360:	20e6b03a 	or	r19,r4,r3
10005364:	80800005 	stb	r2,0(r16)
10005368:	9d86b03a 	or	r3,r19,r22
1000536c:	183ff61e 	bne	r3,zero,10005348 <__alt_data_end+0xf8005348>
10005370:	90c0004c 	andi	r3,r18,1
10005374:	18014126 	beq	r3,zero,1000587c <___vfprintf_internal_r+0xc34>
10005378:	10803fcc 	andi	r2,r2,255
1000537c:	1080201c 	xori	r2,r2,128
10005380:	10bfe004 	addi	r2,r2,-128
10005384:	00c00c04 	movi	r3,48
10005388:	10c13c26 	beq	r2,r3,1000587c <___vfprintf_internal_r+0xc34>
1000538c:	80ffffc5 	stb	r3,-1(r16)
10005390:	d8c02817 	ldw	r3,160(sp)
10005394:	80bfffc4 	addi	r2,r16,-1
10005398:	1021883a 	mov	r16,r2
1000539c:	1887c83a 	sub	r3,r3,r2
100053a0:	d8c02b15 	stw	r3,172(sp)
100053a4:	d8802b17 	ldw	r2,172(sp)
100053a8:	d9002a17 	ldw	r4,168(sp)
100053ac:	1100010e 	bge	r2,r4,100053b4 <___vfprintf_internal_r+0x76c>
100053b0:	2005883a 	mov	r2,r4
100053b4:	d8802915 	stw	r2,164(sp)
100053b8:	d8003215 	stw	zero,200(sp)
100053bc:	e7003fcc 	andi	fp,fp,255
100053c0:	e700201c 	xori	fp,fp,128
100053c4:	e73fe004 	addi	fp,fp,-128
100053c8:	e0000326 	beq	fp,zero,100053d8 <___vfprintf_internal_r+0x790>
100053cc:	d8c02917 	ldw	r3,164(sp)
100053d0:	18c00044 	addi	r3,r3,1
100053d4:	d8c02915 	stw	r3,164(sp)
100053d8:	90c0008c 	andi	r3,r18,2
100053dc:	d8c02c15 	stw	r3,176(sp)
100053e0:	18000326 	beq	r3,zero,100053f0 <___vfprintf_internal_r+0x7a8>
100053e4:	d8c02917 	ldw	r3,164(sp)
100053e8:	18c00084 	addi	r3,r3,2
100053ec:	d8c02915 	stw	r3,164(sp)
100053f0:	90c0210c 	andi	r3,r18,132
100053f4:	d8c03015 	stw	r3,192(sp)
100053f8:	1801c51e 	bne	r3,zero,10005b10 <___vfprintf_internal_r+0xec8>
100053fc:	d9003117 	ldw	r4,196(sp)
10005400:	d8c02917 	ldw	r3,164(sp)
10005404:	20e7c83a 	sub	r19,r4,r3
10005408:	04c1c10e 	bge	zero,r19,10005b10 <___vfprintf_internal_r+0xec8>
1000540c:	02400404 	movi	r9,16
10005410:	d8c02017 	ldw	r3,128(sp)
10005414:	d8801f17 	ldw	r2,124(sp)
10005418:	4cc52f0e 	bge	r9,r19,100068d8 <___vfprintf_internal_r+0x1c90>
1000541c:	01440074 	movhi	r5,4097
10005420:	29505584 	addi	r5,r5,16726
10005424:	dc403b15 	stw	r17,236(sp)
10005428:	d9403515 	stw	r5,212(sp)
1000542c:	9823883a 	mov	r17,r19
10005430:	482d883a 	mov	r22,r9
10005434:	9027883a 	mov	r19,r18
10005438:	070001c4 	movi	fp,7
1000543c:	8025883a 	mov	r18,r16
10005440:	dc002d17 	ldw	r16,180(sp)
10005444:	00000306 	br	10005454 <___vfprintf_internal_r+0x80c>
10005448:	8c7ffc04 	addi	r17,r17,-16
1000544c:	42000204 	addi	r8,r8,8
10005450:	b440130e 	bge	r22,r17,100054a0 <___vfprintf_internal_r+0x858>
10005454:	01040074 	movhi	r4,4097
10005458:	18c00404 	addi	r3,r3,16
1000545c:	10800044 	addi	r2,r2,1
10005460:	21105584 	addi	r4,r4,16726
10005464:	41000015 	stw	r4,0(r8)
10005468:	45800115 	stw	r22,4(r8)
1000546c:	d8c02015 	stw	r3,128(sp)
10005470:	d8801f15 	stw	r2,124(sp)
10005474:	e0bff40e 	bge	fp,r2,10005448 <__alt_data_end+0xf8005448>
10005478:	d9801e04 	addi	r6,sp,120
1000547c:	b80b883a 	mov	r5,r23
10005480:	8009883a 	mov	r4,r16
10005484:	000bbc80 	call	1000bbc8 <__sprint_r>
10005488:	103ef31e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
1000548c:	8c7ffc04 	addi	r17,r17,-16
10005490:	d8c02017 	ldw	r3,128(sp)
10005494:	d8801f17 	ldw	r2,124(sp)
10005498:	da000404 	addi	r8,sp,16
1000549c:	b47fed16 	blt	r22,r17,10005454 <__alt_data_end+0xf8005454>
100054a0:	9021883a 	mov	r16,r18
100054a4:	9825883a 	mov	r18,r19
100054a8:	8827883a 	mov	r19,r17
100054ac:	dc403b17 	ldw	r17,236(sp)
100054b0:	d9403517 	ldw	r5,212(sp)
100054b4:	98c7883a 	add	r3,r19,r3
100054b8:	10800044 	addi	r2,r2,1
100054bc:	41400015 	stw	r5,0(r8)
100054c0:	44c00115 	stw	r19,4(r8)
100054c4:	d8c02015 	stw	r3,128(sp)
100054c8:	d8801f15 	stw	r2,124(sp)
100054cc:	010001c4 	movi	r4,7
100054d0:	2082c516 	blt	r4,r2,10005fe8 <___vfprintf_internal_r+0x13a0>
100054d4:	df002787 	ldb	fp,158(sp)
100054d8:	42000204 	addi	r8,r8,8
100054dc:	e0000c26 	beq	fp,zero,10005510 <___vfprintf_internal_r+0x8c8>
100054e0:	d8801f17 	ldw	r2,124(sp)
100054e4:	d9002784 	addi	r4,sp,158
100054e8:	18c00044 	addi	r3,r3,1
100054ec:	10800044 	addi	r2,r2,1
100054f0:	41000015 	stw	r4,0(r8)
100054f4:	01000044 	movi	r4,1
100054f8:	41000115 	stw	r4,4(r8)
100054fc:	d8c02015 	stw	r3,128(sp)
10005500:	d8801f15 	stw	r2,124(sp)
10005504:	010001c4 	movi	r4,7
10005508:	20825e16 	blt	r4,r2,10005e84 <___vfprintf_internal_r+0x123c>
1000550c:	42000204 	addi	r8,r8,8
10005510:	d8802c17 	ldw	r2,176(sp)
10005514:	10000c26 	beq	r2,zero,10005548 <___vfprintf_internal_r+0x900>
10005518:	d8801f17 	ldw	r2,124(sp)
1000551c:	d9002704 	addi	r4,sp,156
10005520:	18c00084 	addi	r3,r3,2
10005524:	10800044 	addi	r2,r2,1
10005528:	41000015 	stw	r4,0(r8)
1000552c:	01000084 	movi	r4,2
10005530:	41000115 	stw	r4,4(r8)
10005534:	d8c02015 	stw	r3,128(sp)
10005538:	d8801f15 	stw	r2,124(sp)
1000553c:	010001c4 	movi	r4,7
10005540:	20825816 	blt	r4,r2,10005ea4 <___vfprintf_internal_r+0x125c>
10005544:	42000204 	addi	r8,r8,8
10005548:	d9003017 	ldw	r4,192(sp)
1000554c:	00802004 	movi	r2,128
10005550:	2081bb26 	beq	r4,r2,10005c40 <___vfprintf_internal_r+0xff8>
10005554:	d9402a17 	ldw	r5,168(sp)
10005558:	d8802b17 	ldw	r2,172(sp)
1000555c:	28adc83a 	sub	r22,r5,r2
10005560:	0580310e 	bge	zero,r22,10005628 <___vfprintf_internal_r+0x9e0>
10005564:	07000404 	movi	fp,16
10005568:	d8801f17 	ldw	r2,124(sp)
1000556c:	e584360e 	bge	fp,r22,10006648 <___vfprintf_internal_r+0x1a00>
10005570:	01440074 	movhi	r5,4097
10005574:	29505184 	addi	r5,r5,16710
10005578:	dc402a15 	stw	r17,168(sp)
1000557c:	d9402c15 	stw	r5,176(sp)
10005580:	b023883a 	mov	r17,r22
10005584:	04c001c4 	movi	r19,7
10005588:	a82d883a 	mov	r22,r21
1000558c:	902b883a 	mov	r21,r18
10005590:	8025883a 	mov	r18,r16
10005594:	dc002d17 	ldw	r16,180(sp)
10005598:	00000306 	br	100055a8 <___vfprintf_internal_r+0x960>
1000559c:	8c7ffc04 	addi	r17,r17,-16
100055a0:	42000204 	addi	r8,r8,8
100055a4:	e440110e 	bge	fp,r17,100055ec <___vfprintf_internal_r+0x9a4>
100055a8:	18c00404 	addi	r3,r3,16
100055ac:	10800044 	addi	r2,r2,1
100055b0:	45000015 	stw	r20,0(r8)
100055b4:	47000115 	stw	fp,4(r8)
100055b8:	d8c02015 	stw	r3,128(sp)
100055bc:	d8801f15 	stw	r2,124(sp)
100055c0:	98bff60e 	bge	r19,r2,1000559c <__alt_data_end+0xf800559c>
100055c4:	d9801e04 	addi	r6,sp,120
100055c8:	b80b883a 	mov	r5,r23
100055cc:	8009883a 	mov	r4,r16
100055d0:	000bbc80 	call	1000bbc8 <__sprint_r>
100055d4:	103ea01e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
100055d8:	8c7ffc04 	addi	r17,r17,-16
100055dc:	d8c02017 	ldw	r3,128(sp)
100055e0:	d8801f17 	ldw	r2,124(sp)
100055e4:	da000404 	addi	r8,sp,16
100055e8:	e47fef16 	blt	fp,r17,100055a8 <__alt_data_end+0xf80055a8>
100055ec:	9021883a 	mov	r16,r18
100055f0:	a825883a 	mov	r18,r21
100055f4:	b02b883a 	mov	r21,r22
100055f8:	882d883a 	mov	r22,r17
100055fc:	dc402a17 	ldw	r17,168(sp)
10005600:	d9002c17 	ldw	r4,176(sp)
10005604:	1d87883a 	add	r3,r3,r22
10005608:	10800044 	addi	r2,r2,1
1000560c:	41000015 	stw	r4,0(r8)
10005610:	45800115 	stw	r22,4(r8)
10005614:	d8c02015 	stw	r3,128(sp)
10005618:	d8801f15 	stw	r2,124(sp)
1000561c:	010001c4 	movi	r4,7
10005620:	20821016 	blt	r4,r2,10005e64 <___vfprintf_internal_r+0x121c>
10005624:	42000204 	addi	r8,r8,8
10005628:	9080400c 	andi	r2,r18,256
1000562c:	10013a1e 	bne	r2,zero,10005b18 <___vfprintf_internal_r+0xed0>
10005630:	d9402b17 	ldw	r5,172(sp)
10005634:	d8801f17 	ldw	r2,124(sp)
10005638:	44000015 	stw	r16,0(r8)
1000563c:	1947883a 	add	r3,r3,r5
10005640:	10800044 	addi	r2,r2,1
10005644:	41400115 	stw	r5,4(r8)
10005648:	d8c02015 	stw	r3,128(sp)
1000564c:	d8801f15 	stw	r2,124(sp)
10005650:	010001c4 	movi	r4,7
10005654:	2081f516 	blt	r4,r2,10005e2c <___vfprintf_internal_r+0x11e4>
10005658:	42000204 	addi	r8,r8,8
1000565c:	9480010c 	andi	r18,r18,4
10005660:	90003226 	beq	r18,zero,1000572c <___vfprintf_internal_r+0xae4>
10005664:	d9403117 	ldw	r5,196(sp)
10005668:	d8802917 	ldw	r2,164(sp)
1000566c:	28a1c83a 	sub	r16,r5,r2
10005670:	04002e0e 	bge	zero,r16,1000572c <___vfprintf_internal_r+0xae4>
10005674:	04400404 	movi	r17,16
10005678:	d8801f17 	ldw	r2,124(sp)
1000567c:	8c04c40e 	bge	r17,r16,10006990 <___vfprintf_internal_r+0x1d48>
10005680:	01440074 	movhi	r5,4097
10005684:	29505584 	addi	r5,r5,16726
10005688:	d9403515 	stw	r5,212(sp)
1000568c:	048001c4 	movi	r18,7
10005690:	dcc02d17 	ldw	r19,180(sp)
10005694:	00000306 	br	100056a4 <___vfprintf_internal_r+0xa5c>
10005698:	843ffc04 	addi	r16,r16,-16
1000569c:	42000204 	addi	r8,r8,8
100056a0:	8c00130e 	bge	r17,r16,100056f0 <___vfprintf_internal_r+0xaa8>
100056a4:	01040074 	movhi	r4,4097
100056a8:	18c00404 	addi	r3,r3,16
100056ac:	10800044 	addi	r2,r2,1
100056b0:	21105584 	addi	r4,r4,16726
100056b4:	41000015 	stw	r4,0(r8)
100056b8:	44400115 	stw	r17,4(r8)
100056bc:	d8c02015 	stw	r3,128(sp)
100056c0:	d8801f15 	stw	r2,124(sp)
100056c4:	90bff40e 	bge	r18,r2,10005698 <__alt_data_end+0xf8005698>
100056c8:	d9801e04 	addi	r6,sp,120
100056cc:	b80b883a 	mov	r5,r23
100056d0:	9809883a 	mov	r4,r19
100056d4:	000bbc80 	call	1000bbc8 <__sprint_r>
100056d8:	103e5f1e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
100056dc:	843ffc04 	addi	r16,r16,-16
100056e0:	d8c02017 	ldw	r3,128(sp)
100056e4:	d8801f17 	ldw	r2,124(sp)
100056e8:	da000404 	addi	r8,sp,16
100056ec:	8c3fed16 	blt	r17,r16,100056a4 <__alt_data_end+0xf80056a4>
100056f0:	d9403517 	ldw	r5,212(sp)
100056f4:	1c07883a 	add	r3,r3,r16
100056f8:	10800044 	addi	r2,r2,1
100056fc:	41400015 	stw	r5,0(r8)
10005700:	44000115 	stw	r16,4(r8)
10005704:	d8c02015 	stw	r3,128(sp)
10005708:	d8801f15 	stw	r2,124(sp)
1000570c:	010001c4 	movi	r4,7
10005710:	2080060e 	bge	r4,r2,1000572c <___vfprintf_internal_r+0xae4>
10005714:	d9002d17 	ldw	r4,180(sp)
10005718:	d9801e04 	addi	r6,sp,120
1000571c:	b80b883a 	mov	r5,r23
10005720:	000bbc80 	call	1000bbc8 <__sprint_r>
10005724:	103e4c1e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10005728:	d8c02017 	ldw	r3,128(sp)
1000572c:	d8803117 	ldw	r2,196(sp)
10005730:	d9002917 	ldw	r4,164(sp)
10005734:	1100010e 	bge	r2,r4,1000573c <___vfprintf_internal_r+0xaf4>
10005738:	2005883a 	mov	r2,r4
1000573c:	d9402f17 	ldw	r5,188(sp)
10005740:	288b883a 	add	r5,r5,r2
10005744:	d9402f15 	stw	r5,188(sp)
10005748:	1801c01e 	bne	r3,zero,10005e4c <___vfprintf_internal_r+0x1204>
1000574c:	a8800007 	ldb	r2,0(r21)
10005750:	d8001f15 	stw	zero,124(sp)
10005754:	da000404 	addi	r8,sp,16
10005758:	103d751e 	bne	r2,zero,10004d30 <__alt_data_end+0xf8004d30>
1000575c:	a823883a 	mov	r17,r21
10005760:	003d8b06 	br	10004d90 <__alt_data_end+0xf8004d90>
10005764:	8025883a 	mov	r18,r16
10005768:	dc002903 	ldbu	r16,164(sp)
1000576c:	e011883a 	mov	r8,fp
10005770:	84003fcc 	andi	r16,r16,255
10005774:	8005e51e 	bne	r16,zero,10006f0c <___vfprintf_internal_r+0x22c4>
10005778:	94800414 	ori	r18,r18,16
1000577c:	9080080c 	andi	r2,r18,32
10005780:	10022b26 	beq	r2,zero,10006030 <___vfprintf_internal_r+0x13e8>
10005784:	d9002e17 	ldw	r4,184(sp)
10005788:	d9402a17 	ldw	r5,168(sp)
1000578c:	d8002785 	stb	zero,158(sp)
10005790:	20c00204 	addi	r3,r4,8
10005794:	24c00017 	ldw	r19,0(r4)
10005798:	25800117 	ldw	r22,4(r4)
1000579c:	28042e16 	blt	r5,zero,10006858 <___vfprintf_internal_r+0x1c10>
100057a0:	013fdfc4 	movi	r4,-129
100057a4:	9d84b03a 	or	r2,r19,r22
100057a8:	d8c02e15 	stw	r3,184(sp)
100057ac:	9124703a 	and	r18,r18,r4
100057b0:	0039883a 	mov	fp,zero
100057b4:	103e801e 	bne	r2,zero,100051b8 <__alt_data_end+0xf80051b8>
100057b8:	d9002a17 	ldw	r4,168(sp)
100057bc:	2002e01e 	bne	r4,zero,10006340 <___vfprintf_internal_r+0x16f8>
100057c0:	d8002a15 	stw	zero,168(sp)
100057c4:	d8002b15 	stw	zero,172(sp)
100057c8:	dc001e04 	addi	r16,sp,120
100057cc:	003ef506 	br	100053a4 <__alt_data_end+0xf80053a4>
100057d0:	8025883a 	mov	r18,r16
100057d4:	dc002903 	ldbu	r16,164(sp)
100057d8:	e011883a 	mov	r8,fp
100057dc:	84003fcc 	andi	r16,r16,255
100057e0:	8005ba1e 	bne	r16,zero,10006ecc <___vfprintf_internal_r+0x2284>
100057e4:	01040074 	movhi	r4,4097
100057e8:	21104504 	addi	r4,r4,16660
100057ec:	d9003915 	stw	r4,228(sp)
100057f0:	9080080c 	andi	r2,r18,32
100057f4:	10006126 	beq	r2,zero,1000597c <___vfprintf_internal_r+0xd34>
100057f8:	d9402e17 	ldw	r5,184(sp)
100057fc:	2cc00017 	ldw	r19,0(r5)
10005800:	2d800117 	ldw	r22,4(r5)
10005804:	29400204 	addi	r5,r5,8
10005808:	d9402e15 	stw	r5,184(sp)
1000580c:	9080004c 	andi	r2,r18,1
10005810:	1001ac26 	beq	r2,zero,10005ec4 <___vfprintf_internal_r+0x127c>
10005814:	9d84b03a 	or	r2,r19,r22
10005818:	10038526 	beq	r2,zero,10006630 <___vfprintf_internal_r+0x19e8>
1000581c:	d8c02a17 	ldw	r3,168(sp)
10005820:	00800c04 	movi	r2,48
10005824:	d8802705 	stb	r2,156(sp)
10005828:	dc402745 	stb	r17,157(sp)
1000582c:	d8002785 	stb	zero,158(sp)
10005830:	90800094 	ori	r2,r18,2
10005834:	18047916 	blt	r3,zero,10006a1c <___vfprintf_internal_r+0x1dd4>
10005838:	00bfdfc4 	movi	r2,-129
1000583c:	90a4703a 	and	r18,r18,r2
10005840:	94800094 	ori	r18,r18,2
10005844:	0039883a 	mov	fp,zero
10005848:	d9003917 	ldw	r4,228(sp)
1000584c:	dc001e04 	addi	r16,sp,120
10005850:	988003cc 	andi	r2,r19,15
10005854:	b006973a 	slli	r3,r22,28
10005858:	2085883a 	add	r2,r4,r2
1000585c:	9826d13a 	srli	r19,r19,4
10005860:	10800003 	ldbu	r2,0(r2)
10005864:	b02cd13a 	srli	r22,r22,4
10005868:	843fffc4 	addi	r16,r16,-1
1000586c:	1ce6b03a 	or	r19,r3,r19
10005870:	80800005 	stb	r2,0(r16)
10005874:	9d84b03a 	or	r2,r19,r22
10005878:	103ff51e 	bne	r2,zero,10005850 <__alt_data_end+0xf8005850>
1000587c:	d8c02817 	ldw	r3,160(sp)
10005880:	1c07c83a 	sub	r3,r3,r16
10005884:	d8c02b15 	stw	r3,172(sp)
10005888:	003ec606 	br	100053a4 <__alt_data_end+0xf80053a4>
1000588c:	8025883a 	mov	r18,r16
10005890:	dc002903 	ldbu	r16,164(sp)
10005894:	e011883a 	mov	r8,fp
10005898:	84003fcc 	andi	r16,r16,255
1000589c:	803e9626 	beq	r16,zero,100052f8 <__alt_data_end+0xf80052f8>
100058a0:	d8c02b03 	ldbu	r3,172(sp)
100058a4:	d8c02785 	stb	r3,158(sp)
100058a8:	003e9306 	br	100052f8 <__alt_data_end+0xf80052f8>
100058ac:	00c00044 	movi	r3,1
100058b0:	d8c02905 	stb	r3,164(sp)
100058b4:	00c00ac4 	movi	r3,43
100058b8:	d8c02b05 	stb	r3,172(sp)
100058bc:	ac400007 	ldb	r17,0(r21)
100058c0:	003d4306 	br	10004dd0 <__alt_data_end+0xf8004dd0>
100058c4:	84000814 	ori	r16,r16,32
100058c8:	ac400007 	ldb	r17,0(r21)
100058cc:	003d4006 	br	10004dd0 <__alt_data_end+0xf8004dd0>
100058d0:	d8802e17 	ldw	r2,184(sp)
100058d4:	8025883a 	mov	r18,r16
100058d8:	d8002785 	stb	zero,158(sp)
100058dc:	14000017 	ldw	r16,0(r2)
100058e0:	e011883a 	mov	r8,fp
100058e4:	14c00104 	addi	r19,r2,4
100058e8:	80042d26 	beq	r16,zero,100069a0 <___vfprintf_internal_r+0x1d58>
100058ec:	d8c02a17 	ldw	r3,168(sp)
100058f0:	1803e416 	blt	r3,zero,10006884 <___vfprintf_internal_r+0x1c3c>
100058f4:	180d883a 	mov	r6,r3
100058f8:	000b883a 	mov	r5,zero
100058fc:	8009883a 	mov	r4,r16
10005900:	df003d15 	stw	fp,244(sp)
10005904:	0009d740 	call	10009d74 <memchr>
10005908:	da003d17 	ldw	r8,244(sp)
1000590c:	10046826 	beq	r2,zero,10006ab0 <___vfprintf_internal_r+0x1e68>
10005910:	1405c83a 	sub	r2,r2,r16
10005914:	d8802b15 	stw	r2,172(sp)
10005918:	1003e016 	blt	r2,zero,1000689c <___vfprintf_internal_r+0x1c54>
1000591c:	df002783 	ldbu	fp,158(sp)
10005920:	d8802915 	stw	r2,164(sp)
10005924:	dcc02e15 	stw	r19,184(sp)
10005928:	d8002a15 	stw	zero,168(sp)
1000592c:	d8003215 	stw	zero,200(sp)
10005930:	003ea206 	br	100053bc <__alt_data_end+0xf80053bc>
10005934:	8025883a 	mov	r18,r16
10005938:	dc002903 	ldbu	r16,164(sp)
1000593c:	e011883a 	mov	r8,fp
10005940:	84003fcc 	andi	r16,r16,255
10005944:	803f8d26 	beq	r16,zero,1000577c <__alt_data_end+0xf800577c>
10005948:	d8c02b03 	ldbu	r3,172(sp)
1000594c:	d8c02785 	stb	r3,158(sp)
10005950:	003f8a06 	br	1000577c <__alt_data_end+0xf800577c>
10005954:	8025883a 	mov	r18,r16
10005958:	dc002903 	ldbu	r16,164(sp)
1000595c:	e011883a 	mov	r8,fp
10005960:	84003fcc 	andi	r16,r16,255
10005964:	8005661e 	bne	r16,zero,10006f00 <___vfprintf_internal_r+0x22b8>
10005968:	01040074 	movhi	r4,4097
1000596c:	21104a04 	addi	r4,r4,16680
10005970:	d9003915 	stw	r4,228(sp)
10005974:	9080080c 	andi	r2,r18,32
10005978:	103f9f1e 	bne	r2,zero,100057f8 <__alt_data_end+0xf80057f8>
1000597c:	9080040c 	andi	r2,r18,16
10005980:	1002eb26 	beq	r2,zero,10006530 <___vfprintf_internal_r+0x18e8>
10005984:	d8802e17 	ldw	r2,184(sp)
10005988:	002d883a 	mov	r22,zero
1000598c:	14c00017 	ldw	r19,0(r2)
10005990:	10800104 	addi	r2,r2,4
10005994:	d8802e15 	stw	r2,184(sp)
10005998:	003f9c06 	br	1000580c <__alt_data_end+0xf800580c>
1000599c:	d8802b07 	ldb	r2,172(sp)
100059a0:	1002e11e 	bne	r2,zero,10006528 <___vfprintf_internal_r+0x18e0>
100059a4:	00c00044 	movi	r3,1
100059a8:	d8c02905 	stb	r3,164(sp)
100059ac:	00c00804 	movi	r3,32
100059b0:	d8c02b05 	stb	r3,172(sp)
100059b4:	ac400007 	ldb	r17,0(r21)
100059b8:	003d0506 	br	10004dd0 <__alt_data_end+0xf8004dd0>
100059bc:	84000054 	ori	r16,r16,1
100059c0:	ac400007 	ldb	r17,0(r21)
100059c4:	003d0206 	br	10004dd0 <__alt_data_end+0xf8004dd0>
100059c8:	8025883a 	mov	r18,r16
100059cc:	dc002903 	ldbu	r16,164(sp)
100059d0:	e011883a 	mov	r8,fp
100059d4:	84003fcc 	andi	r16,r16,255
100059d8:	803de726 	beq	r16,zero,10005178 <__alt_data_end+0xf8005178>
100059dc:	d8c02b03 	ldbu	r3,172(sp)
100059e0:	d8c02785 	stb	r3,158(sp)
100059e4:	003de406 	br	10005178 <__alt_data_end+0xf8005178>
100059e8:	84001014 	ori	r16,r16,64
100059ec:	ac400007 	ldb	r17,0(r21)
100059f0:	003cf706 	br	10004dd0 <__alt_data_end+0xf8004dd0>
100059f4:	ac400007 	ldb	r17,0(r21)
100059f8:	00801b04 	movi	r2,108
100059fc:	88838f26 	beq	r17,r2,1000683c <___vfprintf_internal_r+0x1bf4>
10005a00:	84000414 	ori	r16,r16,16
10005a04:	003cf206 	br	10004dd0 <__alt_data_end+0xf8004dd0>
10005a08:	8025883a 	mov	r18,r16
10005a0c:	dc002903 	ldbu	r16,164(sp)
10005a10:	e011883a 	mov	r8,fp
10005a14:	84003fcc 	andi	r16,r16,255
10005a18:	80053f1e 	bne	r16,zero,10006f18 <___vfprintf_internal_r+0x22d0>
10005a1c:	9080080c 	andi	r2,r18,32
10005a20:	1002d226 	beq	r2,zero,1000656c <___vfprintf_internal_r+0x1924>
10005a24:	d9002e17 	ldw	r4,184(sp)
10005a28:	d9402f17 	ldw	r5,188(sp)
10005a2c:	20800017 	ldw	r2,0(r4)
10005a30:	2807d7fa 	srai	r3,r5,31
10005a34:	21000104 	addi	r4,r4,4
10005a38:	d9002e15 	stw	r4,184(sp)
10005a3c:	11400015 	stw	r5,0(r2)
10005a40:	10c00115 	stw	r3,4(r2)
10005a44:	003cb806 	br	10004d28 <__alt_data_end+0xf8004d28>
10005a48:	d8c02e17 	ldw	r3,184(sp)
10005a4c:	d9002e17 	ldw	r4,184(sp)
10005a50:	8025883a 	mov	r18,r16
10005a54:	18800017 	ldw	r2,0(r3)
10005a58:	21000104 	addi	r4,r4,4
10005a5c:	00c00044 	movi	r3,1
10005a60:	e011883a 	mov	r8,fp
10005a64:	d8c02915 	stw	r3,164(sp)
10005a68:	d8002785 	stb	zero,158(sp)
10005a6c:	d8801405 	stb	r2,80(sp)
10005a70:	d9002e15 	stw	r4,184(sp)
10005a74:	d8c02b15 	stw	r3,172(sp)
10005a78:	d8002a15 	stw	zero,168(sp)
10005a7c:	d8003215 	stw	zero,200(sp)
10005a80:	dc001404 	addi	r16,sp,80
10005a84:	0039883a 	mov	fp,zero
10005a88:	003e5306 	br	100053d8 <__alt_data_end+0xf80053d8>
10005a8c:	01040074 	movhi	r4,4097
10005a90:	21104a04 	addi	r4,r4,16680
10005a94:	0039883a 	mov	fp,zero
10005a98:	d9003915 	stw	r4,228(sp)
10005a9c:	04401e04 	movi	r17,120
10005aa0:	003f6906 	br	10005848 <__alt_data_end+0xf8005848>
10005aa4:	8025883a 	mov	r18,r16
10005aa8:	dc002903 	ldbu	r16,164(sp)
10005aac:	e011883a 	mov	r8,fp
10005ab0:	84003fcc 	andi	r16,r16,255
10005ab4:	8005081e 	bne	r16,zero,10006ed8 <___vfprintf_internal_r+0x2290>
10005ab8:	883d6126 	beq	r17,zero,10005040 <__alt_data_end+0xf8005040>
10005abc:	00c00044 	movi	r3,1
10005ac0:	d8c02915 	stw	r3,164(sp)
10005ac4:	dc401405 	stb	r17,80(sp)
10005ac8:	d8002785 	stb	zero,158(sp)
10005acc:	003fe906 	br	10005a74 <__alt_data_end+0xf8005a74>
10005ad0:	01440074 	movhi	r5,4097
10005ad4:	29504a04 	addi	r5,r5,16680
10005ad8:	d9403915 	stw	r5,228(sp)
10005adc:	d8c02e15 	stw	r3,184(sp)
10005ae0:	1025883a 	mov	r18,r2
10005ae4:	04401e04 	movi	r17,120
10005ae8:	9d84b03a 	or	r2,r19,r22
10005aec:	1000fc1e 	bne	r2,zero,10005ee0 <___vfprintf_internal_r+0x1298>
10005af0:	0039883a 	mov	fp,zero
10005af4:	00800084 	movi	r2,2
10005af8:	10803fcc 	andi	r2,r2,255
10005afc:	00c00044 	movi	r3,1
10005b00:	10c20f26 	beq	r2,r3,10006340 <___vfprintf_internal_r+0x16f8>
10005b04:	00c00084 	movi	r3,2
10005b08:	10fd3326 	beq	r2,r3,10004fd8 <__alt_data_end+0xf8004fd8>
10005b0c:	003e0b06 	br	1000533c <__alt_data_end+0xf800533c>
10005b10:	d8c02017 	ldw	r3,128(sp)
10005b14:	003e7106 	br	100054dc <__alt_data_end+0xf80054dc>
10005b18:	00801944 	movi	r2,101
10005b1c:	14407e0e 	bge	r2,r17,10005d18 <___vfprintf_internal_r+0x10d0>
10005b20:	d9003617 	ldw	r4,216(sp)
10005b24:	d9403817 	ldw	r5,224(sp)
10005b28:	000d883a 	mov	r6,zero
10005b2c:	000f883a 	mov	r7,zero
10005b30:	d8c03c15 	stw	r3,240(sp)
10005b34:	da003d15 	stw	r8,244(sp)
10005b38:	000fb280 	call	1000fb28 <__eqdf2>
10005b3c:	d8c03c17 	ldw	r3,240(sp)
10005b40:	da003d17 	ldw	r8,244(sp)
10005b44:	1000f71e 	bne	r2,zero,10005f24 <___vfprintf_internal_r+0x12dc>
10005b48:	d8801f17 	ldw	r2,124(sp)
10005b4c:	01040074 	movhi	r4,4097
10005b50:	21105104 	addi	r4,r4,16708
10005b54:	18c00044 	addi	r3,r3,1
10005b58:	10800044 	addi	r2,r2,1
10005b5c:	41000015 	stw	r4,0(r8)
10005b60:	01000044 	movi	r4,1
10005b64:	41000115 	stw	r4,4(r8)
10005b68:	d8c02015 	stw	r3,128(sp)
10005b6c:	d8801f15 	stw	r2,124(sp)
10005b70:	010001c4 	movi	r4,7
10005b74:	2082b816 	blt	r4,r2,10006658 <___vfprintf_internal_r+0x1a10>
10005b78:	42000204 	addi	r8,r8,8
10005b7c:	d8802617 	ldw	r2,152(sp)
10005b80:	d9403317 	ldw	r5,204(sp)
10005b84:	11400216 	blt	r2,r5,10005b90 <___vfprintf_internal_r+0xf48>
10005b88:	9080004c 	andi	r2,r18,1
10005b8c:	103eb326 	beq	r2,zero,1000565c <__alt_data_end+0xf800565c>
10005b90:	d8803717 	ldw	r2,220(sp)
10005b94:	d9003417 	ldw	r4,208(sp)
10005b98:	d9403717 	ldw	r5,220(sp)
10005b9c:	1887883a 	add	r3,r3,r2
10005ba0:	d8801f17 	ldw	r2,124(sp)
10005ba4:	41000015 	stw	r4,0(r8)
10005ba8:	41400115 	stw	r5,4(r8)
10005bac:	10800044 	addi	r2,r2,1
10005bb0:	d8c02015 	stw	r3,128(sp)
10005bb4:	d8801f15 	stw	r2,124(sp)
10005bb8:	010001c4 	movi	r4,7
10005bbc:	20832916 	blt	r4,r2,10006864 <___vfprintf_internal_r+0x1c1c>
10005bc0:	42000204 	addi	r8,r8,8
10005bc4:	d8803317 	ldw	r2,204(sp)
10005bc8:	143fffc4 	addi	r16,r2,-1
10005bcc:	043ea30e 	bge	zero,r16,1000565c <__alt_data_end+0xf800565c>
10005bd0:	04400404 	movi	r17,16
10005bd4:	d8801f17 	ldw	r2,124(sp)
10005bd8:	8c00880e 	bge	r17,r16,10005dfc <___vfprintf_internal_r+0x11b4>
10005bdc:	01440074 	movhi	r5,4097
10005be0:	29505184 	addi	r5,r5,16710
10005be4:	d9402c15 	stw	r5,176(sp)
10005be8:	058001c4 	movi	r22,7
10005bec:	dcc02d17 	ldw	r19,180(sp)
10005bf0:	00000306 	br	10005c00 <___vfprintf_internal_r+0xfb8>
10005bf4:	42000204 	addi	r8,r8,8
10005bf8:	843ffc04 	addi	r16,r16,-16
10005bfc:	8c00820e 	bge	r17,r16,10005e08 <___vfprintf_internal_r+0x11c0>
10005c00:	18c00404 	addi	r3,r3,16
10005c04:	10800044 	addi	r2,r2,1
10005c08:	45000015 	stw	r20,0(r8)
10005c0c:	44400115 	stw	r17,4(r8)
10005c10:	d8c02015 	stw	r3,128(sp)
10005c14:	d8801f15 	stw	r2,124(sp)
10005c18:	b0bff60e 	bge	r22,r2,10005bf4 <__alt_data_end+0xf8005bf4>
10005c1c:	d9801e04 	addi	r6,sp,120
10005c20:	b80b883a 	mov	r5,r23
10005c24:	9809883a 	mov	r4,r19
10005c28:	000bbc80 	call	1000bbc8 <__sprint_r>
10005c2c:	103d0a1e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10005c30:	d8c02017 	ldw	r3,128(sp)
10005c34:	d8801f17 	ldw	r2,124(sp)
10005c38:	da000404 	addi	r8,sp,16
10005c3c:	003fee06 	br	10005bf8 <__alt_data_end+0xf8005bf8>
10005c40:	d9403117 	ldw	r5,196(sp)
10005c44:	d8802917 	ldw	r2,164(sp)
10005c48:	28adc83a 	sub	r22,r5,r2
10005c4c:	05be410e 	bge	zero,r22,10005554 <__alt_data_end+0xf8005554>
10005c50:	07000404 	movi	fp,16
10005c54:	d8801f17 	ldw	r2,124(sp)
10005c58:	e5838f0e 	bge	fp,r22,10006a98 <___vfprintf_internal_r+0x1e50>
10005c5c:	01440074 	movhi	r5,4097
10005c60:	29505184 	addi	r5,r5,16710
10005c64:	dc403015 	stw	r17,192(sp)
10005c68:	d9402c15 	stw	r5,176(sp)
10005c6c:	b023883a 	mov	r17,r22
10005c70:	04c001c4 	movi	r19,7
10005c74:	a82d883a 	mov	r22,r21
10005c78:	902b883a 	mov	r21,r18
10005c7c:	8025883a 	mov	r18,r16
10005c80:	dc002d17 	ldw	r16,180(sp)
10005c84:	00000306 	br	10005c94 <___vfprintf_internal_r+0x104c>
10005c88:	8c7ffc04 	addi	r17,r17,-16
10005c8c:	42000204 	addi	r8,r8,8
10005c90:	e440110e 	bge	fp,r17,10005cd8 <___vfprintf_internal_r+0x1090>
10005c94:	18c00404 	addi	r3,r3,16
10005c98:	10800044 	addi	r2,r2,1
10005c9c:	45000015 	stw	r20,0(r8)
10005ca0:	47000115 	stw	fp,4(r8)
10005ca4:	d8c02015 	stw	r3,128(sp)
10005ca8:	d8801f15 	stw	r2,124(sp)
10005cac:	98bff60e 	bge	r19,r2,10005c88 <__alt_data_end+0xf8005c88>
10005cb0:	d9801e04 	addi	r6,sp,120
10005cb4:	b80b883a 	mov	r5,r23
10005cb8:	8009883a 	mov	r4,r16
10005cbc:	000bbc80 	call	1000bbc8 <__sprint_r>
10005cc0:	103ce51e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10005cc4:	8c7ffc04 	addi	r17,r17,-16
10005cc8:	d8c02017 	ldw	r3,128(sp)
10005ccc:	d8801f17 	ldw	r2,124(sp)
10005cd0:	da000404 	addi	r8,sp,16
10005cd4:	e47fef16 	blt	fp,r17,10005c94 <__alt_data_end+0xf8005c94>
10005cd8:	9021883a 	mov	r16,r18
10005cdc:	a825883a 	mov	r18,r21
10005ce0:	b02b883a 	mov	r21,r22
10005ce4:	882d883a 	mov	r22,r17
10005ce8:	dc403017 	ldw	r17,192(sp)
10005cec:	d9002c17 	ldw	r4,176(sp)
10005cf0:	1d87883a 	add	r3,r3,r22
10005cf4:	10800044 	addi	r2,r2,1
10005cf8:	41000015 	stw	r4,0(r8)
10005cfc:	45800115 	stw	r22,4(r8)
10005d00:	d8c02015 	stw	r3,128(sp)
10005d04:	d8801f15 	stw	r2,124(sp)
10005d08:	010001c4 	movi	r4,7
10005d0c:	20818e16 	blt	r4,r2,10006348 <___vfprintf_internal_r+0x1700>
10005d10:	42000204 	addi	r8,r8,8
10005d14:	003e0f06 	br	10005554 <__alt_data_end+0xf8005554>
10005d18:	d9403317 	ldw	r5,204(sp)
10005d1c:	00800044 	movi	r2,1
10005d20:	18c00044 	addi	r3,r3,1
10005d24:	1141530e 	bge	r2,r5,10006274 <___vfprintf_internal_r+0x162c>
10005d28:	dc401f17 	ldw	r17,124(sp)
10005d2c:	00800044 	movi	r2,1
10005d30:	40800115 	stw	r2,4(r8)
10005d34:	8c400044 	addi	r17,r17,1
10005d38:	44000015 	stw	r16,0(r8)
10005d3c:	d8c02015 	stw	r3,128(sp)
10005d40:	dc401f15 	stw	r17,124(sp)
10005d44:	008001c4 	movi	r2,7
10005d48:	14416b16 	blt	r2,r17,100062f8 <___vfprintf_internal_r+0x16b0>
10005d4c:	42000204 	addi	r8,r8,8
10005d50:	d8803717 	ldw	r2,220(sp)
10005d54:	d9003417 	ldw	r4,208(sp)
10005d58:	8c400044 	addi	r17,r17,1
10005d5c:	10c7883a 	add	r3,r2,r3
10005d60:	40800115 	stw	r2,4(r8)
10005d64:	41000015 	stw	r4,0(r8)
10005d68:	d8c02015 	stw	r3,128(sp)
10005d6c:	dc401f15 	stw	r17,124(sp)
10005d70:	008001c4 	movi	r2,7
10005d74:	14416916 	blt	r2,r17,1000631c <___vfprintf_internal_r+0x16d4>
10005d78:	45800204 	addi	r22,r8,8
10005d7c:	d9003617 	ldw	r4,216(sp)
10005d80:	d9403817 	ldw	r5,224(sp)
10005d84:	000d883a 	mov	r6,zero
10005d88:	000f883a 	mov	r7,zero
10005d8c:	d8c03c15 	stw	r3,240(sp)
10005d90:	000fb280 	call	1000fb28 <__eqdf2>
10005d94:	d8c03c17 	ldw	r3,240(sp)
10005d98:	1000bc26 	beq	r2,zero,1000608c <___vfprintf_internal_r+0x1444>
10005d9c:	d9403317 	ldw	r5,204(sp)
10005da0:	84000044 	addi	r16,r16,1
10005da4:	8c400044 	addi	r17,r17,1
10005da8:	28bfffc4 	addi	r2,r5,-1
10005dac:	1887883a 	add	r3,r3,r2
10005db0:	b0800115 	stw	r2,4(r22)
10005db4:	b4000015 	stw	r16,0(r22)
10005db8:	d8c02015 	stw	r3,128(sp)
10005dbc:	dc401f15 	stw	r17,124(sp)
10005dc0:	008001c4 	movi	r2,7
10005dc4:	14414316 	blt	r2,r17,100062d4 <___vfprintf_internal_r+0x168c>
10005dc8:	b5800204 	addi	r22,r22,8
10005dcc:	d9003a17 	ldw	r4,232(sp)
10005dd0:	df0022c4 	addi	fp,sp,139
10005dd4:	8c400044 	addi	r17,r17,1
10005dd8:	20c7883a 	add	r3,r4,r3
10005ddc:	b7000015 	stw	fp,0(r22)
10005de0:	b1000115 	stw	r4,4(r22)
10005de4:	d8c02015 	stw	r3,128(sp)
10005de8:	dc401f15 	stw	r17,124(sp)
10005dec:	008001c4 	movi	r2,7
10005df0:	14400e16 	blt	r2,r17,10005e2c <___vfprintf_internal_r+0x11e4>
10005df4:	b2000204 	addi	r8,r22,8
10005df8:	003e1806 	br	1000565c <__alt_data_end+0xf800565c>
10005dfc:	01040074 	movhi	r4,4097
10005e00:	21105184 	addi	r4,r4,16710
10005e04:	d9002c15 	stw	r4,176(sp)
10005e08:	d9002c17 	ldw	r4,176(sp)
10005e0c:	1c07883a 	add	r3,r3,r16
10005e10:	44000115 	stw	r16,4(r8)
10005e14:	41000015 	stw	r4,0(r8)
10005e18:	10800044 	addi	r2,r2,1
10005e1c:	d8c02015 	stw	r3,128(sp)
10005e20:	d8801f15 	stw	r2,124(sp)
10005e24:	010001c4 	movi	r4,7
10005e28:	20be0b0e 	bge	r4,r2,10005658 <__alt_data_end+0xf8005658>
10005e2c:	d9002d17 	ldw	r4,180(sp)
10005e30:	d9801e04 	addi	r6,sp,120
10005e34:	b80b883a 	mov	r5,r23
10005e38:	000bbc80 	call	1000bbc8 <__sprint_r>
10005e3c:	103c861e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10005e40:	d8c02017 	ldw	r3,128(sp)
10005e44:	da000404 	addi	r8,sp,16
10005e48:	003e0406 	br	1000565c <__alt_data_end+0xf800565c>
10005e4c:	d9002d17 	ldw	r4,180(sp)
10005e50:	d9801e04 	addi	r6,sp,120
10005e54:	b80b883a 	mov	r5,r23
10005e58:	000bbc80 	call	1000bbc8 <__sprint_r>
10005e5c:	103e3b26 	beq	r2,zero,1000574c <__alt_data_end+0xf800574c>
10005e60:	003c7d06 	br	10005058 <__alt_data_end+0xf8005058>
10005e64:	d9002d17 	ldw	r4,180(sp)
10005e68:	d9801e04 	addi	r6,sp,120
10005e6c:	b80b883a 	mov	r5,r23
10005e70:	000bbc80 	call	1000bbc8 <__sprint_r>
10005e74:	103c781e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10005e78:	d8c02017 	ldw	r3,128(sp)
10005e7c:	da000404 	addi	r8,sp,16
10005e80:	003de906 	br	10005628 <__alt_data_end+0xf8005628>
10005e84:	d9002d17 	ldw	r4,180(sp)
10005e88:	d9801e04 	addi	r6,sp,120
10005e8c:	b80b883a 	mov	r5,r23
10005e90:	000bbc80 	call	1000bbc8 <__sprint_r>
10005e94:	103c701e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10005e98:	d8c02017 	ldw	r3,128(sp)
10005e9c:	da000404 	addi	r8,sp,16
10005ea0:	003d9b06 	br	10005510 <__alt_data_end+0xf8005510>
10005ea4:	d9002d17 	ldw	r4,180(sp)
10005ea8:	d9801e04 	addi	r6,sp,120
10005eac:	b80b883a 	mov	r5,r23
10005eb0:	000bbc80 	call	1000bbc8 <__sprint_r>
10005eb4:	103c681e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10005eb8:	d8c02017 	ldw	r3,128(sp)
10005ebc:	da000404 	addi	r8,sp,16
10005ec0:	003da106 	br	10005548 <__alt_data_end+0xf8005548>
10005ec4:	d9402a17 	ldw	r5,168(sp)
10005ec8:	d8002785 	stb	zero,158(sp)
10005ecc:	283f0616 	blt	r5,zero,10005ae8 <__alt_data_end+0xf8005ae8>
10005ed0:	00ffdfc4 	movi	r3,-129
10005ed4:	9d84b03a 	or	r2,r19,r22
10005ed8:	90e4703a 	and	r18,r18,r3
10005edc:	103c3b26 	beq	r2,zero,10004fcc <__alt_data_end+0xf8004fcc>
10005ee0:	0039883a 	mov	fp,zero
10005ee4:	003e5806 	br	10005848 <__alt_data_end+0xf8005848>
10005ee8:	9080040c 	andi	r2,r18,16
10005eec:	1001b326 	beq	r2,zero,100065bc <___vfprintf_internal_r+0x1974>
10005ef0:	d8c02e17 	ldw	r3,184(sp)
10005ef4:	d9002a17 	ldw	r4,168(sp)
10005ef8:	d8002785 	stb	zero,158(sp)
10005efc:	18800104 	addi	r2,r3,4
10005f00:	1cc00017 	ldw	r19,0(r3)
10005f04:	002d883a 	mov	r22,zero
10005f08:	2001b516 	blt	r4,zero,100065e0 <___vfprintf_internal_r+0x1998>
10005f0c:	00ffdfc4 	movi	r3,-129
10005f10:	d8802e15 	stw	r2,184(sp)
10005f14:	90e4703a 	and	r18,r18,r3
10005f18:	983d0526 	beq	r19,zero,10005330 <__alt_data_end+0xf8005330>
10005f1c:	0039883a 	mov	fp,zero
10005f20:	003d0806 	br	10005344 <__alt_data_end+0xf8005344>
10005f24:	dc402617 	ldw	r17,152(sp)
10005f28:	0441d30e 	bge	zero,r17,10006678 <___vfprintf_internal_r+0x1a30>
10005f2c:	dc403217 	ldw	r17,200(sp)
10005f30:	d8803317 	ldw	r2,204(sp)
10005f34:	1440010e 	bge	r2,r17,10005f3c <___vfprintf_internal_r+0x12f4>
10005f38:	1023883a 	mov	r17,r2
10005f3c:	04400a0e 	bge	zero,r17,10005f68 <___vfprintf_internal_r+0x1320>
10005f40:	d8801f17 	ldw	r2,124(sp)
10005f44:	1c47883a 	add	r3,r3,r17
10005f48:	44000015 	stw	r16,0(r8)
10005f4c:	10800044 	addi	r2,r2,1
10005f50:	44400115 	stw	r17,4(r8)
10005f54:	d8c02015 	stw	r3,128(sp)
10005f58:	d8801f15 	stw	r2,124(sp)
10005f5c:	010001c4 	movi	r4,7
10005f60:	20826516 	blt	r4,r2,100068f8 <___vfprintf_internal_r+0x1cb0>
10005f64:	42000204 	addi	r8,r8,8
10005f68:	88026116 	blt	r17,zero,100068f0 <___vfprintf_internal_r+0x1ca8>
10005f6c:	d9003217 	ldw	r4,200(sp)
10005f70:	2463c83a 	sub	r17,r4,r17
10005f74:	04407b0e 	bge	zero,r17,10006164 <___vfprintf_internal_r+0x151c>
10005f78:	05800404 	movi	r22,16
10005f7c:	d8801f17 	ldw	r2,124(sp)
10005f80:	b4419d0e 	bge	r22,r17,100065f8 <___vfprintf_internal_r+0x19b0>
10005f84:	01040074 	movhi	r4,4097
10005f88:	21105184 	addi	r4,r4,16710
10005f8c:	d9002c15 	stw	r4,176(sp)
10005f90:	070001c4 	movi	fp,7
10005f94:	dcc02d17 	ldw	r19,180(sp)
10005f98:	00000306 	br	10005fa8 <___vfprintf_internal_r+0x1360>
10005f9c:	42000204 	addi	r8,r8,8
10005fa0:	8c7ffc04 	addi	r17,r17,-16
10005fa4:	b441970e 	bge	r22,r17,10006604 <___vfprintf_internal_r+0x19bc>
10005fa8:	18c00404 	addi	r3,r3,16
10005fac:	10800044 	addi	r2,r2,1
10005fb0:	45000015 	stw	r20,0(r8)
10005fb4:	45800115 	stw	r22,4(r8)
10005fb8:	d8c02015 	stw	r3,128(sp)
10005fbc:	d8801f15 	stw	r2,124(sp)
10005fc0:	e0bff60e 	bge	fp,r2,10005f9c <__alt_data_end+0xf8005f9c>
10005fc4:	d9801e04 	addi	r6,sp,120
10005fc8:	b80b883a 	mov	r5,r23
10005fcc:	9809883a 	mov	r4,r19
10005fd0:	000bbc80 	call	1000bbc8 <__sprint_r>
10005fd4:	103c201e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10005fd8:	d8c02017 	ldw	r3,128(sp)
10005fdc:	d8801f17 	ldw	r2,124(sp)
10005fe0:	da000404 	addi	r8,sp,16
10005fe4:	003fee06 	br	10005fa0 <__alt_data_end+0xf8005fa0>
10005fe8:	d9002d17 	ldw	r4,180(sp)
10005fec:	d9801e04 	addi	r6,sp,120
10005ff0:	b80b883a 	mov	r5,r23
10005ff4:	000bbc80 	call	1000bbc8 <__sprint_r>
10005ff8:	103c171e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10005ffc:	d8c02017 	ldw	r3,128(sp)
10006000:	df002787 	ldb	fp,158(sp)
10006004:	da000404 	addi	r8,sp,16
10006008:	003d3406 	br	100054dc <__alt_data_end+0xf80054dc>
1000600c:	9080040c 	andi	r2,r18,16
10006010:	10016126 	beq	r2,zero,10006598 <___vfprintf_internal_r+0x1950>
10006014:	d9402e17 	ldw	r5,184(sp)
10006018:	2cc00017 	ldw	r19,0(r5)
1000601c:	29400104 	addi	r5,r5,4
10006020:	d9402e15 	stw	r5,184(sp)
10006024:	982dd7fa 	srai	r22,r19,31
10006028:	b005883a 	mov	r2,r22
1000602c:	003c5a06 	br	10005198 <__alt_data_end+0xf8005198>
10006030:	9080040c 	andi	r2,r18,16
10006034:	10003526 	beq	r2,zero,1000610c <___vfprintf_internal_r+0x14c4>
10006038:	d8c02e17 	ldw	r3,184(sp)
1000603c:	d9002a17 	ldw	r4,168(sp)
10006040:	d8002785 	stb	zero,158(sp)
10006044:	18800104 	addi	r2,r3,4
10006048:	1cc00017 	ldw	r19,0(r3)
1000604c:	002d883a 	mov	r22,zero
10006050:	20003716 	blt	r4,zero,10006130 <___vfprintf_internal_r+0x14e8>
10006054:	00ffdfc4 	movi	r3,-129
10006058:	d8802e15 	stw	r2,184(sp)
1000605c:	90e4703a 	and	r18,r18,r3
10006060:	0039883a 	mov	fp,zero
10006064:	983dd426 	beq	r19,zero,100057b8 <__alt_data_end+0xf80057b8>
10006068:	00800244 	movi	r2,9
1000606c:	14fc5336 	bltu	r2,r19,100051bc <__alt_data_end+0xf80051bc>
10006070:	d8c02817 	ldw	r3,160(sp)
10006074:	dc001dc4 	addi	r16,sp,119
10006078:	9cc00c04 	addi	r19,r19,48
1000607c:	1c07c83a 	sub	r3,r3,r16
10006080:	dcc01dc5 	stb	r19,119(sp)
10006084:	d8c02b15 	stw	r3,172(sp)
10006088:	003cc606 	br	100053a4 <__alt_data_end+0xf80053a4>
1000608c:	d8803317 	ldw	r2,204(sp)
10006090:	143fffc4 	addi	r16,r2,-1
10006094:	043f4d0e 	bge	zero,r16,10005dcc <__alt_data_end+0xf8005dcc>
10006098:	07000404 	movi	fp,16
1000609c:	e400810e 	bge	fp,r16,100062a4 <___vfprintf_internal_r+0x165c>
100060a0:	01440074 	movhi	r5,4097
100060a4:	29505184 	addi	r5,r5,16710
100060a8:	d9402c15 	stw	r5,176(sp)
100060ac:	01c001c4 	movi	r7,7
100060b0:	dcc02d17 	ldw	r19,180(sp)
100060b4:	00000306 	br	100060c4 <___vfprintf_internal_r+0x147c>
100060b8:	b5800204 	addi	r22,r22,8
100060bc:	843ffc04 	addi	r16,r16,-16
100060c0:	e4007b0e 	bge	fp,r16,100062b0 <___vfprintf_internal_r+0x1668>
100060c4:	18c00404 	addi	r3,r3,16
100060c8:	8c400044 	addi	r17,r17,1
100060cc:	b5000015 	stw	r20,0(r22)
100060d0:	b7000115 	stw	fp,4(r22)
100060d4:	d8c02015 	stw	r3,128(sp)
100060d8:	dc401f15 	stw	r17,124(sp)
100060dc:	3c7ff60e 	bge	r7,r17,100060b8 <__alt_data_end+0xf80060b8>
100060e0:	d9801e04 	addi	r6,sp,120
100060e4:	b80b883a 	mov	r5,r23
100060e8:	9809883a 	mov	r4,r19
100060ec:	d9c03c15 	stw	r7,240(sp)
100060f0:	000bbc80 	call	1000bbc8 <__sprint_r>
100060f4:	d9c03c17 	ldw	r7,240(sp)
100060f8:	103bd71e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
100060fc:	d8c02017 	ldw	r3,128(sp)
10006100:	dc401f17 	ldw	r17,124(sp)
10006104:	dd800404 	addi	r22,sp,16
10006108:	003fec06 	br	100060bc <__alt_data_end+0xf80060bc>
1000610c:	9080100c 	andi	r2,r18,64
10006110:	d8002785 	stb	zero,158(sp)
10006114:	10010e26 	beq	r2,zero,10006550 <___vfprintf_internal_r+0x1908>
10006118:	d9402e17 	ldw	r5,184(sp)
1000611c:	d8c02a17 	ldw	r3,168(sp)
10006120:	002d883a 	mov	r22,zero
10006124:	28800104 	addi	r2,r5,4
10006128:	2cc0000b 	ldhu	r19,0(r5)
1000612c:	183fc90e 	bge	r3,zero,10006054 <__alt_data_end+0xf8006054>
10006130:	d8802e15 	stw	r2,184(sp)
10006134:	0039883a 	mov	fp,zero
10006138:	9d84b03a 	or	r2,r19,r22
1000613c:	103c1e1e 	bne	r2,zero,100051b8 <__alt_data_end+0xf80051b8>
10006140:	00800044 	movi	r2,1
10006144:	003e6c06 	br	10005af8 <__alt_data_end+0xf8005af8>
10006148:	d9002d17 	ldw	r4,180(sp)
1000614c:	d9801e04 	addi	r6,sp,120
10006150:	b80b883a 	mov	r5,r23
10006154:	000bbc80 	call	1000bbc8 <__sprint_r>
10006158:	103bbf1e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
1000615c:	d8c02017 	ldw	r3,128(sp)
10006160:	da000404 	addi	r8,sp,16
10006164:	d9003217 	ldw	r4,200(sp)
10006168:	d8802617 	ldw	r2,152(sp)
1000616c:	d9403317 	ldw	r5,204(sp)
10006170:	8123883a 	add	r17,r16,r4
10006174:	11400216 	blt	r2,r5,10006180 <___vfprintf_internal_r+0x1538>
10006178:	9100004c 	andi	r4,r18,1
1000617c:	20000d26 	beq	r4,zero,100061b4 <___vfprintf_internal_r+0x156c>
10006180:	d9003717 	ldw	r4,220(sp)
10006184:	d9403417 	ldw	r5,208(sp)
10006188:	1907883a 	add	r3,r3,r4
1000618c:	d9001f17 	ldw	r4,124(sp)
10006190:	41400015 	stw	r5,0(r8)
10006194:	d9403717 	ldw	r5,220(sp)
10006198:	21000044 	addi	r4,r4,1
1000619c:	d8c02015 	stw	r3,128(sp)
100061a0:	41400115 	stw	r5,4(r8)
100061a4:	d9001f15 	stw	r4,124(sp)
100061a8:	014001c4 	movi	r5,7
100061ac:	2901e816 	blt	r5,r4,10006950 <___vfprintf_internal_r+0x1d08>
100061b0:	42000204 	addi	r8,r8,8
100061b4:	d9003317 	ldw	r4,204(sp)
100061b8:	8121883a 	add	r16,r16,r4
100061bc:	2085c83a 	sub	r2,r4,r2
100061c0:	8461c83a 	sub	r16,r16,r17
100061c4:	1400010e 	bge	r2,r16,100061cc <___vfprintf_internal_r+0x1584>
100061c8:	1021883a 	mov	r16,r2
100061cc:	04000a0e 	bge	zero,r16,100061f8 <___vfprintf_internal_r+0x15b0>
100061d0:	d9001f17 	ldw	r4,124(sp)
100061d4:	1c07883a 	add	r3,r3,r16
100061d8:	44400015 	stw	r17,0(r8)
100061dc:	21000044 	addi	r4,r4,1
100061e0:	44000115 	stw	r16,4(r8)
100061e4:	d8c02015 	stw	r3,128(sp)
100061e8:	d9001f15 	stw	r4,124(sp)
100061ec:	014001c4 	movi	r5,7
100061f0:	2901fb16 	blt	r5,r4,100069e0 <___vfprintf_internal_r+0x1d98>
100061f4:	42000204 	addi	r8,r8,8
100061f8:	8001f716 	blt	r16,zero,100069d8 <___vfprintf_internal_r+0x1d90>
100061fc:	1421c83a 	sub	r16,r2,r16
10006200:	043d160e 	bge	zero,r16,1000565c <__alt_data_end+0xf800565c>
10006204:	04400404 	movi	r17,16
10006208:	d8801f17 	ldw	r2,124(sp)
1000620c:	8c3efb0e 	bge	r17,r16,10005dfc <__alt_data_end+0xf8005dfc>
10006210:	01440074 	movhi	r5,4097
10006214:	29505184 	addi	r5,r5,16710
10006218:	d9402c15 	stw	r5,176(sp)
1000621c:	058001c4 	movi	r22,7
10006220:	dcc02d17 	ldw	r19,180(sp)
10006224:	00000306 	br	10006234 <___vfprintf_internal_r+0x15ec>
10006228:	42000204 	addi	r8,r8,8
1000622c:	843ffc04 	addi	r16,r16,-16
10006230:	8c3ef50e 	bge	r17,r16,10005e08 <__alt_data_end+0xf8005e08>
10006234:	18c00404 	addi	r3,r3,16
10006238:	10800044 	addi	r2,r2,1
1000623c:	45000015 	stw	r20,0(r8)
10006240:	44400115 	stw	r17,4(r8)
10006244:	d8c02015 	stw	r3,128(sp)
10006248:	d8801f15 	stw	r2,124(sp)
1000624c:	b0bff60e 	bge	r22,r2,10006228 <__alt_data_end+0xf8006228>
10006250:	d9801e04 	addi	r6,sp,120
10006254:	b80b883a 	mov	r5,r23
10006258:	9809883a 	mov	r4,r19
1000625c:	000bbc80 	call	1000bbc8 <__sprint_r>
10006260:	103b7d1e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10006264:	d8c02017 	ldw	r3,128(sp)
10006268:	d8801f17 	ldw	r2,124(sp)
1000626c:	da000404 	addi	r8,sp,16
10006270:	003fee06 	br	1000622c <__alt_data_end+0xf800622c>
10006274:	9088703a 	and	r4,r18,r2
10006278:	203eab1e 	bne	r4,zero,10005d28 <__alt_data_end+0xf8005d28>
1000627c:	dc401f17 	ldw	r17,124(sp)
10006280:	40800115 	stw	r2,4(r8)
10006284:	44000015 	stw	r16,0(r8)
10006288:	8c400044 	addi	r17,r17,1
1000628c:	d8c02015 	stw	r3,128(sp)
10006290:	dc401f15 	stw	r17,124(sp)
10006294:	008001c4 	movi	r2,7
10006298:	14400e16 	blt	r2,r17,100062d4 <___vfprintf_internal_r+0x168c>
1000629c:	45800204 	addi	r22,r8,8
100062a0:	003eca06 	br	10005dcc <__alt_data_end+0xf8005dcc>
100062a4:	01040074 	movhi	r4,4097
100062a8:	21105184 	addi	r4,r4,16710
100062ac:	d9002c15 	stw	r4,176(sp)
100062b0:	d8802c17 	ldw	r2,176(sp)
100062b4:	1c07883a 	add	r3,r3,r16
100062b8:	8c400044 	addi	r17,r17,1
100062bc:	b0800015 	stw	r2,0(r22)
100062c0:	b4000115 	stw	r16,4(r22)
100062c4:	d8c02015 	stw	r3,128(sp)
100062c8:	dc401f15 	stw	r17,124(sp)
100062cc:	008001c4 	movi	r2,7
100062d0:	147ebd0e 	bge	r2,r17,10005dc8 <__alt_data_end+0xf8005dc8>
100062d4:	d9002d17 	ldw	r4,180(sp)
100062d8:	d9801e04 	addi	r6,sp,120
100062dc:	b80b883a 	mov	r5,r23
100062e0:	000bbc80 	call	1000bbc8 <__sprint_r>
100062e4:	103b5c1e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
100062e8:	d8c02017 	ldw	r3,128(sp)
100062ec:	dc401f17 	ldw	r17,124(sp)
100062f0:	dd800404 	addi	r22,sp,16
100062f4:	003eb506 	br	10005dcc <__alt_data_end+0xf8005dcc>
100062f8:	d9002d17 	ldw	r4,180(sp)
100062fc:	d9801e04 	addi	r6,sp,120
10006300:	b80b883a 	mov	r5,r23
10006304:	000bbc80 	call	1000bbc8 <__sprint_r>
10006308:	103b531e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
1000630c:	d8c02017 	ldw	r3,128(sp)
10006310:	dc401f17 	ldw	r17,124(sp)
10006314:	da000404 	addi	r8,sp,16
10006318:	003e8d06 	br	10005d50 <__alt_data_end+0xf8005d50>
1000631c:	d9002d17 	ldw	r4,180(sp)
10006320:	d9801e04 	addi	r6,sp,120
10006324:	b80b883a 	mov	r5,r23
10006328:	000bbc80 	call	1000bbc8 <__sprint_r>
1000632c:	103b4a1e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10006330:	d8c02017 	ldw	r3,128(sp)
10006334:	dc401f17 	ldw	r17,124(sp)
10006338:	dd800404 	addi	r22,sp,16
1000633c:	003e8f06 	br	10005d7c <__alt_data_end+0xf8005d7c>
10006340:	0027883a 	mov	r19,zero
10006344:	003f4a06 	br	10006070 <__alt_data_end+0xf8006070>
10006348:	d9002d17 	ldw	r4,180(sp)
1000634c:	d9801e04 	addi	r6,sp,120
10006350:	b80b883a 	mov	r5,r23
10006354:	000bbc80 	call	1000bbc8 <__sprint_r>
10006358:	103b3f1e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
1000635c:	d8c02017 	ldw	r3,128(sp)
10006360:	da000404 	addi	r8,sp,16
10006364:	003c7b06 	br	10005554 <__alt_data_end+0xf8005554>
10006368:	d9402a17 	ldw	r5,168(sp)
1000636c:	04e7c83a 	sub	r19,zero,r19
10006370:	07000b44 	movi	fp,45
10006374:	9804c03a 	cmpne	r2,r19,zero
10006378:	05adc83a 	sub	r22,zero,r22
1000637c:	df002785 	stb	fp,158(sp)
10006380:	b0adc83a 	sub	r22,r22,r2
10006384:	28017b16 	blt	r5,zero,10006974 <___vfprintf_internal_r+0x1d2c>
10006388:	00bfdfc4 	movi	r2,-129
1000638c:	90a4703a 	and	r18,r18,r2
10006390:	003b8906 	br	100051b8 <__alt_data_end+0xf80051b8>
10006394:	d9003617 	ldw	r4,216(sp)
10006398:	d9403817 	ldw	r5,224(sp)
1000639c:	da003d15 	stw	r8,244(sp)
100063a0:	000b8400 	call	1000b840 <__fpclassifyd>
100063a4:	da003d17 	ldw	r8,244(sp)
100063a8:	1000f026 	beq	r2,zero,1000676c <___vfprintf_internal_r+0x1b24>
100063ac:	d9002a17 	ldw	r4,168(sp)
100063b0:	05bff7c4 	movi	r22,-33
100063b4:	00bfffc4 	movi	r2,-1
100063b8:	8dac703a 	and	r22,r17,r22
100063bc:	20820026 	beq	r4,r2,10006bc0 <___vfprintf_internal_r+0x1f78>
100063c0:	008011c4 	movi	r2,71
100063c4:	b081f726 	beq	r22,r2,10006ba4 <___vfprintf_internal_r+0x1f5c>
100063c8:	d9003817 	ldw	r4,224(sp)
100063cc:	90c04014 	ori	r3,r18,256
100063d0:	d8c02c15 	stw	r3,176(sp)
100063d4:	20021516 	blt	r4,zero,10006c2c <___vfprintf_internal_r+0x1fe4>
100063d8:	dcc03817 	ldw	r19,224(sp)
100063dc:	d8002905 	stb	zero,164(sp)
100063e0:	00801984 	movi	r2,102
100063e4:	8881f926 	beq	r17,r2,10006bcc <___vfprintf_internal_r+0x1f84>
100063e8:	00801184 	movi	r2,70
100063ec:	88821c26 	beq	r17,r2,10006c60 <___vfprintf_internal_r+0x2018>
100063f0:	00801144 	movi	r2,69
100063f4:	b081ef26 	beq	r22,r2,10006bb4 <___vfprintf_internal_r+0x1f6c>
100063f8:	d8c02a17 	ldw	r3,168(sp)
100063fc:	d8802104 	addi	r2,sp,132
10006400:	d8800315 	stw	r2,12(sp)
10006404:	d9403617 	ldw	r5,216(sp)
10006408:	d8802504 	addi	r2,sp,148
1000640c:	d9002d17 	ldw	r4,180(sp)
10006410:	d8800215 	stw	r2,8(sp)
10006414:	d8802604 	addi	r2,sp,152
10006418:	d8c00015 	stw	r3,0(sp)
1000641c:	d8800115 	stw	r2,4(sp)
10006420:	01c00084 	movi	r7,2
10006424:	980d883a 	mov	r6,r19
10006428:	d8c03c15 	stw	r3,240(sp)
1000642c:	da003d15 	stw	r8,244(sp)
10006430:	00073780 	call	10007378 <_dtoa_r>
10006434:	1021883a 	mov	r16,r2
10006438:	008019c4 	movi	r2,103
1000643c:	d8c03c17 	ldw	r3,240(sp)
10006440:	da003d17 	ldw	r8,244(sp)
10006444:	88817126 	beq	r17,r2,10006a0c <___vfprintf_internal_r+0x1dc4>
10006448:	008011c4 	movi	r2,71
1000644c:	88829126 	beq	r17,r2,10006e94 <___vfprintf_internal_r+0x224c>
10006450:	80f9883a 	add	fp,r16,r3
10006454:	d9003617 	ldw	r4,216(sp)
10006458:	000d883a 	mov	r6,zero
1000645c:	000f883a 	mov	r7,zero
10006460:	980b883a 	mov	r5,r19
10006464:	da003d15 	stw	r8,244(sp)
10006468:	000fb280 	call	1000fb28 <__eqdf2>
1000646c:	da003d17 	ldw	r8,244(sp)
10006470:	10018d26 	beq	r2,zero,10006aa8 <___vfprintf_internal_r+0x1e60>
10006474:	d8802117 	ldw	r2,132(sp)
10006478:	1700062e 	bgeu	r2,fp,10006494 <___vfprintf_internal_r+0x184c>
1000647c:	01000c04 	movi	r4,48
10006480:	10c00044 	addi	r3,r2,1
10006484:	d8c02115 	stw	r3,132(sp)
10006488:	11000005 	stb	r4,0(r2)
1000648c:	d8802117 	ldw	r2,132(sp)
10006490:	173ffb36 	bltu	r2,fp,10006480 <__alt_data_end+0xf8006480>
10006494:	1405c83a 	sub	r2,r2,r16
10006498:	d8803315 	stw	r2,204(sp)
1000649c:	008011c4 	movi	r2,71
100064a0:	b0817626 	beq	r22,r2,10006a7c <___vfprintf_internal_r+0x1e34>
100064a4:	00801944 	movi	r2,101
100064a8:	1442800e 	bge	r2,r17,10006eac <___vfprintf_internal_r+0x2264>
100064ac:	d8c02617 	ldw	r3,152(sp)
100064b0:	00801984 	movi	r2,102
100064b4:	d8c03215 	stw	r3,200(sp)
100064b8:	8881fe26 	beq	r17,r2,10006cb4 <___vfprintf_internal_r+0x206c>
100064bc:	d8c03217 	ldw	r3,200(sp)
100064c0:	d9003317 	ldw	r4,204(sp)
100064c4:	1901dd16 	blt	r3,r4,10006c3c <___vfprintf_internal_r+0x1ff4>
100064c8:	9480004c 	andi	r18,r18,1
100064cc:	90022b1e 	bne	r18,zero,10006d7c <___vfprintf_internal_r+0x2134>
100064d0:	1805883a 	mov	r2,r3
100064d4:	18028316 	blt	r3,zero,10006ee4 <___vfprintf_internal_r+0x229c>
100064d8:	d8c03217 	ldw	r3,200(sp)
100064dc:	044019c4 	movi	r17,103
100064e0:	d8c02b15 	stw	r3,172(sp)
100064e4:	df002907 	ldb	fp,164(sp)
100064e8:	e001531e 	bne	fp,zero,10006a38 <___vfprintf_internal_r+0x1df0>
100064ec:	df002783 	ldbu	fp,158(sp)
100064f0:	d8802915 	stw	r2,164(sp)
100064f4:	dc802c17 	ldw	r18,176(sp)
100064f8:	d8002a15 	stw	zero,168(sp)
100064fc:	003baf06 	br	100053bc <__alt_data_end+0xf80053bc>
10006500:	d8c02e17 	ldw	r3,184(sp)
10006504:	d9002e17 	ldw	r4,184(sp)
10006508:	d9402e17 	ldw	r5,184(sp)
1000650c:	18c00017 	ldw	r3,0(r3)
10006510:	21000117 	ldw	r4,4(r4)
10006514:	29400204 	addi	r5,r5,8
10006518:	d8c03615 	stw	r3,216(sp)
1000651c:	d9003815 	stw	r4,224(sp)
10006520:	d9402e15 	stw	r5,184(sp)
10006524:	003b5006 	br	10005268 <__alt_data_end+0xf8005268>
10006528:	ac400007 	ldb	r17,0(r21)
1000652c:	003a2806 	br	10004dd0 <__alt_data_end+0xf8004dd0>
10006530:	9080100c 	andi	r2,r18,64
10006534:	1000a826 	beq	r2,zero,100067d8 <___vfprintf_internal_r+0x1b90>
10006538:	d8c02e17 	ldw	r3,184(sp)
1000653c:	002d883a 	mov	r22,zero
10006540:	1cc0000b 	ldhu	r19,0(r3)
10006544:	18c00104 	addi	r3,r3,4
10006548:	d8c02e15 	stw	r3,184(sp)
1000654c:	003caf06 	br	1000580c <__alt_data_end+0xf800580c>
10006550:	d9002e17 	ldw	r4,184(sp)
10006554:	d9402a17 	ldw	r5,168(sp)
10006558:	002d883a 	mov	r22,zero
1000655c:	20800104 	addi	r2,r4,4
10006560:	24c00017 	ldw	r19,0(r4)
10006564:	283ebb0e 	bge	r5,zero,10006054 <__alt_data_end+0xf8006054>
10006568:	003ef106 	br	10006130 <__alt_data_end+0xf8006130>
1000656c:	9080040c 	andi	r2,r18,16
10006570:	1000921e 	bne	r2,zero,100067bc <___vfprintf_internal_r+0x1b74>
10006574:	9480100c 	andi	r18,r18,64
10006578:	90013926 	beq	r18,zero,10006a60 <___vfprintf_internal_r+0x1e18>
1000657c:	d9402e17 	ldw	r5,184(sp)
10006580:	d8c02f17 	ldw	r3,188(sp)
10006584:	28800017 	ldw	r2,0(r5)
10006588:	29400104 	addi	r5,r5,4
1000658c:	d9402e15 	stw	r5,184(sp)
10006590:	10c0000d 	sth	r3,0(r2)
10006594:	0039e406 	br	10004d28 <__alt_data_end+0xf8004d28>
10006598:	9080100c 	andi	r2,r18,64
1000659c:	10008026 	beq	r2,zero,100067a0 <___vfprintf_internal_r+0x1b58>
100065a0:	d8802e17 	ldw	r2,184(sp)
100065a4:	14c0000f 	ldh	r19,0(r2)
100065a8:	10800104 	addi	r2,r2,4
100065ac:	d8802e15 	stw	r2,184(sp)
100065b0:	982dd7fa 	srai	r22,r19,31
100065b4:	b005883a 	mov	r2,r22
100065b8:	003af706 	br	10005198 <__alt_data_end+0xf8005198>
100065bc:	9080100c 	andi	r2,r18,64
100065c0:	d8002785 	stb	zero,158(sp)
100065c4:	10008a1e 	bne	r2,zero,100067f0 <___vfprintf_internal_r+0x1ba8>
100065c8:	d9002e17 	ldw	r4,184(sp)
100065cc:	d9402a17 	ldw	r5,168(sp)
100065d0:	002d883a 	mov	r22,zero
100065d4:	20800104 	addi	r2,r4,4
100065d8:	24c00017 	ldw	r19,0(r4)
100065dc:	283e4b0e 	bge	r5,zero,10005f0c <__alt_data_end+0xf8005f0c>
100065e0:	9d86b03a 	or	r3,r19,r22
100065e4:	d8802e15 	stw	r2,184(sp)
100065e8:	183e4c1e 	bne	r3,zero,10005f1c <__alt_data_end+0xf8005f1c>
100065ec:	0039883a 	mov	fp,zero
100065f0:	0005883a 	mov	r2,zero
100065f4:	003d4006 	br	10005af8 <__alt_data_end+0xf8005af8>
100065f8:	01440074 	movhi	r5,4097
100065fc:	29505184 	addi	r5,r5,16710
10006600:	d9402c15 	stw	r5,176(sp)
10006604:	d9402c17 	ldw	r5,176(sp)
10006608:	1c47883a 	add	r3,r3,r17
1000660c:	10800044 	addi	r2,r2,1
10006610:	41400015 	stw	r5,0(r8)
10006614:	44400115 	stw	r17,4(r8)
10006618:	d8c02015 	stw	r3,128(sp)
1000661c:	d8801f15 	stw	r2,124(sp)
10006620:	010001c4 	movi	r4,7
10006624:	20bec816 	blt	r4,r2,10006148 <__alt_data_end+0xf8006148>
10006628:	42000204 	addi	r8,r8,8
1000662c:	003ecd06 	br	10006164 <__alt_data_end+0xf8006164>
10006630:	d9002a17 	ldw	r4,168(sp)
10006634:	d8002785 	stb	zero,158(sp)
10006638:	203d2d16 	blt	r4,zero,10005af0 <__alt_data_end+0xf8005af0>
1000663c:	00bfdfc4 	movi	r2,-129
10006640:	90a4703a 	and	r18,r18,r2
10006644:	003a6106 	br	10004fcc <__alt_data_end+0xf8004fcc>
10006648:	01040074 	movhi	r4,4097
1000664c:	21105184 	addi	r4,r4,16710
10006650:	d9002c15 	stw	r4,176(sp)
10006654:	003bea06 	br	10005600 <__alt_data_end+0xf8005600>
10006658:	d9002d17 	ldw	r4,180(sp)
1000665c:	d9801e04 	addi	r6,sp,120
10006660:	b80b883a 	mov	r5,r23
10006664:	000bbc80 	call	1000bbc8 <__sprint_r>
10006668:	103a7b1e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
1000666c:	d8c02017 	ldw	r3,128(sp)
10006670:	da000404 	addi	r8,sp,16
10006674:	003d4106 	br	10005b7c <__alt_data_end+0xf8005b7c>
10006678:	d8801f17 	ldw	r2,124(sp)
1000667c:	01440074 	movhi	r5,4097
10006680:	01000044 	movi	r4,1
10006684:	18c00044 	addi	r3,r3,1
10006688:	10800044 	addi	r2,r2,1
1000668c:	29505104 	addi	r5,r5,16708
10006690:	41000115 	stw	r4,4(r8)
10006694:	41400015 	stw	r5,0(r8)
10006698:	d8c02015 	stw	r3,128(sp)
1000669c:	d8801f15 	stw	r2,124(sp)
100066a0:	010001c4 	movi	r4,7
100066a4:	20805c16 	blt	r4,r2,10006818 <___vfprintf_internal_r+0x1bd0>
100066a8:	42000204 	addi	r8,r8,8
100066ac:	8800041e 	bne	r17,zero,100066c0 <___vfprintf_internal_r+0x1a78>
100066b0:	d8803317 	ldw	r2,204(sp)
100066b4:	1000021e 	bne	r2,zero,100066c0 <___vfprintf_internal_r+0x1a78>
100066b8:	9080004c 	andi	r2,r18,1
100066bc:	103be726 	beq	r2,zero,1000565c <__alt_data_end+0xf800565c>
100066c0:	d9003717 	ldw	r4,220(sp)
100066c4:	d8801f17 	ldw	r2,124(sp)
100066c8:	d9403417 	ldw	r5,208(sp)
100066cc:	20c7883a 	add	r3,r4,r3
100066d0:	10800044 	addi	r2,r2,1
100066d4:	41000115 	stw	r4,4(r8)
100066d8:	41400015 	stw	r5,0(r8)
100066dc:	d8c02015 	stw	r3,128(sp)
100066e0:	d8801f15 	stw	r2,124(sp)
100066e4:	010001c4 	movi	r4,7
100066e8:	20812116 	blt	r4,r2,10006b70 <___vfprintf_internal_r+0x1f28>
100066ec:	42000204 	addi	r8,r8,8
100066f0:	0463c83a 	sub	r17,zero,r17
100066f4:	0440730e 	bge	zero,r17,100068c4 <___vfprintf_internal_r+0x1c7c>
100066f8:	05800404 	movi	r22,16
100066fc:	b440860e 	bge	r22,r17,10006918 <___vfprintf_internal_r+0x1cd0>
10006700:	01440074 	movhi	r5,4097
10006704:	29505184 	addi	r5,r5,16710
10006708:	d9402c15 	stw	r5,176(sp)
1000670c:	070001c4 	movi	fp,7
10006710:	dcc02d17 	ldw	r19,180(sp)
10006714:	00000306 	br	10006724 <___vfprintf_internal_r+0x1adc>
10006718:	42000204 	addi	r8,r8,8
1000671c:	8c7ffc04 	addi	r17,r17,-16
10006720:	b440800e 	bge	r22,r17,10006924 <___vfprintf_internal_r+0x1cdc>
10006724:	18c00404 	addi	r3,r3,16
10006728:	10800044 	addi	r2,r2,1
1000672c:	45000015 	stw	r20,0(r8)
10006730:	45800115 	stw	r22,4(r8)
10006734:	d8c02015 	stw	r3,128(sp)
10006738:	d8801f15 	stw	r2,124(sp)
1000673c:	e0bff60e 	bge	fp,r2,10006718 <__alt_data_end+0xf8006718>
10006740:	d9801e04 	addi	r6,sp,120
10006744:	b80b883a 	mov	r5,r23
10006748:	9809883a 	mov	r4,r19
1000674c:	000bbc80 	call	1000bbc8 <__sprint_r>
10006750:	103a411e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10006754:	d8c02017 	ldw	r3,128(sp)
10006758:	d8801f17 	ldw	r2,124(sp)
1000675c:	da000404 	addi	r8,sp,16
10006760:	003fee06 	br	1000671c <__alt_data_end+0xf800671c>
10006764:	00bfffc4 	movi	r2,-1
10006768:	003a3f06 	br	10005068 <__alt_data_end+0xf8005068>
1000676c:	008011c4 	movi	r2,71
10006770:	1440b816 	blt	r2,r17,10006a54 <___vfprintf_internal_r+0x1e0c>
10006774:	04040074 	movhi	r16,4097
10006778:	84104304 	addi	r16,r16,16652
1000677c:	00c000c4 	movi	r3,3
10006780:	00bfdfc4 	movi	r2,-129
10006784:	d8c02915 	stw	r3,164(sp)
10006788:	90a4703a 	and	r18,r18,r2
1000678c:	df002783 	ldbu	fp,158(sp)
10006790:	d8c02b15 	stw	r3,172(sp)
10006794:	d8002a15 	stw	zero,168(sp)
10006798:	d8003215 	stw	zero,200(sp)
1000679c:	003b0706 	br	100053bc <__alt_data_end+0xf80053bc>
100067a0:	d8c02e17 	ldw	r3,184(sp)
100067a4:	1cc00017 	ldw	r19,0(r3)
100067a8:	18c00104 	addi	r3,r3,4
100067ac:	d8c02e15 	stw	r3,184(sp)
100067b0:	982dd7fa 	srai	r22,r19,31
100067b4:	b005883a 	mov	r2,r22
100067b8:	003a7706 	br	10005198 <__alt_data_end+0xf8005198>
100067bc:	d8c02e17 	ldw	r3,184(sp)
100067c0:	d9002f17 	ldw	r4,188(sp)
100067c4:	18800017 	ldw	r2,0(r3)
100067c8:	18c00104 	addi	r3,r3,4
100067cc:	d8c02e15 	stw	r3,184(sp)
100067d0:	11000015 	stw	r4,0(r2)
100067d4:	00395406 	br	10004d28 <__alt_data_end+0xf8004d28>
100067d8:	d9002e17 	ldw	r4,184(sp)
100067dc:	002d883a 	mov	r22,zero
100067e0:	24c00017 	ldw	r19,0(r4)
100067e4:	21000104 	addi	r4,r4,4
100067e8:	d9002e15 	stw	r4,184(sp)
100067ec:	003c0706 	br	1000580c <__alt_data_end+0xf800580c>
100067f0:	d9402e17 	ldw	r5,184(sp)
100067f4:	d8c02a17 	ldw	r3,168(sp)
100067f8:	002d883a 	mov	r22,zero
100067fc:	28800104 	addi	r2,r5,4
10006800:	2cc0000b 	ldhu	r19,0(r5)
10006804:	183dc10e 	bge	r3,zero,10005f0c <__alt_data_end+0xf8005f0c>
10006808:	003f7506 	br	100065e0 <__alt_data_end+0xf80065e0>
1000680c:	04040074 	movhi	r16,4097
10006810:	84104104 	addi	r16,r16,16644
10006814:	003aa706 	br	100052b4 <__alt_data_end+0xf80052b4>
10006818:	d9002d17 	ldw	r4,180(sp)
1000681c:	d9801e04 	addi	r6,sp,120
10006820:	b80b883a 	mov	r5,r23
10006824:	000bbc80 	call	1000bbc8 <__sprint_r>
10006828:	103a0b1e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
1000682c:	dc402617 	ldw	r17,152(sp)
10006830:	d8c02017 	ldw	r3,128(sp)
10006834:	da000404 	addi	r8,sp,16
10006838:	003f9c06 	br	100066ac <__alt_data_end+0xf80066ac>
1000683c:	ac400043 	ldbu	r17,1(r21)
10006840:	84000814 	ori	r16,r16,32
10006844:	ad400044 	addi	r21,r21,1
10006848:	8c403fcc 	andi	r17,r17,255
1000684c:	8c40201c 	xori	r17,r17,128
10006850:	8c7fe004 	addi	r17,r17,-128
10006854:	00395e06 	br	10004dd0 <__alt_data_end+0xf8004dd0>
10006858:	d8c02e15 	stw	r3,184(sp)
1000685c:	0039883a 	mov	fp,zero
10006860:	003e3506 	br	10006138 <__alt_data_end+0xf8006138>
10006864:	d9002d17 	ldw	r4,180(sp)
10006868:	d9801e04 	addi	r6,sp,120
1000686c:	b80b883a 	mov	r5,r23
10006870:	000bbc80 	call	1000bbc8 <__sprint_r>
10006874:	1039f81e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10006878:	d8c02017 	ldw	r3,128(sp)
1000687c:	da000404 	addi	r8,sp,16
10006880:	003cd006 	br	10005bc4 <__alt_data_end+0xf8005bc4>
10006884:	8009883a 	mov	r4,r16
10006888:	df003d15 	stw	fp,244(sp)
1000688c:	0004bb00 	call	10004bb0 <strlen>
10006890:	d8802b15 	stw	r2,172(sp)
10006894:	da003d17 	ldw	r8,244(sp)
10006898:	103c200e 	bge	r2,zero,1000591c <__alt_data_end+0xf800591c>
1000689c:	0005883a 	mov	r2,zero
100068a0:	003c1e06 	br	1000591c <__alt_data_end+0xf800591c>
100068a4:	d9002d17 	ldw	r4,180(sp)
100068a8:	d9801e04 	addi	r6,sp,120
100068ac:	b80b883a 	mov	r5,r23
100068b0:	000bbc80 	call	1000bbc8 <__sprint_r>
100068b4:	1039e81e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
100068b8:	d8c02017 	ldw	r3,128(sp)
100068bc:	d8801f17 	ldw	r2,124(sp)
100068c0:	da000404 	addi	r8,sp,16
100068c4:	d9403317 	ldw	r5,204(sp)
100068c8:	10800044 	addi	r2,r2,1
100068cc:	44000015 	stw	r16,0(r8)
100068d0:	28c7883a 	add	r3,r5,r3
100068d4:	003b5b06 	br	10005644 <__alt_data_end+0xf8005644>
100068d8:	01040074 	movhi	r4,4097
100068dc:	21105584 	addi	r4,r4,16726
100068e0:	d9003515 	stw	r4,212(sp)
100068e4:	003af206 	br	100054b0 <__alt_data_end+0xf80054b0>
100068e8:	013fffc4 	movi	r4,-1
100068ec:	003a0806 	br	10005110 <__alt_data_end+0xf8005110>
100068f0:	0023883a 	mov	r17,zero
100068f4:	003d9d06 	br	10005f6c <__alt_data_end+0xf8005f6c>
100068f8:	d9002d17 	ldw	r4,180(sp)
100068fc:	d9801e04 	addi	r6,sp,120
10006900:	b80b883a 	mov	r5,r23
10006904:	000bbc80 	call	1000bbc8 <__sprint_r>
10006908:	1039d31e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
1000690c:	d8c02017 	ldw	r3,128(sp)
10006910:	da000404 	addi	r8,sp,16
10006914:	003d9406 	br	10005f68 <__alt_data_end+0xf8005f68>
10006918:	01040074 	movhi	r4,4097
1000691c:	21105184 	addi	r4,r4,16710
10006920:	d9002c15 	stw	r4,176(sp)
10006924:	d9002c17 	ldw	r4,176(sp)
10006928:	1c47883a 	add	r3,r3,r17
1000692c:	10800044 	addi	r2,r2,1
10006930:	41000015 	stw	r4,0(r8)
10006934:	44400115 	stw	r17,4(r8)
10006938:	d8c02015 	stw	r3,128(sp)
1000693c:	d8801f15 	stw	r2,124(sp)
10006940:	010001c4 	movi	r4,7
10006944:	20bfd716 	blt	r4,r2,100068a4 <__alt_data_end+0xf80068a4>
10006948:	42000204 	addi	r8,r8,8
1000694c:	003fdd06 	br	100068c4 <__alt_data_end+0xf80068c4>
10006950:	d9002d17 	ldw	r4,180(sp)
10006954:	d9801e04 	addi	r6,sp,120
10006958:	b80b883a 	mov	r5,r23
1000695c:	000bbc80 	call	1000bbc8 <__sprint_r>
10006960:	1039bd1e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10006964:	d8802617 	ldw	r2,152(sp)
10006968:	d8c02017 	ldw	r3,128(sp)
1000696c:	da000404 	addi	r8,sp,16
10006970:	003e1006 	br	100061b4 <__alt_data_end+0xf80061b4>
10006974:	00800044 	movi	r2,1
10006978:	10803fcc 	andi	r2,r2,255
1000697c:	00c00044 	movi	r3,1
10006980:	10fa0d26 	beq	r2,r3,100051b8 <__alt_data_end+0xf80051b8>
10006984:	00c00084 	movi	r3,2
10006988:	10fbaf26 	beq	r2,r3,10005848 <__alt_data_end+0xf8005848>
1000698c:	003a6d06 	br	10005344 <__alt_data_end+0xf8005344>
10006990:	01040074 	movhi	r4,4097
10006994:	21105584 	addi	r4,r4,16726
10006998:	d9003515 	stw	r4,212(sp)
1000699c:	003b5406 	br	100056f0 <__alt_data_end+0xf80056f0>
100069a0:	d8802a17 	ldw	r2,168(sp)
100069a4:	00c00184 	movi	r3,6
100069a8:	1880012e 	bgeu	r3,r2,100069b0 <___vfprintf_internal_r+0x1d68>
100069ac:	1805883a 	mov	r2,r3
100069b0:	d8802b15 	stw	r2,172(sp)
100069b4:	1000ef16 	blt	r2,zero,10006d74 <___vfprintf_internal_r+0x212c>
100069b8:	04040074 	movhi	r16,4097
100069bc:	d8802915 	stw	r2,164(sp)
100069c0:	dcc02e15 	stw	r19,184(sp)
100069c4:	d8002a15 	stw	zero,168(sp)
100069c8:	d8003215 	stw	zero,200(sp)
100069cc:	84104f04 	addi	r16,r16,16700
100069d0:	0039883a 	mov	fp,zero
100069d4:	003a8006 	br	100053d8 <__alt_data_end+0xf80053d8>
100069d8:	0021883a 	mov	r16,zero
100069dc:	003e0706 	br	100061fc <__alt_data_end+0xf80061fc>
100069e0:	d9002d17 	ldw	r4,180(sp)
100069e4:	d9801e04 	addi	r6,sp,120
100069e8:	b80b883a 	mov	r5,r23
100069ec:	000bbc80 	call	1000bbc8 <__sprint_r>
100069f0:	1039991e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
100069f4:	d8802617 	ldw	r2,152(sp)
100069f8:	d9403317 	ldw	r5,204(sp)
100069fc:	d8c02017 	ldw	r3,128(sp)
10006a00:	da000404 	addi	r8,sp,16
10006a04:	2885c83a 	sub	r2,r5,r2
10006a08:	003dfb06 	br	100061f8 <__alt_data_end+0xf80061f8>
10006a0c:	9080004c 	andi	r2,r18,1
10006a10:	103e8f1e 	bne	r2,zero,10006450 <__alt_data_end+0xf8006450>
10006a14:	d8802117 	ldw	r2,132(sp)
10006a18:	003e9e06 	br	10006494 <__alt_data_end+0xf8006494>
10006a1c:	1025883a 	mov	r18,r2
10006a20:	0039883a 	mov	fp,zero
10006a24:	00800084 	movi	r2,2
10006a28:	003fd306 	br	10006978 <__alt_data_end+0xf8006978>
10006a2c:	07000b44 	movi	fp,45
10006a30:	df002785 	stb	fp,158(sp)
10006a34:	003a1b06 	br	100052a4 <__alt_data_end+0xf80052a4>
10006a38:	00c00b44 	movi	r3,45
10006a3c:	d8c02785 	stb	r3,158(sp)
10006a40:	d8802915 	stw	r2,164(sp)
10006a44:	dc802c17 	ldw	r18,176(sp)
10006a48:	d8002a15 	stw	zero,168(sp)
10006a4c:	07000b44 	movi	fp,45
10006a50:	003a5e06 	br	100053cc <__alt_data_end+0xf80053cc>
10006a54:	04040074 	movhi	r16,4097
10006a58:	84104404 	addi	r16,r16,16656
10006a5c:	003f4706 	br	1000677c <__alt_data_end+0xf800677c>
10006a60:	d9002e17 	ldw	r4,184(sp)
10006a64:	d9402f17 	ldw	r5,188(sp)
10006a68:	20800017 	ldw	r2,0(r4)
10006a6c:	21000104 	addi	r4,r4,4
10006a70:	d9002e15 	stw	r4,184(sp)
10006a74:	11400015 	stw	r5,0(r2)
10006a78:	0038ab06 	br	10004d28 <__alt_data_end+0xf8004d28>
10006a7c:	dd802617 	ldw	r22,152(sp)
10006a80:	00bfff44 	movi	r2,-3
10006a84:	b0801c16 	blt	r22,r2,10006af8 <___vfprintf_internal_r+0x1eb0>
10006a88:	d9402a17 	ldw	r5,168(sp)
10006a8c:	2d801a16 	blt	r5,r22,10006af8 <___vfprintf_internal_r+0x1eb0>
10006a90:	dd803215 	stw	r22,200(sp)
10006a94:	003e8906 	br	100064bc <__alt_data_end+0xf80064bc>
10006a98:	01040074 	movhi	r4,4097
10006a9c:	21105184 	addi	r4,r4,16710
10006aa0:	d9002c15 	stw	r4,176(sp)
10006aa4:	003c9106 	br	10005cec <__alt_data_end+0xf8005cec>
10006aa8:	e005883a 	mov	r2,fp
10006aac:	003e7906 	br	10006494 <__alt_data_end+0xf8006494>
10006ab0:	d9002a17 	ldw	r4,168(sp)
10006ab4:	df002783 	ldbu	fp,158(sp)
10006ab8:	dcc02e15 	stw	r19,184(sp)
10006abc:	d9002915 	stw	r4,164(sp)
10006ac0:	d9002b15 	stw	r4,172(sp)
10006ac4:	d8002a15 	stw	zero,168(sp)
10006ac8:	d8003215 	stw	zero,200(sp)
10006acc:	003a3b06 	br	100053bc <__alt_data_end+0xf80053bc>
10006ad0:	9080004c 	andi	r2,r18,1
10006ad4:	0039883a 	mov	fp,zero
10006ad8:	10000426 	beq	r2,zero,10006aec <___vfprintf_internal_r+0x1ea4>
10006adc:	00800c04 	movi	r2,48
10006ae0:	dc001dc4 	addi	r16,sp,119
10006ae4:	d8801dc5 	stb	r2,119(sp)
10006ae8:	003b6406 	br	1000587c <__alt_data_end+0xf800587c>
10006aec:	d8002b15 	stw	zero,172(sp)
10006af0:	dc001e04 	addi	r16,sp,120
10006af4:	003a2b06 	br	100053a4 <__alt_data_end+0xf80053a4>
10006af8:	8c7fff84 	addi	r17,r17,-2
10006afc:	b5bfffc4 	addi	r22,r22,-1
10006b00:	dd802615 	stw	r22,152(sp)
10006b04:	dc4022c5 	stb	r17,139(sp)
10006b08:	b000bf16 	blt	r22,zero,10006e08 <___vfprintf_internal_r+0x21c0>
10006b0c:	00800ac4 	movi	r2,43
10006b10:	d8802305 	stb	r2,140(sp)
10006b14:	00800244 	movi	r2,9
10006b18:	15807016 	blt	r2,r22,10006cdc <___vfprintf_internal_r+0x2094>
10006b1c:	00800c04 	movi	r2,48
10006b20:	b5800c04 	addi	r22,r22,48
10006b24:	d8802345 	stb	r2,141(sp)
10006b28:	dd802385 	stb	r22,142(sp)
10006b2c:	d88023c4 	addi	r2,sp,143
10006b30:	df0022c4 	addi	fp,sp,139
10006b34:	d8c03317 	ldw	r3,204(sp)
10006b38:	1739c83a 	sub	fp,r2,fp
10006b3c:	d9003317 	ldw	r4,204(sp)
10006b40:	e0c7883a 	add	r3,fp,r3
10006b44:	df003a15 	stw	fp,232(sp)
10006b48:	d8c02b15 	stw	r3,172(sp)
10006b4c:	00800044 	movi	r2,1
10006b50:	1100b30e 	bge	r2,r4,10006e20 <___vfprintf_internal_r+0x21d8>
10006b54:	d8c02b17 	ldw	r3,172(sp)
10006b58:	18c00044 	addi	r3,r3,1
10006b5c:	d8c02b15 	stw	r3,172(sp)
10006b60:	1805883a 	mov	r2,r3
10006b64:	1800ac16 	blt	r3,zero,10006e18 <___vfprintf_internal_r+0x21d0>
10006b68:	d8003215 	stw	zero,200(sp)
10006b6c:	003e5d06 	br	100064e4 <__alt_data_end+0xf80064e4>
10006b70:	d9002d17 	ldw	r4,180(sp)
10006b74:	d9801e04 	addi	r6,sp,120
10006b78:	b80b883a 	mov	r5,r23
10006b7c:	000bbc80 	call	1000bbc8 <__sprint_r>
10006b80:	1039351e 	bne	r2,zero,10005058 <__alt_data_end+0xf8005058>
10006b84:	dc402617 	ldw	r17,152(sp)
10006b88:	d8c02017 	ldw	r3,128(sp)
10006b8c:	d8801f17 	ldw	r2,124(sp)
10006b90:	da000404 	addi	r8,sp,16
10006b94:	003ed606 	br	100066f0 <__alt_data_end+0xf80066f0>
10006b98:	182b883a 	mov	r21,r3
10006b9c:	d8002a15 	stw	zero,168(sp)
10006ba0:	00388c06 	br	10004dd4 <__alt_data_end+0xf8004dd4>
10006ba4:	d8802a17 	ldw	r2,168(sp)
10006ba8:	103e071e 	bne	r2,zero,100063c8 <__alt_data_end+0xf80063c8>
10006bac:	dc002a15 	stw	r16,168(sp)
10006bb0:	003e0506 	br	100063c8 <__alt_data_end+0xf80063c8>
10006bb4:	d9002a17 	ldw	r4,168(sp)
10006bb8:	20c00044 	addi	r3,r4,1
10006bbc:	003e0f06 	br	100063fc <__alt_data_end+0xf80063fc>
10006bc0:	01400184 	movi	r5,6
10006bc4:	d9402a15 	stw	r5,168(sp)
10006bc8:	003dff06 	br	100063c8 <__alt_data_end+0xf80063c8>
10006bcc:	d8802104 	addi	r2,sp,132
10006bd0:	d8800315 	stw	r2,12(sp)
10006bd4:	d8802504 	addi	r2,sp,148
10006bd8:	d8800215 	stw	r2,8(sp)
10006bdc:	d8802604 	addi	r2,sp,152
10006be0:	d8800115 	stw	r2,4(sp)
10006be4:	d8802a17 	ldw	r2,168(sp)
10006be8:	d9403617 	ldw	r5,216(sp)
10006bec:	d9002d17 	ldw	r4,180(sp)
10006bf0:	d8800015 	stw	r2,0(sp)
10006bf4:	01c000c4 	movi	r7,3
10006bf8:	980d883a 	mov	r6,r19
10006bfc:	da003d15 	stw	r8,244(sp)
10006c00:	00073780 	call	10007378 <_dtoa_r>
10006c04:	d8c02a17 	ldw	r3,168(sp)
10006c08:	da003d17 	ldw	r8,244(sp)
10006c0c:	1021883a 	mov	r16,r2
10006c10:	10f9883a 	add	fp,r2,r3
10006c14:	81000007 	ldb	r4,0(r16)
10006c18:	00800c04 	movi	r2,48
10006c1c:	20805e26 	beq	r4,r2,10006d98 <___vfprintf_internal_r+0x2150>
10006c20:	d8c02617 	ldw	r3,152(sp)
10006c24:	e0f9883a 	add	fp,fp,r3
10006c28:	003e0a06 	br	10006454 <__alt_data_end+0xf8006454>
10006c2c:	00c00b44 	movi	r3,45
10006c30:	24e0003c 	xorhi	r19,r4,32768
10006c34:	d8c02905 	stb	r3,164(sp)
10006c38:	003de906 	br	100063e0 <__alt_data_end+0xf80063e0>
10006c3c:	d8c03217 	ldw	r3,200(sp)
10006c40:	00c07a0e 	bge	zero,r3,10006e2c <___vfprintf_internal_r+0x21e4>
10006c44:	00800044 	movi	r2,1
10006c48:	d9003317 	ldw	r4,204(sp)
10006c4c:	1105883a 	add	r2,r2,r4
10006c50:	d8802b15 	stw	r2,172(sp)
10006c54:	10004e16 	blt	r2,zero,10006d90 <___vfprintf_internal_r+0x2148>
10006c58:	044019c4 	movi	r17,103
10006c5c:	003e2106 	br	100064e4 <__alt_data_end+0xf80064e4>
10006c60:	d9002a17 	ldw	r4,168(sp)
10006c64:	d8802104 	addi	r2,sp,132
10006c68:	d8800315 	stw	r2,12(sp)
10006c6c:	d9000015 	stw	r4,0(sp)
10006c70:	d8802504 	addi	r2,sp,148
10006c74:	d9403617 	ldw	r5,216(sp)
10006c78:	d9002d17 	ldw	r4,180(sp)
10006c7c:	d8800215 	stw	r2,8(sp)
10006c80:	d8802604 	addi	r2,sp,152
10006c84:	d8800115 	stw	r2,4(sp)
10006c88:	01c000c4 	movi	r7,3
10006c8c:	980d883a 	mov	r6,r19
10006c90:	da003d15 	stw	r8,244(sp)
10006c94:	00073780 	call	10007378 <_dtoa_r>
10006c98:	d8c02a17 	ldw	r3,168(sp)
10006c9c:	da003d17 	ldw	r8,244(sp)
10006ca0:	1021883a 	mov	r16,r2
10006ca4:	00801184 	movi	r2,70
10006ca8:	80f9883a 	add	fp,r16,r3
10006cac:	88bfd926 	beq	r17,r2,10006c14 <__alt_data_end+0xf8006c14>
10006cb0:	003de806 	br	10006454 <__alt_data_end+0xf8006454>
10006cb4:	d9002a17 	ldw	r4,168(sp)
10006cb8:	00c04d0e 	bge	zero,r3,10006df0 <___vfprintf_internal_r+0x21a8>
10006cbc:	2000441e 	bne	r4,zero,10006dd0 <___vfprintf_internal_r+0x2188>
10006cc0:	9480004c 	andi	r18,r18,1
10006cc4:	9000421e 	bne	r18,zero,10006dd0 <___vfprintf_internal_r+0x2188>
10006cc8:	1805883a 	mov	r2,r3
10006ccc:	18006f16 	blt	r3,zero,10006e8c <___vfprintf_internal_r+0x2244>
10006cd0:	d8c03217 	ldw	r3,200(sp)
10006cd4:	d8c02b15 	stw	r3,172(sp)
10006cd8:	003e0206 	br	100064e4 <__alt_data_end+0xf80064e4>
10006cdc:	df0022c4 	addi	fp,sp,139
10006ce0:	dc002a15 	stw	r16,168(sp)
10006ce4:	4027883a 	mov	r19,r8
10006ce8:	e021883a 	mov	r16,fp
10006cec:	b009883a 	mov	r4,r22
10006cf0:	01400284 	movi	r5,10
10006cf4:	000e7540 	call	1000e754 <__modsi3>
10006cf8:	10800c04 	addi	r2,r2,48
10006cfc:	843fffc4 	addi	r16,r16,-1
10006d00:	b009883a 	mov	r4,r22
10006d04:	01400284 	movi	r5,10
10006d08:	80800005 	stb	r2,0(r16)
10006d0c:	000e6d00 	call	1000e6d0 <__divsi3>
10006d10:	102d883a 	mov	r22,r2
10006d14:	00800244 	movi	r2,9
10006d18:	15bff416 	blt	r2,r22,10006cec <__alt_data_end+0xf8006cec>
10006d1c:	9811883a 	mov	r8,r19
10006d20:	b0800c04 	addi	r2,r22,48
10006d24:	8027883a 	mov	r19,r16
10006d28:	997fffc4 	addi	r5,r19,-1
10006d2c:	98bfffc5 	stb	r2,-1(r19)
10006d30:	dc002a17 	ldw	r16,168(sp)
10006d34:	2f006d2e 	bgeu	r5,fp,10006eec <___vfprintf_internal_r+0x22a4>
10006d38:	d9c02384 	addi	r7,sp,142
10006d3c:	3ccfc83a 	sub	r7,r7,r19
10006d40:	d9002344 	addi	r4,sp,141
10006d44:	e1cf883a 	add	r7,fp,r7
10006d48:	00000106 	br	10006d50 <___vfprintf_internal_r+0x2108>
10006d4c:	28800003 	ldbu	r2,0(r5)
10006d50:	20800005 	stb	r2,0(r4)
10006d54:	21000044 	addi	r4,r4,1
10006d58:	29400044 	addi	r5,r5,1
10006d5c:	393ffb1e 	bne	r7,r4,10006d4c <__alt_data_end+0xf8006d4c>
10006d60:	d8802304 	addi	r2,sp,140
10006d64:	14c5c83a 	sub	r2,r2,r19
10006d68:	d8c02344 	addi	r3,sp,141
10006d6c:	1885883a 	add	r2,r3,r2
10006d70:	003f7006 	br	10006b34 <__alt_data_end+0xf8006b34>
10006d74:	0005883a 	mov	r2,zero
10006d78:	003f0f06 	br	100069b8 <__alt_data_end+0xf80069b8>
10006d7c:	d8c03217 	ldw	r3,200(sp)
10006d80:	18c00044 	addi	r3,r3,1
10006d84:	d8c02b15 	stw	r3,172(sp)
10006d88:	1805883a 	mov	r2,r3
10006d8c:	183fb20e 	bge	r3,zero,10006c58 <__alt_data_end+0xf8006c58>
10006d90:	0005883a 	mov	r2,zero
10006d94:	003fb006 	br	10006c58 <__alt_data_end+0xf8006c58>
10006d98:	d9003617 	ldw	r4,216(sp)
10006d9c:	000d883a 	mov	r6,zero
10006da0:	000f883a 	mov	r7,zero
10006da4:	980b883a 	mov	r5,r19
10006da8:	d8c03c15 	stw	r3,240(sp)
10006dac:	da003d15 	stw	r8,244(sp)
10006db0:	000fb280 	call	1000fb28 <__eqdf2>
10006db4:	d8c03c17 	ldw	r3,240(sp)
10006db8:	da003d17 	ldw	r8,244(sp)
10006dbc:	103f9826 	beq	r2,zero,10006c20 <__alt_data_end+0xf8006c20>
10006dc0:	00800044 	movi	r2,1
10006dc4:	10c7c83a 	sub	r3,r2,r3
10006dc8:	d8c02615 	stw	r3,152(sp)
10006dcc:	003f9506 	br	10006c24 <__alt_data_end+0xf8006c24>
10006dd0:	d9002a17 	ldw	r4,168(sp)
10006dd4:	d8c03217 	ldw	r3,200(sp)
10006dd8:	20800044 	addi	r2,r4,1
10006ddc:	1885883a 	add	r2,r3,r2
10006de0:	d8802b15 	stw	r2,172(sp)
10006de4:	103dbf0e 	bge	r2,zero,100064e4 <__alt_data_end+0xf80064e4>
10006de8:	0005883a 	mov	r2,zero
10006dec:	003dbd06 	br	100064e4 <__alt_data_end+0xf80064e4>
10006df0:	2000201e 	bne	r4,zero,10006e74 <___vfprintf_internal_r+0x222c>
10006df4:	9480004c 	andi	r18,r18,1
10006df8:	90001e1e 	bne	r18,zero,10006e74 <___vfprintf_internal_r+0x222c>
10006dfc:	00800044 	movi	r2,1
10006e00:	d8802b15 	stw	r2,172(sp)
10006e04:	003db706 	br	100064e4 <__alt_data_end+0xf80064e4>
10006e08:	00800b44 	movi	r2,45
10006e0c:	05adc83a 	sub	r22,zero,r22
10006e10:	d8802305 	stb	r2,140(sp)
10006e14:	003f3f06 	br	10006b14 <__alt_data_end+0xf8006b14>
10006e18:	0005883a 	mov	r2,zero
10006e1c:	003f5206 	br	10006b68 <__alt_data_end+0xf8006b68>
10006e20:	90a4703a 	and	r18,r18,r2
10006e24:	903f4e26 	beq	r18,zero,10006b60 <__alt_data_end+0xf8006b60>
10006e28:	003f4a06 	br	10006b54 <__alt_data_end+0xf8006b54>
10006e2c:	00800084 	movi	r2,2
10006e30:	10c5c83a 	sub	r2,r2,r3
10006e34:	003f8406 	br	10006c48 <__alt_data_end+0xf8006c48>
10006e38:	d9402e17 	ldw	r5,184(sp)
10006e3c:	d9002e17 	ldw	r4,184(sp)
10006e40:	ac400043 	ldbu	r17,1(r21)
10006e44:	29400017 	ldw	r5,0(r5)
10006e48:	20800104 	addi	r2,r4,4
10006e4c:	d8802e15 	stw	r2,184(sp)
10006e50:	d9402a15 	stw	r5,168(sp)
10006e54:	182b883a 	mov	r21,r3
10006e58:	283e7b0e 	bge	r5,zero,10006848 <__alt_data_end+0xf8006848>
10006e5c:	8c403fcc 	andi	r17,r17,255
10006e60:	017fffc4 	movi	r5,-1
10006e64:	8c40201c 	xori	r17,r17,128
10006e68:	d9402a15 	stw	r5,168(sp)
10006e6c:	8c7fe004 	addi	r17,r17,-128
10006e70:	0037d706 	br	10004dd0 <__alt_data_end+0xf8004dd0>
10006e74:	d8c02a17 	ldw	r3,168(sp)
10006e78:	18c00084 	addi	r3,r3,2
10006e7c:	d8c02b15 	stw	r3,172(sp)
10006e80:	1805883a 	mov	r2,r3
10006e84:	183d970e 	bge	r3,zero,100064e4 <__alt_data_end+0xf80064e4>
10006e88:	003fd706 	br	10006de8 <__alt_data_end+0xf8006de8>
10006e8c:	0005883a 	mov	r2,zero
10006e90:	003f8f06 	br	10006cd0 <__alt_data_end+0xf8006cd0>
10006e94:	9080004c 	andi	r2,r18,1
10006e98:	103f821e 	bne	r2,zero,10006ca4 <__alt_data_end+0xf8006ca4>
10006e9c:	d8802117 	ldw	r2,132(sp)
10006ea0:	1405c83a 	sub	r2,r2,r16
10006ea4:	d8803315 	stw	r2,204(sp)
10006ea8:	b47ef426 	beq	r22,r17,10006a7c <__alt_data_end+0xf8006a7c>
10006eac:	dd802617 	ldw	r22,152(sp)
10006eb0:	003f1206 	br	10006afc <__alt_data_end+0xf8006afc>
10006eb4:	d8c02b03 	ldbu	r3,172(sp)
10006eb8:	d8c02785 	stb	r3,158(sp)
10006ebc:	0038df06 	br	1000523c <__alt_data_end+0xf800523c>
10006ec0:	d8c02b03 	ldbu	r3,172(sp)
10006ec4:	d8c02785 	stb	r3,158(sp)
10006ec8:	0038aa06 	br	10005174 <__alt_data_end+0xf8005174>
10006ecc:	d8c02b03 	ldbu	r3,172(sp)
10006ed0:	d8c02785 	stb	r3,158(sp)
10006ed4:	003a4306 	br	100057e4 <__alt_data_end+0xf80057e4>
10006ed8:	d8c02b03 	ldbu	r3,172(sp)
10006edc:	d8c02785 	stb	r3,158(sp)
10006ee0:	003af506 	br	10005ab8 <__alt_data_end+0xf8005ab8>
10006ee4:	0005883a 	mov	r2,zero
10006ee8:	003d7b06 	br	100064d8 <__alt_data_end+0xf80064d8>
10006eec:	d8802344 	addi	r2,sp,141
10006ef0:	003f1006 	br	10006b34 <__alt_data_end+0xf8006b34>
10006ef4:	d8c02b03 	ldbu	r3,172(sp)
10006ef8:	d8c02785 	stb	r3,158(sp)
10006efc:	0038fd06 	br	100052f4 <__alt_data_end+0xf80052f4>
10006f00:	d8c02b03 	ldbu	r3,172(sp)
10006f04:	d8c02785 	stb	r3,158(sp)
10006f08:	003a9706 	br	10005968 <__alt_data_end+0xf8005968>
10006f0c:	d8c02b03 	ldbu	r3,172(sp)
10006f10:	d8c02785 	stb	r3,158(sp)
10006f14:	003a1806 	br	10005778 <__alt_data_end+0xf8005778>
10006f18:	d8c02b03 	ldbu	r3,172(sp)
10006f1c:	d8c02785 	stb	r3,158(sp)
10006f20:	003abe06 	br	10005a1c <__alt_data_end+0xf8005a1c>

10006f24 <__vfprintf_internal>:
10006f24:	00840074 	movhi	r2,4097
10006f28:	1097b004 	addi	r2,r2,24256
10006f2c:	300f883a 	mov	r7,r6
10006f30:	280d883a 	mov	r6,r5
10006f34:	200b883a 	mov	r5,r4
10006f38:	11000017 	ldw	r4,0(r2)
10006f3c:	0004c481 	jmpi	10004c48 <___vfprintf_internal_r>

10006f40 <__sbprintf>:
10006f40:	2880030b 	ldhu	r2,12(r5)
10006f44:	2ac01917 	ldw	r11,100(r5)
10006f48:	2a80038b 	ldhu	r10,14(r5)
10006f4c:	2a400717 	ldw	r9,28(r5)
10006f50:	2a000917 	ldw	r8,36(r5)
10006f54:	defee204 	addi	sp,sp,-1144
10006f58:	00c10004 	movi	r3,1024
10006f5c:	dc011a15 	stw	r16,1128(sp)
10006f60:	10bfff4c 	andi	r2,r2,65533
10006f64:	2821883a 	mov	r16,r5
10006f68:	d8cb883a 	add	r5,sp,r3
10006f6c:	dc811c15 	stw	r18,1136(sp)
10006f70:	dc411b15 	stw	r17,1132(sp)
10006f74:	dfc11d15 	stw	ra,1140(sp)
10006f78:	2025883a 	mov	r18,r4
10006f7c:	d881030d 	sth	r2,1036(sp)
10006f80:	dac11915 	stw	r11,1124(sp)
10006f84:	da81038d 	sth	r10,1038(sp)
10006f88:	da410715 	stw	r9,1052(sp)
10006f8c:	da010915 	stw	r8,1060(sp)
10006f90:	dec10015 	stw	sp,1024(sp)
10006f94:	dec10415 	stw	sp,1040(sp)
10006f98:	d8c10215 	stw	r3,1032(sp)
10006f9c:	d8c10515 	stw	r3,1044(sp)
10006fa0:	d8010615 	stw	zero,1048(sp)
10006fa4:	0004c480 	call	10004c48 <___vfprintf_internal_r>
10006fa8:	1023883a 	mov	r17,r2
10006fac:	10000416 	blt	r2,zero,10006fc0 <__sbprintf+0x80>
10006fb0:	d9410004 	addi	r5,sp,1024
10006fb4:	9009883a 	mov	r4,r18
10006fb8:	0008c1c0 	call	10008c1c <_fflush_r>
10006fbc:	10000d1e 	bne	r2,zero,10006ff4 <__sbprintf+0xb4>
10006fc0:	d881030b 	ldhu	r2,1036(sp)
10006fc4:	1080100c 	andi	r2,r2,64
10006fc8:	10000326 	beq	r2,zero,10006fd8 <__sbprintf+0x98>
10006fcc:	8080030b 	ldhu	r2,12(r16)
10006fd0:	10801014 	ori	r2,r2,64
10006fd4:	8080030d 	sth	r2,12(r16)
10006fd8:	8805883a 	mov	r2,r17
10006fdc:	dfc11d17 	ldw	ra,1140(sp)
10006fe0:	dc811c17 	ldw	r18,1136(sp)
10006fe4:	dc411b17 	ldw	r17,1132(sp)
10006fe8:	dc011a17 	ldw	r16,1128(sp)
10006fec:	dec11e04 	addi	sp,sp,1144
10006ff0:	f800283a 	ret
10006ff4:	047fffc4 	movi	r17,-1
10006ff8:	003ff106 	br	10006fc0 <__alt_data_end+0xf8006fc0>

10006ffc <__swsetup_r>:
10006ffc:	00840074 	movhi	r2,4097
10007000:	defffd04 	addi	sp,sp,-12
10007004:	1097b004 	addi	r2,r2,24256
10007008:	dc400115 	stw	r17,4(sp)
1000700c:	2023883a 	mov	r17,r4
10007010:	11000017 	ldw	r4,0(r2)
10007014:	dc000015 	stw	r16,0(sp)
10007018:	dfc00215 	stw	ra,8(sp)
1000701c:	2821883a 	mov	r16,r5
10007020:	20000226 	beq	r4,zero,1000702c <__swsetup_r+0x30>
10007024:	20800e17 	ldw	r2,56(r4)
10007028:	10003126 	beq	r2,zero,100070f0 <__swsetup_r+0xf4>
1000702c:	8080030b 	ldhu	r2,12(r16)
10007030:	10c0020c 	andi	r3,r2,8
10007034:	1009883a 	mov	r4,r2
10007038:	18000f26 	beq	r3,zero,10007078 <__swsetup_r+0x7c>
1000703c:	80c00417 	ldw	r3,16(r16)
10007040:	18001526 	beq	r3,zero,10007098 <__swsetup_r+0x9c>
10007044:	1100004c 	andi	r4,r2,1
10007048:	20001c1e 	bne	r4,zero,100070bc <__swsetup_r+0xc0>
1000704c:	1080008c 	andi	r2,r2,2
10007050:	1000291e 	bne	r2,zero,100070f8 <__swsetup_r+0xfc>
10007054:	80800517 	ldw	r2,20(r16)
10007058:	80800215 	stw	r2,8(r16)
1000705c:	18001c26 	beq	r3,zero,100070d0 <__swsetup_r+0xd4>
10007060:	0005883a 	mov	r2,zero
10007064:	dfc00217 	ldw	ra,8(sp)
10007068:	dc400117 	ldw	r17,4(sp)
1000706c:	dc000017 	ldw	r16,0(sp)
10007070:	dec00304 	addi	sp,sp,12
10007074:	f800283a 	ret
10007078:	2080040c 	andi	r2,r4,16
1000707c:	10002e26 	beq	r2,zero,10007138 <__swsetup_r+0x13c>
10007080:	2080010c 	andi	r2,r4,4
10007084:	10001e1e 	bne	r2,zero,10007100 <__swsetup_r+0x104>
10007088:	80c00417 	ldw	r3,16(r16)
1000708c:	20800214 	ori	r2,r4,8
10007090:	8080030d 	sth	r2,12(r16)
10007094:	183feb1e 	bne	r3,zero,10007044 <__alt_data_end+0xf8007044>
10007098:	1100a00c 	andi	r4,r2,640
1000709c:	01408004 	movi	r5,512
100070a0:	217fe826 	beq	r4,r5,10007044 <__alt_data_end+0xf8007044>
100070a4:	800b883a 	mov	r5,r16
100070a8:	8809883a 	mov	r4,r17
100070ac:	0009bb80 	call	10009bb8 <__smakebuf_r>
100070b0:	8080030b 	ldhu	r2,12(r16)
100070b4:	80c00417 	ldw	r3,16(r16)
100070b8:	003fe206 	br	10007044 <__alt_data_end+0xf8007044>
100070bc:	80800517 	ldw	r2,20(r16)
100070c0:	80000215 	stw	zero,8(r16)
100070c4:	0085c83a 	sub	r2,zero,r2
100070c8:	80800615 	stw	r2,24(r16)
100070cc:	183fe41e 	bne	r3,zero,10007060 <__alt_data_end+0xf8007060>
100070d0:	80c0030b 	ldhu	r3,12(r16)
100070d4:	0005883a 	mov	r2,zero
100070d8:	1900200c 	andi	r4,r3,128
100070dc:	203fe126 	beq	r4,zero,10007064 <__alt_data_end+0xf8007064>
100070e0:	18c01014 	ori	r3,r3,64
100070e4:	80c0030d 	sth	r3,12(r16)
100070e8:	00bfffc4 	movi	r2,-1
100070ec:	003fdd06 	br	10007064 <__alt_data_end+0xf8007064>
100070f0:	00090080 	call	10009008 <__sinit>
100070f4:	003fcd06 	br	1000702c <__alt_data_end+0xf800702c>
100070f8:	0005883a 	mov	r2,zero
100070fc:	003fd606 	br	10007058 <__alt_data_end+0xf8007058>
10007100:	81400c17 	ldw	r5,48(r16)
10007104:	28000626 	beq	r5,zero,10007120 <__swsetup_r+0x124>
10007108:	80801004 	addi	r2,r16,64
1000710c:	28800326 	beq	r5,r2,1000711c <__swsetup_r+0x120>
10007110:	8809883a 	mov	r4,r17
10007114:	000917c0 	call	1000917c <_free_r>
10007118:	8100030b 	ldhu	r4,12(r16)
1000711c:	80000c15 	stw	zero,48(r16)
10007120:	80c00417 	ldw	r3,16(r16)
10007124:	00bff6c4 	movi	r2,-37
10007128:	1108703a 	and	r4,r2,r4
1000712c:	80000115 	stw	zero,4(r16)
10007130:	80c00015 	stw	r3,0(r16)
10007134:	003fd506 	br	1000708c <__alt_data_end+0xf800708c>
10007138:	00800244 	movi	r2,9
1000713c:	88800015 	stw	r2,0(r17)
10007140:	20801014 	ori	r2,r4,64
10007144:	8080030d 	sth	r2,12(r16)
10007148:	00bfffc4 	movi	r2,-1
1000714c:	003fc506 	br	10007064 <__alt_data_end+0xf8007064>

10007150 <quorem>:
10007150:	defff204 	addi	sp,sp,-56
10007154:	ddc00b15 	stw	r23,44(sp)
10007158:	20800417 	ldw	r2,16(r4)
1000715c:	2dc00417 	ldw	r23,16(r5)
10007160:	dfc00d15 	stw	ra,52(sp)
10007164:	df000c15 	stw	fp,48(sp)
10007168:	dd800a15 	stw	r22,40(sp)
1000716c:	dd400915 	stw	r21,36(sp)
10007170:	dd000815 	stw	r20,32(sp)
10007174:	dcc00715 	stw	r19,28(sp)
10007178:	dc800615 	stw	r18,24(sp)
1000717c:	dc400515 	stw	r17,20(sp)
10007180:	dc000415 	stw	r16,16(sp)
10007184:	15c07a16 	blt	r2,r23,10007370 <quorem+0x220>
10007188:	bdffffc4 	addi	r23,r23,-1
1000718c:	bde9883a 	add	r20,r23,r23
10007190:	28c00504 	addi	r3,r5,20
10007194:	a529883a 	add	r20,r20,r20
10007198:	1d39883a 	add	fp,r3,r20
1000719c:	24c00504 	addi	r19,r4,20
100071a0:	d9400215 	stw	r5,8(sp)
100071a4:	9d29883a 	add	r20,r19,r20
100071a8:	e1400017 	ldw	r5,0(fp)
100071ac:	d9000015 	stw	r4,0(sp)
100071b0:	a1000017 	ldw	r4,0(r20)
100071b4:	29400044 	addi	r5,r5,1
100071b8:	d8c00115 	stw	r3,4(sp)
100071bc:	dd000315 	stw	r20,12(sp)
100071c0:	000e7c80 	call	1000e7c8 <__udivsi3>
100071c4:	1025883a 	mov	r18,r2
100071c8:	10003026 	beq	r2,zero,1000728c <quorem+0x13c>
100071cc:	dc400117 	ldw	r17,4(sp)
100071d0:	9829883a 	mov	r20,r19
100071d4:	002d883a 	mov	r22,zero
100071d8:	0021883a 	mov	r16,zero
100071dc:	8d400017 	ldw	r21,0(r17)
100071e0:	900b883a 	mov	r5,r18
100071e4:	8c400104 	addi	r17,r17,4
100071e8:	a93fffcc 	andi	r4,r21,65535
100071ec:	000e8840 	call	1000e884 <__mulsi3>
100071f0:	a808d43a 	srli	r4,r21,16
100071f4:	900b883a 	mov	r5,r18
100071f8:	15ad883a 	add	r22,r2,r22
100071fc:	000e8840 	call	1000e884 <__mulsi3>
10007200:	a1000017 	ldw	r4,0(r20)
10007204:	b00cd43a 	srli	r6,r22,16
10007208:	b0ffffcc 	andi	r3,r22,65535
1000720c:	217fffcc 	andi	r5,r4,65535
10007210:	2c21883a 	add	r16,r5,r16
10007214:	80c7c83a 	sub	r3,r16,r3
10007218:	2008d43a 	srli	r4,r4,16
1000721c:	1185883a 	add	r2,r2,r6
10007220:	1821d43a 	srai	r16,r3,16
10007224:	117fffcc 	andi	r5,r2,65535
10007228:	2149c83a 	sub	r4,r4,r5
1000722c:	2421883a 	add	r16,r4,r16
10007230:	8008943a 	slli	r4,r16,16
10007234:	18ffffcc 	andi	r3,r3,65535
10007238:	102cd43a 	srli	r22,r2,16
1000723c:	20c8b03a 	or	r4,r4,r3
10007240:	a1000015 	stw	r4,0(r20)
10007244:	8021d43a 	srai	r16,r16,16
10007248:	a5000104 	addi	r20,r20,4
1000724c:	e47fe32e 	bgeu	fp,r17,100071dc <__alt_data_end+0xf80071dc>
10007250:	d8c00317 	ldw	r3,12(sp)
10007254:	18800017 	ldw	r2,0(r3)
10007258:	10000c1e 	bne	r2,zero,1000728c <quorem+0x13c>
1000725c:	18bfff04 	addi	r2,r3,-4
10007260:	9880082e 	bgeu	r19,r2,10007284 <quorem+0x134>
10007264:	18ffff17 	ldw	r3,-4(r3)
10007268:	18000326 	beq	r3,zero,10007278 <quorem+0x128>
1000726c:	00000506 	br	10007284 <quorem+0x134>
10007270:	10c00017 	ldw	r3,0(r2)
10007274:	1800031e 	bne	r3,zero,10007284 <quorem+0x134>
10007278:	10bfff04 	addi	r2,r2,-4
1000727c:	bdffffc4 	addi	r23,r23,-1
10007280:	98bffb36 	bltu	r19,r2,10007270 <__alt_data_end+0xf8007270>
10007284:	d8c00017 	ldw	r3,0(sp)
10007288:	1dc00415 	stw	r23,16(r3)
1000728c:	d9400217 	ldw	r5,8(sp)
10007290:	d9000017 	ldw	r4,0(sp)
10007294:	000aba80 	call	1000aba8 <__mcmp>
10007298:	10002816 	blt	r2,zero,1000733c <quorem+0x1ec>
1000729c:	dc400117 	ldw	r17,4(sp)
100072a0:	94800044 	addi	r18,r18,1
100072a4:	980d883a 	mov	r6,r19
100072a8:	0007883a 	mov	r3,zero
100072ac:	31000017 	ldw	r4,0(r6)
100072b0:	89400017 	ldw	r5,0(r17)
100072b4:	31800104 	addi	r6,r6,4
100072b8:	20bfffcc 	andi	r2,r4,65535
100072bc:	10c7883a 	add	r3,r2,r3
100072c0:	28bfffcc 	andi	r2,r5,65535
100072c4:	1885c83a 	sub	r2,r3,r2
100072c8:	280ad43a 	srli	r5,r5,16
100072cc:	2008d43a 	srli	r4,r4,16
100072d0:	1007d43a 	srai	r3,r2,16
100072d4:	10bfffcc 	andi	r2,r2,65535
100072d8:	2149c83a 	sub	r4,r4,r5
100072dc:	20c9883a 	add	r4,r4,r3
100072e0:	200a943a 	slli	r5,r4,16
100072e4:	8c400104 	addi	r17,r17,4
100072e8:	2007d43a 	srai	r3,r4,16
100072ec:	2884b03a 	or	r2,r5,r2
100072f0:	30bfff15 	stw	r2,-4(r6)
100072f4:	e47fed2e 	bgeu	fp,r17,100072ac <__alt_data_end+0xf80072ac>
100072f8:	bdc5883a 	add	r2,r23,r23
100072fc:	1085883a 	add	r2,r2,r2
10007300:	9887883a 	add	r3,r19,r2
10007304:	18800017 	ldw	r2,0(r3)
10007308:	10000c1e 	bne	r2,zero,1000733c <quorem+0x1ec>
1000730c:	18bfff04 	addi	r2,r3,-4
10007310:	9880082e 	bgeu	r19,r2,10007334 <quorem+0x1e4>
10007314:	18ffff17 	ldw	r3,-4(r3)
10007318:	18000326 	beq	r3,zero,10007328 <quorem+0x1d8>
1000731c:	00000506 	br	10007334 <quorem+0x1e4>
10007320:	10c00017 	ldw	r3,0(r2)
10007324:	1800031e 	bne	r3,zero,10007334 <quorem+0x1e4>
10007328:	10bfff04 	addi	r2,r2,-4
1000732c:	bdffffc4 	addi	r23,r23,-1
10007330:	98bffb36 	bltu	r19,r2,10007320 <__alt_data_end+0xf8007320>
10007334:	d8c00017 	ldw	r3,0(sp)
10007338:	1dc00415 	stw	r23,16(r3)
1000733c:	9005883a 	mov	r2,r18
10007340:	dfc00d17 	ldw	ra,52(sp)
10007344:	df000c17 	ldw	fp,48(sp)
10007348:	ddc00b17 	ldw	r23,44(sp)
1000734c:	dd800a17 	ldw	r22,40(sp)
10007350:	dd400917 	ldw	r21,36(sp)
10007354:	dd000817 	ldw	r20,32(sp)
10007358:	dcc00717 	ldw	r19,28(sp)
1000735c:	dc800617 	ldw	r18,24(sp)
10007360:	dc400517 	ldw	r17,20(sp)
10007364:	dc000417 	ldw	r16,16(sp)
10007368:	dec00e04 	addi	sp,sp,56
1000736c:	f800283a 	ret
10007370:	0005883a 	mov	r2,zero
10007374:	003ff206 	br	10007340 <__alt_data_end+0xf8007340>

10007378 <_dtoa_r>:
10007378:	20801017 	ldw	r2,64(r4)
1000737c:	deffde04 	addi	sp,sp,-136
10007380:	df002015 	stw	fp,128(sp)
10007384:	dcc01b15 	stw	r19,108(sp)
10007388:	dc801a15 	stw	r18,104(sp)
1000738c:	dc401915 	stw	r17,100(sp)
10007390:	dc001815 	stw	r16,96(sp)
10007394:	dfc02115 	stw	ra,132(sp)
10007398:	ddc01f15 	stw	r23,124(sp)
1000739c:	dd801e15 	stw	r22,120(sp)
100073a0:	dd401d15 	stw	r21,116(sp)
100073a4:	dd001c15 	stw	r20,112(sp)
100073a8:	d9c00315 	stw	r7,12(sp)
100073ac:	2039883a 	mov	fp,r4
100073b0:	3023883a 	mov	r17,r6
100073b4:	2825883a 	mov	r18,r5
100073b8:	dc002417 	ldw	r16,144(sp)
100073bc:	3027883a 	mov	r19,r6
100073c0:	10000826 	beq	r2,zero,100073e4 <_dtoa_r+0x6c>
100073c4:	21801117 	ldw	r6,68(r4)
100073c8:	00c00044 	movi	r3,1
100073cc:	100b883a 	mov	r5,r2
100073d0:	1986983a 	sll	r3,r3,r6
100073d4:	11800115 	stw	r6,4(r2)
100073d8:	10c00215 	stw	r3,8(r2)
100073dc:	000a2cc0 	call	1000a2cc <_Bfree>
100073e0:	e0001015 	stw	zero,64(fp)
100073e4:	88002e16 	blt	r17,zero,100074a0 <_dtoa_r+0x128>
100073e8:	80000015 	stw	zero,0(r16)
100073ec:	889ffc2c 	andhi	r2,r17,32752
100073f0:	00dffc34 	movhi	r3,32752
100073f4:	10c01c26 	beq	r2,r3,10007468 <_dtoa_r+0xf0>
100073f8:	000d883a 	mov	r6,zero
100073fc:	000f883a 	mov	r7,zero
10007400:	9009883a 	mov	r4,r18
10007404:	980b883a 	mov	r5,r19
10007408:	000fb280 	call	1000fb28 <__eqdf2>
1000740c:	10002b1e 	bne	r2,zero,100074bc <_dtoa_r+0x144>
10007410:	d9c02317 	ldw	r7,140(sp)
10007414:	00800044 	movi	r2,1
10007418:	38800015 	stw	r2,0(r7)
1000741c:	d8802517 	ldw	r2,148(sp)
10007420:	10019e26 	beq	r2,zero,10007a9c <_dtoa_r+0x724>
10007424:	d8c02517 	ldw	r3,148(sp)
10007428:	00840074 	movhi	r2,4097
1000742c:	10905144 	addi	r2,r2,16709
10007430:	18800015 	stw	r2,0(r3)
10007434:	10bfffc4 	addi	r2,r2,-1
10007438:	dfc02117 	ldw	ra,132(sp)
1000743c:	df002017 	ldw	fp,128(sp)
10007440:	ddc01f17 	ldw	r23,124(sp)
10007444:	dd801e17 	ldw	r22,120(sp)
10007448:	dd401d17 	ldw	r21,116(sp)
1000744c:	dd001c17 	ldw	r20,112(sp)
10007450:	dcc01b17 	ldw	r19,108(sp)
10007454:	dc801a17 	ldw	r18,104(sp)
10007458:	dc401917 	ldw	r17,100(sp)
1000745c:	dc001817 	ldw	r16,96(sp)
10007460:	dec02204 	addi	sp,sp,136
10007464:	f800283a 	ret
10007468:	d8c02317 	ldw	r3,140(sp)
1000746c:	0089c3c4 	movi	r2,9999
10007470:	18800015 	stw	r2,0(r3)
10007474:	90017726 	beq	r18,zero,10007a54 <_dtoa_r+0x6dc>
10007478:	00840074 	movhi	r2,4097
1000747c:	10905d04 	addi	r2,r2,16756
10007480:	d9002517 	ldw	r4,148(sp)
10007484:	203fec26 	beq	r4,zero,10007438 <__alt_data_end+0xf8007438>
10007488:	10c000c7 	ldb	r3,3(r2)
1000748c:	1801781e 	bne	r3,zero,10007a70 <_dtoa_r+0x6f8>
10007490:	10c000c4 	addi	r3,r2,3
10007494:	d9802517 	ldw	r6,148(sp)
10007498:	30c00015 	stw	r3,0(r6)
1000749c:	003fe606 	br	10007438 <__alt_data_end+0xf8007438>
100074a0:	04e00034 	movhi	r19,32768
100074a4:	9cffffc4 	addi	r19,r19,-1
100074a8:	00800044 	movi	r2,1
100074ac:	8ce6703a 	and	r19,r17,r19
100074b0:	80800015 	stw	r2,0(r16)
100074b4:	9823883a 	mov	r17,r19
100074b8:	003fcc06 	br	100073ec <__alt_data_end+0xf80073ec>
100074bc:	d8800204 	addi	r2,sp,8
100074c0:	d8800015 	stw	r2,0(sp)
100074c4:	d9c00104 	addi	r7,sp,4
100074c8:	900b883a 	mov	r5,r18
100074cc:	980d883a 	mov	r6,r19
100074d0:	e009883a 	mov	r4,fp
100074d4:	8820d53a 	srli	r16,r17,20
100074d8:	000af740 	call	1000af74 <__d2b>
100074dc:	d8800915 	stw	r2,36(sp)
100074e0:	8001651e 	bne	r16,zero,10007a78 <_dtoa_r+0x700>
100074e4:	dd800217 	ldw	r22,8(sp)
100074e8:	dc000117 	ldw	r16,4(sp)
100074ec:	00800804 	movi	r2,32
100074f0:	b421883a 	add	r16,r22,r16
100074f4:	80c10c84 	addi	r3,r16,1074
100074f8:	10c2d10e 	bge	r2,r3,10008040 <_dtoa_r+0xcc8>
100074fc:	00801004 	movi	r2,64
10007500:	81010484 	addi	r4,r16,1042
10007504:	10c7c83a 	sub	r3,r2,r3
10007508:	9108d83a 	srl	r4,r18,r4
1000750c:	88e2983a 	sll	r17,r17,r3
10007510:	2448b03a 	or	r4,r4,r17
10007514:	00110440 	call	10011044 <__floatunsidf>
10007518:	017f8434 	movhi	r5,65040
1000751c:	01800044 	movi	r6,1
10007520:	1009883a 	mov	r4,r2
10007524:	194b883a 	add	r5,r3,r5
10007528:	843fffc4 	addi	r16,r16,-1
1000752c:	d9801115 	stw	r6,68(sp)
10007530:	000d883a 	mov	r6,zero
10007534:	01cffe34 	movhi	r7,16376
10007538:	00105ec0 	call	100105ec <__subdf3>
1000753c:	0198dbf4 	movhi	r6,25455
10007540:	01cff4f4 	movhi	r7,16339
10007544:	3190d844 	addi	r6,r6,17249
10007548:	39e1e9c4 	addi	r7,r7,-30809
1000754c:	1009883a 	mov	r4,r2
10007550:	180b883a 	mov	r5,r3
10007554:	000fd800 	call	1000fd80 <__muldf3>
10007558:	01a2d874 	movhi	r6,35681
1000755c:	01cff1f4 	movhi	r7,16327
10007560:	31b22cc4 	addi	r6,r6,-14157
10007564:	39e28a04 	addi	r7,r7,-30168
10007568:	180b883a 	mov	r5,r3
1000756c:	1009883a 	mov	r4,r2
10007570:	000e8ac0 	call	1000e8ac <__adddf3>
10007574:	8009883a 	mov	r4,r16
10007578:	1029883a 	mov	r20,r2
1000757c:	1823883a 	mov	r17,r3
10007580:	0010f680 	call	10010f68 <__floatsidf>
10007584:	019427f4 	movhi	r6,20639
10007588:	01cff4f4 	movhi	r7,16339
1000758c:	319e7ec4 	addi	r6,r6,31227
10007590:	39d104c4 	addi	r7,r7,17427
10007594:	1009883a 	mov	r4,r2
10007598:	180b883a 	mov	r5,r3
1000759c:	000fd800 	call	1000fd80 <__muldf3>
100075a0:	100d883a 	mov	r6,r2
100075a4:	180f883a 	mov	r7,r3
100075a8:	a009883a 	mov	r4,r20
100075ac:	880b883a 	mov	r5,r17
100075b0:	000e8ac0 	call	1000e8ac <__adddf3>
100075b4:	1009883a 	mov	r4,r2
100075b8:	180b883a 	mov	r5,r3
100075bc:	1029883a 	mov	r20,r2
100075c0:	1823883a 	mov	r17,r3
100075c4:	0010ee80 	call	10010ee8 <__fixdfsi>
100075c8:	000d883a 	mov	r6,zero
100075cc:	000f883a 	mov	r7,zero
100075d0:	a009883a 	mov	r4,r20
100075d4:	880b883a 	mov	r5,r17
100075d8:	d8800515 	stw	r2,20(sp)
100075dc:	000fc8c0 	call	1000fc8c <__ledf2>
100075e0:	10028716 	blt	r2,zero,10008000 <_dtoa_r+0xc88>
100075e4:	d8c00517 	ldw	r3,20(sp)
100075e8:	00800584 	movi	r2,22
100075ec:	10c27536 	bltu	r2,r3,10007fc4 <_dtoa_r+0xc4c>
100075f0:	180490fa 	slli	r2,r3,3
100075f4:	00c40074 	movhi	r3,4097
100075f8:	18d07904 	addi	r3,r3,16868
100075fc:	1885883a 	add	r2,r3,r2
10007600:	11000017 	ldw	r4,0(r2)
10007604:	11400117 	ldw	r5,4(r2)
10007608:	900d883a 	mov	r6,r18
1000760c:	980f883a 	mov	r7,r19
10007610:	000fbb00 	call	1000fbb0 <__gedf2>
10007614:	00828d0e 	bge	zero,r2,1000804c <_dtoa_r+0xcd4>
10007618:	d9000517 	ldw	r4,20(sp)
1000761c:	d8000e15 	stw	zero,56(sp)
10007620:	213fffc4 	addi	r4,r4,-1
10007624:	d9000515 	stw	r4,20(sp)
10007628:	b42dc83a 	sub	r22,r22,r16
1000762c:	b5bfffc4 	addi	r22,r22,-1
10007630:	b0026f16 	blt	r22,zero,10007ff0 <_dtoa_r+0xc78>
10007634:	d8000815 	stw	zero,32(sp)
10007638:	d9c00517 	ldw	r7,20(sp)
1000763c:	38026416 	blt	r7,zero,10007fd0 <_dtoa_r+0xc58>
10007640:	b1ed883a 	add	r22,r22,r7
10007644:	d9c00d15 	stw	r7,52(sp)
10007648:	d8000a15 	stw	zero,40(sp)
1000764c:	d9800317 	ldw	r6,12(sp)
10007650:	00800244 	movi	r2,9
10007654:	11811436 	bltu	r2,r6,10007aa8 <_dtoa_r+0x730>
10007658:	00800144 	movi	r2,5
1000765c:	1184e10e 	bge	r2,r6,100089e4 <_dtoa_r+0x166c>
10007660:	31bfff04 	addi	r6,r6,-4
10007664:	d9800315 	stw	r6,12(sp)
10007668:	0023883a 	mov	r17,zero
1000766c:	d9800317 	ldw	r6,12(sp)
10007670:	008000c4 	movi	r2,3
10007674:	30836726 	beq	r6,r2,10008414 <_dtoa_r+0x109c>
10007678:	1183410e 	bge	r2,r6,10008380 <_dtoa_r+0x1008>
1000767c:	d9c00317 	ldw	r7,12(sp)
10007680:	00800104 	movi	r2,4
10007684:	38827c26 	beq	r7,r2,10008078 <_dtoa_r+0xd00>
10007688:	00800144 	movi	r2,5
1000768c:	3884c41e 	bne	r7,r2,100089a0 <_dtoa_r+0x1628>
10007690:	00800044 	movi	r2,1
10007694:	d8800b15 	stw	r2,44(sp)
10007698:	d8c00517 	ldw	r3,20(sp)
1000769c:	d9002217 	ldw	r4,136(sp)
100076a0:	1907883a 	add	r3,r3,r4
100076a4:	19800044 	addi	r6,r3,1
100076a8:	d8c00c15 	stw	r3,48(sp)
100076ac:	d9800615 	stw	r6,24(sp)
100076b0:	0183a40e 	bge	zero,r6,10008544 <_dtoa_r+0x11cc>
100076b4:	d9800617 	ldw	r6,24(sp)
100076b8:	3021883a 	mov	r16,r6
100076bc:	e0001115 	stw	zero,68(fp)
100076c0:	008005c4 	movi	r2,23
100076c4:	1184c92e 	bgeu	r2,r6,100089ec <_dtoa_r+0x1674>
100076c8:	00c00044 	movi	r3,1
100076cc:	00800104 	movi	r2,4
100076d0:	1085883a 	add	r2,r2,r2
100076d4:	11000504 	addi	r4,r2,20
100076d8:	180b883a 	mov	r5,r3
100076dc:	18c00044 	addi	r3,r3,1
100076e0:	313ffb2e 	bgeu	r6,r4,100076d0 <__alt_data_end+0xf80076d0>
100076e4:	e1401115 	stw	r5,68(fp)
100076e8:	e009883a 	mov	r4,fp
100076ec:	000a2240 	call	1000a224 <_Balloc>
100076f0:	d8800715 	stw	r2,28(sp)
100076f4:	e0801015 	stw	r2,64(fp)
100076f8:	00800384 	movi	r2,14
100076fc:	1400f736 	bltu	r2,r16,10007adc <_dtoa_r+0x764>
10007700:	8800f626 	beq	r17,zero,10007adc <_dtoa_r+0x764>
10007704:	d9c00517 	ldw	r7,20(sp)
10007708:	01c39a0e 	bge	zero,r7,10008574 <_dtoa_r+0x11fc>
1000770c:	388003cc 	andi	r2,r7,15
10007710:	100490fa 	slli	r2,r2,3
10007714:	382bd13a 	srai	r21,r7,4
10007718:	00c40074 	movhi	r3,4097
1000771c:	18d07904 	addi	r3,r3,16868
10007720:	1885883a 	add	r2,r3,r2
10007724:	a8c0040c 	andi	r3,r21,16
10007728:	12400017 	ldw	r9,0(r2)
1000772c:	12000117 	ldw	r8,4(r2)
10007730:	18037926 	beq	r3,zero,10008518 <_dtoa_r+0x11a0>
10007734:	00840074 	movhi	r2,4097
10007738:	10906f04 	addi	r2,r2,16828
1000773c:	11800817 	ldw	r6,32(r2)
10007740:	11c00917 	ldw	r7,36(r2)
10007744:	9009883a 	mov	r4,r18
10007748:	980b883a 	mov	r5,r19
1000774c:	da001715 	stw	r8,92(sp)
10007750:	da401615 	stw	r9,88(sp)
10007754:	000f1580 	call	1000f158 <__divdf3>
10007758:	da001717 	ldw	r8,92(sp)
1000775c:	da401617 	ldw	r9,88(sp)
10007760:	ad4003cc 	andi	r21,r21,15
10007764:	040000c4 	movi	r16,3
10007768:	1023883a 	mov	r17,r2
1000776c:	1829883a 	mov	r20,r3
10007770:	a8001126 	beq	r21,zero,100077b8 <_dtoa_r+0x440>
10007774:	05c40074 	movhi	r23,4097
10007778:	bdd06f04 	addi	r23,r23,16828
1000777c:	4805883a 	mov	r2,r9
10007780:	4007883a 	mov	r3,r8
10007784:	a980004c 	andi	r6,r21,1
10007788:	1009883a 	mov	r4,r2
1000778c:	a82bd07a 	srai	r21,r21,1
10007790:	180b883a 	mov	r5,r3
10007794:	30000426 	beq	r6,zero,100077a8 <_dtoa_r+0x430>
10007798:	b9800017 	ldw	r6,0(r23)
1000779c:	b9c00117 	ldw	r7,4(r23)
100077a0:	84000044 	addi	r16,r16,1
100077a4:	000fd800 	call	1000fd80 <__muldf3>
100077a8:	bdc00204 	addi	r23,r23,8
100077ac:	a83ff51e 	bne	r21,zero,10007784 <__alt_data_end+0xf8007784>
100077b0:	1013883a 	mov	r9,r2
100077b4:	1811883a 	mov	r8,r3
100077b8:	480d883a 	mov	r6,r9
100077bc:	400f883a 	mov	r7,r8
100077c0:	8809883a 	mov	r4,r17
100077c4:	a00b883a 	mov	r5,r20
100077c8:	000f1580 	call	1000f158 <__divdf3>
100077cc:	d8800f15 	stw	r2,60(sp)
100077d0:	d8c01015 	stw	r3,64(sp)
100077d4:	d8c00e17 	ldw	r3,56(sp)
100077d8:	18000626 	beq	r3,zero,100077f4 <_dtoa_r+0x47c>
100077dc:	d9000f17 	ldw	r4,60(sp)
100077e0:	d9401017 	ldw	r5,64(sp)
100077e4:	000d883a 	mov	r6,zero
100077e8:	01cffc34 	movhi	r7,16368
100077ec:	000fc8c0 	call	1000fc8c <__ledf2>
100077f0:	10040b16 	blt	r2,zero,10008820 <_dtoa_r+0x14a8>
100077f4:	8009883a 	mov	r4,r16
100077f8:	0010f680 	call	10010f68 <__floatsidf>
100077fc:	d9800f17 	ldw	r6,60(sp)
10007800:	d9c01017 	ldw	r7,64(sp)
10007804:	1009883a 	mov	r4,r2
10007808:	180b883a 	mov	r5,r3
1000780c:	000fd800 	call	1000fd80 <__muldf3>
10007810:	000d883a 	mov	r6,zero
10007814:	01d00734 	movhi	r7,16412
10007818:	1009883a 	mov	r4,r2
1000781c:	180b883a 	mov	r5,r3
10007820:	000e8ac0 	call	1000e8ac <__adddf3>
10007824:	1021883a 	mov	r16,r2
10007828:	d8800617 	ldw	r2,24(sp)
1000782c:	047f3034 	movhi	r17,64704
10007830:	1c63883a 	add	r17,r3,r17
10007834:	10031826 	beq	r2,zero,10008498 <_dtoa_r+0x1120>
10007838:	d8c00517 	ldw	r3,20(sp)
1000783c:	db000617 	ldw	r12,24(sp)
10007840:	d8c01315 	stw	r3,76(sp)
10007844:	d9000b17 	ldw	r4,44(sp)
10007848:	20038f26 	beq	r4,zero,10008688 <_dtoa_r+0x1310>
1000784c:	60bfffc4 	addi	r2,r12,-1
10007850:	100490fa 	slli	r2,r2,3
10007854:	00c40074 	movhi	r3,4097
10007858:	18d07904 	addi	r3,r3,16868
1000785c:	1885883a 	add	r2,r3,r2
10007860:	11800017 	ldw	r6,0(r2)
10007864:	11c00117 	ldw	r7,4(r2)
10007868:	d8800717 	ldw	r2,28(sp)
1000786c:	0009883a 	mov	r4,zero
10007870:	014ff834 	movhi	r5,16352
10007874:	db001615 	stw	r12,88(sp)
10007878:	15c00044 	addi	r23,r2,1
1000787c:	000f1580 	call	1000f158 <__divdf3>
10007880:	800d883a 	mov	r6,r16
10007884:	880f883a 	mov	r7,r17
10007888:	1009883a 	mov	r4,r2
1000788c:	180b883a 	mov	r5,r3
10007890:	00105ec0 	call	100105ec <__subdf3>
10007894:	d9401017 	ldw	r5,64(sp)
10007898:	d9000f17 	ldw	r4,60(sp)
1000789c:	102b883a 	mov	r21,r2
100078a0:	d8c01215 	stw	r3,72(sp)
100078a4:	0010ee80 	call	10010ee8 <__fixdfsi>
100078a8:	1009883a 	mov	r4,r2
100078ac:	1029883a 	mov	r20,r2
100078b0:	0010f680 	call	10010f68 <__floatsidf>
100078b4:	d9000f17 	ldw	r4,60(sp)
100078b8:	d9401017 	ldw	r5,64(sp)
100078bc:	100d883a 	mov	r6,r2
100078c0:	180f883a 	mov	r7,r3
100078c4:	00105ec0 	call	100105ec <__subdf3>
100078c8:	1823883a 	mov	r17,r3
100078cc:	d8c00717 	ldw	r3,28(sp)
100078d0:	d9401217 	ldw	r5,72(sp)
100078d4:	a2000c04 	addi	r8,r20,48
100078d8:	1021883a 	mov	r16,r2
100078dc:	1a000005 	stb	r8,0(r3)
100078e0:	800d883a 	mov	r6,r16
100078e4:	880f883a 	mov	r7,r17
100078e8:	a809883a 	mov	r4,r21
100078ec:	4029883a 	mov	r20,r8
100078f0:	000fbb00 	call	1000fbb0 <__gedf2>
100078f4:	00841d16 	blt	zero,r2,1000896c <_dtoa_r+0x15f4>
100078f8:	800d883a 	mov	r6,r16
100078fc:	880f883a 	mov	r7,r17
10007900:	0009883a 	mov	r4,zero
10007904:	014ffc34 	movhi	r5,16368
10007908:	00105ec0 	call	100105ec <__subdf3>
1000790c:	d9401217 	ldw	r5,72(sp)
10007910:	100d883a 	mov	r6,r2
10007914:	180f883a 	mov	r7,r3
10007918:	a809883a 	mov	r4,r21
1000791c:	000fbb00 	call	1000fbb0 <__gedf2>
10007920:	db001617 	ldw	r12,88(sp)
10007924:	00840e16 	blt	zero,r2,10008960 <_dtoa_r+0x15e8>
10007928:	00800044 	movi	r2,1
1000792c:	13006b0e 	bge	r2,r12,10007adc <_dtoa_r+0x764>
10007930:	d9000717 	ldw	r4,28(sp)
10007934:	dd800f15 	stw	r22,60(sp)
10007938:	dcc01015 	stw	r19,64(sp)
1000793c:	2319883a 	add	r12,r4,r12
10007940:	dcc01217 	ldw	r19,72(sp)
10007944:	602d883a 	mov	r22,r12
10007948:	dc801215 	stw	r18,72(sp)
1000794c:	b825883a 	mov	r18,r23
10007950:	00000906 	br	10007978 <_dtoa_r+0x600>
10007954:	00105ec0 	call	100105ec <__subdf3>
10007958:	a80d883a 	mov	r6,r21
1000795c:	980f883a 	mov	r7,r19
10007960:	1009883a 	mov	r4,r2
10007964:	180b883a 	mov	r5,r3
10007968:	000fc8c0 	call	1000fc8c <__ledf2>
1000796c:	1003e816 	blt	r2,zero,10008910 <_dtoa_r+0x1598>
10007970:	b825883a 	mov	r18,r23
10007974:	bd83e926 	beq	r23,r22,1000891c <_dtoa_r+0x15a4>
10007978:	a809883a 	mov	r4,r21
1000797c:	980b883a 	mov	r5,r19
10007980:	000d883a 	mov	r6,zero
10007984:	01d00934 	movhi	r7,16420
10007988:	000fd800 	call	1000fd80 <__muldf3>
1000798c:	000d883a 	mov	r6,zero
10007990:	01d00934 	movhi	r7,16420
10007994:	8009883a 	mov	r4,r16
10007998:	880b883a 	mov	r5,r17
1000799c:	102b883a 	mov	r21,r2
100079a0:	1827883a 	mov	r19,r3
100079a4:	000fd800 	call	1000fd80 <__muldf3>
100079a8:	180b883a 	mov	r5,r3
100079ac:	1009883a 	mov	r4,r2
100079b0:	1821883a 	mov	r16,r3
100079b4:	1023883a 	mov	r17,r2
100079b8:	0010ee80 	call	10010ee8 <__fixdfsi>
100079bc:	1009883a 	mov	r4,r2
100079c0:	1029883a 	mov	r20,r2
100079c4:	0010f680 	call	10010f68 <__floatsidf>
100079c8:	8809883a 	mov	r4,r17
100079cc:	800b883a 	mov	r5,r16
100079d0:	100d883a 	mov	r6,r2
100079d4:	180f883a 	mov	r7,r3
100079d8:	00105ec0 	call	100105ec <__subdf3>
100079dc:	a5000c04 	addi	r20,r20,48
100079e0:	a80d883a 	mov	r6,r21
100079e4:	980f883a 	mov	r7,r19
100079e8:	1009883a 	mov	r4,r2
100079ec:	180b883a 	mov	r5,r3
100079f0:	95000005 	stb	r20,0(r18)
100079f4:	1021883a 	mov	r16,r2
100079f8:	1823883a 	mov	r17,r3
100079fc:	000fc8c0 	call	1000fc8c <__ledf2>
10007a00:	bdc00044 	addi	r23,r23,1
10007a04:	800d883a 	mov	r6,r16
10007a08:	880f883a 	mov	r7,r17
10007a0c:	0009883a 	mov	r4,zero
10007a10:	014ffc34 	movhi	r5,16368
10007a14:	103fcf0e 	bge	r2,zero,10007954 <__alt_data_end+0xf8007954>
10007a18:	d8c01317 	ldw	r3,76(sp)
10007a1c:	d8c00515 	stw	r3,20(sp)
10007a20:	d9400917 	ldw	r5,36(sp)
10007a24:	e009883a 	mov	r4,fp
10007a28:	000a2cc0 	call	1000a2cc <_Bfree>
10007a2c:	d9000517 	ldw	r4,20(sp)
10007a30:	d9802317 	ldw	r6,140(sp)
10007a34:	d9c02517 	ldw	r7,148(sp)
10007a38:	b8000005 	stb	zero,0(r23)
10007a3c:	20800044 	addi	r2,r4,1
10007a40:	30800015 	stw	r2,0(r6)
10007a44:	3802aa26 	beq	r7,zero,100084f0 <_dtoa_r+0x1178>
10007a48:	3dc00015 	stw	r23,0(r7)
10007a4c:	d8800717 	ldw	r2,28(sp)
10007a50:	003e7906 	br	10007438 <__alt_data_end+0xf8007438>
10007a54:	00800434 	movhi	r2,16
10007a58:	10bfffc4 	addi	r2,r2,-1
10007a5c:	88a2703a 	and	r17,r17,r2
10007a60:	883e851e 	bne	r17,zero,10007478 <__alt_data_end+0xf8007478>
10007a64:	00840074 	movhi	r2,4097
10007a68:	10905a04 	addi	r2,r2,16744
10007a6c:	003e8406 	br	10007480 <__alt_data_end+0xf8007480>
10007a70:	10c00204 	addi	r3,r2,8
10007a74:	003e8706 	br	10007494 <__alt_data_end+0xf8007494>
10007a78:	01400434 	movhi	r5,16
10007a7c:	297fffc4 	addi	r5,r5,-1
10007a80:	994a703a 	and	r5,r19,r5
10007a84:	9009883a 	mov	r4,r18
10007a88:	843f0044 	addi	r16,r16,-1023
10007a8c:	294ffc34 	orhi	r5,r5,16368
10007a90:	dd800217 	ldw	r22,8(sp)
10007a94:	d8001115 	stw	zero,68(sp)
10007a98:	003ea506 	br	10007530 <__alt_data_end+0xf8007530>
10007a9c:	00840074 	movhi	r2,4097
10007aa0:	10905104 	addi	r2,r2,16708
10007aa4:	003e6406 	br	10007438 <__alt_data_end+0xf8007438>
10007aa8:	e0001115 	stw	zero,68(fp)
10007aac:	000b883a 	mov	r5,zero
10007ab0:	e009883a 	mov	r4,fp
10007ab4:	000a2240 	call	1000a224 <_Balloc>
10007ab8:	01bfffc4 	movi	r6,-1
10007abc:	01c00044 	movi	r7,1
10007ac0:	d8800715 	stw	r2,28(sp)
10007ac4:	d9800c15 	stw	r6,48(sp)
10007ac8:	e0801015 	stw	r2,64(fp)
10007acc:	d8000315 	stw	zero,12(sp)
10007ad0:	d9c00b15 	stw	r7,44(sp)
10007ad4:	d9800615 	stw	r6,24(sp)
10007ad8:	d8002215 	stw	zero,136(sp)
10007adc:	d8800117 	ldw	r2,4(sp)
10007ae0:	10008916 	blt	r2,zero,10007d08 <_dtoa_r+0x990>
10007ae4:	d9000517 	ldw	r4,20(sp)
10007ae8:	00c00384 	movi	r3,14
10007aec:	19008616 	blt	r3,r4,10007d08 <_dtoa_r+0x990>
10007af0:	200490fa 	slli	r2,r4,3
10007af4:	00c40074 	movhi	r3,4097
10007af8:	d9802217 	ldw	r6,136(sp)
10007afc:	18d07904 	addi	r3,r3,16868
10007b00:	1885883a 	add	r2,r3,r2
10007b04:	14000017 	ldw	r16,0(r2)
10007b08:	14400117 	ldw	r17,4(r2)
10007b0c:	30016316 	blt	r6,zero,1000809c <_dtoa_r+0xd24>
10007b10:	800d883a 	mov	r6,r16
10007b14:	880f883a 	mov	r7,r17
10007b18:	9009883a 	mov	r4,r18
10007b1c:	980b883a 	mov	r5,r19
10007b20:	000f1580 	call	1000f158 <__divdf3>
10007b24:	180b883a 	mov	r5,r3
10007b28:	1009883a 	mov	r4,r2
10007b2c:	0010ee80 	call	10010ee8 <__fixdfsi>
10007b30:	1009883a 	mov	r4,r2
10007b34:	102b883a 	mov	r21,r2
10007b38:	0010f680 	call	10010f68 <__floatsidf>
10007b3c:	800d883a 	mov	r6,r16
10007b40:	880f883a 	mov	r7,r17
10007b44:	1009883a 	mov	r4,r2
10007b48:	180b883a 	mov	r5,r3
10007b4c:	000fd800 	call	1000fd80 <__muldf3>
10007b50:	100d883a 	mov	r6,r2
10007b54:	180f883a 	mov	r7,r3
10007b58:	9009883a 	mov	r4,r18
10007b5c:	980b883a 	mov	r5,r19
10007b60:	00105ec0 	call	100105ec <__subdf3>
10007b64:	d9c00717 	ldw	r7,28(sp)
10007b68:	1009883a 	mov	r4,r2
10007b6c:	a8800c04 	addi	r2,r21,48
10007b70:	38800005 	stb	r2,0(r7)
10007b74:	3dc00044 	addi	r23,r7,1
10007b78:	d9c00617 	ldw	r7,24(sp)
10007b7c:	01800044 	movi	r6,1
10007b80:	180b883a 	mov	r5,r3
10007b84:	2005883a 	mov	r2,r4
10007b88:	39803826 	beq	r7,r6,10007c6c <_dtoa_r+0x8f4>
10007b8c:	000d883a 	mov	r6,zero
10007b90:	01d00934 	movhi	r7,16420
10007b94:	000fd800 	call	1000fd80 <__muldf3>
10007b98:	000d883a 	mov	r6,zero
10007b9c:	000f883a 	mov	r7,zero
10007ba0:	1009883a 	mov	r4,r2
10007ba4:	180b883a 	mov	r5,r3
10007ba8:	1025883a 	mov	r18,r2
10007bac:	1827883a 	mov	r19,r3
10007bb0:	000fb280 	call	1000fb28 <__eqdf2>
10007bb4:	103f9a26 	beq	r2,zero,10007a20 <__alt_data_end+0xf8007a20>
10007bb8:	d9c00617 	ldw	r7,24(sp)
10007bbc:	d8c00717 	ldw	r3,28(sp)
10007bc0:	b829883a 	mov	r20,r23
10007bc4:	38bfffc4 	addi	r2,r7,-1
10007bc8:	18ad883a 	add	r22,r3,r2
10007bcc:	00000a06 	br	10007bf8 <_dtoa_r+0x880>
10007bd0:	000fd800 	call	1000fd80 <__muldf3>
10007bd4:	000d883a 	mov	r6,zero
10007bd8:	000f883a 	mov	r7,zero
10007bdc:	1009883a 	mov	r4,r2
10007be0:	180b883a 	mov	r5,r3
10007be4:	1025883a 	mov	r18,r2
10007be8:	1827883a 	mov	r19,r3
10007bec:	b829883a 	mov	r20,r23
10007bf0:	000fb280 	call	1000fb28 <__eqdf2>
10007bf4:	103f8a26 	beq	r2,zero,10007a20 <__alt_data_end+0xf8007a20>
10007bf8:	800d883a 	mov	r6,r16
10007bfc:	880f883a 	mov	r7,r17
10007c00:	9009883a 	mov	r4,r18
10007c04:	980b883a 	mov	r5,r19
10007c08:	000f1580 	call	1000f158 <__divdf3>
10007c0c:	180b883a 	mov	r5,r3
10007c10:	1009883a 	mov	r4,r2
10007c14:	0010ee80 	call	10010ee8 <__fixdfsi>
10007c18:	1009883a 	mov	r4,r2
10007c1c:	102b883a 	mov	r21,r2
10007c20:	0010f680 	call	10010f68 <__floatsidf>
10007c24:	800d883a 	mov	r6,r16
10007c28:	880f883a 	mov	r7,r17
10007c2c:	1009883a 	mov	r4,r2
10007c30:	180b883a 	mov	r5,r3
10007c34:	000fd800 	call	1000fd80 <__muldf3>
10007c38:	100d883a 	mov	r6,r2
10007c3c:	180f883a 	mov	r7,r3
10007c40:	9009883a 	mov	r4,r18
10007c44:	980b883a 	mov	r5,r19
10007c48:	00105ec0 	call	100105ec <__subdf3>
10007c4c:	aa000c04 	addi	r8,r21,48
10007c50:	a2000005 	stb	r8,0(r20)
10007c54:	000d883a 	mov	r6,zero
10007c58:	01d00934 	movhi	r7,16420
10007c5c:	1009883a 	mov	r4,r2
10007c60:	180b883a 	mov	r5,r3
10007c64:	a5c00044 	addi	r23,r20,1
10007c68:	b53fd91e 	bne	r22,r20,10007bd0 <__alt_data_end+0xf8007bd0>
10007c6c:	100d883a 	mov	r6,r2
10007c70:	180f883a 	mov	r7,r3
10007c74:	1009883a 	mov	r4,r2
10007c78:	180b883a 	mov	r5,r3
10007c7c:	000e8ac0 	call	1000e8ac <__adddf3>
10007c80:	100d883a 	mov	r6,r2
10007c84:	180f883a 	mov	r7,r3
10007c88:	8009883a 	mov	r4,r16
10007c8c:	880b883a 	mov	r5,r17
10007c90:	1027883a 	mov	r19,r2
10007c94:	1825883a 	mov	r18,r3
10007c98:	000fc8c0 	call	1000fc8c <__ledf2>
10007c9c:	10000816 	blt	r2,zero,10007cc0 <_dtoa_r+0x948>
10007ca0:	980d883a 	mov	r6,r19
10007ca4:	900f883a 	mov	r7,r18
10007ca8:	8009883a 	mov	r4,r16
10007cac:	880b883a 	mov	r5,r17
10007cb0:	000fb280 	call	1000fb28 <__eqdf2>
10007cb4:	103f5a1e 	bne	r2,zero,10007a20 <__alt_data_end+0xf8007a20>
10007cb8:	ad40004c 	andi	r21,r21,1
10007cbc:	a83f5826 	beq	r21,zero,10007a20 <__alt_data_end+0xf8007a20>
10007cc0:	bd3fffc3 	ldbu	r20,-1(r23)
10007cc4:	b8bfffc4 	addi	r2,r23,-1
10007cc8:	1007883a 	mov	r3,r2
10007ccc:	01400e44 	movi	r5,57
10007cd0:	d9800717 	ldw	r6,28(sp)
10007cd4:	00000506 	br	10007cec <_dtoa_r+0x974>
10007cd8:	18ffffc4 	addi	r3,r3,-1
10007cdc:	11824726 	beq	r2,r6,100085fc <_dtoa_r+0x1284>
10007ce0:	1d000003 	ldbu	r20,0(r3)
10007ce4:	102f883a 	mov	r23,r2
10007ce8:	10bfffc4 	addi	r2,r2,-1
10007cec:	a1003fcc 	andi	r4,r20,255
10007cf0:	2100201c 	xori	r4,r4,128
10007cf4:	213fe004 	addi	r4,r4,-128
10007cf8:	217ff726 	beq	r4,r5,10007cd8 <__alt_data_end+0xf8007cd8>
10007cfc:	a2000044 	addi	r8,r20,1
10007d00:	12000005 	stb	r8,0(r2)
10007d04:	003f4606 	br	10007a20 <__alt_data_end+0xf8007a20>
10007d08:	d9000b17 	ldw	r4,44(sp)
10007d0c:	2000c826 	beq	r4,zero,10008030 <_dtoa_r+0xcb8>
10007d10:	d9800317 	ldw	r6,12(sp)
10007d14:	00c00044 	movi	r3,1
10007d18:	1980f90e 	bge	r3,r6,10008100 <_dtoa_r+0xd88>
10007d1c:	d8800617 	ldw	r2,24(sp)
10007d20:	d8c00a17 	ldw	r3,40(sp)
10007d24:	157fffc4 	addi	r21,r2,-1
10007d28:	1d41f316 	blt	r3,r21,100084f8 <_dtoa_r+0x1180>
10007d2c:	1d6bc83a 	sub	r21,r3,r21
10007d30:	d9c00617 	ldw	r7,24(sp)
10007d34:	3802aa16 	blt	r7,zero,100087e0 <_dtoa_r+0x1468>
10007d38:	dd000817 	ldw	r20,32(sp)
10007d3c:	d8800617 	ldw	r2,24(sp)
10007d40:	d8c00817 	ldw	r3,32(sp)
10007d44:	01400044 	movi	r5,1
10007d48:	e009883a 	mov	r4,fp
10007d4c:	1887883a 	add	r3,r3,r2
10007d50:	d8c00815 	stw	r3,32(sp)
10007d54:	b0ad883a 	add	r22,r22,r2
10007d58:	000a6580 	call	1000a658 <__i2b>
10007d5c:	1023883a 	mov	r17,r2
10007d60:	a0000826 	beq	r20,zero,10007d84 <_dtoa_r+0xa0c>
10007d64:	0580070e 	bge	zero,r22,10007d84 <_dtoa_r+0xa0c>
10007d68:	a005883a 	mov	r2,r20
10007d6c:	b500b916 	blt	r22,r20,10008054 <_dtoa_r+0xcdc>
10007d70:	d9000817 	ldw	r4,32(sp)
10007d74:	a0a9c83a 	sub	r20,r20,r2
10007d78:	b0adc83a 	sub	r22,r22,r2
10007d7c:	2089c83a 	sub	r4,r4,r2
10007d80:	d9000815 	stw	r4,32(sp)
10007d84:	d9800a17 	ldw	r6,40(sp)
10007d88:	0181810e 	bge	zero,r6,10008390 <_dtoa_r+0x1018>
10007d8c:	d9c00b17 	ldw	r7,44(sp)
10007d90:	3800b326 	beq	r7,zero,10008060 <_dtoa_r+0xce8>
10007d94:	a800b226 	beq	r21,zero,10008060 <_dtoa_r+0xce8>
10007d98:	880b883a 	mov	r5,r17
10007d9c:	a80d883a 	mov	r6,r21
10007da0:	e009883a 	mov	r4,fp
10007da4:	000a9200 	call	1000a920 <__pow5mult>
10007da8:	d9800917 	ldw	r6,36(sp)
10007dac:	100b883a 	mov	r5,r2
10007db0:	e009883a 	mov	r4,fp
10007db4:	1023883a 	mov	r17,r2
10007db8:	000a6940 	call	1000a694 <__multiply>
10007dbc:	1021883a 	mov	r16,r2
10007dc0:	d8800a17 	ldw	r2,40(sp)
10007dc4:	d9400917 	ldw	r5,36(sp)
10007dc8:	e009883a 	mov	r4,fp
10007dcc:	1545c83a 	sub	r2,r2,r21
10007dd0:	d8800a15 	stw	r2,40(sp)
10007dd4:	000a2cc0 	call	1000a2cc <_Bfree>
10007dd8:	d8c00a17 	ldw	r3,40(sp)
10007ddc:	18009f1e 	bne	r3,zero,1000805c <_dtoa_r+0xce4>
10007de0:	05c00044 	movi	r23,1
10007de4:	e009883a 	mov	r4,fp
10007de8:	b80b883a 	mov	r5,r23
10007dec:	000a6580 	call	1000a658 <__i2b>
10007df0:	d9000d17 	ldw	r4,52(sp)
10007df4:	102b883a 	mov	r21,r2
10007df8:	2000ce26 	beq	r4,zero,10008134 <_dtoa_r+0xdbc>
10007dfc:	200d883a 	mov	r6,r4
10007e00:	100b883a 	mov	r5,r2
10007e04:	e009883a 	mov	r4,fp
10007e08:	000a9200 	call	1000a920 <__pow5mult>
10007e0c:	d9800317 	ldw	r6,12(sp)
10007e10:	102b883a 	mov	r21,r2
10007e14:	b981810e 	bge	r23,r6,1000841c <_dtoa_r+0x10a4>
10007e18:	0027883a 	mov	r19,zero
10007e1c:	a8800417 	ldw	r2,16(r21)
10007e20:	05c00804 	movi	r23,32
10007e24:	10800104 	addi	r2,r2,4
10007e28:	1085883a 	add	r2,r2,r2
10007e2c:	1085883a 	add	r2,r2,r2
10007e30:	a885883a 	add	r2,r21,r2
10007e34:	11000017 	ldw	r4,0(r2)
10007e38:	000a5400 	call	1000a540 <__hi0bits>
10007e3c:	b885c83a 	sub	r2,r23,r2
10007e40:	1585883a 	add	r2,r2,r22
10007e44:	108007cc 	andi	r2,r2,31
10007e48:	1000b326 	beq	r2,zero,10008118 <_dtoa_r+0xda0>
10007e4c:	00c00804 	movi	r3,32
10007e50:	1887c83a 	sub	r3,r3,r2
10007e54:	01000104 	movi	r4,4
10007e58:	20c2cd0e 	bge	r4,r3,10008990 <_dtoa_r+0x1618>
10007e5c:	00c00704 	movi	r3,28
10007e60:	1885c83a 	sub	r2,r3,r2
10007e64:	d8c00817 	ldw	r3,32(sp)
10007e68:	a0a9883a 	add	r20,r20,r2
10007e6c:	b0ad883a 	add	r22,r22,r2
10007e70:	1887883a 	add	r3,r3,r2
10007e74:	d8c00815 	stw	r3,32(sp)
10007e78:	d9800817 	ldw	r6,32(sp)
10007e7c:	0180040e 	bge	zero,r6,10007e90 <_dtoa_r+0xb18>
10007e80:	800b883a 	mov	r5,r16
10007e84:	e009883a 	mov	r4,fp
10007e88:	000aa600 	call	1000aa60 <__lshift>
10007e8c:	1021883a 	mov	r16,r2
10007e90:	0580050e 	bge	zero,r22,10007ea8 <_dtoa_r+0xb30>
10007e94:	a80b883a 	mov	r5,r21
10007e98:	b00d883a 	mov	r6,r22
10007e9c:	e009883a 	mov	r4,fp
10007ea0:	000aa600 	call	1000aa60 <__lshift>
10007ea4:	102b883a 	mov	r21,r2
10007ea8:	d9c00e17 	ldw	r7,56(sp)
10007eac:	3801211e 	bne	r7,zero,10008334 <_dtoa_r+0xfbc>
10007eb0:	d9800617 	ldw	r6,24(sp)
10007eb4:	0181380e 	bge	zero,r6,10008398 <_dtoa_r+0x1020>
10007eb8:	d8c00b17 	ldw	r3,44(sp)
10007ebc:	1800ab1e 	bne	r3,zero,1000816c <_dtoa_r+0xdf4>
10007ec0:	dc800717 	ldw	r18,28(sp)
10007ec4:	dcc00617 	ldw	r19,24(sp)
10007ec8:	9029883a 	mov	r20,r18
10007ecc:	00000206 	br	10007ed8 <_dtoa_r+0xb60>
10007ed0:	000a2f40 	call	1000a2f4 <__multadd>
10007ed4:	1021883a 	mov	r16,r2
10007ed8:	a80b883a 	mov	r5,r21
10007edc:	8009883a 	mov	r4,r16
10007ee0:	00071500 	call	10007150 <quorem>
10007ee4:	10800c04 	addi	r2,r2,48
10007ee8:	90800005 	stb	r2,0(r18)
10007eec:	94800044 	addi	r18,r18,1
10007ef0:	9507c83a 	sub	r3,r18,r20
10007ef4:	000f883a 	mov	r7,zero
10007ef8:	01800284 	movi	r6,10
10007efc:	800b883a 	mov	r5,r16
10007f00:	e009883a 	mov	r4,fp
10007f04:	1cfff216 	blt	r3,r19,10007ed0 <__alt_data_end+0xf8007ed0>
10007f08:	1011883a 	mov	r8,r2
10007f0c:	d8800617 	ldw	r2,24(sp)
10007f10:	0082370e 	bge	zero,r2,100087f0 <_dtoa_r+0x1478>
10007f14:	d9000717 	ldw	r4,28(sp)
10007f18:	0025883a 	mov	r18,zero
10007f1c:	20af883a 	add	r23,r4,r2
10007f20:	01800044 	movi	r6,1
10007f24:	800b883a 	mov	r5,r16
10007f28:	e009883a 	mov	r4,fp
10007f2c:	da001715 	stw	r8,92(sp)
10007f30:	000aa600 	call	1000aa60 <__lshift>
10007f34:	a80b883a 	mov	r5,r21
10007f38:	1009883a 	mov	r4,r2
10007f3c:	d8800915 	stw	r2,36(sp)
10007f40:	000aba80 	call	1000aba8 <__mcmp>
10007f44:	da001717 	ldw	r8,92(sp)
10007f48:	0081800e 	bge	zero,r2,1000854c <_dtoa_r+0x11d4>
10007f4c:	b93fffc3 	ldbu	r4,-1(r23)
10007f50:	b8bfffc4 	addi	r2,r23,-1
10007f54:	1007883a 	mov	r3,r2
10007f58:	01800e44 	movi	r6,57
10007f5c:	d9c00717 	ldw	r7,28(sp)
10007f60:	00000506 	br	10007f78 <_dtoa_r+0xc00>
10007f64:	18ffffc4 	addi	r3,r3,-1
10007f68:	11c12326 	beq	r2,r7,100083f8 <_dtoa_r+0x1080>
10007f6c:	19000003 	ldbu	r4,0(r3)
10007f70:	102f883a 	mov	r23,r2
10007f74:	10bfffc4 	addi	r2,r2,-1
10007f78:	21403fcc 	andi	r5,r4,255
10007f7c:	2940201c 	xori	r5,r5,128
10007f80:	297fe004 	addi	r5,r5,-128
10007f84:	29bff726 	beq	r5,r6,10007f64 <__alt_data_end+0xf8007f64>
10007f88:	21000044 	addi	r4,r4,1
10007f8c:	11000005 	stb	r4,0(r2)
10007f90:	a80b883a 	mov	r5,r21
10007f94:	e009883a 	mov	r4,fp
10007f98:	000a2cc0 	call	1000a2cc <_Bfree>
10007f9c:	883ea026 	beq	r17,zero,10007a20 <__alt_data_end+0xf8007a20>
10007fa0:	90000426 	beq	r18,zero,10007fb4 <_dtoa_r+0xc3c>
10007fa4:	94400326 	beq	r18,r17,10007fb4 <_dtoa_r+0xc3c>
10007fa8:	900b883a 	mov	r5,r18
10007fac:	e009883a 	mov	r4,fp
10007fb0:	000a2cc0 	call	1000a2cc <_Bfree>
10007fb4:	880b883a 	mov	r5,r17
10007fb8:	e009883a 	mov	r4,fp
10007fbc:	000a2cc0 	call	1000a2cc <_Bfree>
10007fc0:	003e9706 	br	10007a20 <__alt_data_end+0xf8007a20>
10007fc4:	01800044 	movi	r6,1
10007fc8:	d9800e15 	stw	r6,56(sp)
10007fcc:	003d9606 	br	10007628 <__alt_data_end+0xf8007628>
10007fd0:	d8800817 	ldw	r2,32(sp)
10007fd4:	d8c00517 	ldw	r3,20(sp)
10007fd8:	d8000d15 	stw	zero,52(sp)
10007fdc:	10c5c83a 	sub	r2,r2,r3
10007fe0:	00c9c83a 	sub	r4,zero,r3
10007fe4:	d8800815 	stw	r2,32(sp)
10007fe8:	d9000a15 	stw	r4,40(sp)
10007fec:	003d9706 	br	1000764c <__alt_data_end+0xf800764c>
10007ff0:	05adc83a 	sub	r22,zero,r22
10007ff4:	dd800815 	stw	r22,32(sp)
10007ff8:	002d883a 	mov	r22,zero
10007ffc:	003d8e06 	br	10007638 <__alt_data_end+0xf8007638>
10008000:	d9000517 	ldw	r4,20(sp)
10008004:	0010f680 	call	10010f68 <__floatsidf>
10008008:	100d883a 	mov	r6,r2
1000800c:	180f883a 	mov	r7,r3
10008010:	a009883a 	mov	r4,r20
10008014:	880b883a 	mov	r5,r17
10008018:	000fb280 	call	1000fb28 <__eqdf2>
1000801c:	103d7126 	beq	r2,zero,100075e4 <__alt_data_end+0xf80075e4>
10008020:	d9c00517 	ldw	r7,20(sp)
10008024:	39ffffc4 	addi	r7,r7,-1
10008028:	d9c00515 	stw	r7,20(sp)
1000802c:	003d6d06 	br	100075e4 <__alt_data_end+0xf80075e4>
10008030:	dd400a17 	ldw	r21,40(sp)
10008034:	dd000817 	ldw	r20,32(sp)
10008038:	0023883a 	mov	r17,zero
1000803c:	003f4806 	br	10007d60 <__alt_data_end+0xf8007d60>
10008040:	10e3c83a 	sub	r17,r2,r3
10008044:	9448983a 	sll	r4,r18,r17
10008048:	003d3206 	br	10007514 <__alt_data_end+0xf8007514>
1000804c:	d8000e15 	stw	zero,56(sp)
10008050:	003d7506 	br	10007628 <__alt_data_end+0xf8007628>
10008054:	b005883a 	mov	r2,r22
10008058:	003f4506 	br	10007d70 <__alt_data_end+0xf8007d70>
1000805c:	dc000915 	stw	r16,36(sp)
10008060:	d9800a17 	ldw	r6,40(sp)
10008064:	d9400917 	ldw	r5,36(sp)
10008068:	e009883a 	mov	r4,fp
1000806c:	000a9200 	call	1000a920 <__pow5mult>
10008070:	1021883a 	mov	r16,r2
10008074:	003f5a06 	br	10007de0 <__alt_data_end+0xf8007de0>
10008078:	01c00044 	movi	r7,1
1000807c:	d9c00b15 	stw	r7,44(sp)
10008080:	d8802217 	ldw	r2,136(sp)
10008084:	0081280e 	bge	zero,r2,10008528 <_dtoa_r+0x11b0>
10008088:	100d883a 	mov	r6,r2
1000808c:	1021883a 	mov	r16,r2
10008090:	d8800c15 	stw	r2,48(sp)
10008094:	d8800615 	stw	r2,24(sp)
10008098:	003d8806 	br	100076bc <__alt_data_end+0xf80076bc>
1000809c:	d8800617 	ldw	r2,24(sp)
100080a0:	00be9b16 	blt	zero,r2,10007b10 <__alt_data_end+0xf8007b10>
100080a4:	10010f1e 	bne	r2,zero,100084e4 <_dtoa_r+0x116c>
100080a8:	880b883a 	mov	r5,r17
100080ac:	000d883a 	mov	r6,zero
100080b0:	01d00534 	movhi	r7,16404
100080b4:	8009883a 	mov	r4,r16
100080b8:	000fd800 	call	1000fd80 <__muldf3>
100080bc:	900d883a 	mov	r6,r18
100080c0:	980f883a 	mov	r7,r19
100080c4:	1009883a 	mov	r4,r2
100080c8:	180b883a 	mov	r5,r3
100080cc:	000fbb00 	call	1000fbb0 <__gedf2>
100080d0:	002b883a 	mov	r21,zero
100080d4:	0023883a 	mov	r17,zero
100080d8:	1000bf16 	blt	r2,zero,100083d8 <_dtoa_r+0x1060>
100080dc:	d9802217 	ldw	r6,136(sp)
100080e0:	ddc00717 	ldw	r23,28(sp)
100080e4:	018c303a 	nor	r6,zero,r6
100080e8:	d9800515 	stw	r6,20(sp)
100080ec:	a80b883a 	mov	r5,r21
100080f0:	e009883a 	mov	r4,fp
100080f4:	000a2cc0 	call	1000a2cc <_Bfree>
100080f8:	883e4926 	beq	r17,zero,10007a20 <__alt_data_end+0xf8007a20>
100080fc:	003fad06 	br	10007fb4 <__alt_data_end+0xf8007fb4>
10008100:	d9c01117 	ldw	r7,68(sp)
10008104:	3801bc26 	beq	r7,zero,100087f8 <_dtoa_r+0x1480>
10008108:	10810cc4 	addi	r2,r2,1075
1000810c:	dd400a17 	ldw	r21,40(sp)
10008110:	dd000817 	ldw	r20,32(sp)
10008114:	003f0a06 	br	10007d40 <__alt_data_end+0xf8007d40>
10008118:	00800704 	movi	r2,28
1000811c:	d9000817 	ldw	r4,32(sp)
10008120:	a0a9883a 	add	r20,r20,r2
10008124:	b0ad883a 	add	r22,r22,r2
10008128:	2089883a 	add	r4,r4,r2
1000812c:	d9000815 	stw	r4,32(sp)
10008130:	003f5106 	br	10007e78 <__alt_data_end+0xf8007e78>
10008134:	d8c00317 	ldw	r3,12(sp)
10008138:	b8c1fc0e 	bge	r23,r3,1000892c <_dtoa_r+0x15b4>
1000813c:	0027883a 	mov	r19,zero
10008140:	b805883a 	mov	r2,r23
10008144:	003f3e06 	br	10007e40 <__alt_data_end+0xf8007e40>
10008148:	880b883a 	mov	r5,r17
1000814c:	e009883a 	mov	r4,fp
10008150:	000f883a 	mov	r7,zero
10008154:	01800284 	movi	r6,10
10008158:	000a2f40 	call	1000a2f4 <__multadd>
1000815c:	d9000c17 	ldw	r4,48(sp)
10008160:	1023883a 	mov	r17,r2
10008164:	0102040e 	bge	zero,r4,10008978 <_dtoa_r+0x1600>
10008168:	d9000615 	stw	r4,24(sp)
1000816c:	0500050e 	bge	zero,r20,10008184 <_dtoa_r+0xe0c>
10008170:	880b883a 	mov	r5,r17
10008174:	a00d883a 	mov	r6,r20
10008178:	e009883a 	mov	r4,fp
1000817c:	000aa600 	call	1000aa60 <__lshift>
10008180:	1023883a 	mov	r17,r2
10008184:	9801241e 	bne	r19,zero,10008618 <_dtoa_r+0x12a0>
10008188:	8829883a 	mov	r20,r17
1000818c:	d9000617 	ldw	r4,24(sp)
10008190:	dcc00717 	ldw	r19,28(sp)
10008194:	9480004c 	andi	r18,r18,1
10008198:	20bfffc4 	addi	r2,r4,-1
1000819c:	9885883a 	add	r2,r19,r2
100081a0:	d8800415 	stw	r2,16(sp)
100081a4:	dc800615 	stw	r18,24(sp)
100081a8:	a80b883a 	mov	r5,r21
100081ac:	8009883a 	mov	r4,r16
100081b0:	00071500 	call	10007150 <quorem>
100081b4:	880b883a 	mov	r5,r17
100081b8:	8009883a 	mov	r4,r16
100081bc:	102f883a 	mov	r23,r2
100081c0:	000aba80 	call	1000aba8 <__mcmp>
100081c4:	a80b883a 	mov	r5,r21
100081c8:	a00d883a 	mov	r6,r20
100081cc:	e009883a 	mov	r4,fp
100081d0:	102d883a 	mov	r22,r2
100081d4:	000ac080 	call	1000ac08 <__mdiff>
100081d8:	1007883a 	mov	r3,r2
100081dc:	10800317 	ldw	r2,12(r2)
100081e0:	bc800c04 	addi	r18,r23,48
100081e4:	180b883a 	mov	r5,r3
100081e8:	10004e1e 	bne	r2,zero,10008324 <_dtoa_r+0xfac>
100081ec:	8009883a 	mov	r4,r16
100081f0:	d8c01615 	stw	r3,88(sp)
100081f4:	000aba80 	call	1000aba8 <__mcmp>
100081f8:	d8c01617 	ldw	r3,88(sp)
100081fc:	e009883a 	mov	r4,fp
10008200:	d8801615 	stw	r2,88(sp)
10008204:	180b883a 	mov	r5,r3
10008208:	000a2cc0 	call	1000a2cc <_Bfree>
1000820c:	d8801617 	ldw	r2,88(sp)
10008210:	1000041e 	bne	r2,zero,10008224 <_dtoa_r+0xeac>
10008214:	d9800317 	ldw	r6,12(sp)
10008218:	3000021e 	bne	r6,zero,10008224 <_dtoa_r+0xeac>
1000821c:	d8c00617 	ldw	r3,24(sp)
10008220:	18003726 	beq	r3,zero,10008300 <_dtoa_r+0xf88>
10008224:	b0002016 	blt	r22,zero,100082a8 <_dtoa_r+0xf30>
10008228:	b000041e 	bne	r22,zero,1000823c <_dtoa_r+0xec4>
1000822c:	d9000317 	ldw	r4,12(sp)
10008230:	2000021e 	bne	r4,zero,1000823c <_dtoa_r+0xec4>
10008234:	d8c00617 	ldw	r3,24(sp)
10008238:	18001b26 	beq	r3,zero,100082a8 <_dtoa_r+0xf30>
1000823c:	00810716 	blt	zero,r2,1000865c <_dtoa_r+0x12e4>
10008240:	d8c00417 	ldw	r3,16(sp)
10008244:	9d800044 	addi	r22,r19,1
10008248:	9c800005 	stb	r18,0(r19)
1000824c:	b02f883a 	mov	r23,r22
10008250:	98c10626 	beq	r19,r3,1000866c <_dtoa_r+0x12f4>
10008254:	800b883a 	mov	r5,r16
10008258:	000f883a 	mov	r7,zero
1000825c:	01800284 	movi	r6,10
10008260:	e009883a 	mov	r4,fp
10008264:	000a2f40 	call	1000a2f4 <__multadd>
10008268:	1021883a 	mov	r16,r2
1000826c:	000f883a 	mov	r7,zero
10008270:	01800284 	movi	r6,10
10008274:	880b883a 	mov	r5,r17
10008278:	e009883a 	mov	r4,fp
1000827c:	8d002526 	beq	r17,r20,10008314 <_dtoa_r+0xf9c>
10008280:	000a2f40 	call	1000a2f4 <__multadd>
10008284:	a00b883a 	mov	r5,r20
10008288:	000f883a 	mov	r7,zero
1000828c:	01800284 	movi	r6,10
10008290:	e009883a 	mov	r4,fp
10008294:	1023883a 	mov	r17,r2
10008298:	000a2f40 	call	1000a2f4 <__multadd>
1000829c:	1029883a 	mov	r20,r2
100082a0:	b027883a 	mov	r19,r22
100082a4:	003fc006 	br	100081a8 <__alt_data_end+0xf80081a8>
100082a8:	9011883a 	mov	r8,r18
100082ac:	00800e0e 	bge	zero,r2,100082e8 <_dtoa_r+0xf70>
100082b0:	800b883a 	mov	r5,r16
100082b4:	01800044 	movi	r6,1
100082b8:	e009883a 	mov	r4,fp
100082bc:	da001715 	stw	r8,92(sp)
100082c0:	000aa600 	call	1000aa60 <__lshift>
100082c4:	a80b883a 	mov	r5,r21
100082c8:	1009883a 	mov	r4,r2
100082cc:	1021883a 	mov	r16,r2
100082d0:	000aba80 	call	1000aba8 <__mcmp>
100082d4:	da001717 	ldw	r8,92(sp)
100082d8:	0081960e 	bge	zero,r2,10008934 <_dtoa_r+0x15bc>
100082dc:	00800e44 	movi	r2,57
100082e0:	40817026 	beq	r8,r2,100088a4 <_dtoa_r+0x152c>
100082e4:	ba000c44 	addi	r8,r23,49
100082e8:	8825883a 	mov	r18,r17
100082ec:	9dc00044 	addi	r23,r19,1
100082f0:	9a000005 	stb	r8,0(r19)
100082f4:	a023883a 	mov	r17,r20
100082f8:	dc000915 	stw	r16,36(sp)
100082fc:	003f2406 	br	10007f90 <__alt_data_end+0xf8007f90>
10008300:	00800e44 	movi	r2,57
10008304:	9011883a 	mov	r8,r18
10008308:	90816626 	beq	r18,r2,100088a4 <_dtoa_r+0x152c>
1000830c:	05bff516 	blt	zero,r22,100082e4 <__alt_data_end+0xf80082e4>
10008310:	003ff506 	br	100082e8 <__alt_data_end+0xf80082e8>
10008314:	000a2f40 	call	1000a2f4 <__multadd>
10008318:	1023883a 	mov	r17,r2
1000831c:	1029883a 	mov	r20,r2
10008320:	003fdf06 	br	100082a0 <__alt_data_end+0xf80082a0>
10008324:	e009883a 	mov	r4,fp
10008328:	000a2cc0 	call	1000a2cc <_Bfree>
1000832c:	00800044 	movi	r2,1
10008330:	003fbc06 	br	10008224 <__alt_data_end+0xf8008224>
10008334:	a80b883a 	mov	r5,r21
10008338:	8009883a 	mov	r4,r16
1000833c:	000aba80 	call	1000aba8 <__mcmp>
10008340:	103edb0e 	bge	r2,zero,10007eb0 <__alt_data_end+0xf8007eb0>
10008344:	800b883a 	mov	r5,r16
10008348:	000f883a 	mov	r7,zero
1000834c:	01800284 	movi	r6,10
10008350:	e009883a 	mov	r4,fp
10008354:	000a2f40 	call	1000a2f4 <__multadd>
10008358:	1021883a 	mov	r16,r2
1000835c:	d8800517 	ldw	r2,20(sp)
10008360:	d8c00b17 	ldw	r3,44(sp)
10008364:	10bfffc4 	addi	r2,r2,-1
10008368:	d8800515 	stw	r2,20(sp)
1000836c:	183f761e 	bne	r3,zero,10008148 <__alt_data_end+0xf8008148>
10008370:	d9000c17 	ldw	r4,48(sp)
10008374:	0101730e 	bge	zero,r4,10008944 <_dtoa_r+0x15cc>
10008378:	d9000615 	stw	r4,24(sp)
1000837c:	003ed006 	br	10007ec0 <__alt_data_end+0xf8007ec0>
10008380:	00800084 	movi	r2,2
10008384:	3081861e 	bne	r6,r2,100089a0 <_dtoa_r+0x1628>
10008388:	d8000b15 	stw	zero,44(sp)
1000838c:	003f3c06 	br	10008080 <__alt_data_end+0xf8008080>
10008390:	dc000917 	ldw	r16,36(sp)
10008394:	003e9206 	br	10007de0 <__alt_data_end+0xf8007de0>
10008398:	d9c00317 	ldw	r7,12(sp)
1000839c:	00800084 	movi	r2,2
100083a0:	11fec50e 	bge	r2,r7,10007eb8 <__alt_data_end+0xf8007eb8>
100083a4:	d9000617 	ldw	r4,24(sp)
100083a8:	20013c1e 	bne	r4,zero,1000889c <_dtoa_r+0x1524>
100083ac:	a80b883a 	mov	r5,r21
100083b0:	000f883a 	mov	r7,zero
100083b4:	01800144 	movi	r6,5
100083b8:	e009883a 	mov	r4,fp
100083bc:	000a2f40 	call	1000a2f4 <__multadd>
100083c0:	100b883a 	mov	r5,r2
100083c4:	8009883a 	mov	r4,r16
100083c8:	102b883a 	mov	r21,r2
100083cc:	000aba80 	call	1000aba8 <__mcmp>
100083d0:	dc000915 	stw	r16,36(sp)
100083d4:	00bf410e 	bge	zero,r2,100080dc <__alt_data_end+0xf80080dc>
100083d8:	d9c00717 	ldw	r7,28(sp)
100083dc:	00800c44 	movi	r2,49
100083e0:	38800005 	stb	r2,0(r7)
100083e4:	d8800517 	ldw	r2,20(sp)
100083e8:	3dc00044 	addi	r23,r7,1
100083ec:	10800044 	addi	r2,r2,1
100083f0:	d8800515 	stw	r2,20(sp)
100083f4:	003f3d06 	br	100080ec <__alt_data_end+0xf80080ec>
100083f8:	d9800517 	ldw	r6,20(sp)
100083fc:	d9c00717 	ldw	r7,28(sp)
10008400:	00800c44 	movi	r2,49
10008404:	31800044 	addi	r6,r6,1
10008408:	d9800515 	stw	r6,20(sp)
1000840c:	38800005 	stb	r2,0(r7)
10008410:	003edf06 	br	10007f90 <__alt_data_end+0xf8007f90>
10008414:	d8000b15 	stw	zero,44(sp)
10008418:	003c9f06 	br	10007698 <__alt_data_end+0xf8007698>
1000841c:	903e7e1e 	bne	r18,zero,10007e18 <__alt_data_end+0xf8007e18>
10008420:	00800434 	movhi	r2,16
10008424:	10bfffc4 	addi	r2,r2,-1
10008428:	9884703a 	and	r2,r19,r2
1000842c:	1000ea1e 	bne	r2,zero,100087d8 <_dtoa_r+0x1460>
10008430:	9cdffc2c 	andhi	r19,r19,32752
10008434:	9800e826 	beq	r19,zero,100087d8 <_dtoa_r+0x1460>
10008438:	d9c00817 	ldw	r7,32(sp)
1000843c:	b5800044 	addi	r22,r22,1
10008440:	04c00044 	movi	r19,1
10008444:	39c00044 	addi	r7,r7,1
10008448:	d9c00815 	stw	r7,32(sp)
1000844c:	d8800d17 	ldw	r2,52(sp)
10008450:	103e721e 	bne	r2,zero,10007e1c <__alt_data_end+0xf8007e1c>
10008454:	00800044 	movi	r2,1
10008458:	003e7906 	br	10007e40 <__alt_data_end+0xf8007e40>
1000845c:	8009883a 	mov	r4,r16
10008460:	0010f680 	call	10010f68 <__floatsidf>
10008464:	d9800f17 	ldw	r6,60(sp)
10008468:	d9c01017 	ldw	r7,64(sp)
1000846c:	1009883a 	mov	r4,r2
10008470:	180b883a 	mov	r5,r3
10008474:	000fd800 	call	1000fd80 <__muldf3>
10008478:	000d883a 	mov	r6,zero
1000847c:	01d00734 	movhi	r7,16412
10008480:	1009883a 	mov	r4,r2
10008484:	180b883a 	mov	r5,r3
10008488:	000e8ac0 	call	1000e8ac <__adddf3>
1000848c:	047f3034 	movhi	r17,64704
10008490:	1021883a 	mov	r16,r2
10008494:	1c63883a 	add	r17,r3,r17
10008498:	d9000f17 	ldw	r4,60(sp)
1000849c:	d9401017 	ldw	r5,64(sp)
100084a0:	000d883a 	mov	r6,zero
100084a4:	01d00534 	movhi	r7,16404
100084a8:	00105ec0 	call	100105ec <__subdf3>
100084ac:	800d883a 	mov	r6,r16
100084b0:	880f883a 	mov	r7,r17
100084b4:	1009883a 	mov	r4,r2
100084b8:	180b883a 	mov	r5,r3
100084bc:	102b883a 	mov	r21,r2
100084c0:	1829883a 	mov	r20,r3
100084c4:	000fbb00 	call	1000fbb0 <__gedf2>
100084c8:	00806c16 	blt	zero,r2,1000867c <_dtoa_r+0x1304>
100084cc:	89e0003c 	xorhi	r7,r17,32768
100084d0:	800d883a 	mov	r6,r16
100084d4:	a809883a 	mov	r4,r21
100084d8:	a00b883a 	mov	r5,r20
100084dc:	000fc8c0 	call	1000fc8c <__ledf2>
100084e0:	103d7e0e 	bge	r2,zero,10007adc <__alt_data_end+0xf8007adc>
100084e4:	002b883a 	mov	r21,zero
100084e8:	0023883a 	mov	r17,zero
100084ec:	003efb06 	br	100080dc <__alt_data_end+0xf80080dc>
100084f0:	d8800717 	ldw	r2,28(sp)
100084f4:	003bd006 	br	10007438 <__alt_data_end+0xf8007438>
100084f8:	d9000a17 	ldw	r4,40(sp)
100084fc:	d9800d17 	ldw	r6,52(sp)
10008500:	dd400a15 	stw	r21,40(sp)
10008504:	a905c83a 	sub	r2,r21,r4
10008508:	308d883a 	add	r6,r6,r2
1000850c:	d9800d15 	stw	r6,52(sp)
10008510:	002b883a 	mov	r21,zero
10008514:	003e0606 	br	10007d30 <__alt_data_end+0xf8007d30>
10008518:	9023883a 	mov	r17,r18
1000851c:	9829883a 	mov	r20,r19
10008520:	04000084 	movi	r16,2
10008524:	003c9206 	br	10007770 <__alt_data_end+0xf8007770>
10008528:	04000044 	movi	r16,1
1000852c:	dc000c15 	stw	r16,48(sp)
10008530:	dc000615 	stw	r16,24(sp)
10008534:	dc002215 	stw	r16,136(sp)
10008538:	e0001115 	stw	zero,68(fp)
1000853c:	000b883a 	mov	r5,zero
10008540:	003c6906 	br	100076e8 <__alt_data_end+0xf80076e8>
10008544:	3021883a 	mov	r16,r6
10008548:	003ffb06 	br	10008538 <__alt_data_end+0xf8008538>
1000854c:	1000021e 	bne	r2,zero,10008558 <_dtoa_r+0x11e0>
10008550:	4200004c 	andi	r8,r8,1
10008554:	403e7d1e 	bne	r8,zero,10007f4c <__alt_data_end+0xf8007f4c>
10008558:	01000c04 	movi	r4,48
1000855c:	00000106 	br	10008564 <_dtoa_r+0x11ec>
10008560:	102f883a 	mov	r23,r2
10008564:	b8bfffc4 	addi	r2,r23,-1
10008568:	10c00007 	ldb	r3,0(r2)
1000856c:	193ffc26 	beq	r3,r4,10008560 <__alt_data_end+0xf8008560>
10008570:	003e8706 	br	10007f90 <__alt_data_end+0xf8007f90>
10008574:	d8800517 	ldw	r2,20(sp)
10008578:	00a3c83a 	sub	r17,zero,r2
1000857c:	8800a426 	beq	r17,zero,10008810 <_dtoa_r+0x1498>
10008580:	888003cc 	andi	r2,r17,15
10008584:	100490fa 	slli	r2,r2,3
10008588:	00c40074 	movhi	r3,4097
1000858c:	18d07904 	addi	r3,r3,16868
10008590:	1885883a 	add	r2,r3,r2
10008594:	11800017 	ldw	r6,0(r2)
10008598:	11c00117 	ldw	r7,4(r2)
1000859c:	9009883a 	mov	r4,r18
100085a0:	980b883a 	mov	r5,r19
100085a4:	8823d13a 	srai	r17,r17,4
100085a8:	000fd800 	call	1000fd80 <__muldf3>
100085ac:	d8800f15 	stw	r2,60(sp)
100085b0:	d8c01015 	stw	r3,64(sp)
100085b4:	8800e826 	beq	r17,zero,10008958 <_dtoa_r+0x15e0>
100085b8:	05040074 	movhi	r20,4097
100085bc:	a5106f04 	addi	r20,r20,16828
100085c0:	04000084 	movi	r16,2
100085c4:	8980004c 	andi	r6,r17,1
100085c8:	1009883a 	mov	r4,r2
100085cc:	8823d07a 	srai	r17,r17,1
100085d0:	180b883a 	mov	r5,r3
100085d4:	30000426 	beq	r6,zero,100085e8 <_dtoa_r+0x1270>
100085d8:	a1800017 	ldw	r6,0(r20)
100085dc:	a1c00117 	ldw	r7,4(r20)
100085e0:	84000044 	addi	r16,r16,1
100085e4:	000fd800 	call	1000fd80 <__muldf3>
100085e8:	a5000204 	addi	r20,r20,8
100085ec:	883ff51e 	bne	r17,zero,100085c4 <__alt_data_end+0xf80085c4>
100085f0:	d8800f15 	stw	r2,60(sp)
100085f4:	d8c01015 	stw	r3,64(sp)
100085f8:	003c7606 	br	100077d4 <__alt_data_end+0xf80077d4>
100085fc:	00c00c04 	movi	r3,48
10008600:	10c00005 	stb	r3,0(r2)
10008604:	d8c00517 	ldw	r3,20(sp)
10008608:	bd3fffc3 	ldbu	r20,-1(r23)
1000860c:	18c00044 	addi	r3,r3,1
10008610:	d8c00515 	stw	r3,20(sp)
10008614:	003db906 	br	10007cfc <__alt_data_end+0xf8007cfc>
10008618:	89400117 	ldw	r5,4(r17)
1000861c:	e009883a 	mov	r4,fp
10008620:	000a2240 	call	1000a224 <_Balloc>
10008624:	89800417 	ldw	r6,16(r17)
10008628:	89400304 	addi	r5,r17,12
1000862c:	11000304 	addi	r4,r2,12
10008630:	31800084 	addi	r6,r6,2
10008634:	318d883a 	add	r6,r6,r6
10008638:	318d883a 	add	r6,r6,r6
1000863c:	1027883a 	mov	r19,r2
10008640:	0009e580 	call	10009e58 <memcpy>
10008644:	01800044 	movi	r6,1
10008648:	980b883a 	mov	r5,r19
1000864c:	e009883a 	mov	r4,fp
10008650:	000aa600 	call	1000aa60 <__lshift>
10008654:	1029883a 	mov	r20,r2
10008658:	003ecc06 	br	1000818c <__alt_data_end+0xf800818c>
1000865c:	00800e44 	movi	r2,57
10008660:	90809026 	beq	r18,r2,100088a4 <_dtoa_r+0x152c>
10008664:	92000044 	addi	r8,r18,1
10008668:	003f1f06 	br	100082e8 <__alt_data_end+0xf80082e8>
1000866c:	9011883a 	mov	r8,r18
10008670:	8825883a 	mov	r18,r17
10008674:	a023883a 	mov	r17,r20
10008678:	003e2906 	br	10007f20 <__alt_data_end+0xf8007f20>
1000867c:	002b883a 	mov	r21,zero
10008680:	0023883a 	mov	r17,zero
10008684:	003f5406 	br	100083d8 <__alt_data_end+0xf80083d8>
10008688:	61bfffc4 	addi	r6,r12,-1
1000868c:	300490fa 	slli	r2,r6,3
10008690:	00c40074 	movhi	r3,4097
10008694:	18d07904 	addi	r3,r3,16868
10008698:	1885883a 	add	r2,r3,r2
1000869c:	11000017 	ldw	r4,0(r2)
100086a0:	11400117 	ldw	r5,4(r2)
100086a4:	d8800717 	ldw	r2,28(sp)
100086a8:	880f883a 	mov	r7,r17
100086ac:	d9801215 	stw	r6,72(sp)
100086b0:	800d883a 	mov	r6,r16
100086b4:	db001615 	stw	r12,88(sp)
100086b8:	15c00044 	addi	r23,r2,1
100086bc:	000fd800 	call	1000fd80 <__muldf3>
100086c0:	d9401017 	ldw	r5,64(sp)
100086c4:	d9000f17 	ldw	r4,60(sp)
100086c8:	d8c01515 	stw	r3,84(sp)
100086cc:	d8801415 	stw	r2,80(sp)
100086d0:	0010ee80 	call	10010ee8 <__fixdfsi>
100086d4:	1009883a 	mov	r4,r2
100086d8:	1021883a 	mov	r16,r2
100086dc:	0010f680 	call	10010f68 <__floatsidf>
100086e0:	d9000f17 	ldw	r4,60(sp)
100086e4:	d9401017 	ldw	r5,64(sp)
100086e8:	100d883a 	mov	r6,r2
100086ec:	180f883a 	mov	r7,r3
100086f0:	00105ec0 	call	100105ec <__subdf3>
100086f4:	1829883a 	mov	r20,r3
100086f8:	d8c00717 	ldw	r3,28(sp)
100086fc:	84000c04 	addi	r16,r16,48
10008700:	1023883a 	mov	r17,r2
10008704:	1c000005 	stb	r16,0(r3)
10008708:	db001617 	ldw	r12,88(sp)
1000870c:	00800044 	movi	r2,1
10008710:	60802226 	beq	r12,r2,1000879c <_dtoa_r+0x1424>
10008714:	d9c00717 	ldw	r7,28(sp)
10008718:	8805883a 	mov	r2,r17
1000871c:	b82b883a 	mov	r21,r23
10008720:	3b19883a 	add	r12,r7,r12
10008724:	6023883a 	mov	r17,r12
10008728:	a007883a 	mov	r3,r20
1000872c:	dc800f15 	stw	r18,60(sp)
10008730:	000d883a 	mov	r6,zero
10008734:	01d00934 	movhi	r7,16420
10008738:	1009883a 	mov	r4,r2
1000873c:	180b883a 	mov	r5,r3
10008740:	000fd800 	call	1000fd80 <__muldf3>
10008744:	180b883a 	mov	r5,r3
10008748:	1009883a 	mov	r4,r2
1000874c:	1829883a 	mov	r20,r3
10008750:	1025883a 	mov	r18,r2
10008754:	0010ee80 	call	10010ee8 <__fixdfsi>
10008758:	1009883a 	mov	r4,r2
1000875c:	1021883a 	mov	r16,r2
10008760:	0010f680 	call	10010f68 <__floatsidf>
10008764:	100d883a 	mov	r6,r2
10008768:	180f883a 	mov	r7,r3
1000876c:	9009883a 	mov	r4,r18
10008770:	a00b883a 	mov	r5,r20
10008774:	84000c04 	addi	r16,r16,48
10008778:	00105ec0 	call	100105ec <__subdf3>
1000877c:	ad400044 	addi	r21,r21,1
10008780:	ac3fffc5 	stb	r16,-1(r21)
10008784:	ac7fea1e 	bne	r21,r17,10008730 <__alt_data_end+0xf8008730>
10008788:	1023883a 	mov	r17,r2
1000878c:	d8801217 	ldw	r2,72(sp)
10008790:	dc800f17 	ldw	r18,60(sp)
10008794:	1829883a 	mov	r20,r3
10008798:	b8af883a 	add	r23,r23,r2
1000879c:	d9001417 	ldw	r4,80(sp)
100087a0:	d9401517 	ldw	r5,84(sp)
100087a4:	000d883a 	mov	r6,zero
100087a8:	01cff834 	movhi	r7,16352
100087ac:	000e8ac0 	call	1000e8ac <__adddf3>
100087b0:	880d883a 	mov	r6,r17
100087b4:	a00f883a 	mov	r7,r20
100087b8:	1009883a 	mov	r4,r2
100087bc:	180b883a 	mov	r5,r3
100087c0:	000fc8c0 	call	1000fc8c <__ledf2>
100087c4:	10003e0e 	bge	r2,zero,100088c0 <_dtoa_r+0x1548>
100087c8:	d9001317 	ldw	r4,76(sp)
100087cc:	bd3fffc3 	ldbu	r20,-1(r23)
100087d0:	d9000515 	stw	r4,20(sp)
100087d4:	003d3b06 	br	10007cc4 <__alt_data_end+0xf8007cc4>
100087d8:	0027883a 	mov	r19,zero
100087dc:	003f1b06 	br	1000844c <__alt_data_end+0xf800844c>
100087e0:	d8800817 	ldw	r2,32(sp)
100087e4:	11e9c83a 	sub	r20,r2,r7
100087e8:	0005883a 	mov	r2,zero
100087ec:	003d5406 	br	10007d40 <__alt_data_end+0xf8007d40>
100087f0:	00800044 	movi	r2,1
100087f4:	003dc706 	br	10007f14 <__alt_data_end+0xf8007f14>
100087f8:	d8c00217 	ldw	r3,8(sp)
100087fc:	00800d84 	movi	r2,54
10008800:	dd400a17 	ldw	r21,40(sp)
10008804:	10c5c83a 	sub	r2,r2,r3
10008808:	dd000817 	ldw	r20,32(sp)
1000880c:	003d4c06 	br	10007d40 <__alt_data_end+0xf8007d40>
10008810:	dc800f15 	stw	r18,60(sp)
10008814:	dcc01015 	stw	r19,64(sp)
10008818:	04000084 	movi	r16,2
1000881c:	003bed06 	br	100077d4 <__alt_data_end+0xf80077d4>
10008820:	d9000617 	ldw	r4,24(sp)
10008824:	203f0d26 	beq	r4,zero,1000845c <__alt_data_end+0xf800845c>
10008828:	d9800c17 	ldw	r6,48(sp)
1000882c:	01bcab0e 	bge	zero,r6,10007adc <__alt_data_end+0xf8007adc>
10008830:	d9401017 	ldw	r5,64(sp)
10008834:	d9000f17 	ldw	r4,60(sp)
10008838:	000d883a 	mov	r6,zero
1000883c:	01d00934 	movhi	r7,16420
10008840:	000fd800 	call	1000fd80 <__muldf3>
10008844:	81000044 	addi	r4,r16,1
10008848:	d8800f15 	stw	r2,60(sp)
1000884c:	d8c01015 	stw	r3,64(sp)
10008850:	0010f680 	call	10010f68 <__floatsidf>
10008854:	d9800f17 	ldw	r6,60(sp)
10008858:	d9c01017 	ldw	r7,64(sp)
1000885c:	1009883a 	mov	r4,r2
10008860:	180b883a 	mov	r5,r3
10008864:	000fd800 	call	1000fd80 <__muldf3>
10008868:	01d00734 	movhi	r7,16412
1000886c:	000d883a 	mov	r6,zero
10008870:	1009883a 	mov	r4,r2
10008874:	180b883a 	mov	r5,r3
10008878:	000e8ac0 	call	1000e8ac <__adddf3>
1000887c:	d9c00517 	ldw	r7,20(sp)
10008880:	047f3034 	movhi	r17,64704
10008884:	1021883a 	mov	r16,r2
10008888:	39ffffc4 	addi	r7,r7,-1
1000888c:	d9c01315 	stw	r7,76(sp)
10008890:	1c63883a 	add	r17,r3,r17
10008894:	db000c17 	ldw	r12,48(sp)
10008898:	003bea06 	br	10007844 <__alt_data_end+0xf8007844>
1000889c:	dc000915 	stw	r16,36(sp)
100088a0:	003e0e06 	br	100080dc <__alt_data_end+0xf80080dc>
100088a4:	01000e44 	movi	r4,57
100088a8:	8825883a 	mov	r18,r17
100088ac:	9dc00044 	addi	r23,r19,1
100088b0:	99000005 	stb	r4,0(r19)
100088b4:	a023883a 	mov	r17,r20
100088b8:	dc000915 	stw	r16,36(sp)
100088bc:	003da406 	br	10007f50 <__alt_data_end+0xf8007f50>
100088c0:	d9801417 	ldw	r6,80(sp)
100088c4:	d9c01517 	ldw	r7,84(sp)
100088c8:	0009883a 	mov	r4,zero
100088cc:	014ff834 	movhi	r5,16352
100088d0:	00105ec0 	call	100105ec <__subdf3>
100088d4:	880d883a 	mov	r6,r17
100088d8:	a00f883a 	mov	r7,r20
100088dc:	1009883a 	mov	r4,r2
100088e0:	180b883a 	mov	r5,r3
100088e4:	000fbb00 	call	1000fbb0 <__gedf2>
100088e8:	00bc7c0e 	bge	zero,r2,10007adc <__alt_data_end+0xf8007adc>
100088ec:	01000c04 	movi	r4,48
100088f0:	00000106 	br	100088f8 <_dtoa_r+0x1580>
100088f4:	102f883a 	mov	r23,r2
100088f8:	b8bfffc4 	addi	r2,r23,-1
100088fc:	10c00007 	ldb	r3,0(r2)
10008900:	193ffc26 	beq	r3,r4,100088f4 <__alt_data_end+0xf80088f4>
10008904:	d9801317 	ldw	r6,76(sp)
10008908:	d9800515 	stw	r6,20(sp)
1000890c:	003c4406 	br	10007a20 <__alt_data_end+0xf8007a20>
10008910:	d9801317 	ldw	r6,76(sp)
10008914:	d9800515 	stw	r6,20(sp)
10008918:	003cea06 	br	10007cc4 <__alt_data_end+0xf8007cc4>
1000891c:	dd800f17 	ldw	r22,60(sp)
10008920:	dcc01017 	ldw	r19,64(sp)
10008924:	dc801217 	ldw	r18,72(sp)
10008928:	003c6c06 	br	10007adc <__alt_data_end+0xf8007adc>
1000892c:	903e031e 	bne	r18,zero,1000813c <__alt_data_end+0xf800813c>
10008930:	003ebb06 	br	10008420 <__alt_data_end+0xf8008420>
10008934:	103e6c1e 	bne	r2,zero,100082e8 <__alt_data_end+0xf80082e8>
10008938:	4080004c 	andi	r2,r8,1
1000893c:	103e6a26 	beq	r2,zero,100082e8 <__alt_data_end+0xf80082e8>
10008940:	003e6606 	br	100082dc <__alt_data_end+0xf80082dc>
10008944:	d8c00317 	ldw	r3,12(sp)
10008948:	00800084 	movi	r2,2
1000894c:	10c02916 	blt	r2,r3,100089f4 <_dtoa_r+0x167c>
10008950:	d9000c17 	ldw	r4,48(sp)
10008954:	003e8806 	br	10008378 <__alt_data_end+0xf8008378>
10008958:	04000084 	movi	r16,2
1000895c:	003b9d06 	br	100077d4 <__alt_data_end+0xf80077d4>
10008960:	d9001317 	ldw	r4,76(sp)
10008964:	d9000515 	stw	r4,20(sp)
10008968:	003cd606 	br	10007cc4 <__alt_data_end+0xf8007cc4>
1000896c:	d8801317 	ldw	r2,76(sp)
10008970:	d8800515 	stw	r2,20(sp)
10008974:	003c2a06 	br	10007a20 <__alt_data_end+0xf8007a20>
10008978:	d9800317 	ldw	r6,12(sp)
1000897c:	00800084 	movi	r2,2
10008980:	11801516 	blt	r2,r6,100089d8 <_dtoa_r+0x1660>
10008984:	d9c00c17 	ldw	r7,48(sp)
10008988:	d9c00615 	stw	r7,24(sp)
1000898c:	003df706 	br	1000816c <__alt_data_end+0xf800816c>
10008990:	193d3926 	beq	r3,r4,10007e78 <__alt_data_end+0xf8007e78>
10008994:	00c00f04 	movi	r3,60
10008998:	1885c83a 	sub	r2,r3,r2
1000899c:	003ddf06 	br	1000811c <__alt_data_end+0xf800811c>
100089a0:	e009883a 	mov	r4,fp
100089a4:	e0001115 	stw	zero,68(fp)
100089a8:	000b883a 	mov	r5,zero
100089ac:	000a2240 	call	1000a224 <_Balloc>
100089b0:	d8800715 	stw	r2,28(sp)
100089b4:	d8c00717 	ldw	r3,28(sp)
100089b8:	00bfffc4 	movi	r2,-1
100089bc:	01000044 	movi	r4,1
100089c0:	d8800c15 	stw	r2,48(sp)
100089c4:	e0c01015 	stw	r3,64(fp)
100089c8:	d9000b15 	stw	r4,44(sp)
100089cc:	d8800615 	stw	r2,24(sp)
100089d0:	d8002215 	stw	zero,136(sp)
100089d4:	003c4106 	br	10007adc <__alt_data_end+0xf8007adc>
100089d8:	d8c00c17 	ldw	r3,48(sp)
100089dc:	d8c00615 	stw	r3,24(sp)
100089e0:	003e7006 	br	100083a4 <__alt_data_end+0xf80083a4>
100089e4:	04400044 	movi	r17,1
100089e8:	003b2006 	br	1000766c <__alt_data_end+0xf800766c>
100089ec:	000b883a 	mov	r5,zero
100089f0:	003b3d06 	br	100076e8 <__alt_data_end+0xf80076e8>
100089f4:	d8800c17 	ldw	r2,48(sp)
100089f8:	d8800615 	stw	r2,24(sp)
100089fc:	003e6906 	br	100083a4 <__alt_data_end+0xf80083a4>

10008a00 <__sflush_r>:
10008a00:	2880030b 	ldhu	r2,12(r5)
10008a04:	defffb04 	addi	sp,sp,-20
10008a08:	dcc00315 	stw	r19,12(sp)
10008a0c:	dc400115 	stw	r17,4(sp)
10008a10:	dfc00415 	stw	ra,16(sp)
10008a14:	dc800215 	stw	r18,8(sp)
10008a18:	dc000015 	stw	r16,0(sp)
10008a1c:	10c0020c 	andi	r3,r2,8
10008a20:	2823883a 	mov	r17,r5
10008a24:	2027883a 	mov	r19,r4
10008a28:	1800311e 	bne	r3,zero,10008af0 <__sflush_r+0xf0>
10008a2c:	28c00117 	ldw	r3,4(r5)
10008a30:	10820014 	ori	r2,r2,2048
10008a34:	2880030d 	sth	r2,12(r5)
10008a38:	00c04b0e 	bge	zero,r3,10008b68 <__sflush_r+0x168>
10008a3c:	8a000a17 	ldw	r8,40(r17)
10008a40:	40002326 	beq	r8,zero,10008ad0 <__sflush_r+0xd0>
10008a44:	9c000017 	ldw	r16,0(r19)
10008a48:	10c4000c 	andi	r3,r2,4096
10008a4c:	98000015 	stw	zero,0(r19)
10008a50:	18004826 	beq	r3,zero,10008b74 <__sflush_r+0x174>
10008a54:	89801417 	ldw	r6,80(r17)
10008a58:	10c0010c 	andi	r3,r2,4
10008a5c:	18000626 	beq	r3,zero,10008a78 <__sflush_r+0x78>
10008a60:	88c00117 	ldw	r3,4(r17)
10008a64:	88800c17 	ldw	r2,48(r17)
10008a68:	30cdc83a 	sub	r6,r6,r3
10008a6c:	10000226 	beq	r2,zero,10008a78 <__sflush_r+0x78>
10008a70:	88800f17 	ldw	r2,60(r17)
10008a74:	308dc83a 	sub	r6,r6,r2
10008a78:	89400717 	ldw	r5,28(r17)
10008a7c:	000f883a 	mov	r7,zero
10008a80:	9809883a 	mov	r4,r19
10008a84:	403ee83a 	callr	r8
10008a88:	00ffffc4 	movi	r3,-1
10008a8c:	10c04426 	beq	r2,r3,10008ba0 <__sflush_r+0x1a0>
10008a90:	88c0030b 	ldhu	r3,12(r17)
10008a94:	89000417 	ldw	r4,16(r17)
10008a98:	88000115 	stw	zero,4(r17)
10008a9c:	197dffcc 	andi	r5,r3,63487
10008aa0:	8940030d 	sth	r5,12(r17)
10008aa4:	89000015 	stw	r4,0(r17)
10008aa8:	18c4000c 	andi	r3,r3,4096
10008aac:	18002c1e 	bne	r3,zero,10008b60 <__sflush_r+0x160>
10008ab0:	89400c17 	ldw	r5,48(r17)
10008ab4:	9c000015 	stw	r16,0(r19)
10008ab8:	28000526 	beq	r5,zero,10008ad0 <__sflush_r+0xd0>
10008abc:	88801004 	addi	r2,r17,64
10008ac0:	28800226 	beq	r5,r2,10008acc <__sflush_r+0xcc>
10008ac4:	9809883a 	mov	r4,r19
10008ac8:	000917c0 	call	1000917c <_free_r>
10008acc:	88000c15 	stw	zero,48(r17)
10008ad0:	0005883a 	mov	r2,zero
10008ad4:	dfc00417 	ldw	ra,16(sp)
10008ad8:	dcc00317 	ldw	r19,12(sp)
10008adc:	dc800217 	ldw	r18,8(sp)
10008ae0:	dc400117 	ldw	r17,4(sp)
10008ae4:	dc000017 	ldw	r16,0(sp)
10008ae8:	dec00504 	addi	sp,sp,20
10008aec:	f800283a 	ret
10008af0:	2c800417 	ldw	r18,16(r5)
10008af4:	903ff626 	beq	r18,zero,10008ad0 <__alt_data_end+0xf8008ad0>
10008af8:	2c000017 	ldw	r16,0(r5)
10008afc:	108000cc 	andi	r2,r2,3
10008b00:	2c800015 	stw	r18,0(r5)
10008b04:	84a1c83a 	sub	r16,r16,r18
10008b08:	1000131e 	bne	r2,zero,10008b58 <__sflush_r+0x158>
10008b0c:	28800517 	ldw	r2,20(r5)
10008b10:	88800215 	stw	r2,8(r17)
10008b14:	04000316 	blt	zero,r16,10008b24 <__sflush_r+0x124>
10008b18:	003fed06 	br	10008ad0 <__alt_data_end+0xf8008ad0>
10008b1c:	90a5883a 	add	r18,r18,r2
10008b20:	043feb0e 	bge	zero,r16,10008ad0 <__alt_data_end+0xf8008ad0>
10008b24:	88800917 	ldw	r2,36(r17)
10008b28:	89400717 	ldw	r5,28(r17)
10008b2c:	800f883a 	mov	r7,r16
10008b30:	900d883a 	mov	r6,r18
10008b34:	9809883a 	mov	r4,r19
10008b38:	103ee83a 	callr	r2
10008b3c:	80a1c83a 	sub	r16,r16,r2
10008b40:	00bff616 	blt	zero,r2,10008b1c <__alt_data_end+0xf8008b1c>
10008b44:	88c0030b 	ldhu	r3,12(r17)
10008b48:	00bfffc4 	movi	r2,-1
10008b4c:	18c01014 	ori	r3,r3,64
10008b50:	88c0030d 	sth	r3,12(r17)
10008b54:	003fdf06 	br	10008ad4 <__alt_data_end+0xf8008ad4>
10008b58:	0005883a 	mov	r2,zero
10008b5c:	003fec06 	br	10008b10 <__alt_data_end+0xf8008b10>
10008b60:	88801415 	stw	r2,80(r17)
10008b64:	003fd206 	br	10008ab0 <__alt_data_end+0xf8008ab0>
10008b68:	28c00f17 	ldw	r3,60(r5)
10008b6c:	00ffb316 	blt	zero,r3,10008a3c <__alt_data_end+0xf8008a3c>
10008b70:	003fd706 	br	10008ad0 <__alt_data_end+0xf8008ad0>
10008b74:	89400717 	ldw	r5,28(r17)
10008b78:	000d883a 	mov	r6,zero
10008b7c:	01c00044 	movi	r7,1
10008b80:	9809883a 	mov	r4,r19
10008b84:	403ee83a 	callr	r8
10008b88:	100d883a 	mov	r6,r2
10008b8c:	00bfffc4 	movi	r2,-1
10008b90:	30801426 	beq	r6,r2,10008be4 <__sflush_r+0x1e4>
10008b94:	8880030b 	ldhu	r2,12(r17)
10008b98:	8a000a17 	ldw	r8,40(r17)
10008b9c:	003fae06 	br	10008a58 <__alt_data_end+0xf8008a58>
10008ba0:	98c00017 	ldw	r3,0(r19)
10008ba4:	183fba26 	beq	r3,zero,10008a90 <__alt_data_end+0xf8008a90>
10008ba8:	01000744 	movi	r4,29
10008bac:	19000626 	beq	r3,r4,10008bc8 <__sflush_r+0x1c8>
10008bb0:	01000584 	movi	r4,22
10008bb4:	19000426 	beq	r3,r4,10008bc8 <__sflush_r+0x1c8>
10008bb8:	88c0030b 	ldhu	r3,12(r17)
10008bbc:	18c01014 	ori	r3,r3,64
10008bc0:	88c0030d 	sth	r3,12(r17)
10008bc4:	003fc306 	br	10008ad4 <__alt_data_end+0xf8008ad4>
10008bc8:	8880030b 	ldhu	r2,12(r17)
10008bcc:	88c00417 	ldw	r3,16(r17)
10008bd0:	88000115 	stw	zero,4(r17)
10008bd4:	10bdffcc 	andi	r2,r2,63487
10008bd8:	8880030d 	sth	r2,12(r17)
10008bdc:	88c00015 	stw	r3,0(r17)
10008be0:	003fb306 	br	10008ab0 <__alt_data_end+0xf8008ab0>
10008be4:	98800017 	ldw	r2,0(r19)
10008be8:	103fea26 	beq	r2,zero,10008b94 <__alt_data_end+0xf8008b94>
10008bec:	00c00744 	movi	r3,29
10008bf0:	10c00226 	beq	r2,r3,10008bfc <__sflush_r+0x1fc>
10008bf4:	00c00584 	movi	r3,22
10008bf8:	10c0031e 	bne	r2,r3,10008c08 <__sflush_r+0x208>
10008bfc:	9c000015 	stw	r16,0(r19)
10008c00:	0005883a 	mov	r2,zero
10008c04:	003fb306 	br	10008ad4 <__alt_data_end+0xf8008ad4>
10008c08:	88c0030b 	ldhu	r3,12(r17)
10008c0c:	3005883a 	mov	r2,r6
10008c10:	18c01014 	ori	r3,r3,64
10008c14:	88c0030d 	sth	r3,12(r17)
10008c18:	003fae06 	br	10008ad4 <__alt_data_end+0xf8008ad4>

10008c1c <_fflush_r>:
10008c1c:	defffd04 	addi	sp,sp,-12
10008c20:	dc000115 	stw	r16,4(sp)
10008c24:	dfc00215 	stw	ra,8(sp)
10008c28:	2021883a 	mov	r16,r4
10008c2c:	20000226 	beq	r4,zero,10008c38 <_fflush_r+0x1c>
10008c30:	20800e17 	ldw	r2,56(r4)
10008c34:	10000c26 	beq	r2,zero,10008c68 <_fflush_r+0x4c>
10008c38:	2880030f 	ldh	r2,12(r5)
10008c3c:	1000051e 	bne	r2,zero,10008c54 <_fflush_r+0x38>
10008c40:	0005883a 	mov	r2,zero
10008c44:	dfc00217 	ldw	ra,8(sp)
10008c48:	dc000117 	ldw	r16,4(sp)
10008c4c:	dec00304 	addi	sp,sp,12
10008c50:	f800283a 	ret
10008c54:	8009883a 	mov	r4,r16
10008c58:	dfc00217 	ldw	ra,8(sp)
10008c5c:	dc000117 	ldw	r16,4(sp)
10008c60:	dec00304 	addi	sp,sp,12
10008c64:	0008a001 	jmpi	10008a00 <__sflush_r>
10008c68:	d9400015 	stw	r5,0(sp)
10008c6c:	00090080 	call	10009008 <__sinit>
10008c70:	d9400017 	ldw	r5,0(sp)
10008c74:	003ff006 	br	10008c38 <__alt_data_end+0xf8008c38>

10008c78 <fflush>:
10008c78:	20000526 	beq	r4,zero,10008c90 <fflush+0x18>
10008c7c:	00840074 	movhi	r2,4097
10008c80:	1097b004 	addi	r2,r2,24256
10008c84:	200b883a 	mov	r5,r4
10008c88:	11000017 	ldw	r4,0(r2)
10008c8c:	0008c1c1 	jmpi	10008c1c <_fflush_r>
10008c90:	00840074 	movhi	r2,4097
10008c94:	1097af04 	addi	r2,r2,24252
10008c98:	11000017 	ldw	r4,0(r2)
10008c9c:	01440074 	movhi	r5,4097
10008ca0:	29630704 	addi	r5,r5,-29668
10008ca4:	0009a181 	jmpi	10009a18 <_fwalk_reent>

10008ca8 <__fp_unlock>:
10008ca8:	0005883a 	mov	r2,zero
10008cac:	f800283a 	ret

10008cb0 <_cleanup_r>:
10008cb0:	01440074 	movhi	r5,4097
10008cb4:	2974d504 	addi	r5,r5,-11436
10008cb8:	0009a181 	jmpi	10009a18 <_fwalk_reent>

10008cbc <__sinit.part.1>:
10008cbc:	defff704 	addi	sp,sp,-36
10008cc0:	00c40074 	movhi	r3,4097
10008cc4:	dfc00815 	stw	ra,32(sp)
10008cc8:	ddc00715 	stw	r23,28(sp)
10008ccc:	dd800615 	stw	r22,24(sp)
10008cd0:	dd400515 	stw	r21,20(sp)
10008cd4:	dd000415 	stw	r20,16(sp)
10008cd8:	dcc00315 	stw	r19,12(sp)
10008cdc:	dc800215 	stw	r18,8(sp)
10008ce0:	dc400115 	stw	r17,4(sp)
10008ce4:	dc000015 	stw	r16,0(sp)
10008ce8:	18e32c04 	addi	r3,r3,-29520
10008cec:	24000117 	ldw	r16,4(r4)
10008cf0:	20c00f15 	stw	r3,60(r4)
10008cf4:	2080bb04 	addi	r2,r4,748
10008cf8:	00c000c4 	movi	r3,3
10008cfc:	20c0b915 	stw	r3,740(r4)
10008d00:	2080ba15 	stw	r2,744(r4)
10008d04:	2000b815 	stw	zero,736(r4)
10008d08:	05c00204 	movi	r23,8
10008d0c:	00800104 	movi	r2,4
10008d10:	2025883a 	mov	r18,r4
10008d14:	b80d883a 	mov	r6,r23
10008d18:	81001704 	addi	r4,r16,92
10008d1c:	000b883a 	mov	r5,zero
10008d20:	80000015 	stw	zero,0(r16)
10008d24:	80000115 	stw	zero,4(r16)
10008d28:	80000215 	stw	zero,8(r16)
10008d2c:	8080030d 	sth	r2,12(r16)
10008d30:	80001915 	stw	zero,100(r16)
10008d34:	8000038d 	sth	zero,14(r16)
10008d38:	80000415 	stw	zero,16(r16)
10008d3c:	80000515 	stw	zero,20(r16)
10008d40:	80000615 	stw	zero,24(r16)
10008d44:	000a0fc0 	call	1000a0fc <memset>
10008d48:	05840074 	movhi	r22,4097
10008d4c:	94400217 	ldw	r17,8(r18)
10008d50:	05440074 	movhi	r21,4097
10008d54:	05040074 	movhi	r20,4097
10008d58:	04c40074 	movhi	r19,4097
10008d5c:	b5ae2d04 	addi	r22,r22,-18252
10008d60:	ad6e4404 	addi	r21,r21,-18160
10008d64:	a52e6304 	addi	r20,r20,-18036
10008d68:	9cee7a04 	addi	r19,r19,-17944
10008d6c:	85800815 	stw	r22,32(r16)
10008d70:	85400915 	stw	r21,36(r16)
10008d74:	85000a15 	stw	r20,40(r16)
10008d78:	84c00b15 	stw	r19,44(r16)
10008d7c:	84000715 	stw	r16,28(r16)
10008d80:	00800284 	movi	r2,10
10008d84:	8880030d 	sth	r2,12(r17)
10008d88:	00800044 	movi	r2,1
10008d8c:	b80d883a 	mov	r6,r23
10008d90:	89001704 	addi	r4,r17,92
10008d94:	000b883a 	mov	r5,zero
10008d98:	88000015 	stw	zero,0(r17)
10008d9c:	88000115 	stw	zero,4(r17)
10008da0:	88000215 	stw	zero,8(r17)
10008da4:	88001915 	stw	zero,100(r17)
10008da8:	8880038d 	sth	r2,14(r17)
10008dac:	88000415 	stw	zero,16(r17)
10008db0:	88000515 	stw	zero,20(r17)
10008db4:	88000615 	stw	zero,24(r17)
10008db8:	000a0fc0 	call	1000a0fc <memset>
10008dbc:	94000317 	ldw	r16,12(r18)
10008dc0:	00800484 	movi	r2,18
10008dc4:	8c400715 	stw	r17,28(r17)
10008dc8:	8d800815 	stw	r22,32(r17)
10008dcc:	8d400915 	stw	r21,36(r17)
10008dd0:	8d000a15 	stw	r20,40(r17)
10008dd4:	8cc00b15 	stw	r19,44(r17)
10008dd8:	8080030d 	sth	r2,12(r16)
10008ddc:	00800084 	movi	r2,2
10008de0:	80000015 	stw	zero,0(r16)
10008de4:	80000115 	stw	zero,4(r16)
10008de8:	80000215 	stw	zero,8(r16)
10008dec:	80001915 	stw	zero,100(r16)
10008df0:	8080038d 	sth	r2,14(r16)
10008df4:	80000415 	stw	zero,16(r16)
10008df8:	80000515 	stw	zero,20(r16)
10008dfc:	80000615 	stw	zero,24(r16)
10008e00:	b80d883a 	mov	r6,r23
10008e04:	000b883a 	mov	r5,zero
10008e08:	81001704 	addi	r4,r16,92
10008e0c:	000a0fc0 	call	1000a0fc <memset>
10008e10:	00800044 	movi	r2,1
10008e14:	84000715 	stw	r16,28(r16)
10008e18:	85800815 	stw	r22,32(r16)
10008e1c:	85400915 	stw	r21,36(r16)
10008e20:	85000a15 	stw	r20,40(r16)
10008e24:	84c00b15 	stw	r19,44(r16)
10008e28:	90800e15 	stw	r2,56(r18)
10008e2c:	dfc00817 	ldw	ra,32(sp)
10008e30:	ddc00717 	ldw	r23,28(sp)
10008e34:	dd800617 	ldw	r22,24(sp)
10008e38:	dd400517 	ldw	r21,20(sp)
10008e3c:	dd000417 	ldw	r20,16(sp)
10008e40:	dcc00317 	ldw	r19,12(sp)
10008e44:	dc800217 	ldw	r18,8(sp)
10008e48:	dc400117 	ldw	r17,4(sp)
10008e4c:	dc000017 	ldw	r16,0(sp)
10008e50:	dec00904 	addi	sp,sp,36
10008e54:	f800283a 	ret

10008e58 <__fp_lock>:
10008e58:	0005883a 	mov	r2,zero
10008e5c:	f800283a 	ret

10008e60 <__sfmoreglue>:
10008e60:	defffc04 	addi	sp,sp,-16
10008e64:	dc800215 	stw	r18,8(sp)
10008e68:	2825883a 	mov	r18,r5
10008e6c:	dc000015 	stw	r16,0(sp)
10008e70:	01401a04 	movi	r5,104
10008e74:	2021883a 	mov	r16,r4
10008e78:	913fffc4 	addi	r4,r18,-1
10008e7c:	dfc00315 	stw	ra,12(sp)
10008e80:	dc400115 	stw	r17,4(sp)
10008e84:	000e8840 	call	1000e884 <__mulsi3>
10008e88:	8009883a 	mov	r4,r16
10008e8c:	11401d04 	addi	r5,r2,116
10008e90:	1023883a 	mov	r17,r2
10008e94:	00042100 	call	10004210 <_malloc_r>
10008e98:	1021883a 	mov	r16,r2
10008e9c:	10000726 	beq	r2,zero,10008ebc <__sfmoreglue+0x5c>
10008ea0:	11000304 	addi	r4,r2,12
10008ea4:	10000015 	stw	zero,0(r2)
10008ea8:	14800115 	stw	r18,4(r2)
10008eac:	11000215 	stw	r4,8(r2)
10008eb0:	89801a04 	addi	r6,r17,104
10008eb4:	000b883a 	mov	r5,zero
10008eb8:	000a0fc0 	call	1000a0fc <memset>
10008ebc:	8005883a 	mov	r2,r16
10008ec0:	dfc00317 	ldw	ra,12(sp)
10008ec4:	dc800217 	ldw	r18,8(sp)
10008ec8:	dc400117 	ldw	r17,4(sp)
10008ecc:	dc000017 	ldw	r16,0(sp)
10008ed0:	dec00404 	addi	sp,sp,16
10008ed4:	f800283a 	ret

10008ed8 <__sfp>:
10008ed8:	defffb04 	addi	sp,sp,-20
10008edc:	dc000015 	stw	r16,0(sp)
10008ee0:	04040074 	movhi	r16,4097
10008ee4:	8417af04 	addi	r16,r16,24252
10008ee8:	dcc00315 	stw	r19,12(sp)
10008eec:	2027883a 	mov	r19,r4
10008ef0:	81000017 	ldw	r4,0(r16)
10008ef4:	dfc00415 	stw	ra,16(sp)
10008ef8:	dc800215 	stw	r18,8(sp)
10008efc:	20800e17 	ldw	r2,56(r4)
10008f00:	dc400115 	stw	r17,4(sp)
10008f04:	1000021e 	bne	r2,zero,10008f10 <__sfp+0x38>
10008f08:	0008cbc0 	call	10008cbc <__sinit.part.1>
10008f0c:	81000017 	ldw	r4,0(r16)
10008f10:	2480b804 	addi	r18,r4,736
10008f14:	047fffc4 	movi	r17,-1
10008f18:	91000117 	ldw	r4,4(r18)
10008f1c:	94000217 	ldw	r16,8(r18)
10008f20:	213fffc4 	addi	r4,r4,-1
10008f24:	20000a16 	blt	r4,zero,10008f50 <__sfp+0x78>
10008f28:	8080030f 	ldh	r2,12(r16)
10008f2c:	10000c26 	beq	r2,zero,10008f60 <__sfp+0x88>
10008f30:	80c01d04 	addi	r3,r16,116
10008f34:	00000206 	br	10008f40 <__sfp+0x68>
10008f38:	18bfe60f 	ldh	r2,-104(r3)
10008f3c:	10000826 	beq	r2,zero,10008f60 <__sfp+0x88>
10008f40:	213fffc4 	addi	r4,r4,-1
10008f44:	1c3ffd04 	addi	r16,r3,-12
10008f48:	18c01a04 	addi	r3,r3,104
10008f4c:	247ffa1e 	bne	r4,r17,10008f38 <__alt_data_end+0xf8008f38>
10008f50:	90800017 	ldw	r2,0(r18)
10008f54:	10001d26 	beq	r2,zero,10008fcc <__sfp+0xf4>
10008f58:	1025883a 	mov	r18,r2
10008f5c:	003fee06 	br	10008f18 <__alt_data_end+0xf8008f18>
10008f60:	00bfffc4 	movi	r2,-1
10008f64:	8080038d 	sth	r2,14(r16)
10008f68:	00800044 	movi	r2,1
10008f6c:	8080030d 	sth	r2,12(r16)
10008f70:	80001915 	stw	zero,100(r16)
10008f74:	80000015 	stw	zero,0(r16)
10008f78:	80000215 	stw	zero,8(r16)
10008f7c:	80000115 	stw	zero,4(r16)
10008f80:	80000415 	stw	zero,16(r16)
10008f84:	80000515 	stw	zero,20(r16)
10008f88:	80000615 	stw	zero,24(r16)
10008f8c:	01800204 	movi	r6,8
10008f90:	000b883a 	mov	r5,zero
10008f94:	81001704 	addi	r4,r16,92
10008f98:	000a0fc0 	call	1000a0fc <memset>
10008f9c:	8005883a 	mov	r2,r16
10008fa0:	80000c15 	stw	zero,48(r16)
10008fa4:	80000d15 	stw	zero,52(r16)
10008fa8:	80001115 	stw	zero,68(r16)
10008fac:	80001215 	stw	zero,72(r16)
10008fb0:	dfc00417 	ldw	ra,16(sp)
10008fb4:	dcc00317 	ldw	r19,12(sp)
10008fb8:	dc800217 	ldw	r18,8(sp)
10008fbc:	dc400117 	ldw	r17,4(sp)
10008fc0:	dc000017 	ldw	r16,0(sp)
10008fc4:	dec00504 	addi	sp,sp,20
10008fc8:	f800283a 	ret
10008fcc:	01400104 	movi	r5,4
10008fd0:	9809883a 	mov	r4,r19
10008fd4:	0008e600 	call	10008e60 <__sfmoreglue>
10008fd8:	90800015 	stw	r2,0(r18)
10008fdc:	103fde1e 	bne	r2,zero,10008f58 <__alt_data_end+0xf8008f58>
10008fe0:	00800304 	movi	r2,12
10008fe4:	98800015 	stw	r2,0(r19)
10008fe8:	0005883a 	mov	r2,zero
10008fec:	003ff006 	br	10008fb0 <__alt_data_end+0xf8008fb0>

10008ff0 <_cleanup>:
10008ff0:	00840074 	movhi	r2,4097
10008ff4:	1097af04 	addi	r2,r2,24252
10008ff8:	11000017 	ldw	r4,0(r2)
10008ffc:	01440074 	movhi	r5,4097
10009000:	2974d504 	addi	r5,r5,-11436
10009004:	0009a181 	jmpi	10009a18 <_fwalk_reent>

10009008 <__sinit>:
10009008:	20800e17 	ldw	r2,56(r4)
1000900c:	10000126 	beq	r2,zero,10009014 <__sinit+0xc>
10009010:	f800283a 	ret
10009014:	0008cbc1 	jmpi	10008cbc <__sinit.part.1>

10009018 <__sfp_lock_acquire>:
10009018:	f800283a 	ret

1000901c <__sfp_lock_release>:
1000901c:	f800283a 	ret

10009020 <__sinit_lock_acquire>:
10009020:	f800283a 	ret

10009024 <__sinit_lock_release>:
10009024:	f800283a 	ret

10009028 <__fp_lock_all>:
10009028:	00840074 	movhi	r2,4097
1000902c:	1097b004 	addi	r2,r2,24256
10009030:	11000017 	ldw	r4,0(r2)
10009034:	01440074 	movhi	r5,4097
10009038:	29639604 	addi	r5,r5,-29096
1000903c:	00099541 	jmpi	10009954 <_fwalk>

10009040 <__fp_unlock_all>:
10009040:	00840074 	movhi	r2,4097
10009044:	1097b004 	addi	r2,r2,24256
10009048:	11000017 	ldw	r4,0(r2)
1000904c:	01440074 	movhi	r5,4097
10009050:	29632a04 	addi	r5,r5,-29528
10009054:	00099541 	jmpi	10009954 <_fwalk>

10009058 <_malloc_trim_r>:
10009058:	defffb04 	addi	sp,sp,-20
1000905c:	dcc00315 	stw	r19,12(sp)
10009060:	04c40074 	movhi	r19,4097
10009064:	dc800215 	stw	r18,8(sp)
10009068:	dc400115 	stw	r17,4(sp)
1000906c:	dc000015 	stw	r16,0(sp)
10009070:	dfc00415 	stw	ra,16(sp)
10009074:	2821883a 	mov	r16,r5
10009078:	9cd10004 	addi	r19,r19,17408
1000907c:	2025883a 	mov	r18,r4
10009080:	00116ec0 	call	100116ec <__malloc_lock>
10009084:	98800217 	ldw	r2,8(r19)
10009088:	14400117 	ldw	r17,4(r2)
1000908c:	00bfff04 	movi	r2,-4
10009090:	88a2703a 	and	r17,r17,r2
10009094:	8c21c83a 	sub	r16,r17,r16
10009098:	8403fbc4 	addi	r16,r16,4079
1000909c:	8020d33a 	srli	r16,r16,12
100090a0:	0083ffc4 	movi	r2,4095
100090a4:	843fffc4 	addi	r16,r16,-1
100090a8:	8020933a 	slli	r16,r16,12
100090ac:	1400060e 	bge	r2,r16,100090c8 <_malloc_trim_r+0x70>
100090b0:	000b883a 	mov	r5,zero
100090b4:	9009883a 	mov	r4,r18
100090b8:	0004b5c0 	call	10004b5c <_sbrk_r>
100090bc:	98c00217 	ldw	r3,8(r19)
100090c0:	1c47883a 	add	r3,r3,r17
100090c4:	10c00a26 	beq	r2,r3,100090f0 <_malloc_trim_r+0x98>
100090c8:	9009883a 	mov	r4,r18
100090cc:	00117100 	call	10011710 <__malloc_unlock>
100090d0:	0005883a 	mov	r2,zero
100090d4:	dfc00417 	ldw	ra,16(sp)
100090d8:	dcc00317 	ldw	r19,12(sp)
100090dc:	dc800217 	ldw	r18,8(sp)
100090e0:	dc400117 	ldw	r17,4(sp)
100090e4:	dc000017 	ldw	r16,0(sp)
100090e8:	dec00504 	addi	sp,sp,20
100090ec:	f800283a 	ret
100090f0:	040bc83a 	sub	r5,zero,r16
100090f4:	9009883a 	mov	r4,r18
100090f8:	0004b5c0 	call	10004b5c <_sbrk_r>
100090fc:	00ffffc4 	movi	r3,-1
10009100:	10c00d26 	beq	r2,r3,10009138 <_malloc_trim_r+0xe0>
10009104:	00c40074 	movhi	r3,4097
10009108:	18dea004 	addi	r3,r3,31360
1000910c:	18800017 	ldw	r2,0(r3)
10009110:	99000217 	ldw	r4,8(r19)
10009114:	8c23c83a 	sub	r17,r17,r16
10009118:	8c400054 	ori	r17,r17,1
1000911c:	1421c83a 	sub	r16,r2,r16
10009120:	24400115 	stw	r17,4(r4)
10009124:	9009883a 	mov	r4,r18
10009128:	1c000015 	stw	r16,0(r3)
1000912c:	00117100 	call	10011710 <__malloc_unlock>
10009130:	00800044 	movi	r2,1
10009134:	003fe706 	br	100090d4 <__alt_data_end+0xf80090d4>
10009138:	000b883a 	mov	r5,zero
1000913c:	9009883a 	mov	r4,r18
10009140:	0004b5c0 	call	10004b5c <_sbrk_r>
10009144:	99000217 	ldw	r4,8(r19)
10009148:	014003c4 	movi	r5,15
1000914c:	1107c83a 	sub	r3,r2,r4
10009150:	28ffdd0e 	bge	r5,r3,100090c8 <__alt_data_end+0xf80090c8>
10009154:	01440074 	movhi	r5,4097
10009158:	2957ad04 	addi	r5,r5,24244
1000915c:	29400017 	ldw	r5,0(r5)
10009160:	18c00054 	ori	r3,r3,1
10009164:	20c00115 	stw	r3,4(r4)
10009168:	00c40074 	movhi	r3,4097
1000916c:	1145c83a 	sub	r2,r2,r5
10009170:	18dea004 	addi	r3,r3,31360
10009174:	18800015 	stw	r2,0(r3)
10009178:	003fd306 	br	100090c8 <__alt_data_end+0xf80090c8>

1000917c <_free_r>:
1000917c:	28004126 	beq	r5,zero,10009284 <_free_r+0x108>
10009180:	defffd04 	addi	sp,sp,-12
10009184:	dc400115 	stw	r17,4(sp)
10009188:	dc000015 	stw	r16,0(sp)
1000918c:	2023883a 	mov	r17,r4
10009190:	2821883a 	mov	r16,r5
10009194:	dfc00215 	stw	ra,8(sp)
10009198:	00116ec0 	call	100116ec <__malloc_lock>
1000919c:	81ffff17 	ldw	r7,-4(r16)
100091a0:	00bfff84 	movi	r2,-2
100091a4:	01040074 	movhi	r4,4097
100091a8:	81bffe04 	addi	r6,r16,-8
100091ac:	3884703a 	and	r2,r7,r2
100091b0:	21110004 	addi	r4,r4,17408
100091b4:	308b883a 	add	r5,r6,r2
100091b8:	2a400117 	ldw	r9,4(r5)
100091bc:	22000217 	ldw	r8,8(r4)
100091c0:	00ffff04 	movi	r3,-4
100091c4:	48c6703a 	and	r3,r9,r3
100091c8:	2a005726 	beq	r5,r8,10009328 <_free_r+0x1ac>
100091cc:	28c00115 	stw	r3,4(r5)
100091d0:	39c0004c 	andi	r7,r7,1
100091d4:	3800091e 	bne	r7,zero,100091fc <_free_r+0x80>
100091d8:	823ffe17 	ldw	r8,-8(r16)
100091dc:	22400204 	addi	r9,r4,8
100091e0:	320dc83a 	sub	r6,r6,r8
100091e4:	31c00217 	ldw	r7,8(r6)
100091e8:	1205883a 	add	r2,r2,r8
100091ec:	3a406526 	beq	r7,r9,10009384 <_free_r+0x208>
100091f0:	32000317 	ldw	r8,12(r6)
100091f4:	3a000315 	stw	r8,12(r7)
100091f8:	41c00215 	stw	r7,8(r8)
100091fc:	28cf883a 	add	r7,r5,r3
10009200:	39c00117 	ldw	r7,4(r7)
10009204:	39c0004c 	andi	r7,r7,1
10009208:	38003a26 	beq	r7,zero,100092f4 <_free_r+0x178>
1000920c:	10c00054 	ori	r3,r2,1
10009210:	30c00115 	stw	r3,4(r6)
10009214:	3087883a 	add	r3,r6,r2
10009218:	18800015 	stw	r2,0(r3)
1000921c:	00c07fc4 	movi	r3,511
10009220:	18801936 	bltu	r3,r2,10009288 <_free_r+0x10c>
10009224:	1004d0fa 	srli	r2,r2,3
10009228:	01c00044 	movi	r7,1
1000922c:	21400117 	ldw	r5,4(r4)
10009230:	10c00044 	addi	r3,r2,1
10009234:	18c7883a 	add	r3,r3,r3
10009238:	1005d0ba 	srai	r2,r2,2
1000923c:	18c7883a 	add	r3,r3,r3
10009240:	18c7883a 	add	r3,r3,r3
10009244:	1907883a 	add	r3,r3,r4
10009248:	3884983a 	sll	r2,r7,r2
1000924c:	19c00017 	ldw	r7,0(r3)
10009250:	1a3ffe04 	addi	r8,r3,-8
10009254:	1144b03a 	or	r2,r2,r5
10009258:	32000315 	stw	r8,12(r6)
1000925c:	31c00215 	stw	r7,8(r6)
10009260:	20800115 	stw	r2,4(r4)
10009264:	19800015 	stw	r6,0(r3)
10009268:	39800315 	stw	r6,12(r7)
1000926c:	8809883a 	mov	r4,r17
10009270:	dfc00217 	ldw	ra,8(sp)
10009274:	dc400117 	ldw	r17,4(sp)
10009278:	dc000017 	ldw	r16,0(sp)
1000927c:	dec00304 	addi	sp,sp,12
10009280:	00117101 	jmpi	10011710 <__malloc_unlock>
10009284:	f800283a 	ret
10009288:	100ad27a 	srli	r5,r2,9
1000928c:	00c00104 	movi	r3,4
10009290:	19404a36 	bltu	r3,r5,100093bc <_free_r+0x240>
10009294:	100ad1ba 	srli	r5,r2,6
10009298:	28c00e44 	addi	r3,r5,57
1000929c:	18c7883a 	add	r3,r3,r3
100092a0:	29400e04 	addi	r5,r5,56
100092a4:	18c7883a 	add	r3,r3,r3
100092a8:	18c7883a 	add	r3,r3,r3
100092ac:	1909883a 	add	r4,r3,r4
100092b0:	20c00017 	ldw	r3,0(r4)
100092b4:	01c40074 	movhi	r7,4097
100092b8:	213ffe04 	addi	r4,r4,-8
100092bc:	39d10004 	addi	r7,r7,17408
100092c0:	20c04426 	beq	r4,r3,100093d4 <_free_r+0x258>
100092c4:	01ffff04 	movi	r7,-4
100092c8:	19400117 	ldw	r5,4(r3)
100092cc:	29ca703a 	and	r5,r5,r7
100092d0:	1140022e 	bgeu	r2,r5,100092dc <_free_r+0x160>
100092d4:	18c00217 	ldw	r3,8(r3)
100092d8:	20fffb1e 	bne	r4,r3,100092c8 <__alt_data_end+0xf80092c8>
100092dc:	19000317 	ldw	r4,12(r3)
100092e0:	31000315 	stw	r4,12(r6)
100092e4:	30c00215 	stw	r3,8(r6)
100092e8:	21800215 	stw	r6,8(r4)
100092ec:	19800315 	stw	r6,12(r3)
100092f0:	003fde06 	br	1000926c <__alt_data_end+0xf800926c>
100092f4:	29c00217 	ldw	r7,8(r5)
100092f8:	10c5883a 	add	r2,r2,r3
100092fc:	00c40074 	movhi	r3,4097
10009300:	18d10204 	addi	r3,r3,17416
10009304:	38c03b26 	beq	r7,r3,100093f4 <_free_r+0x278>
10009308:	2a000317 	ldw	r8,12(r5)
1000930c:	11400054 	ori	r5,r2,1
10009310:	3087883a 	add	r3,r6,r2
10009314:	3a000315 	stw	r8,12(r7)
10009318:	41c00215 	stw	r7,8(r8)
1000931c:	31400115 	stw	r5,4(r6)
10009320:	18800015 	stw	r2,0(r3)
10009324:	003fbd06 	br	1000921c <__alt_data_end+0xf800921c>
10009328:	39c0004c 	andi	r7,r7,1
1000932c:	10c5883a 	add	r2,r2,r3
10009330:	3800071e 	bne	r7,zero,10009350 <_free_r+0x1d4>
10009334:	81fffe17 	ldw	r7,-8(r16)
10009338:	31cdc83a 	sub	r6,r6,r7
1000933c:	30c00317 	ldw	r3,12(r6)
10009340:	31400217 	ldw	r5,8(r6)
10009344:	11c5883a 	add	r2,r2,r7
10009348:	28c00315 	stw	r3,12(r5)
1000934c:	19400215 	stw	r5,8(r3)
10009350:	10c00054 	ori	r3,r2,1
10009354:	30c00115 	stw	r3,4(r6)
10009358:	00c40074 	movhi	r3,4097
1000935c:	18d7ae04 	addi	r3,r3,24248
10009360:	18c00017 	ldw	r3,0(r3)
10009364:	21800215 	stw	r6,8(r4)
10009368:	10ffc036 	bltu	r2,r3,1000926c <__alt_data_end+0xf800926c>
1000936c:	00840074 	movhi	r2,4097
10009370:	109e9404 	addi	r2,r2,31312
10009374:	11400017 	ldw	r5,0(r2)
10009378:	8809883a 	mov	r4,r17
1000937c:	00090580 	call	10009058 <_malloc_trim_r>
10009380:	003fba06 	br	1000926c <__alt_data_end+0xf800926c>
10009384:	28c9883a 	add	r4,r5,r3
10009388:	21000117 	ldw	r4,4(r4)
1000938c:	2100004c 	andi	r4,r4,1
10009390:	2000391e 	bne	r4,zero,10009478 <_free_r+0x2fc>
10009394:	29c00217 	ldw	r7,8(r5)
10009398:	29000317 	ldw	r4,12(r5)
1000939c:	1885883a 	add	r2,r3,r2
100093a0:	10c00054 	ori	r3,r2,1
100093a4:	39000315 	stw	r4,12(r7)
100093a8:	21c00215 	stw	r7,8(r4)
100093ac:	30c00115 	stw	r3,4(r6)
100093b0:	308d883a 	add	r6,r6,r2
100093b4:	30800015 	stw	r2,0(r6)
100093b8:	003fac06 	br	1000926c <__alt_data_end+0xf800926c>
100093bc:	00c00504 	movi	r3,20
100093c0:	19401536 	bltu	r3,r5,10009418 <_free_r+0x29c>
100093c4:	28c01704 	addi	r3,r5,92
100093c8:	18c7883a 	add	r3,r3,r3
100093cc:	294016c4 	addi	r5,r5,91
100093d0:	003fb406 	br	100092a4 <__alt_data_end+0xf80092a4>
100093d4:	280bd0ba 	srai	r5,r5,2
100093d8:	00c00044 	movi	r3,1
100093dc:	38800117 	ldw	r2,4(r7)
100093e0:	194a983a 	sll	r5,r3,r5
100093e4:	2007883a 	mov	r3,r4
100093e8:	2884b03a 	or	r2,r5,r2
100093ec:	38800115 	stw	r2,4(r7)
100093f0:	003fbb06 	br	100092e0 <__alt_data_end+0xf80092e0>
100093f4:	21800515 	stw	r6,20(r4)
100093f8:	21800415 	stw	r6,16(r4)
100093fc:	10c00054 	ori	r3,r2,1
10009400:	31c00315 	stw	r7,12(r6)
10009404:	31c00215 	stw	r7,8(r6)
10009408:	30c00115 	stw	r3,4(r6)
1000940c:	308d883a 	add	r6,r6,r2
10009410:	30800015 	stw	r2,0(r6)
10009414:	003f9506 	br	1000926c <__alt_data_end+0xf800926c>
10009418:	00c01504 	movi	r3,84
1000941c:	19400536 	bltu	r3,r5,10009434 <_free_r+0x2b8>
10009420:	100ad33a 	srli	r5,r2,12
10009424:	28c01bc4 	addi	r3,r5,111
10009428:	18c7883a 	add	r3,r3,r3
1000942c:	29401b84 	addi	r5,r5,110
10009430:	003f9c06 	br	100092a4 <__alt_data_end+0xf80092a4>
10009434:	00c05504 	movi	r3,340
10009438:	19400536 	bltu	r3,r5,10009450 <_free_r+0x2d4>
1000943c:	100ad3fa 	srli	r5,r2,15
10009440:	28c01e04 	addi	r3,r5,120
10009444:	18c7883a 	add	r3,r3,r3
10009448:	29401dc4 	addi	r5,r5,119
1000944c:	003f9506 	br	100092a4 <__alt_data_end+0xf80092a4>
10009450:	00c15504 	movi	r3,1364
10009454:	19400536 	bltu	r3,r5,1000946c <_free_r+0x2f0>
10009458:	100ad4ba 	srli	r5,r2,18
1000945c:	28c01f44 	addi	r3,r5,125
10009460:	18c7883a 	add	r3,r3,r3
10009464:	29401f04 	addi	r5,r5,124
10009468:	003f8e06 	br	100092a4 <__alt_data_end+0xf80092a4>
1000946c:	00c03f84 	movi	r3,254
10009470:	01401f84 	movi	r5,126
10009474:	003f8b06 	br	100092a4 <__alt_data_end+0xf80092a4>
10009478:	10c00054 	ori	r3,r2,1
1000947c:	30c00115 	stw	r3,4(r6)
10009480:	308d883a 	add	r6,r6,r2
10009484:	30800015 	stw	r2,0(r6)
10009488:	003f7806 	br	1000926c <__alt_data_end+0xf800926c>

1000948c <__sfvwrite_r>:
1000948c:	30800217 	ldw	r2,8(r6)
10009490:	10006726 	beq	r2,zero,10009630 <__sfvwrite_r+0x1a4>
10009494:	28c0030b 	ldhu	r3,12(r5)
10009498:	defff404 	addi	sp,sp,-48
1000949c:	dd400715 	stw	r21,28(sp)
100094a0:	dd000615 	stw	r20,24(sp)
100094a4:	dc000215 	stw	r16,8(sp)
100094a8:	dfc00b15 	stw	ra,44(sp)
100094ac:	df000a15 	stw	fp,40(sp)
100094b0:	ddc00915 	stw	r23,36(sp)
100094b4:	dd800815 	stw	r22,32(sp)
100094b8:	dcc00515 	stw	r19,20(sp)
100094bc:	dc800415 	stw	r18,16(sp)
100094c0:	dc400315 	stw	r17,12(sp)
100094c4:	1880020c 	andi	r2,r3,8
100094c8:	2821883a 	mov	r16,r5
100094cc:	202b883a 	mov	r21,r4
100094d0:	3029883a 	mov	r20,r6
100094d4:	10002726 	beq	r2,zero,10009574 <__sfvwrite_r+0xe8>
100094d8:	28800417 	ldw	r2,16(r5)
100094dc:	10002526 	beq	r2,zero,10009574 <__sfvwrite_r+0xe8>
100094e0:	1880008c 	andi	r2,r3,2
100094e4:	a4400017 	ldw	r17,0(r20)
100094e8:	10002a26 	beq	r2,zero,10009594 <__sfvwrite_r+0x108>
100094ec:	05a00034 	movhi	r22,32768
100094f0:	0027883a 	mov	r19,zero
100094f4:	0025883a 	mov	r18,zero
100094f8:	b5bf0004 	addi	r22,r22,-1024
100094fc:	980d883a 	mov	r6,r19
10009500:	a809883a 	mov	r4,r21
10009504:	90004626 	beq	r18,zero,10009620 <__sfvwrite_r+0x194>
10009508:	900f883a 	mov	r7,r18
1000950c:	b480022e 	bgeu	r22,r18,10009518 <__sfvwrite_r+0x8c>
10009510:	01e00034 	movhi	r7,32768
10009514:	39ff0004 	addi	r7,r7,-1024
10009518:	80800917 	ldw	r2,36(r16)
1000951c:	81400717 	ldw	r5,28(r16)
10009520:	103ee83a 	callr	r2
10009524:	00805a0e 	bge	zero,r2,10009690 <__sfvwrite_r+0x204>
10009528:	a0c00217 	ldw	r3,8(r20)
1000952c:	98a7883a 	add	r19,r19,r2
10009530:	90a5c83a 	sub	r18,r18,r2
10009534:	1885c83a 	sub	r2,r3,r2
10009538:	a0800215 	stw	r2,8(r20)
1000953c:	103fef1e 	bne	r2,zero,100094fc <__alt_data_end+0xf80094fc>
10009540:	0005883a 	mov	r2,zero
10009544:	dfc00b17 	ldw	ra,44(sp)
10009548:	df000a17 	ldw	fp,40(sp)
1000954c:	ddc00917 	ldw	r23,36(sp)
10009550:	dd800817 	ldw	r22,32(sp)
10009554:	dd400717 	ldw	r21,28(sp)
10009558:	dd000617 	ldw	r20,24(sp)
1000955c:	dcc00517 	ldw	r19,20(sp)
10009560:	dc800417 	ldw	r18,16(sp)
10009564:	dc400317 	ldw	r17,12(sp)
10009568:	dc000217 	ldw	r16,8(sp)
1000956c:	dec00c04 	addi	sp,sp,48
10009570:	f800283a 	ret
10009574:	800b883a 	mov	r5,r16
10009578:	a809883a 	mov	r4,r21
1000957c:	0006ffc0 	call	10006ffc <__swsetup_r>
10009580:	1000ee1e 	bne	r2,zero,1000993c <__sfvwrite_r+0x4b0>
10009584:	80c0030b 	ldhu	r3,12(r16)
10009588:	a4400017 	ldw	r17,0(r20)
1000958c:	1880008c 	andi	r2,r3,2
10009590:	103fd61e 	bne	r2,zero,100094ec <__alt_data_end+0xf80094ec>
10009594:	1880004c 	andi	r2,r3,1
10009598:	1000421e 	bne	r2,zero,100096a4 <__sfvwrite_r+0x218>
1000959c:	0039883a 	mov	fp,zero
100095a0:	0025883a 	mov	r18,zero
100095a4:	90001a26 	beq	r18,zero,10009610 <__sfvwrite_r+0x184>
100095a8:	1880800c 	andi	r2,r3,512
100095ac:	84c00217 	ldw	r19,8(r16)
100095b0:	10002126 	beq	r2,zero,10009638 <__sfvwrite_r+0x1ac>
100095b4:	982f883a 	mov	r23,r19
100095b8:	94c09636 	bltu	r18,r19,10009814 <__sfvwrite_r+0x388>
100095bc:	1881200c 	andi	r2,r3,1152
100095c0:	1000a11e 	bne	r2,zero,10009848 <__sfvwrite_r+0x3bc>
100095c4:	81000017 	ldw	r4,0(r16)
100095c8:	b80d883a 	mov	r6,r23
100095cc:	e00b883a 	mov	r5,fp
100095d0:	0009fa00 	call	10009fa0 <memmove>
100095d4:	80c00217 	ldw	r3,8(r16)
100095d8:	81000017 	ldw	r4,0(r16)
100095dc:	9005883a 	mov	r2,r18
100095e0:	1ce7c83a 	sub	r19,r3,r19
100095e4:	25cf883a 	add	r7,r4,r23
100095e8:	84c00215 	stw	r19,8(r16)
100095ec:	81c00015 	stw	r7,0(r16)
100095f0:	a0c00217 	ldw	r3,8(r20)
100095f4:	e0b9883a 	add	fp,fp,r2
100095f8:	90a5c83a 	sub	r18,r18,r2
100095fc:	18a7c83a 	sub	r19,r3,r2
10009600:	a4c00215 	stw	r19,8(r20)
10009604:	983fce26 	beq	r19,zero,10009540 <__alt_data_end+0xf8009540>
10009608:	80c0030b 	ldhu	r3,12(r16)
1000960c:	903fe61e 	bne	r18,zero,100095a8 <__alt_data_end+0xf80095a8>
10009610:	8f000017 	ldw	fp,0(r17)
10009614:	8c800117 	ldw	r18,4(r17)
10009618:	8c400204 	addi	r17,r17,8
1000961c:	003fe106 	br	100095a4 <__alt_data_end+0xf80095a4>
10009620:	8cc00017 	ldw	r19,0(r17)
10009624:	8c800117 	ldw	r18,4(r17)
10009628:	8c400204 	addi	r17,r17,8
1000962c:	003fb306 	br	100094fc <__alt_data_end+0xf80094fc>
10009630:	0005883a 	mov	r2,zero
10009634:	f800283a 	ret
10009638:	81000017 	ldw	r4,0(r16)
1000963c:	80800417 	ldw	r2,16(r16)
10009640:	11005a36 	bltu	r2,r4,100097ac <__sfvwrite_r+0x320>
10009644:	85c00517 	ldw	r23,20(r16)
10009648:	95c05836 	bltu	r18,r23,100097ac <__sfvwrite_r+0x320>
1000964c:	00a00034 	movhi	r2,32768
10009650:	10bfffc4 	addi	r2,r2,-1
10009654:	9009883a 	mov	r4,r18
10009658:	1480012e 	bgeu	r2,r18,10009660 <__sfvwrite_r+0x1d4>
1000965c:	1009883a 	mov	r4,r2
10009660:	b80b883a 	mov	r5,r23
10009664:	000e6d00 	call	1000e6d0 <__divsi3>
10009668:	b80b883a 	mov	r5,r23
1000966c:	1009883a 	mov	r4,r2
10009670:	000e8840 	call	1000e884 <__mulsi3>
10009674:	81400717 	ldw	r5,28(r16)
10009678:	80c00917 	ldw	r3,36(r16)
1000967c:	100f883a 	mov	r7,r2
10009680:	e00d883a 	mov	r6,fp
10009684:	a809883a 	mov	r4,r21
10009688:	183ee83a 	callr	r3
1000968c:	00bfd816 	blt	zero,r2,100095f0 <__alt_data_end+0xf80095f0>
10009690:	8080030b 	ldhu	r2,12(r16)
10009694:	10801014 	ori	r2,r2,64
10009698:	8080030d 	sth	r2,12(r16)
1000969c:	00bfffc4 	movi	r2,-1
100096a0:	003fa806 	br	10009544 <__alt_data_end+0xf8009544>
100096a4:	0027883a 	mov	r19,zero
100096a8:	0011883a 	mov	r8,zero
100096ac:	0039883a 	mov	fp,zero
100096b0:	0025883a 	mov	r18,zero
100096b4:	90001f26 	beq	r18,zero,10009734 <__sfvwrite_r+0x2a8>
100096b8:	40005a26 	beq	r8,zero,10009824 <__sfvwrite_r+0x398>
100096bc:	982d883a 	mov	r22,r19
100096c0:	94c0012e 	bgeu	r18,r19,100096c8 <__sfvwrite_r+0x23c>
100096c4:	902d883a 	mov	r22,r18
100096c8:	81000017 	ldw	r4,0(r16)
100096cc:	80800417 	ldw	r2,16(r16)
100096d0:	b02f883a 	mov	r23,r22
100096d4:	81c00517 	ldw	r7,20(r16)
100096d8:	1100032e 	bgeu	r2,r4,100096e8 <__sfvwrite_r+0x25c>
100096dc:	80c00217 	ldw	r3,8(r16)
100096e0:	38c7883a 	add	r3,r7,r3
100096e4:	1d801816 	blt	r3,r22,10009748 <__sfvwrite_r+0x2bc>
100096e8:	b1c03e16 	blt	r22,r7,100097e4 <__sfvwrite_r+0x358>
100096ec:	80800917 	ldw	r2,36(r16)
100096f0:	81400717 	ldw	r5,28(r16)
100096f4:	e00d883a 	mov	r6,fp
100096f8:	da000115 	stw	r8,4(sp)
100096fc:	a809883a 	mov	r4,r21
10009700:	103ee83a 	callr	r2
10009704:	102f883a 	mov	r23,r2
10009708:	da000117 	ldw	r8,4(sp)
1000970c:	00bfe00e 	bge	zero,r2,10009690 <__alt_data_end+0xf8009690>
10009710:	9de7c83a 	sub	r19,r19,r23
10009714:	98001f26 	beq	r19,zero,10009794 <__sfvwrite_r+0x308>
10009718:	a0800217 	ldw	r2,8(r20)
1000971c:	e5f9883a 	add	fp,fp,r23
10009720:	95e5c83a 	sub	r18,r18,r23
10009724:	15efc83a 	sub	r23,r2,r23
10009728:	a5c00215 	stw	r23,8(r20)
1000972c:	b83f8426 	beq	r23,zero,10009540 <__alt_data_end+0xf8009540>
10009730:	903fe11e 	bne	r18,zero,100096b8 <__alt_data_end+0xf80096b8>
10009734:	8f000017 	ldw	fp,0(r17)
10009738:	8c800117 	ldw	r18,4(r17)
1000973c:	0011883a 	mov	r8,zero
10009740:	8c400204 	addi	r17,r17,8
10009744:	003fdb06 	br	100096b4 <__alt_data_end+0xf80096b4>
10009748:	180d883a 	mov	r6,r3
1000974c:	e00b883a 	mov	r5,fp
10009750:	da000115 	stw	r8,4(sp)
10009754:	d8c00015 	stw	r3,0(sp)
10009758:	0009fa00 	call	10009fa0 <memmove>
1000975c:	d8c00017 	ldw	r3,0(sp)
10009760:	80800017 	ldw	r2,0(r16)
10009764:	800b883a 	mov	r5,r16
10009768:	a809883a 	mov	r4,r21
1000976c:	10c5883a 	add	r2,r2,r3
10009770:	80800015 	stw	r2,0(r16)
10009774:	d8c00015 	stw	r3,0(sp)
10009778:	0008c1c0 	call	10008c1c <_fflush_r>
1000977c:	d8c00017 	ldw	r3,0(sp)
10009780:	da000117 	ldw	r8,4(sp)
10009784:	103fc21e 	bne	r2,zero,10009690 <__alt_data_end+0xf8009690>
10009788:	182f883a 	mov	r23,r3
1000978c:	9de7c83a 	sub	r19,r19,r23
10009790:	983fe11e 	bne	r19,zero,10009718 <__alt_data_end+0xf8009718>
10009794:	800b883a 	mov	r5,r16
10009798:	a809883a 	mov	r4,r21
1000979c:	0008c1c0 	call	10008c1c <_fflush_r>
100097a0:	103fbb1e 	bne	r2,zero,10009690 <__alt_data_end+0xf8009690>
100097a4:	0011883a 	mov	r8,zero
100097a8:	003fdb06 	br	10009718 <__alt_data_end+0xf8009718>
100097ac:	94c0012e 	bgeu	r18,r19,100097b4 <__sfvwrite_r+0x328>
100097b0:	9027883a 	mov	r19,r18
100097b4:	980d883a 	mov	r6,r19
100097b8:	e00b883a 	mov	r5,fp
100097bc:	0009fa00 	call	10009fa0 <memmove>
100097c0:	80800217 	ldw	r2,8(r16)
100097c4:	80c00017 	ldw	r3,0(r16)
100097c8:	14c5c83a 	sub	r2,r2,r19
100097cc:	1cc7883a 	add	r3,r3,r19
100097d0:	80800215 	stw	r2,8(r16)
100097d4:	80c00015 	stw	r3,0(r16)
100097d8:	10004326 	beq	r2,zero,100098e8 <__sfvwrite_r+0x45c>
100097dc:	9805883a 	mov	r2,r19
100097e0:	003f8306 	br	100095f0 <__alt_data_end+0xf80095f0>
100097e4:	b00d883a 	mov	r6,r22
100097e8:	e00b883a 	mov	r5,fp
100097ec:	da000115 	stw	r8,4(sp)
100097f0:	0009fa00 	call	10009fa0 <memmove>
100097f4:	80800217 	ldw	r2,8(r16)
100097f8:	80c00017 	ldw	r3,0(r16)
100097fc:	da000117 	ldw	r8,4(sp)
10009800:	1585c83a 	sub	r2,r2,r22
10009804:	1dad883a 	add	r22,r3,r22
10009808:	80800215 	stw	r2,8(r16)
1000980c:	85800015 	stw	r22,0(r16)
10009810:	003fbf06 	br	10009710 <__alt_data_end+0xf8009710>
10009814:	81000017 	ldw	r4,0(r16)
10009818:	9027883a 	mov	r19,r18
1000981c:	902f883a 	mov	r23,r18
10009820:	003f6906 	br	100095c8 <__alt_data_end+0xf80095c8>
10009824:	900d883a 	mov	r6,r18
10009828:	01400284 	movi	r5,10
1000982c:	e009883a 	mov	r4,fp
10009830:	0009d740 	call	10009d74 <memchr>
10009834:	10003e26 	beq	r2,zero,10009930 <__sfvwrite_r+0x4a4>
10009838:	10800044 	addi	r2,r2,1
1000983c:	1727c83a 	sub	r19,r2,fp
10009840:	02000044 	movi	r8,1
10009844:	003f9d06 	br	100096bc <__alt_data_end+0xf80096bc>
10009848:	80800517 	ldw	r2,20(r16)
1000984c:	81400417 	ldw	r5,16(r16)
10009850:	81c00017 	ldw	r7,0(r16)
10009854:	10a7883a 	add	r19,r2,r2
10009858:	9885883a 	add	r2,r19,r2
1000985c:	1026d7fa 	srli	r19,r2,31
10009860:	396dc83a 	sub	r22,r7,r5
10009864:	b1000044 	addi	r4,r22,1
10009868:	9885883a 	add	r2,r19,r2
1000986c:	1027d07a 	srai	r19,r2,1
10009870:	2485883a 	add	r2,r4,r18
10009874:	980d883a 	mov	r6,r19
10009878:	9880022e 	bgeu	r19,r2,10009884 <__sfvwrite_r+0x3f8>
1000987c:	1027883a 	mov	r19,r2
10009880:	100d883a 	mov	r6,r2
10009884:	18c1000c 	andi	r3,r3,1024
10009888:	18001c26 	beq	r3,zero,100098fc <__sfvwrite_r+0x470>
1000988c:	300b883a 	mov	r5,r6
10009890:	a809883a 	mov	r4,r21
10009894:	00042100 	call	10004210 <_malloc_r>
10009898:	102f883a 	mov	r23,r2
1000989c:	10002926 	beq	r2,zero,10009944 <__sfvwrite_r+0x4b8>
100098a0:	81400417 	ldw	r5,16(r16)
100098a4:	b00d883a 	mov	r6,r22
100098a8:	1009883a 	mov	r4,r2
100098ac:	0009e580 	call	10009e58 <memcpy>
100098b0:	8080030b 	ldhu	r2,12(r16)
100098b4:	00fedfc4 	movi	r3,-1153
100098b8:	10c4703a 	and	r2,r2,r3
100098bc:	10802014 	ori	r2,r2,128
100098c0:	8080030d 	sth	r2,12(r16)
100098c4:	bd89883a 	add	r4,r23,r22
100098c8:	9d8fc83a 	sub	r7,r19,r22
100098cc:	85c00415 	stw	r23,16(r16)
100098d0:	84c00515 	stw	r19,20(r16)
100098d4:	81000015 	stw	r4,0(r16)
100098d8:	9027883a 	mov	r19,r18
100098dc:	81c00215 	stw	r7,8(r16)
100098e0:	902f883a 	mov	r23,r18
100098e4:	003f3806 	br	100095c8 <__alt_data_end+0xf80095c8>
100098e8:	800b883a 	mov	r5,r16
100098ec:	a809883a 	mov	r4,r21
100098f0:	0008c1c0 	call	10008c1c <_fflush_r>
100098f4:	103fb926 	beq	r2,zero,100097dc <__alt_data_end+0xf80097dc>
100098f8:	003f6506 	br	10009690 <__alt_data_end+0xf8009690>
100098fc:	a809883a 	mov	r4,r21
10009900:	000b2dc0 	call	1000b2dc <_realloc_r>
10009904:	102f883a 	mov	r23,r2
10009908:	103fee1e 	bne	r2,zero,100098c4 <__alt_data_end+0xf80098c4>
1000990c:	81400417 	ldw	r5,16(r16)
10009910:	a809883a 	mov	r4,r21
10009914:	000917c0 	call	1000917c <_free_r>
10009918:	8080030b 	ldhu	r2,12(r16)
1000991c:	00ffdfc4 	movi	r3,-129
10009920:	1884703a 	and	r2,r3,r2
10009924:	00c00304 	movi	r3,12
10009928:	a8c00015 	stw	r3,0(r21)
1000992c:	003f5906 	br	10009694 <__alt_data_end+0xf8009694>
10009930:	94c00044 	addi	r19,r18,1
10009934:	02000044 	movi	r8,1
10009938:	003f6006 	br	100096bc <__alt_data_end+0xf80096bc>
1000993c:	00bfffc4 	movi	r2,-1
10009940:	003f0006 	br	10009544 <__alt_data_end+0xf8009544>
10009944:	00800304 	movi	r2,12
10009948:	a8800015 	stw	r2,0(r21)
1000994c:	8080030b 	ldhu	r2,12(r16)
10009950:	003f5006 	br	10009694 <__alt_data_end+0xf8009694>

10009954 <_fwalk>:
10009954:	defff704 	addi	sp,sp,-36
10009958:	dd000415 	stw	r20,16(sp)
1000995c:	dfc00815 	stw	ra,32(sp)
10009960:	ddc00715 	stw	r23,28(sp)
10009964:	dd800615 	stw	r22,24(sp)
10009968:	dd400515 	stw	r21,20(sp)
1000996c:	dcc00315 	stw	r19,12(sp)
10009970:	dc800215 	stw	r18,8(sp)
10009974:	dc400115 	stw	r17,4(sp)
10009978:	dc000015 	stw	r16,0(sp)
1000997c:	2500b804 	addi	r20,r4,736
10009980:	a0002326 	beq	r20,zero,10009a10 <_fwalk+0xbc>
10009984:	282b883a 	mov	r21,r5
10009988:	002f883a 	mov	r23,zero
1000998c:	05800044 	movi	r22,1
10009990:	04ffffc4 	movi	r19,-1
10009994:	a4400117 	ldw	r17,4(r20)
10009998:	a4800217 	ldw	r18,8(r20)
1000999c:	8c7fffc4 	addi	r17,r17,-1
100099a0:	88000d16 	blt	r17,zero,100099d8 <_fwalk+0x84>
100099a4:	94000304 	addi	r16,r18,12
100099a8:	94800384 	addi	r18,r18,14
100099ac:	8080000b 	ldhu	r2,0(r16)
100099b0:	8c7fffc4 	addi	r17,r17,-1
100099b4:	813ffd04 	addi	r4,r16,-12
100099b8:	b080042e 	bgeu	r22,r2,100099cc <_fwalk+0x78>
100099bc:	9080000f 	ldh	r2,0(r18)
100099c0:	14c00226 	beq	r2,r19,100099cc <_fwalk+0x78>
100099c4:	a83ee83a 	callr	r21
100099c8:	b8aeb03a 	or	r23,r23,r2
100099cc:	84001a04 	addi	r16,r16,104
100099d0:	94801a04 	addi	r18,r18,104
100099d4:	8cfff51e 	bne	r17,r19,100099ac <__alt_data_end+0xf80099ac>
100099d8:	a5000017 	ldw	r20,0(r20)
100099dc:	a03fed1e 	bne	r20,zero,10009994 <__alt_data_end+0xf8009994>
100099e0:	b805883a 	mov	r2,r23
100099e4:	dfc00817 	ldw	ra,32(sp)
100099e8:	ddc00717 	ldw	r23,28(sp)
100099ec:	dd800617 	ldw	r22,24(sp)
100099f0:	dd400517 	ldw	r21,20(sp)
100099f4:	dd000417 	ldw	r20,16(sp)
100099f8:	dcc00317 	ldw	r19,12(sp)
100099fc:	dc800217 	ldw	r18,8(sp)
10009a00:	dc400117 	ldw	r17,4(sp)
10009a04:	dc000017 	ldw	r16,0(sp)
10009a08:	dec00904 	addi	sp,sp,36
10009a0c:	f800283a 	ret
10009a10:	002f883a 	mov	r23,zero
10009a14:	003ff206 	br	100099e0 <__alt_data_end+0xf80099e0>

10009a18 <_fwalk_reent>:
10009a18:	defff704 	addi	sp,sp,-36
10009a1c:	dd000415 	stw	r20,16(sp)
10009a20:	dfc00815 	stw	ra,32(sp)
10009a24:	ddc00715 	stw	r23,28(sp)
10009a28:	dd800615 	stw	r22,24(sp)
10009a2c:	dd400515 	stw	r21,20(sp)
10009a30:	dcc00315 	stw	r19,12(sp)
10009a34:	dc800215 	stw	r18,8(sp)
10009a38:	dc400115 	stw	r17,4(sp)
10009a3c:	dc000015 	stw	r16,0(sp)
10009a40:	2500b804 	addi	r20,r4,736
10009a44:	a0002326 	beq	r20,zero,10009ad4 <_fwalk_reent+0xbc>
10009a48:	282b883a 	mov	r21,r5
10009a4c:	2027883a 	mov	r19,r4
10009a50:	002f883a 	mov	r23,zero
10009a54:	05800044 	movi	r22,1
10009a58:	04bfffc4 	movi	r18,-1
10009a5c:	a4400117 	ldw	r17,4(r20)
10009a60:	a4000217 	ldw	r16,8(r20)
10009a64:	8c7fffc4 	addi	r17,r17,-1
10009a68:	88000c16 	blt	r17,zero,10009a9c <_fwalk_reent+0x84>
10009a6c:	84000304 	addi	r16,r16,12
10009a70:	8080000b 	ldhu	r2,0(r16)
10009a74:	8c7fffc4 	addi	r17,r17,-1
10009a78:	817ffd04 	addi	r5,r16,-12
10009a7c:	b080052e 	bgeu	r22,r2,10009a94 <_fwalk_reent+0x7c>
10009a80:	8080008f 	ldh	r2,2(r16)
10009a84:	9809883a 	mov	r4,r19
10009a88:	14800226 	beq	r2,r18,10009a94 <_fwalk_reent+0x7c>
10009a8c:	a83ee83a 	callr	r21
10009a90:	b8aeb03a 	or	r23,r23,r2
10009a94:	84001a04 	addi	r16,r16,104
10009a98:	8cbff51e 	bne	r17,r18,10009a70 <__alt_data_end+0xf8009a70>
10009a9c:	a5000017 	ldw	r20,0(r20)
10009aa0:	a03fee1e 	bne	r20,zero,10009a5c <__alt_data_end+0xf8009a5c>
10009aa4:	b805883a 	mov	r2,r23
10009aa8:	dfc00817 	ldw	ra,32(sp)
10009aac:	ddc00717 	ldw	r23,28(sp)
10009ab0:	dd800617 	ldw	r22,24(sp)
10009ab4:	dd400517 	ldw	r21,20(sp)
10009ab8:	dd000417 	ldw	r20,16(sp)
10009abc:	dcc00317 	ldw	r19,12(sp)
10009ac0:	dc800217 	ldw	r18,8(sp)
10009ac4:	dc400117 	ldw	r17,4(sp)
10009ac8:	dc000017 	ldw	r16,0(sp)
10009acc:	dec00904 	addi	sp,sp,36
10009ad0:	f800283a 	ret
10009ad4:	002f883a 	mov	r23,zero
10009ad8:	003ff206 	br	10009aa4 <__alt_data_end+0xf8009aa4>

10009adc <_setlocale_r>:
10009adc:	30001b26 	beq	r6,zero,10009b4c <_setlocale_r+0x70>
10009ae0:	01440074 	movhi	r5,4097
10009ae4:	defffe04 	addi	sp,sp,-8
10009ae8:	29505f04 	addi	r5,r5,16764
10009aec:	3009883a 	mov	r4,r6
10009af0:	dc000015 	stw	r16,0(sp)
10009af4:	dfc00115 	stw	ra,4(sp)
10009af8:	3021883a 	mov	r16,r6
10009afc:	000b9f00 	call	1000b9f0 <strcmp>
10009b00:	1000061e 	bne	r2,zero,10009b1c <_setlocale_r+0x40>
10009b04:	00840074 	movhi	r2,4097
10009b08:	10905e04 	addi	r2,r2,16760
10009b0c:	dfc00117 	ldw	ra,4(sp)
10009b10:	dc000017 	ldw	r16,0(sp)
10009b14:	dec00204 	addi	sp,sp,8
10009b18:	f800283a 	ret
10009b1c:	01440074 	movhi	r5,4097
10009b20:	29505e04 	addi	r5,r5,16760
10009b24:	8009883a 	mov	r4,r16
10009b28:	000b9f00 	call	1000b9f0 <strcmp>
10009b2c:	103ff526 	beq	r2,zero,10009b04 <__alt_data_end+0xf8009b04>
10009b30:	01440074 	movhi	r5,4097
10009b34:	29504904 	addi	r5,r5,16676
10009b38:	8009883a 	mov	r4,r16
10009b3c:	000b9f00 	call	1000b9f0 <strcmp>
10009b40:	103ff026 	beq	r2,zero,10009b04 <__alt_data_end+0xf8009b04>
10009b44:	0005883a 	mov	r2,zero
10009b48:	003ff006 	br	10009b0c <__alt_data_end+0xf8009b0c>
10009b4c:	00840074 	movhi	r2,4097
10009b50:	10905e04 	addi	r2,r2,16760
10009b54:	f800283a 	ret

10009b58 <__locale_charset>:
10009b58:	00840074 	movhi	r2,4097
10009b5c:	10931304 	addi	r2,r2,19532
10009b60:	f800283a 	ret

10009b64 <__locale_mb_cur_max>:
10009b64:	00840074 	movhi	r2,4097
10009b68:	1097b104 	addi	r2,r2,24260
10009b6c:	10800017 	ldw	r2,0(r2)
10009b70:	f800283a 	ret

10009b74 <__locale_msgcharset>:
10009b74:	00840074 	movhi	r2,4097
10009b78:	10930b04 	addi	r2,r2,19500
10009b7c:	f800283a 	ret

10009b80 <__locale_cjk_lang>:
10009b80:	0005883a 	mov	r2,zero
10009b84:	f800283a 	ret

10009b88 <_localeconv_r>:
10009b88:	00840074 	movhi	r2,4097
10009b8c:	10931b04 	addi	r2,r2,19564
10009b90:	f800283a 	ret

10009b94 <setlocale>:
10009b94:	00840074 	movhi	r2,4097
10009b98:	1097b004 	addi	r2,r2,24256
10009b9c:	280d883a 	mov	r6,r5
10009ba0:	200b883a 	mov	r5,r4
10009ba4:	11000017 	ldw	r4,0(r2)
10009ba8:	0009adc1 	jmpi	10009adc <_setlocale_r>

10009bac <localeconv>:
10009bac:	00840074 	movhi	r2,4097
10009bb0:	10931b04 	addi	r2,r2,19564
10009bb4:	f800283a 	ret

10009bb8 <__smakebuf_r>:
10009bb8:	2880030b 	ldhu	r2,12(r5)
10009bbc:	10c0008c 	andi	r3,r2,2
10009bc0:	1800411e 	bne	r3,zero,10009cc8 <__smakebuf_r+0x110>
10009bc4:	deffec04 	addi	sp,sp,-80
10009bc8:	dc000f15 	stw	r16,60(sp)
10009bcc:	2821883a 	mov	r16,r5
10009bd0:	2940038f 	ldh	r5,14(r5)
10009bd4:	dc401015 	stw	r17,64(sp)
10009bd8:	dfc01315 	stw	ra,76(sp)
10009bdc:	dcc01215 	stw	r19,72(sp)
10009be0:	dc801115 	stw	r18,68(sp)
10009be4:	2023883a 	mov	r17,r4
10009be8:	28001c16 	blt	r5,zero,10009c5c <__smakebuf_r+0xa4>
10009bec:	d80d883a 	mov	r6,sp
10009bf0:	000d6600 	call	1000d660 <_fstat_r>
10009bf4:	10001816 	blt	r2,zero,10009c58 <__smakebuf_r+0xa0>
10009bf8:	d8800117 	ldw	r2,4(sp)
10009bfc:	00e00014 	movui	r3,32768
10009c00:	10bc000c 	andi	r2,r2,61440
10009c04:	14c80020 	cmpeqi	r19,r2,8192
10009c08:	10c03726 	beq	r2,r3,10009ce8 <__smakebuf_r+0x130>
10009c0c:	80c0030b 	ldhu	r3,12(r16)
10009c10:	18c20014 	ori	r3,r3,2048
10009c14:	80c0030d 	sth	r3,12(r16)
10009c18:	00c80004 	movi	r3,8192
10009c1c:	10c0521e 	bne	r2,r3,10009d68 <__smakebuf_r+0x1b0>
10009c20:	8140038f 	ldh	r5,14(r16)
10009c24:	8809883a 	mov	r4,r17
10009c28:	000d6bc0 	call	1000d6bc <_isatty_r>
10009c2c:	10004c26 	beq	r2,zero,10009d60 <__smakebuf_r+0x1a8>
10009c30:	8080030b 	ldhu	r2,12(r16)
10009c34:	80c010c4 	addi	r3,r16,67
10009c38:	80c00015 	stw	r3,0(r16)
10009c3c:	10800054 	ori	r2,r2,1
10009c40:	8080030d 	sth	r2,12(r16)
10009c44:	00800044 	movi	r2,1
10009c48:	80c00415 	stw	r3,16(r16)
10009c4c:	80800515 	stw	r2,20(r16)
10009c50:	04810004 	movi	r18,1024
10009c54:	00000706 	br	10009c74 <__smakebuf_r+0xbc>
10009c58:	8080030b 	ldhu	r2,12(r16)
10009c5c:	10c0200c 	andi	r3,r2,128
10009c60:	18001f1e 	bne	r3,zero,10009ce0 <__smakebuf_r+0x128>
10009c64:	04810004 	movi	r18,1024
10009c68:	10820014 	ori	r2,r2,2048
10009c6c:	8080030d 	sth	r2,12(r16)
10009c70:	0027883a 	mov	r19,zero
10009c74:	900b883a 	mov	r5,r18
10009c78:	8809883a 	mov	r4,r17
10009c7c:	00042100 	call	10004210 <_malloc_r>
10009c80:	10002c26 	beq	r2,zero,10009d34 <__smakebuf_r+0x17c>
10009c84:	80c0030b 	ldhu	r3,12(r16)
10009c88:	01040074 	movhi	r4,4097
10009c8c:	21232c04 	addi	r4,r4,-29520
10009c90:	89000f15 	stw	r4,60(r17)
10009c94:	18c02014 	ori	r3,r3,128
10009c98:	80c0030d 	sth	r3,12(r16)
10009c9c:	80800015 	stw	r2,0(r16)
10009ca0:	80800415 	stw	r2,16(r16)
10009ca4:	84800515 	stw	r18,20(r16)
10009ca8:	98001a1e 	bne	r19,zero,10009d14 <__smakebuf_r+0x15c>
10009cac:	dfc01317 	ldw	ra,76(sp)
10009cb0:	dcc01217 	ldw	r19,72(sp)
10009cb4:	dc801117 	ldw	r18,68(sp)
10009cb8:	dc401017 	ldw	r17,64(sp)
10009cbc:	dc000f17 	ldw	r16,60(sp)
10009cc0:	dec01404 	addi	sp,sp,80
10009cc4:	f800283a 	ret
10009cc8:	288010c4 	addi	r2,r5,67
10009ccc:	28800015 	stw	r2,0(r5)
10009cd0:	28800415 	stw	r2,16(r5)
10009cd4:	00800044 	movi	r2,1
10009cd8:	28800515 	stw	r2,20(r5)
10009cdc:	f800283a 	ret
10009ce0:	04801004 	movi	r18,64
10009ce4:	003fe006 	br	10009c68 <__alt_data_end+0xf8009c68>
10009ce8:	81000a17 	ldw	r4,40(r16)
10009cec:	00c40074 	movhi	r3,4097
10009cf0:	18ee6304 	addi	r3,r3,-18036
10009cf4:	20ffc51e 	bne	r4,r3,10009c0c <__alt_data_end+0xf8009c0c>
10009cf8:	8080030b 	ldhu	r2,12(r16)
10009cfc:	04810004 	movi	r18,1024
10009d00:	84801315 	stw	r18,76(r16)
10009d04:	1484b03a 	or	r2,r2,r18
10009d08:	8080030d 	sth	r2,12(r16)
10009d0c:	0027883a 	mov	r19,zero
10009d10:	003fd806 	br	10009c74 <__alt_data_end+0xf8009c74>
10009d14:	8140038f 	ldh	r5,14(r16)
10009d18:	8809883a 	mov	r4,r17
10009d1c:	000d6bc0 	call	1000d6bc <_isatty_r>
10009d20:	103fe226 	beq	r2,zero,10009cac <__alt_data_end+0xf8009cac>
10009d24:	8080030b 	ldhu	r2,12(r16)
10009d28:	10800054 	ori	r2,r2,1
10009d2c:	8080030d 	sth	r2,12(r16)
10009d30:	003fde06 	br	10009cac <__alt_data_end+0xf8009cac>
10009d34:	8080030b 	ldhu	r2,12(r16)
10009d38:	10c0800c 	andi	r3,r2,512
10009d3c:	183fdb1e 	bne	r3,zero,10009cac <__alt_data_end+0xf8009cac>
10009d40:	10800094 	ori	r2,r2,2
10009d44:	80c010c4 	addi	r3,r16,67
10009d48:	8080030d 	sth	r2,12(r16)
10009d4c:	00800044 	movi	r2,1
10009d50:	80c00015 	stw	r3,0(r16)
10009d54:	80c00415 	stw	r3,16(r16)
10009d58:	80800515 	stw	r2,20(r16)
10009d5c:	003fd306 	br	10009cac <__alt_data_end+0xf8009cac>
10009d60:	04810004 	movi	r18,1024
10009d64:	003fc306 	br	10009c74 <__alt_data_end+0xf8009c74>
10009d68:	0027883a 	mov	r19,zero
10009d6c:	04810004 	movi	r18,1024
10009d70:	003fc006 	br	10009c74 <__alt_data_end+0xf8009c74>

10009d74 <memchr>:
10009d74:	208000cc 	andi	r2,r4,3
10009d78:	280f883a 	mov	r7,r5
10009d7c:	10003426 	beq	r2,zero,10009e50 <memchr+0xdc>
10009d80:	30bfffc4 	addi	r2,r6,-1
10009d84:	30001a26 	beq	r6,zero,10009df0 <memchr+0x7c>
10009d88:	20c00003 	ldbu	r3,0(r4)
10009d8c:	29803fcc 	andi	r6,r5,255
10009d90:	30c0051e 	bne	r6,r3,10009da8 <memchr+0x34>
10009d94:	00001806 	br	10009df8 <memchr+0x84>
10009d98:	10001526 	beq	r2,zero,10009df0 <memchr+0x7c>
10009d9c:	20c00003 	ldbu	r3,0(r4)
10009da0:	10bfffc4 	addi	r2,r2,-1
10009da4:	30c01426 	beq	r6,r3,10009df8 <memchr+0x84>
10009da8:	21000044 	addi	r4,r4,1
10009dac:	20c000cc 	andi	r3,r4,3
10009db0:	183ff91e 	bne	r3,zero,10009d98 <__alt_data_end+0xf8009d98>
10009db4:	020000c4 	movi	r8,3
10009db8:	40801136 	bltu	r8,r2,10009e00 <memchr+0x8c>
10009dbc:	10000c26 	beq	r2,zero,10009df0 <memchr+0x7c>
10009dc0:	20c00003 	ldbu	r3,0(r4)
10009dc4:	29403fcc 	andi	r5,r5,255
10009dc8:	28c00b26 	beq	r5,r3,10009df8 <memchr+0x84>
10009dcc:	20c00044 	addi	r3,r4,1
10009dd0:	39803fcc 	andi	r6,r7,255
10009dd4:	2089883a 	add	r4,r4,r2
10009dd8:	00000306 	br	10009de8 <memchr+0x74>
10009ddc:	18c00044 	addi	r3,r3,1
10009de0:	197fffc3 	ldbu	r5,-1(r3)
10009de4:	31400526 	beq	r6,r5,10009dfc <memchr+0x88>
10009de8:	1805883a 	mov	r2,r3
10009dec:	20fffb1e 	bne	r4,r3,10009ddc <__alt_data_end+0xf8009ddc>
10009df0:	0005883a 	mov	r2,zero
10009df4:	f800283a 	ret
10009df8:	2005883a 	mov	r2,r4
10009dfc:	f800283a 	ret
10009e00:	28c03fcc 	andi	r3,r5,255
10009e04:	1812923a 	slli	r9,r3,8
10009e08:	02ffbff4 	movhi	r11,65279
10009e0c:	02a02074 	movhi	r10,32897
10009e10:	48d2b03a 	or	r9,r9,r3
10009e14:	4806943a 	slli	r3,r9,16
10009e18:	5affbfc4 	addi	r11,r11,-257
10009e1c:	52a02004 	addi	r10,r10,-32640
10009e20:	48d2b03a 	or	r9,r9,r3
10009e24:	20c00017 	ldw	r3,0(r4)
10009e28:	48c6f03a 	xor	r3,r9,r3
10009e2c:	1acd883a 	add	r6,r3,r11
10009e30:	00c6303a 	nor	r3,zero,r3
10009e34:	30c6703a 	and	r3,r6,r3
10009e38:	1a86703a 	and	r3,r3,r10
10009e3c:	183fe01e 	bne	r3,zero,10009dc0 <__alt_data_end+0xf8009dc0>
10009e40:	10bfff04 	addi	r2,r2,-4
10009e44:	21000104 	addi	r4,r4,4
10009e48:	40bff636 	bltu	r8,r2,10009e24 <__alt_data_end+0xf8009e24>
10009e4c:	003fdb06 	br	10009dbc <__alt_data_end+0xf8009dbc>
10009e50:	3005883a 	mov	r2,r6
10009e54:	003fd706 	br	10009db4 <__alt_data_end+0xf8009db4>

10009e58 <memcpy>:
10009e58:	defffd04 	addi	sp,sp,-12
10009e5c:	dfc00215 	stw	ra,8(sp)
10009e60:	dc400115 	stw	r17,4(sp)
10009e64:	dc000015 	stw	r16,0(sp)
10009e68:	00c003c4 	movi	r3,15
10009e6c:	2005883a 	mov	r2,r4
10009e70:	1980452e 	bgeu	r3,r6,10009f88 <memcpy+0x130>
10009e74:	2906b03a 	or	r3,r5,r4
10009e78:	18c000cc 	andi	r3,r3,3
10009e7c:	1800441e 	bne	r3,zero,10009f90 <memcpy+0x138>
10009e80:	347ffc04 	addi	r17,r6,-16
10009e84:	8822d13a 	srli	r17,r17,4
10009e88:	28c00104 	addi	r3,r5,4
10009e8c:	23400104 	addi	r13,r4,4
10009e90:	8820913a 	slli	r16,r17,4
10009e94:	2b000204 	addi	r12,r5,8
10009e98:	22c00204 	addi	r11,r4,8
10009e9c:	84000504 	addi	r16,r16,20
10009ea0:	2a800304 	addi	r10,r5,12
10009ea4:	22400304 	addi	r9,r4,12
10009ea8:	2c21883a 	add	r16,r5,r16
10009eac:	2811883a 	mov	r8,r5
10009eb0:	200f883a 	mov	r7,r4
10009eb4:	41000017 	ldw	r4,0(r8)
10009eb8:	1fc00017 	ldw	ra,0(r3)
10009ebc:	63c00017 	ldw	r15,0(r12)
10009ec0:	39000015 	stw	r4,0(r7)
10009ec4:	53800017 	ldw	r14,0(r10)
10009ec8:	6fc00015 	stw	ra,0(r13)
10009ecc:	5bc00015 	stw	r15,0(r11)
10009ed0:	4b800015 	stw	r14,0(r9)
10009ed4:	18c00404 	addi	r3,r3,16
10009ed8:	39c00404 	addi	r7,r7,16
10009edc:	42000404 	addi	r8,r8,16
10009ee0:	6b400404 	addi	r13,r13,16
10009ee4:	63000404 	addi	r12,r12,16
10009ee8:	5ac00404 	addi	r11,r11,16
10009eec:	52800404 	addi	r10,r10,16
10009ef0:	4a400404 	addi	r9,r9,16
10009ef4:	1c3fef1e 	bne	r3,r16,10009eb4 <__alt_data_end+0xf8009eb4>
10009ef8:	89c00044 	addi	r7,r17,1
10009efc:	380e913a 	slli	r7,r7,4
10009f00:	310003cc 	andi	r4,r6,15
10009f04:	02c000c4 	movi	r11,3
10009f08:	11c7883a 	add	r3,r2,r7
10009f0c:	29cb883a 	add	r5,r5,r7
10009f10:	5900212e 	bgeu	r11,r4,10009f98 <memcpy+0x140>
10009f14:	1813883a 	mov	r9,r3
10009f18:	2811883a 	mov	r8,r5
10009f1c:	200f883a 	mov	r7,r4
10009f20:	42800017 	ldw	r10,0(r8)
10009f24:	4a400104 	addi	r9,r9,4
10009f28:	39ffff04 	addi	r7,r7,-4
10009f2c:	4abfff15 	stw	r10,-4(r9)
10009f30:	42000104 	addi	r8,r8,4
10009f34:	59fffa36 	bltu	r11,r7,10009f20 <__alt_data_end+0xf8009f20>
10009f38:	213fff04 	addi	r4,r4,-4
10009f3c:	2008d0ba 	srli	r4,r4,2
10009f40:	318000cc 	andi	r6,r6,3
10009f44:	21000044 	addi	r4,r4,1
10009f48:	2109883a 	add	r4,r4,r4
10009f4c:	2109883a 	add	r4,r4,r4
10009f50:	1907883a 	add	r3,r3,r4
10009f54:	290b883a 	add	r5,r5,r4
10009f58:	30000626 	beq	r6,zero,10009f74 <memcpy+0x11c>
10009f5c:	198d883a 	add	r6,r3,r6
10009f60:	29c00003 	ldbu	r7,0(r5)
10009f64:	18c00044 	addi	r3,r3,1
10009f68:	29400044 	addi	r5,r5,1
10009f6c:	19ffffc5 	stb	r7,-1(r3)
10009f70:	19bffb1e 	bne	r3,r6,10009f60 <__alt_data_end+0xf8009f60>
10009f74:	dfc00217 	ldw	ra,8(sp)
10009f78:	dc400117 	ldw	r17,4(sp)
10009f7c:	dc000017 	ldw	r16,0(sp)
10009f80:	dec00304 	addi	sp,sp,12
10009f84:	f800283a 	ret
10009f88:	2007883a 	mov	r3,r4
10009f8c:	003ff206 	br	10009f58 <__alt_data_end+0xf8009f58>
10009f90:	2007883a 	mov	r3,r4
10009f94:	003ff106 	br	10009f5c <__alt_data_end+0xf8009f5c>
10009f98:	200d883a 	mov	r6,r4
10009f9c:	003fee06 	br	10009f58 <__alt_data_end+0xf8009f58>

10009fa0 <memmove>:
10009fa0:	2005883a 	mov	r2,r4
10009fa4:	29000b2e 	bgeu	r5,r4,10009fd4 <memmove+0x34>
10009fa8:	298f883a 	add	r7,r5,r6
10009fac:	21c0092e 	bgeu	r4,r7,10009fd4 <memmove+0x34>
10009fb0:	2187883a 	add	r3,r4,r6
10009fb4:	198bc83a 	sub	r5,r3,r6
10009fb8:	30004826 	beq	r6,zero,1000a0dc <memmove+0x13c>
10009fbc:	39ffffc4 	addi	r7,r7,-1
10009fc0:	39000003 	ldbu	r4,0(r7)
10009fc4:	18ffffc4 	addi	r3,r3,-1
10009fc8:	19000005 	stb	r4,0(r3)
10009fcc:	28fffb1e 	bne	r5,r3,10009fbc <__alt_data_end+0xf8009fbc>
10009fd0:	f800283a 	ret
10009fd4:	00c003c4 	movi	r3,15
10009fd8:	1980412e 	bgeu	r3,r6,1000a0e0 <memmove+0x140>
10009fdc:	2886b03a 	or	r3,r5,r2
10009fe0:	18c000cc 	andi	r3,r3,3
10009fe4:	1800401e 	bne	r3,zero,1000a0e8 <memmove+0x148>
10009fe8:	33fffc04 	addi	r15,r6,-16
10009fec:	781ed13a 	srli	r15,r15,4
10009ff0:	28c00104 	addi	r3,r5,4
10009ff4:	13400104 	addi	r13,r2,4
10009ff8:	781c913a 	slli	r14,r15,4
10009ffc:	2b000204 	addi	r12,r5,8
1000a000:	12c00204 	addi	r11,r2,8
1000a004:	73800504 	addi	r14,r14,20
1000a008:	2a800304 	addi	r10,r5,12
1000a00c:	12400304 	addi	r9,r2,12
1000a010:	2b9d883a 	add	r14,r5,r14
1000a014:	2811883a 	mov	r8,r5
1000a018:	100f883a 	mov	r7,r2
1000a01c:	41000017 	ldw	r4,0(r8)
1000a020:	39c00404 	addi	r7,r7,16
1000a024:	18c00404 	addi	r3,r3,16
1000a028:	393ffc15 	stw	r4,-16(r7)
1000a02c:	193ffc17 	ldw	r4,-16(r3)
1000a030:	6b400404 	addi	r13,r13,16
1000a034:	5ac00404 	addi	r11,r11,16
1000a038:	693ffc15 	stw	r4,-16(r13)
1000a03c:	61000017 	ldw	r4,0(r12)
1000a040:	4a400404 	addi	r9,r9,16
1000a044:	42000404 	addi	r8,r8,16
1000a048:	593ffc15 	stw	r4,-16(r11)
1000a04c:	51000017 	ldw	r4,0(r10)
1000a050:	63000404 	addi	r12,r12,16
1000a054:	52800404 	addi	r10,r10,16
1000a058:	493ffc15 	stw	r4,-16(r9)
1000a05c:	1bbfef1e 	bne	r3,r14,1000a01c <__alt_data_end+0xf800a01c>
1000a060:	79000044 	addi	r4,r15,1
1000a064:	2008913a 	slli	r4,r4,4
1000a068:	328003cc 	andi	r10,r6,15
1000a06c:	02c000c4 	movi	r11,3
1000a070:	1107883a 	add	r3,r2,r4
1000a074:	290b883a 	add	r5,r5,r4
1000a078:	5a801e2e 	bgeu	r11,r10,1000a0f4 <memmove+0x154>
1000a07c:	1813883a 	mov	r9,r3
1000a080:	2811883a 	mov	r8,r5
1000a084:	500f883a 	mov	r7,r10
1000a088:	41000017 	ldw	r4,0(r8)
1000a08c:	4a400104 	addi	r9,r9,4
1000a090:	39ffff04 	addi	r7,r7,-4
1000a094:	493fff15 	stw	r4,-4(r9)
1000a098:	42000104 	addi	r8,r8,4
1000a09c:	59fffa36 	bltu	r11,r7,1000a088 <__alt_data_end+0xf800a088>
1000a0a0:	513fff04 	addi	r4,r10,-4
1000a0a4:	2008d0ba 	srli	r4,r4,2
1000a0a8:	318000cc 	andi	r6,r6,3
1000a0ac:	21000044 	addi	r4,r4,1
1000a0b0:	2109883a 	add	r4,r4,r4
1000a0b4:	2109883a 	add	r4,r4,r4
1000a0b8:	1907883a 	add	r3,r3,r4
1000a0bc:	290b883a 	add	r5,r5,r4
1000a0c0:	30000b26 	beq	r6,zero,1000a0f0 <memmove+0x150>
1000a0c4:	198d883a 	add	r6,r3,r6
1000a0c8:	29c00003 	ldbu	r7,0(r5)
1000a0cc:	18c00044 	addi	r3,r3,1
1000a0d0:	29400044 	addi	r5,r5,1
1000a0d4:	19ffffc5 	stb	r7,-1(r3)
1000a0d8:	19bffb1e 	bne	r3,r6,1000a0c8 <__alt_data_end+0xf800a0c8>
1000a0dc:	f800283a 	ret
1000a0e0:	1007883a 	mov	r3,r2
1000a0e4:	003ff606 	br	1000a0c0 <__alt_data_end+0xf800a0c0>
1000a0e8:	1007883a 	mov	r3,r2
1000a0ec:	003ff506 	br	1000a0c4 <__alt_data_end+0xf800a0c4>
1000a0f0:	f800283a 	ret
1000a0f4:	500d883a 	mov	r6,r10
1000a0f8:	003ff106 	br	1000a0c0 <__alt_data_end+0xf800a0c0>

1000a0fc <memset>:
1000a0fc:	20c000cc 	andi	r3,r4,3
1000a100:	2005883a 	mov	r2,r4
1000a104:	18004426 	beq	r3,zero,1000a218 <memset+0x11c>
1000a108:	31ffffc4 	addi	r7,r6,-1
1000a10c:	30004026 	beq	r6,zero,1000a210 <memset+0x114>
1000a110:	2813883a 	mov	r9,r5
1000a114:	200d883a 	mov	r6,r4
1000a118:	2007883a 	mov	r3,r4
1000a11c:	00000406 	br	1000a130 <memset+0x34>
1000a120:	3a3fffc4 	addi	r8,r7,-1
1000a124:	31800044 	addi	r6,r6,1
1000a128:	38003926 	beq	r7,zero,1000a210 <memset+0x114>
1000a12c:	400f883a 	mov	r7,r8
1000a130:	18c00044 	addi	r3,r3,1
1000a134:	32400005 	stb	r9,0(r6)
1000a138:	1a0000cc 	andi	r8,r3,3
1000a13c:	403ff81e 	bne	r8,zero,1000a120 <__alt_data_end+0xf800a120>
1000a140:	010000c4 	movi	r4,3
1000a144:	21c02d2e 	bgeu	r4,r7,1000a1fc <memset+0x100>
1000a148:	29003fcc 	andi	r4,r5,255
1000a14c:	200c923a 	slli	r6,r4,8
1000a150:	3108b03a 	or	r4,r6,r4
1000a154:	200c943a 	slli	r6,r4,16
1000a158:	218cb03a 	or	r6,r4,r6
1000a15c:	010003c4 	movi	r4,15
1000a160:	21c0182e 	bgeu	r4,r7,1000a1c4 <memset+0xc8>
1000a164:	3b3ffc04 	addi	r12,r7,-16
1000a168:	6018d13a 	srli	r12,r12,4
1000a16c:	1a000104 	addi	r8,r3,4
1000a170:	1ac00204 	addi	r11,r3,8
1000a174:	6008913a 	slli	r4,r12,4
1000a178:	1a800304 	addi	r10,r3,12
1000a17c:	1813883a 	mov	r9,r3
1000a180:	21000504 	addi	r4,r4,20
1000a184:	1909883a 	add	r4,r3,r4
1000a188:	49800015 	stw	r6,0(r9)
1000a18c:	41800015 	stw	r6,0(r8)
1000a190:	59800015 	stw	r6,0(r11)
1000a194:	51800015 	stw	r6,0(r10)
1000a198:	42000404 	addi	r8,r8,16
1000a19c:	4a400404 	addi	r9,r9,16
1000a1a0:	5ac00404 	addi	r11,r11,16
1000a1a4:	52800404 	addi	r10,r10,16
1000a1a8:	413ff71e 	bne	r8,r4,1000a188 <__alt_data_end+0xf800a188>
1000a1ac:	63000044 	addi	r12,r12,1
1000a1b0:	6018913a 	slli	r12,r12,4
1000a1b4:	39c003cc 	andi	r7,r7,15
1000a1b8:	010000c4 	movi	r4,3
1000a1bc:	1b07883a 	add	r3,r3,r12
1000a1c0:	21c00e2e 	bgeu	r4,r7,1000a1fc <memset+0x100>
1000a1c4:	1813883a 	mov	r9,r3
1000a1c8:	3811883a 	mov	r8,r7
1000a1cc:	010000c4 	movi	r4,3
1000a1d0:	49800015 	stw	r6,0(r9)
1000a1d4:	423fff04 	addi	r8,r8,-4
1000a1d8:	4a400104 	addi	r9,r9,4
1000a1dc:	223ffc36 	bltu	r4,r8,1000a1d0 <__alt_data_end+0xf800a1d0>
1000a1e0:	393fff04 	addi	r4,r7,-4
1000a1e4:	2008d0ba 	srli	r4,r4,2
1000a1e8:	39c000cc 	andi	r7,r7,3
1000a1ec:	21000044 	addi	r4,r4,1
1000a1f0:	2109883a 	add	r4,r4,r4
1000a1f4:	2109883a 	add	r4,r4,r4
1000a1f8:	1907883a 	add	r3,r3,r4
1000a1fc:	38000526 	beq	r7,zero,1000a214 <memset+0x118>
1000a200:	19cf883a 	add	r7,r3,r7
1000a204:	19400005 	stb	r5,0(r3)
1000a208:	18c00044 	addi	r3,r3,1
1000a20c:	38fffd1e 	bne	r7,r3,1000a204 <__alt_data_end+0xf800a204>
1000a210:	f800283a 	ret
1000a214:	f800283a 	ret
1000a218:	2007883a 	mov	r3,r4
1000a21c:	300f883a 	mov	r7,r6
1000a220:	003fc706 	br	1000a140 <__alt_data_end+0xf800a140>

1000a224 <_Balloc>:
1000a224:	20801317 	ldw	r2,76(r4)
1000a228:	defffc04 	addi	sp,sp,-16
1000a22c:	dc400115 	stw	r17,4(sp)
1000a230:	dc000015 	stw	r16,0(sp)
1000a234:	dfc00315 	stw	ra,12(sp)
1000a238:	dc800215 	stw	r18,8(sp)
1000a23c:	2023883a 	mov	r17,r4
1000a240:	2821883a 	mov	r16,r5
1000a244:	10000f26 	beq	r2,zero,1000a284 <_Balloc+0x60>
1000a248:	8407883a 	add	r3,r16,r16
1000a24c:	18c7883a 	add	r3,r3,r3
1000a250:	10c7883a 	add	r3,r2,r3
1000a254:	18800017 	ldw	r2,0(r3)
1000a258:	10001126 	beq	r2,zero,1000a2a0 <_Balloc+0x7c>
1000a25c:	11000017 	ldw	r4,0(r2)
1000a260:	19000015 	stw	r4,0(r3)
1000a264:	10000415 	stw	zero,16(r2)
1000a268:	10000315 	stw	zero,12(r2)
1000a26c:	dfc00317 	ldw	ra,12(sp)
1000a270:	dc800217 	ldw	r18,8(sp)
1000a274:	dc400117 	ldw	r17,4(sp)
1000a278:	dc000017 	ldw	r16,0(sp)
1000a27c:	dec00404 	addi	sp,sp,16
1000a280:	f800283a 	ret
1000a284:	01800844 	movi	r6,33
1000a288:	01400104 	movi	r5,4
1000a28c:	000d2780 	call	1000d278 <_calloc_r>
1000a290:	88801315 	stw	r2,76(r17)
1000a294:	103fec1e 	bne	r2,zero,1000a248 <__alt_data_end+0xf800a248>
1000a298:	0005883a 	mov	r2,zero
1000a29c:	003ff306 	br	1000a26c <__alt_data_end+0xf800a26c>
1000a2a0:	01400044 	movi	r5,1
1000a2a4:	2c24983a 	sll	r18,r5,r16
1000a2a8:	8809883a 	mov	r4,r17
1000a2ac:	91800144 	addi	r6,r18,5
1000a2b0:	318d883a 	add	r6,r6,r6
1000a2b4:	318d883a 	add	r6,r6,r6
1000a2b8:	000d2780 	call	1000d278 <_calloc_r>
1000a2bc:	103ff626 	beq	r2,zero,1000a298 <__alt_data_end+0xf800a298>
1000a2c0:	14000115 	stw	r16,4(r2)
1000a2c4:	14800215 	stw	r18,8(r2)
1000a2c8:	003fe606 	br	1000a264 <__alt_data_end+0xf800a264>

1000a2cc <_Bfree>:
1000a2cc:	28000826 	beq	r5,zero,1000a2f0 <_Bfree+0x24>
1000a2d0:	28c00117 	ldw	r3,4(r5)
1000a2d4:	20801317 	ldw	r2,76(r4)
1000a2d8:	18c7883a 	add	r3,r3,r3
1000a2dc:	18c7883a 	add	r3,r3,r3
1000a2e0:	10c5883a 	add	r2,r2,r3
1000a2e4:	10c00017 	ldw	r3,0(r2)
1000a2e8:	28c00015 	stw	r3,0(r5)
1000a2ec:	11400015 	stw	r5,0(r2)
1000a2f0:	f800283a 	ret

1000a2f4 <__multadd>:
1000a2f4:	defff704 	addi	sp,sp,-36
1000a2f8:	dc800215 	stw	r18,8(sp)
1000a2fc:	2c800417 	ldw	r18,16(r5)
1000a300:	dd800615 	stw	r22,24(sp)
1000a304:	dd400515 	stw	r21,20(sp)
1000a308:	dd000415 	stw	r20,16(sp)
1000a30c:	dcc00315 	stw	r19,12(sp)
1000a310:	dc400115 	stw	r17,4(sp)
1000a314:	dc000015 	stw	r16,0(sp)
1000a318:	dfc00815 	stw	ra,32(sp)
1000a31c:	ddc00715 	stw	r23,28(sp)
1000a320:	2827883a 	mov	r19,r5
1000a324:	2029883a 	mov	r20,r4
1000a328:	3023883a 	mov	r17,r6
1000a32c:	3821883a 	mov	r16,r7
1000a330:	2d400504 	addi	r21,r5,20
1000a334:	002d883a 	mov	r22,zero
1000a338:	adc00017 	ldw	r23,0(r21)
1000a33c:	880b883a 	mov	r5,r17
1000a340:	ad400104 	addi	r21,r21,4
1000a344:	b93fffcc 	andi	r4,r23,65535
1000a348:	000e8840 	call	1000e884 <__mulsi3>
1000a34c:	b808d43a 	srli	r4,r23,16
1000a350:	880b883a 	mov	r5,r17
1000a354:	1421883a 	add	r16,r2,r16
1000a358:	000e8840 	call	1000e884 <__mulsi3>
1000a35c:	800ed43a 	srli	r7,r16,16
1000a360:	80ffffcc 	andi	r3,r16,65535
1000a364:	b5800044 	addi	r22,r22,1
1000a368:	11c5883a 	add	r2,r2,r7
1000a36c:	100e943a 	slli	r7,r2,16
1000a370:	1020d43a 	srli	r16,r2,16
1000a374:	38c7883a 	add	r3,r7,r3
1000a378:	a8ffff15 	stw	r3,-4(r21)
1000a37c:	b4bfee16 	blt	r22,r18,1000a338 <__alt_data_end+0xf800a338>
1000a380:	80000926 	beq	r16,zero,1000a3a8 <__multadd+0xb4>
1000a384:	98800217 	ldw	r2,8(r19)
1000a388:	9080130e 	bge	r18,r2,1000a3d8 <__multadd+0xe4>
1000a38c:	90800144 	addi	r2,r18,5
1000a390:	1085883a 	add	r2,r2,r2
1000a394:	1085883a 	add	r2,r2,r2
1000a398:	9885883a 	add	r2,r19,r2
1000a39c:	14000015 	stw	r16,0(r2)
1000a3a0:	94800044 	addi	r18,r18,1
1000a3a4:	9c800415 	stw	r18,16(r19)
1000a3a8:	9805883a 	mov	r2,r19
1000a3ac:	dfc00817 	ldw	ra,32(sp)
1000a3b0:	ddc00717 	ldw	r23,28(sp)
1000a3b4:	dd800617 	ldw	r22,24(sp)
1000a3b8:	dd400517 	ldw	r21,20(sp)
1000a3bc:	dd000417 	ldw	r20,16(sp)
1000a3c0:	dcc00317 	ldw	r19,12(sp)
1000a3c4:	dc800217 	ldw	r18,8(sp)
1000a3c8:	dc400117 	ldw	r17,4(sp)
1000a3cc:	dc000017 	ldw	r16,0(sp)
1000a3d0:	dec00904 	addi	sp,sp,36
1000a3d4:	f800283a 	ret
1000a3d8:	99400117 	ldw	r5,4(r19)
1000a3dc:	a009883a 	mov	r4,r20
1000a3e0:	29400044 	addi	r5,r5,1
1000a3e4:	000a2240 	call	1000a224 <_Balloc>
1000a3e8:	99800417 	ldw	r6,16(r19)
1000a3ec:	99400304 	addi	r5,r19,12
1000a3f0:	11000304 	addi	r4,r2,12
1000a3f4:	31800084 	addi	r6,r6,2
1000a3f8:	318d883a 	add	r6,r6,r6
1000a3fc:	318d883a 	add	r6,r6,r6
1000a400:	1023883a 	mov	r17,r2
1000a404:	0009e580 	call	10009e58 <memcpy>
1000a408:	98000a26 	beq	r19,zero,1000a434 <__multadd+0x140>
1000a40c:	98c00117 	ldw	r3,4(r19)
1000a410:	a0801317 	ldw	r2,76(r20)
1000a414:	18c7883a 	add	r3,r3,r3
1000a418:	18c7883a 	add	r3,r3,r3
1000a41c:	10c5883a 	add	r2,r2,r3
1000a420:	10c00017 	ldw	r3,0(r2)
1000a424:	98c00015 	stw	r3,0(r19)
1000a428:	14c00015 	stw	r19,0(r2)
1000a42c:	8827883a 	mov	r19,r17
1000a430:	003fd606 	br	1000a38c <__alt_data_end+0xf800a38c>
1000a434:	8827883a 	mov	r19,r17
1000a438:	003fd406 	br	1000a38c <__alt_data_end+0xf800a38c>

1000a43c <__s2b>:
1000a43c:	defff904 	addi	sp,sp,-28
1000a440:	dc400115 	stw	r17,4(sp)
1000a444:	dc000015 	stw	r16,0(sp)
1000a448:	2023883a 	mov	r17,r4
1000a44c:	2821883a 	mov	r16,r5
1000a450:	39000204 	addi	r4,r7,8
1000a454:	01400244 	movi	r5,9
1000a458:	dcc00315 	stw	r19,12(sp)
1000a45c:	dc800215 	stw	r18,8(sp)
1000a460:	dfc00615 	stw	ra,24(sp)
1000a464:	dd400515 	stw	r21,20(sp)
1000a468:	dd000415 	stw	r20,16(sp)
1000a46c:	3825883a 	mov	r18,r7
1000a470:	3027883a 	mov	r19,r6
1000a474:	000e6d00 	call	1000e6d0 <__divsi3>
1000a478:	00c00044 	movi	r3,1
1000a47c:	000b883a 	mov	r5,zero
1000a480:	1880030e 	bge	r3,r2,1000a490 <__s2b+0x54>
1000a484:	18c7883a 	add	r3,r3,r3
1000a488:	29400044 	addi	r5,r5,1
1000a48c:	18bffd16 	blt	r3,r2,1000a484 <__alt_data_end+0xf800a484>
1000a490:	8809883a 	mov	r4,r17
1000a494:	000a2240 	call	1000a224 <_Balloc>
1000a498:	d8c00717 	ldw	r3,28(sp)
1000a49c:	10c00515 	stw	r3,20(r2)
1000a4a0:	00c00044 	movi	r3,1
1000a4a4:	10c00415 	stw	r3,16(r2)
1000a4a8:	00c00244 	movi	r3,9
1000a4ac:	1cc0210e 	bge	r3,r19,1000a534 <__s2b+0xf8>
1000a4b0:	80eb883a 	add	r21,r16,r3
1000a4b4:	a829883a 	mov	r20,r21
1000a4b8:	84e1883a 	add	r16,r16,r19
1000a4bc:	a1c00007 	ldb	r7,0(r20)
1000a4c0:	01800284 	movi	r6,10
1000a4c4:	a5000044 	addi	r20,r20,1
1000a4c8:	100b883a 	mov	r5,r2
1000a4cc:	39fff404 	addi	r7,r7,-48
1000a4d0:	8809883a 	mov	r4,r17
1000a4d4:	000a2f40 	call	1000a2f4 <__multadd>
1000a4d8:	a43ff81e 	bne	r20,r16,1000a4bc <__alt_data_end+0xf800a4bc>
1000a4dc:	ace1883a 	add	r16,r21,r19
1000a4e0:	843ffe04 	addi	r16,r16,-8
1000a4e4:	9c800a0e 	bge	r19,r18,1000a510 <__s2b+0xd4>
1000a4e8:	94e5c83a 	sub	r18,r18,r19
1000a4ec:	84a5883a 	add	r18,r16,r18
1000a4f0:	81c00007 	ldb	r7,0(r16)
1000a4f4:	01800284 	movi	r6,10
1000a4f8:	84000044 	addi	r16,r16,1
1000a4fc:	100b883a 	mov	r5,r2
1000a500:	39fff404 	addi	r7,r7,-48
1000a504:	8809883a 	mov	r4,r17
1000a508:	000a2f40 	call	1000a2f4 <__multadd>
1000a50c:	84bff81e 	bne	r16,r18,1000a4f0 <__alt_data_end+0xf800a4f0>
1000a510:	dfc00617 	ldw	ra,24(sp)
1000a514:	dd400517 	ldw	r21,20(sp)
1000a518:	dd000417 	ldw	r20,16(sp)
1000a51c:	dcc00317 	ldw	r19,12(sp)
1000a520:	dc800217 	ldw	r18,8(sp)
1000a524:	dc400117 	ldw	r17,4(sp)
1000a528:	dc000017 	ldw	r16,0(sp)
1000a52c:	dec00704 	addi	sp,sp,28
1000a530:	f800283a 	ret
1000a534:	84000284 	addi	r16,r16,10
1000a538:	1827883a 	mov	r19,r3
1000a53c:	003fe906 	br	1000a4e4 <__alt_data_end+0xf800a4e4>

1000a540 <__hi0bits>:
1000a540:	20bfffec 	andhi	r2,r4,65535
1000a544:	1000141e 	bne	r2,zero,1000a598 <__hi0bits+0x58>
1000a548:	2008943a 	slli	r4,r4,16
1000a54c:	00800404 	movi	r2,16
1000a550:	20ffc02c 	andhi	r3,r4,65280
1000a554:	1800021e 	bne	r3,zero,1000a560 <__hi0bits+0x20>
1000a558:	2008923a 	slli	r4,r4,8
1000a55c:	10800204 	addi	r2,r2,8
1000a560:	20fc002c 	andhi	r3,r4,61440
1000a564:	1800021e 	bne	r3,zero,1000a570 <__hi0bits+0x30>
1000a568:	2008913a 	slli	r4,r4,4
1000a56c:	10800104 	addi	r2,r2,4
1000a570:	20f0002c 	andhi	r3,r4,49152
1000a574:	1800031e 	bne	r3,zero,1000a584 <__hi0bits+0x44>
1000a578:	2109883a 	add	r4,r4,r4
1000a57c:	10800084 	addi	r2,r2,2
1000a580:	2109883a 	add	r4,r4,r4
1000a584:	20000316 	blt	r4,zero,1000a594 <__hi0bits+0x54>
1000a588:	2110002c 	andhi	r4,r4,16384
1000a58c:	2000041e 	bne	r4,zero,1000a5a0 <__hi0bits+0x60>
1000a590:	00800804 	movi	r2,32
1000a594:	f800283a 	ret
1000a598:	0005883a 	mov	r2,zero
1000a59c:	003fec06 	br	1000a550 <__alt_data_end+0xf800a550>
1000a5a0:	10800044 	addi	r2,r2,1
1000a5a4:	f800283a 	ret

1000a5a8 <__lo0bits>:
1000a5a8:	20c00017 	ldw	r3,0(r4)
1000a5ac:	188001cc 	andi	r2,r3,7
1000a5b0:	10000826 	beq	r2,zero,1000a5d4 <__lo0bits+0x2c>
1000a5b4:	1880004c 	andi	r2,r3,1
1000a5b8:	1000211e 	bne	r2,zero,1000a640 <__lo0bits+0x98>
1000a5bc:	1880008c 	andi	r2,r3,2
1000a5c0:	1000211e 	bne	r2,zero,1000a648 <__lo0bits+0xa0>
1000a5c4:	1806d0ba 	srli	r3,r3,2
1000a5c8:	00800084 	movi	r2,2
1000a5cc:	20c00015 	stw	r3,0(r4)
1000a5d0:	f800283a 	ret
1000a5d4:	18bfffcc 	andi	r2,r3,65535
1000a5d8:	10001326 	beq	r2,zero,1000a628 <__lo0bits+0x80>
1000a5dc:	0005883a 	mov	r2,zero
1000a5e0:	19403fcc 	andi	r5,r3,255
1000a5e4:	2800021e 	bne	r5,zero,1000a5f0 <__lo0bits+0x48>
1000a5e8:	1806d23a 	srli	r3,r3,8
1000a5ec:	10800204 	addi	r2,r2,8
1000a5f0:	194003cc 	andi	r5,r3,15
1000a5f4:	2800021e 	bne	r5,zero,1000a600 <__lo0bits+0x58>
1000a5f8:	1806d13a 	srli	r3,r3,4
1000a5fc:	10800104 	addi	r2,r2,4
1000a600:	194000cc 	andi	r5,r3,3
1000a604:	2800021e 	bne	r5,zero,1000a610 <__lo0bits+0x68>
1000a608:	1806d0ba 	srli	r3,r3,2
1000a60c:	10800084 	addi	r2,r2,2
1000a610:	1940004c 	andi	r5,r3,1
1000a614:	2800081e 	bne	r5,zero,1000a638 <__lo0bits+0x90>
1000a618:	1806d07a 	srli	r3,r3,1
1000a61c:	1800051e 	bne	r3,zero,1000a634 <__lo0bits+0x8c>
1000a620:	00800804 	movi	r2,32
1000a624:	f800283a 	ret
1000a628:	1806d43a 	srli	r3,r3,16
1000a62c:	00800404 	movi	r2,16
1000a630:	003feb06 	br	1000a5e0 <__alt_data_end+0xf800a5e0>
1000a634:	10800044 	addi	r2,r2,1
1000a638:	20c00015 	stw	r3,0(r4)
1000a63c:	f800283a 	ret
1000a640:	0005883a 	mov	r2,zero
1000a644:	f800283a 	ret
1000a648:	1806d07a 	srli	r3,r3,1
1000a64c:	00800044 	movi	r2,1
1000a650:	20c00015 	stw	r3,0(r4)
1000a654:	f800283a 	ret

1000a658 <__i2b>:
1000a658:	defffd04 	addi	sp,sp,-12
1000a65c:	dc000015 	stw	r16,0(sp)
1000a660:	04000044 	movi	r16,1
1000a664:	dc400115 	stw	r17,4(sp)
1000a668:	2823883a 	mov	r17,r5
1000a66c:	800b883a 	mov	r5,r16
1000a670:	dfc00215 	stw	ra,8(sp)
1000a674:	000a2240 	call	1000a224 <_Balloc>
1000a678:	14400515 	stw	r17,20(r2)
1000a67c:	14000415 	stw	r16,16(r2)
1000a680:	dfc00217 	ldw	ra,8(sp)
1000a684:	dc400117 	ldw	r17,4(sp)
1000a688:	dc000017 	ldw	r16,0(sp)
1000a68c:	dec00304 	addi	sp,sp,12
1000a690:	f800283a 	ret

1000a694 <__multiply>:
1000a694:	deffef04 	addi	sp,sp,-68
1000a698:	dc400815 	stw	r17,32(sp)
1000a69c:	dc000715 	stw	r16,28(sp)
1000a6a0:	34400417 	ldw	r17,16(r6)
1000a6a4:	2c000417 	ldw	r16,16(r5)
1000a6a8:	dd800d15 	stw	r22,52(sp)
1000a6ac:	dc800915 	stw	r18,36(sp)
1000a6b0:	dfc01015 	stw	ra,64(sp)
1000a6b4:	df000f15 	stw	fp,60(sp)
1000a6b8:	ddc00e15 	stw	r23,56(sp)
1000a6bc:	dd400c15 	stw	r21,48(sp)
1000a6c0:	dd000b15 	stw	r20,44(sp)
1000a6c4:	dcc00a15 	stw	r19,40(sp)
1000a6c8:	2825883a 	mov	r18,r5
1000a6cc:	302d883a 	mov	r22,r6
1000a6d0:	8440050e 	bge	r16,r17,1000a6e8 <__multiply+0x54>
1000a6d4:	8007883a 	mov	r3,r16
1000a6d8:	3025883a 	mov	r18,r6
1000a6dc:	8821883a 	mov	r16,r17
1000a6e0:	282d883a 	mov	r22,r5
1000a6e4:	1823883a 	mov	r17,r3
1000a6e8:	90800217 	ldw	r2,8(r18)
1000a6ec:	8447883a 	add	r3,r16,r17
1000a6f0:	d8c00215 	stw	r3,8(sp)
1000a6f4:	91400117 	ldw	r5,4(r18)
1000a6f8:	10c0010e 	bge	r2,r3,1000a700 <__multiply+0x6c>
1000a6fc:	29400044 	addi	r5,r5,1
1000a700:	000a2240 	call	1000a224 <_Balloc>
1000a704:	d8c00217 	ldw	r3,8(sp)
1000a708:	d8800615 	stw	r2,24(sp)
1000a70c:	18eb883a 	add	r21,r3,r3
1000a710:	ad6b883a 	add	r21,r21,r21
1000a714:	10c00504 	addi	r3,r2,20
1000a718:	1d6b883a 	add	r21,r3,r21
1000a71c:	d8c00115 	stw	r3,4(sp)
1000a720:	dd400315 	stw	r21,12(sp)
1000a724:	1805883a 	mov	r2,r3
1000a728:	1d40042e 	bgeu	r3,r21,1000a73c <__multiply+0xa8>
1000a72c:	d8c00317 	ldw	r3,12(sp)
1000a730:	10000015 	stw	zero,0(r2)
1000a734:	10800104 	addi	r2,r2,4
1000a738:	10fffc36 	bltu	r2,r3,1000a72c <__alt_data_end+0xf800a72c>
1000a73c:	8c63883a 	add	r17,r17,r17
1000a740:	b5800504 	addi	r22,r22,20
1000a744:	8c63883a 	add	r17,r17,r17
1000a748:	94800504 	addi	r18,r18,20
1000a74c:	8421883a 	add	r16,r16,r16
1000a750:	b463883a 	add	r17,r22,r17
1000a754:	8421883a 	add	r16,r16,r16
1000a758:	dd800015 	stw	r22,0(sp)
1000a75c:	dc800415 	stw	r18,16(sp)
1000a760:	dc400515 	stw	r17,20(sp)
1000a764:	9429883a 	add	r20,r18,r16
1000a768:	b4404f2e 	bgeu	r22,r17,1000a8a8 <__multiply+0x214>
1000a76c:	d8c00017 	ldw	r3,0(sp)
1000a770:	1c800017 	ldw	r18,0(r3)
1000a774:	947fffcc 	andi	r17,r18,65535
1000a778:	88001e26 	beq	r17,zero,1000a7f4 <__multiply+0x160>
1000a77c:	dd800117 	ldw	r22,4(sp)
1000a780:	dd400417 	ldw	r21,16(sp)
1000a784:	0027883a 	mov	r19,zero
1000a788:	ac800017 	ldw	r18,0(r21)
1000a78c:	b4000017 	ldw	r16,0(r22)
1000a790:	880b883a 	mov	r5,r17
1000a794:	913fffcc 	andi	r4,r18,65535
1000a798:	000e8840 	call	1000e884 <__mulsi3>
1000a79c:	9008d43a 	srli	r4,r18,16
1000a7a0:	84bfffcc 	andi	r18,r16,65535
1000a7a4:	1485883a 	add	r2,r2,r18
1000a7a8:	14e5883a 	add	r18,r2,r19
1000a7ac:	8020d43a 	srli	r16,r16,16
1000a7b0:	9026d43a 	srli	r19,r18,16
1000a7b4:	880b883a 	mov	r5,r17
1000a7b8:	000e8840 	call	1000e884 <__mulsi3>
1000a7bc:	1405883a 	add	r2,r2,r16
1000a7c0:	14e1883a 	add	r16,r2,r19
1000a7c4:	90ffffcc 	andi	r3,r18,65535
1000a7c8:	8024943a 	slli	r18,r16,16
1000a7cc:	ad400104 	addi	r21,r21,4
1000a7d0:	b005883a 	mov	r2,r22
1000a7d4:	90c6b03a 	or	r3,r18,r3
1000a7d8:	b0c00015 	stw	r3,0(r22)
1000a7dc:	8026d43a 	srli	r19,r16,16
1000a7e0:	b5800104 	addi	r22,r22,4
1000a7e4:	ad3fe836 	bltu	r21,r20,1000a788 <__alt_data_end+0xf800a788>
1000a7e8:	d8c00017 	ldw	r3,0(sp)
1000a7ec:	14c00115 	stw	r19,4(r2)
1000a7f0:	1c800017 	ldw	r18,0(r3)
1000a7f4:	9024d43a 	srli	r18,r18,16
1000a7f8:	90002226 	beq	r18,zero,1000a884 <__multiply+0x1f0>
1000a7fc:	d8c00117 	ldw	r3,4(sp)
1000a800:	dd800417 	ldw	r22,16(sp)
1000a804:	002f883a 	mov	r23,zero
1000a808:	1f000017 	ldw	fp,0(r3)
1000a80c:	1823883a 	mov	r17,r3
1000a810:	182b883a 	mov	r21,r3
1000a814:	e021883a 	mov	r16,fp
1000a818:	00000106 	br	1000a820 <__multiply+0x18c>
1000a81c:	982b883a 	mov	r21,r19
1000a820:	b100000b 	ldhu	r4,0(r22)
1000a824:	8020d43a 	srli	r16,r16,16
1000a828:	900b883a 	mov	r5,r18
1000a82c:	000e8840 	call	1000e884 <__mulsi3>
1000a830:	1405883a 	add	r2,r2,r16
1000a834:	15ef883a 	add	r23,r2,r23
1000a838:	b804943a 	slli	r2,r23,16
1000a83c:	e0ffffcc 	andi	r3,fp,65535
1000a840:	8c400104 	addi	r17,r17,4
1000a844:	10c6b03a 	or	r3,r2,r3
1000a848:	88ffff15 	stw	r3,-4(r17)
1000a84c:	b5800104 	addi	r22,r22,4
1000a850:	b13fff17 	ldw	r4,-4(r22)
1000a854:	acc00104 	addi	r19,r21,4
1000a858:	900b883a 	mov	r5,r18
1000a85c:	2008d43a 	srli	r4,r4,16
1000a860:	9c000017 	ldw	r16,0(r19)
1000a864:	000e8840 	call	1000e884 <__mulsi3>
1000a868:	b806d43a 	srli	r3,r23,16
1000a86c:	813fffcc 	andi	r4,r16,65535
1000a870:	1105883a 	add	r2,r2,r4
1000a874:	10f9883a 	add	fp,r2,r3
1000a878:	e02ed43a 	srli	r23,fp,16
1000a87c:	b53fe736 	bltu	r22,r20,1000a81c <__alt_data_end+0xf800a81c>
1000a880:	af000115 	stw	fp,4(r21)
1000a884:	d8c00017 	ldw	r3,0(sp)
1000a888:	d9000517 	ldw	r4,20(sp)
1000a88c:	18c00104 	addi	r3,r3,4
1000a890:	d8c00015 	stw	r3,0(sp)
1000a894:	d8c00117 	ldw	r3,4(sp)
1000a898:	18c00104 	addi	r3,r3,4
1000a89c:	d8c00115 	stw	r3,4(sp)
1000a8a0:	d8c00017 	ldw	r3,0(sp)
1000a8a4:	193fb136 	bltu	r3,r4,1000a76c <__alt_data_end+0xf800a76c>
1000a8a8:	d8c00217 	ldw	r3,8(sp)
1000a8ac:	00c00c0e 	bge	zero,r3,1000a8e0 <__multiply+0x24c>
1000a8b0:	d8c00317 	ldw	r3,12(sp)
1000a8b4:	18bfff17 	ldw	r2,-4(r3)
1000a8b8:	1d7fff04 	addi	r21,r3,-4
1000a8bc:	10000326 	beq	r2,zero,1000a8cc <__multiply+0x238>
1000a8c0:	00000706 	br	1000a8e0 <__multiply+0x24c>
1000a8c4:	a8800017 	ldw	r2,0(r21)
1000a8c8:	1000051e 	bne	r2,zero,1000a8e0 <__multiply+0x24c>
1000a8cc:	d8c00217 	ldw	r3,8(sp)
1000a8d0:	ad7fff04 	addi	r21,r21,-4
1000a8d4:	18ffffc4 	addi	r3,r3,-1
1000a8d8:	d8c00215 	stw	r3,8(sp)
1000a8dc:	183ff91e 	bne	r3,zero,1000a8c4 <__alt_data_end+0xf800a8c4>
1000a8e0:	d8c00617 	ldw	r3,24(sp)
1000a8e4:	d9000217 	ldw	r4,8(sp)
1000a8e8:	1805883a 	mov	r2,r3
1000a8ec:	19000415 	stw	r4,16(r3)
1000a8f0:	dfc01017 	ldw	ra,64(sp)
1000a8f4:	df000f17 	ldw	fp,60(sp)
1000a8f8:	ddc00e17 	ldw	r23,56(sp)
1000a8fc:	dd800d17 	ldw	r22,52(sp)
1000a900:	dd400c17 	ldw	r21,48(sp)
1000a904:	dd000b17 	ldw	r20,44(sp)
1000a908:	dcc00a17 	ldw	r19,40(sp)
1000a90c:	dc800917 	ldw	r18,36(sp)
1000a910:	dc400817 	ldw	r17,32(sp)
1000a914:	dc000717 	ldw	r16,28(sp)
1000a918:	dec01104 	addi	sp,sp,68
1000a91c:	f800283a 	ret

1000a920 <__pow5mult>:
1000a920:	defffa04 	addi	sp,sp,-24
1000a924:	dcc00315 	stw	r19,12(sp)
1000a928:	dc000015 	stw	r16,0(sp)
1000a92c:	dfc00515 	stw	ra,20(sp)
1000a930:	dd000415 	stw	r20,16(sp)
1000a934:	dc800215 	stw	r18,8(sp)
1000a938:	dc400115 	stw	r17,4(sp)
1000a93c:	308000cc 	andi	r2,r6,3
1000a940:	3021883a 	mov	r16,r6
1000a944:	2027883a 	mov	r19,r4
1000a948:	10002f1e 	bne	r2,zero,1000aa08 <__pow5mult+0xe8>
1000a94c:	2825883a 	mov	r18,r5
1000a950:	8021d0ba 	srai	r16,r16,2
1000a954:	80001a26 	beq	r16,zero,1000a9c0 <__pow5mult+0xa0>
1000a958:	9c401217 	ldw	r17,72(r19)
1000a95c:	8800061e 	bne	r17,zero,1000a978 <__pow5mult+0x58>
1000a960:	00003406 	br	1000aa34 <__pow5mult+0x114>
1000a964:	8021d07a 	srai	r16,r16,1
1000a968:	80001526 	beq	r16,zero,1000a9c0 <__pow5mult+0xa0>
1000a96c:	88800017 	ldw	r2,0(r17)
1000a970:	10001c26 	beq	r2,zero,1000a9e4 <__pow5mult+0xc4>
1000a974:	1023883a 	mov	r17,r2
1000a978:	8080004c 	andi	r2,r16,1
1000a97c:	103ff926 	beq	r2,zero,1000a964 <__alt_data_end+0xf800a964>
1000a980:	880d883a 	mov	r6,r17
1000a984:	900b883a 	mov	r5,r18
1000a988:	9809883a 	mov	r4,r19
1000a98c:	000a6940 	call	1000a694 <__multiply>
1000a990:	90001b26 	beq	r18,zero,1000aa00 <__pow5mult+0xe0>
1000a994:	91000117 	ldw	r4,4(r18)
1000a998:	98c01317 	ldw	r3,76(r19)
1000a99c:	8021d07a 	srai	r16,r16,1
1000a9a0:	2109883a 	add	r4,r4,r4
1000a9a4:	2109883a 	add	r4,r4,r4
1000a9a8:	1907883a 	add	r3,r3,r4
1000a9ac:	19000017 	ldw	r4,0(r3)
1000a9b0:	91000015 	stw	r4,0(r18)
1000a9b4:	1c800015 	stw	r18,0(r3)
1000a9b8:	1025883a 	mov	r18,r2
1000a9bc:	803feb1e 	bne	r16,zero,1000a96c <__alt_data_end+0xf800a96c>
1000a9c0:	9005883a 	mov	r2,r18
1000a9c4:	dfc00517 	ldw	ra,20(sp)
1000a9c8:	dd000417 	ldw	r20,16(sp)
1000a9cc:	dcc00317 	ldw	r19,12(sp)
1000a9d0:	dc800217 	ldw	r18,8(sp)
1000a9d4:	dc400117 	ldw	r17,4(sp)
1000a9d8:	dc000017 	ldw	r16,0(sp)
1000a9dc:	dec00604 	addi	sp,sp,24
1000a9e0:	f800283a 	ret
1000a9e4:	880d883a 	mov	r6,r17
1000a9e8:	880b883a 	mov	r5,r17
1000a9ec:	9809883a 	mov	r4,r19
1000a9f0:	000a6940 	call	1000a694 <__multiply>
1000a9f4:	88800015 	stw	r2,0(r17)
1000a9f8:	10000015 	stw	zero,0(r2)
1000a9fc:	003fdd06 	br	1000a974 <__alt_data_end+0xf800a974>
1000aa00:	1025883a 	mov	r18,r2
1000aa04:	003fd706 	br	1000a964 <__alt_data_end+0xf800a964>
1000aa08:	10bfffc4 	addi	r2,r2,-1
1000aa0c:	1085883a 	add	r2,r2,r2
1000aa10:	00c40074 	movhi	r3,4097
1000aa14:	18d06204 	addi	r3,r3,16776
1000aa18:	1085883a 	add	r2,r2,r2
1000aa1c:	1885883a 	add	r2,r3,r2
1000aa20:	11800017 	ldw	r6,0(r2)
1000aa24:	000f883a 	mov	r7,zero
1000aa28:	000a2f40 	call	1000a2f4 <__multadd>
1000aa2c:	1025883a 	mov	r18,r2
1000aa30:	003fc706 	br	1000a950 <__alt_data_end+0xf800a950>
1000aa34:	05000044 	movi	r20,1
1000aa38:	a00b883a 	mov	r5,r20
1000aa3c:	9809883a 	mov	r4,r19
1000aa40:	000a2240 	call	1000a224 <_Balloc>
1000aa44:	1023883a 	mov	r17,r2
1000aa48:	00809c44 	movi	r2,625
1000aa4c:	88800515 	stw	r2,20(r17)
1000aa50:	8d000415 	stw	r20,16(r17)
1000aa54:	9c401215 	stw	r17,72(r19)
1000aa58:	88000015 	stw	zero,0(r17)
1000aa5c:	003fc606 	br	1000a978 <__alt_data_end+0xf800a978>

1000aa60 <__lshift>:
1000aa60:	defff904 	addi	sp,sp,-28
1000aa64:	dd400515 	stw	r21,20(sp)
1000aa68:	dcc00315 	stw	r19,12(sp)
1000aa6c:	302bd17a 	srai	r21,r6,5
1000aa70:	2cc00417 	ldw	r19,16(r5)
1000aa74:	28800217 	ldw	r2,8(r5)
1000aa78:	dd000415 	stw	r20,16(sp)
1000aa7c:	ace7883a 	add	r19,r21,r19
1000aa80:	dc800215 	stw	r18,8(sp)
1000aa84:	dc400115 	stw	r17,4(sp)
1000aa88:	dc000015 	stw	r16,0(sp)
1000aa8c:	dfc00615 	stw	ra,24(sp)
1000aa90:	9c000044 	addi	r16,r19,1
1000aa94:	2823883a 	mov	r17,r5
1000aa98:	3029883a 	mov	r20,r6
1000aa9c:	2025883a 	mov	r18,r4
1000aaa0:	29400117 	ldw	r5,4(r5)
1000aaa4:	1400030e 	bge	r2,r16,1000aab4 <__lshift+0x54>
1000aaa8:	1085883a 	add	r2,r2,r2
1000aaac:	29400044 	addi	r5,r5,1
1000aab0:	143ffd16 	blt	r2,r16,1000aaa8 <__alt_data_end+0xf800aaa8>
1000aab4:	9009883a 	mov	r4,r18
1000aab8:	000a2240 	call	1000a224 <_Balloc>
1000aabc:	10c00504 	addi	r3,r2,20
1000aac0:	0540070e 	bge	zero,r21,1000aae0 <__lshift+0x80>
1000aac4:	ad6b883a 	add	r21,r21,r21
1000aac8:	ad6b883a 	add	r21,r21,r21
1000aacc:	1809883a 	mov	r4,r3
1000aad0:	1d47883a 	add	r3,r3,r21
1000aad4:	20000015 	stw	zero,0(r4)
1000aad8:	21000104 	addi	r4,r4,4
1000aadc:	193ffd1e 	bne	r3,r4,1000aad4 <__alt_data_end+0xf800aad4>
1000aae0:	8a000417 	ldw	r8,16(r17)
1000aae4:	89000504 	addi	r4,r17,20
1000aae8:	a18007cc 	andi	r6,r20,31
1000aaec:	4211883a 	add	r8,r8,r8
1000aaf0:	4211883a 	add	r8,r8,r8
1000aaf4:	2211883a 	add	r8,r4,r8
1000aaf8:	30002326 	beq	r6,zero,1000ab88 <__lshift+0x128>
1000aafc:	02400804 	movi	r9,32
1000ab00:	4993c83a 	sub	r9,r9,r6
1000ab04:	000b883a 	mov	r5,zero
1000ab08:	21c00017 	ldw	r7,0(r4)
1000ab0c:	1815883a 	mov	r10,r3
1000ab10:	18c00104 	addi	r3,r3,4
1000ab14:	398e983a 	sll	r7,r7,r6
1000ab18:	21000104 	addi	r4,r4,4
1000ab1c:	394ab03a 	or	r5,r7,r5
1000ab20:	197fff15 	stw	r5,-4(r3)
1000ab24:	217fff17 	ldw	r5,-4(r4)
1000ab28:	2a4ad83a 	srl	r5,r5,r9
1000ab2c:	223ff636 	bltu	r4,r8,1000ab08 <__alt_data_end+0xf800ab08>
1000ab30:	51400115 	stw	r5,4(r10)
1000ab34:	28001a1e 	bne	r5,zero,1000aba0 <__lshift+0x140>
1000ab38:	843fffc4 	addi	r16,r16,-1
1000ab3c:	14000415 	stw	r16,16(r2)
1000ab40:	88000826 	beq	r17,zero,1000ab64 <__lshift+0x104>
1000ab44:	89000117 	ldw	r4,4(r17)
1000ab48:	90c01317 	ldw	r3,76(r18)
1000ab4c:	2109883a 	add	r4,r4,r4
1000ab50:	2109883a 	add	r4,r4,r4
1000ab54:	1907883a 	add	r3,r3,r4
1000ab58:	19000017 	ldw	r4,0(r3)
1000ab5c:	89000015 	stw	r4,0(r17)
1000ab60:	1c400015 	stw	r17,0(r3)
1000ab64:	dfc00617 	ldw	ra,24(sp)
1000ab68:	dd400517 	ldw	r21,20(sp)
1000ab6c:	dd000417 	ldw	r20,16(sp)
1000ab70:	dcc00317 	ldw	r19,12(sp)
1000ab74:	dc800217 	ldw	r18,8(sp)
1000ab78:	dc400117 	ldw	r17,4(sp)
1000ab7c:	dc000017 	ldw	r16,0(sp)
1000ab80:	dec00704 	addi	sp,sp,28
1000ab84:	f800283a 	ret
1000ab88:	21400017 	ldw	r5,0(r4)
1000ab8c:	18c00104 	addi	r3,r3,4
1000ab90:	21000104 	addi	r4,r4,4
1000ab94:	197fff15 	stw	r5,-4(r3)
1000ab98:	223ffb36 	bltu	r4,r8,1000ab88 <__alt_data_end+0xf800ab88>
1000ab9c:	003fe606 	br	1000ab38 <__alt_data_end+0xf800ab38>
1000aba0:	9c000084 	addi	r16,r19,2
1000aba4:	003fe406 	br	1000ab38 <__alt_data_end+0xf800ab38>

1000aba8 <__mcmp>:
1000aba8:	20800417 	ldw	r2,16(r4)
1000abac:	28c00417 	ldw	r3,16(r5)
1000abb0:	10c5c83a 	sub	r2,r2,r3
1000abb4:	1000111e 	bne	r2,zero,1000abfc <__mcmp+0x54>
1000abb8:	18c7883a 	add	r3,r3,r3
1000abbc:	18c7883a 	add	r3,r3,r3
1000abc0:	21000504 	addi	r4,r4,20
1000abc4:	29400504 	addi	r5,r5,20
1000abc8:	20c5883a 	add	r2,r4,r3
1000abcc:	28cb883a 	add	r5,r5,r3
1000abd0:	00000106 	br	1000abd8 <__mcmp+0x30>
1000abd4:	20800a2e 	bgeu	r4,r2,1000ac00 <__mcmp+0x58>
1000abd8:	10bfff04 	addi	r2,r2,-4
1000abdc:	297fff04 	addi	r5,r5,-4
1000abe0:	11800017 	ldw	r6,0(r2)
1000abe4:	28c00017 	ldw	r3,0(r5)
1000abe8:	30fffa26 	beq	r6,r3,1000abd4 <__alt_data_end+0xf800abd4>
1000abec:	30c00236 	bltu	r6,r3,1000abf8 <__mcmp+0x50>
1000abf0:	00800044 	movi	r2,1
1000abf4:	f800283a 	ret
1000abf8:	00bfffc4 	movi	r2,-1
1000abfc:	f800283a 	ret
1000ac00:	0005883a 	mov	r2,zero
1000ac04:	f800283a 	ret

1000ac08 <__mdiff>:
1000ac08:	28c00417 	ldw	r3,16(r5)
1000ac0c:	30800417 	ldw	r2,16(r6)
1000ac10:	defffa04 	addi	sp,sp,-24
1000ac14:	dcc00315 	stw	r19,12(sp)
1000ac18:	dc800215 	stw	r18,8(sp)
1000ac1c:	dfc00515 	stw	ra,20(sp)
1000ac20:	dd000415 	stw	r20,16(sp)
1000ac24:	dc400115 	stw	r17,4(sp)
1000ac28:	dc000015 	stw	r16,0(sp)
1000ac2c:	1887c83a 	sub	r3,r3,r2
1000ac30:	2825883a 	mov	r18,r5
1000ac34:	3027883a 	mov	r19,r6
1000ac38:	1800141e 	bne	r3,zero,1000ac8c <__mdiff+0x84>
1000ac3c:	1085883a 	add	r2,r2,r2
1000ac40:	1085883a 	add	r2,r2,r2
1000ac44:	2a000504 	addi	r8,r5,20
1000ac48:	34000504 	addi	r16,r6,20
1000ac4c:	4087883a 	add	r3,r8,r2
1000ac50:	8085883a 	add	r2,r16,r2
1000ac54:	00000106 	br	1000ac5c <__mdiff+0x54>
1000ac58:	40c0592e 	bgeu	r8,r3,1000adc0 <__mdiff+0x1b8>
1000ac5c:	18ffff04 	addi	r3,r3,-4
1000ac60:	10bfff04 	addi	r2,r2,-4
1000ac64:	19c00017 	ldw	r7,0(r3)
1000ac68:	11400017 	ldw	r5,0(r2)
1000ac6c:	397ffa26 	beq	r7,r5,1000ac58 <__alt_data_end+0xf800ac58>
1000ac70:	3940592e 	bgeu	r7,r5,1000add8 <__mdiff+0x1d0>
1000ac74:	9005883a 	mov	r2,r18
1000ac78:	4023883a 	mov	r17,r8
1000ac7c:	9825883a 	mov	r18,r19
1000ac80:	05000044 	movi	r20,1
1000ac84:	1027883a 	mov	r19,r2
1000ac88:	00000406 	br	1000ac9c <__mdiff+0x94>
1000ac8c:	18005616 	blt	r3,zero,1000ade8 <__mdiff+0x1e0>
1000ac90:	34400504 	addi	r17,r6,20
1000ac94:	2c000504 	addi	r16,r5,20
1000ac98:	0029883a 	mov	r20,zero
1000ac9c:	91400117 	ldw	r5,4(r18)
1000aca0:	000a2240 	call	1000a224 <_Balloc>
1000aca4:	92400417 	ldw	r9,16(r18)
1000aca8:	9b000417 	ldw	r12,16(r19)
1000acac:	12c00504 	addi	r11,r2,20
1000acb0:	4a51883a 	add	r8,r9,r9
1000acb4:	6319883a 	add	r12,r12,r12
1000acb8:	4211883a 	add	r8,r8,r8
1000acbc:	6319883a 	add	r12,r12,r12
1000acc0:	15000315 	stw	r20,12(r2)
1000acc4:	8211883a 	add	r8,r16,r8
1000acc8:	8b19883a 	add	r12,r17,r12
1000accc:	0007883a 	mov	r3,zero
1000acd0:	81400017 	ldw	r5,0(r16)
1000acd4:	89c00017 	ldw	r7,0(r17)
1000acd8:	59800104 	addi	r6,r11,4
1000acdc:	293fffcc 	andi	r4,r5,65535
1000ace0:	20c7883a 	add	r3,r4,r3
1000ace4:	393fffcc 	andi	r4,r7,65535
1000ace8:	1909c83a 	sub	r4,r3,r4
1000acec:	280ad43a 	srli	r5,r5,16
1000acf0:	380ed43a 	srli	r7,r7,16
1000acf4:	2007d43a 	srai	r3,r4,16
1000acf8:	213fffcc 	andi	r4,r4,65535
1000acfc:	29cbc83a 	sub	r5,r5,r7
1000ad00:	28c7883a 	add	r3,r5,r3
1000ad04:	180a943a 	slli	r5,r3,16
1000ad08:	8c400104 	addi	r17,r17,4
1000ad0c:	84000104 	addi	r16,r16,4
1000ad10:	2908b03a 	or	r4,r5,r4
1000ad14:	59000015 	stw	r4,0(r11)
1000ad18:	1807d43a 	srai	r3,r3,16
1000ad1c:	3015883a 	mov	r10,r6
1000ad20:	3017883a 	mov	r11,r6
1000ad24:	8b3fea36 	bltu	r17,r12,1000acd0 <__alt_data_end+0xf800acd0>
1000ad28:	8200162e 	bgeu	r16,r8,1000ad84 <__mdiff+0x17c>
1000ad2c:	8017883a 	mov	r11,r16
1000ad30:	59400017 	ldw	r5,0(r11)
1000ad34:	31800104 	addi	r6,r6,4
1000ad38:	5ac00104 	addi	r11,r11,4
1000ad3c:	293fffcc 	andi	r4,r5,65535
1000ad40:	20c7883a 	add	r3,r4,r3
1000ad44:	280ed43a 	srli	r7,r5,16
1000ad48:	180bd43a 	srai	r5,r3,16
1000ad4c:	193fffcc 	andi	r4,r3,65535
1000ad50:	3947883a 	add	r3,r7,r5
1000ad54:	180a943a 	slli	r5,r3,16
1000ad58:	1807d43a 	srai	r3,r3,16
1000ad5c:	2908b03a 	or	r4,r5,r4
1000ad60:	313fff15 	stw	r4,-4(r6)
1000ad64:	5a3ff236 	bltu	r11,r8,1000ad30 <__alt_data_end+0xf800ad30>
1000ad68:	0406303a 	nor	r3,zero,r16
1000ad6c:	1a07883a 	add	r3,r3,r8
1000ad70:	1806d0ba 	srli	r3,r3,2
1000ad74:	18c00044 	addi	r3,r3,1
1000ad78:	18c7883a 	add	r3,r3,r3
1000ad7c:	18c7883a 	add	r3,r3,r3
1000ad80:	50d5883a 	add	r10,r10,r3
1000ad84:	50ffff04 	addi	r3,r10,-4
1000ad88:	2000041e 	bne	r4,zero,1000ad9c <__mdiff+0x194>
1000ad8c:	18ffff04 	addi	r3,r3,-4
1000ad90:	19000017 	ldw	r4,0(r3)
1000ad94:	4a7fffc4 	addi	r9,r9,-1
1000ad98:	203ffc26 	beq	r4,zero,1000ad8c <__alt_data_end+0xf800ad8c>
1000ad9c:	12400415 	stw	r9,16(r2)
1000ada0:	dfc00517 	ldw	ra,20(sp)
1000ada4:	dd000417 	ldw	r20,16(sp)
1000ada8:	dcc00317 	ldw	r19,12(sp)
1000adac:	dc800217 	ldw	r18,8(sp)
1000adb0:	dc400117 	ldw	r17,4(sp)
1000adb4:	dc000017 	ldw	r16,0(sp)
1000adb8:	dec00604 	addi	sp,sp,24
1000adbc:	f800283a 	ret
1000adc0:	000b883a 	mov	r5,zero
1000adc4:	000a2240 	call	1000a224 <_Balloc>
1000adc8:	00c00044 	movi	r3,1
1000adcc:	10c00415 	stw	r3,16(r2)
1000add0:	10000515 	stw	zero,20(r2)
1000add4:	003ff206 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000add8:	8023883a 	mov	r17,r16
1000addc:	0029883a 	mov	r20,zero
1000ade0:	4021883a 	mov	r16,r8
1000ade4:	003fad06 	br	1000ac9c <__alt_data_end+0xf800ac9c>
1000ade8:	9005883a 	mov	r2,r18
1000adec:	94400504 	addi	r17,r18,20
1000adf0:	9c000504 	addi	r16,r19,20
1000adf4:	9825883a 	mov	r18,r19
1000adf8:	05000044 	movi	r20,1
1000adfc:	1027883a 	mov	r19,r2
1000ae00:	003fa606 	br	1000ac9c <__alt_data_end+0xf800ac9c>

1000ae04 <__ulp>:
1000ae04:	295ffc2c 	andhi	r5,r5,32752
1000ae08:	00bf3034 	movhi	r2,64704
1000ae0c:	2887883a 	add	r3,r5,r2
1000ae10:	00c0020e 	bge	zero,r3,1000ae1c <__ulp+0x18>
1000ae14:	0005883a 	mov	r2,zero
1000ae18:	f800283a 	ret
1000ae1c:	00c7c83a 	sub	r3,zero,r3
1000ae20:	1807d53a 	srai	r3,r3,20
1000ae24:	008004c4 	movi	r2,19
1000ae28:	10c00b0e 	bge	r2,r3,1000ae58 <__ulp+0x54>
1000ae2c:	18bffb04 	addi	r2,r3,-20
1000ae30:	01000784 	movi	r4,30
1000ae34:	0007883a 	mov	r3,zero
1000ae38:	20800516 	blt	r4,r2,1000ae50 <__ulp+0x4c>
1000ae3c:	010007c4 	movi	r4,31
1000ae40:	2089c83a 	sub	r4,r4,r2
1000ae44:	00800044 	movi	r2,1
1000ae48:	1104983a 	sll	r2,r2,r4
1000ae4c:	f800283a 	ret
1000ae50:	00800044 	movi	r2,1
1000ae54:	f800283a 	ret
1000ae58:	01400234 	movhi	r5,8
1000ae5c:	28c7d83a 	sra	r3,r5,r3
1000ae60:	0005883a 	mov	r2,zero
1000ae64:	f800283a 	ret

1000ae68 <__b2d>:
1000ae68:	defffa04 	addi	sp,sp,-24
1000ae6c:	dc000015 	stw	r16,0(sp)
1000ae70:	24000417 	ldw	r16,16(r4)
1000ae74:	dc400115 	stw	r17,4(sp)
1000ae78:	24400504 	addi	r17,r4,20
1000ae7c:	8421883a 	add	r16,r16,r16
1000ae80:	8421883a 	add	r16,r16,r16
1000ae84:	8c21883a 	add	r16,r17,r16
1000ae88:	dc800215 	stw	r18,8(sp)
1000ae8c:	84bfff17 	ldw	r18,-4(r16)
1000ae90:	dd000415 	stw	r20,16(sp)
1000ae94:	dcc00315 	stw	r19,12(sp)
1000ae98:	9009883a 	mov	r4,r18
1000ae9c:	2829883a 	mov	r20,r5
1000aea0:	dfc00515 	stw	ra,20(sp)
1000aea4:	000a5400 	call	1000a540 <__hi0bits>
1000aea8:	00c00804 	movi	r3,32
1000aeac:	1889c83a 	sub	r4,r3,r2
1000aeb0:	a1000015 	stw	r4,0(r20)
1000aeb4:	01000284 	movi	r4,10
1000aeb8:	84ffff04 	addi	r19,r16,-4
1000aebc:	20801216 	blt	r4,r2,1000af08 <__b2d+0xa0>
1000aec0:	018002c4 	movi	r6,11
1000aec4:	308dc83a 	sub	r6,r6,r2
1000aec8:	9186d83a 	srl	r3,r18,r6
1000aecc:	18cffc34 	orhi	r3,r3,16368
1000aed0:	8cc0212e 	bgeu	r17,r19,1000af58 <__b2d+0xf0>
1000aed4:	813ffe17 	ldw	r4,-8(r16)
1000aed8:	218cd83a 	srl	r6,r4,r6
1000aedc:	10800544 	addi	r2,r2,21
1000aee0:	9084983a 	sll	r2,r18,r2
1000aee4:	1184b03a 	or	r2,r2,r6
1000aee8:	dfc00517 	ldw	ra,20(sp)
1000aeec:	dd000417 	ldw	r20,16(sp)
1000aef0:	dcc00317 	ldw	r19,12(sp)
1000aef4:	dc800217 	ldw	r18,8(sp)
1000aef8:	dc400117 	ldw	r17,4(sp)
1000aefc:	dc000017 	ldw	r16,0(sp)
1000af00:	dec00604 	addi	sp,sp,24
1000af04:	f800283a 	ret
1000af08:	8cc00f2e 	bgeu	r17,r19,1000af48 <__b2d+0xe0>
1000af0c:	117ffd44 	addi	r5,r2,-11
1000af10:	80bffe17 	ldw	r2,-8(r16)
1000af14:	28000e26 	beq	r5,zero,1000af50 <__b2d+0xe8>
1000af18:	1949c83a 	sub	r4,r3,r5
1000af1c:	9164983a 	sll	r18,r18,r5
1000af20:	1106d83a 	srl	r3,r2,r4
1000af24:	81bffe04 	addi	r6,r16,-8
1000af28:	948ffc34 	orhi	r18,r18,16368
1000af2c:	90c6b03a 	or	r3,r18,r3
1000af30:	89800e2e 	bgeu	r17,r6,1000af6c <__b2d+0x104>
1000af34:	81bffd17 	ldw	r6,-12(r16)
1000af38:	1144983a 	sll	r2,r2,r5
1000af3c:	310ad83a 	srl	r5,r6,r4
1000af40:	2884b03a 	or	r2,r5,r2
1000af44:	003fe806 	br	1000aee8 <__alt_data_end+0xf800aee8>
1000af48:	10bffd44 	addi	r2,r2,-11
1000af4c:	1000041e 	bne	r2,zero,1000af60 <__b2d+0xf8>
1000af50:	90cffc34 	orhi	r3,r18,16368
1000af54:	003fe406 	br	1000aee8 <__alt_data_end+0xf800aee8>
1000af58:	000d883a 	mov	r6,zero
1000af5c:	003fdf06 	br	1000aedc <__alt_data_end+0xf800aedc>
1000af60:	90a4983a 	sll	r18,r18,r2
1000af64:	0005883a 	mov	r2,zero
1000af68:	003ff906 	br	1000af50 <__alt_data_end+0xf800af50>
1000af6c:	1144983a 	sll	r2,r2,r5
1000af70:	003fdd06 	br	1000aee8 <__alt_data_end+0xf800aee8>

1000af74 <__d2b>:
1000af74:	defff804 	addi	sp,sp,-32
1000af78:	dc000215 	stw	r16,8(sp)
1000af7c:	3021883a 	mov	r16,r6
1000af80:	dc400315 	stw	r17,12(sp)
1000af84:	8022907a 	slli	r17,r16,1
1000af88:	dd000615 	stw	r20,24(sp)
1000af8c:	2829883a 	mov	r20,r5
1000af90:	01400044 	movi	r5,1
1000af94:	dcc00515 	stw	r19,20(sp)
1000af98:	dc800415 	stw	r18,16(sp)
1000af9c:	dfc00715 	stw	ra,28(sp)
1000afa0:	3825883a 	mov	r18,r7
1000afa4:	8822d57a 	srli	r17,r17,21
1000afa8:	000a2240 	call	1000a224 <_Balloc>
1000afac:	1027883a 	mov	r19,r2
1000afb0:	00800434 	movhi	r2,16
1000afb4:	10bfffc4 	addi	r2,r2,-1
1000afb8:	808c703a 	and	r6,r16,r2
1000afbc:	88000126 	beq	r17,zero,1000afc4 <__d2b+0x50>
1000afc0:	31800434 	orhi	r6,r6,16
1000afc4:	d9800015 	stw	r6,0(sp)
1000afc8:	a0002426 	beq	r20,zero,1000b05c <__d2b+0xe8>
1000afcc:	d9000104 	addi	r4,sp,4
1000afd0:	dd000115 	stw	r20,4(sp)
1000afd4:	000a5a80 	call	1000a5a8 <__lo0bits>
1000afd8:	d8c00017 	ldw	r3,0(sp)
1000afdc:	10002f1e 	bne	r2,zero,1000b09c <__d2b+0x128>
1000afe0:	d9000117 	ldw	r4,4(sp)
1000afe4:	99000515 	stw	r4,20(r19)
1000afe8:	1821003a 	cmpeq	r16,r3,zero
1000afec:	01000084 	movi	r4,2
1000aff0:	2421c83a 	sub	r16,r4,r16
1000aff4:	98c00615 	stw	r3,24(r19)
1000aff8:	9c000415 	stw	r16,16(r19)
1000affc:	88001f1e 	bne	r17,zero,1000b07c <__d2b+0x108>
1000b000:	10bef384 	addi	r2,r2,-1074
1000b004:	90800015 	stw	r2,0(r18)
1000b008:	00900034 	movhi	r2,16384
1000b00c:	10bfffc4 	addi	r2,r2,-1
1000b010:	8085883a 	add	r2,r16,r2
1000b014:	1085883a 	add	r2,r2,r2
1000b018:	1085883a 	add	r2,r2,r2
1000b01c:	9885883a 	add	r2,r19,r2
1000b020:	11000517 	ldw	r4,20(r2)
1000b024:	8020917a 	slli	r16,r16,5
1000b028:	000a5400 	call	1000a540 <__hi0bits>
1000b02c:	d8c00817 	ldw	r3,32(sp)
1000b030:	8085c83a 	sub	r2,r16,r2
1000b034:	18800015 	stw	r2,0(r3)
1000b038:	9805883a 	mov	r2,r19
1000b03c:	dfc00717 	ldw	ra,28(sp)
1000b040:	dd000617 	ldw	r20,24(sp)
1000b044:	dcc00517 	ldw	r19,20(sp)
1000b048:	dc800417 	ldw	r18,16(sp)
1000b04c:	dc400317 	ldw	r17,12(sp)
1000b050:	dc000217 	ldw	r16,8(sp)
1000b054:	dec00804 	addi	sp,sp,32
1000b058:	f800283a 	ret
1000b05c:	d809883a 	mov	r4,sp
1000b060:	000a5a80 	call	1000a5a8 <__lo0bits>
1000b064:	d8c00017 	ldw	r3,0(sp)
1000b068:	04000044 	movi	r16,1
1000b06c:	9c000415 	stw	r16,16(r19)
1000b070:	98c00515 	stw	r3,20(r19)
1000b074:	10800804 	addi	r2,r2,32
1000b078:	883fe126 	beq	r17,zero,1000b000 <__alt_data_end+0xf800b000>
1000b07c:	00c00d44 	movi	r3,53
1000b080:	8c7ef344 	addi	r17,r17,-1075
1000b084:	88a3883a 	add	r17,r17,r2
1000b088:	1885c83a 	sub	r2,r3,r2
1000b08c:	d8c00817 	ldw	r3,32(sp)
1000b090:	94400015 	stw	r17,0(r18)
1000b094:	18800015 	stw	r2,0(r3)
1000b098:	003fe706 	br	1000b038 <__alt_data_end+0xf800b038>
1000b09c:	01000804 	movi	r4,32
1000b0a0:	2089c83a 	sub	r4,r4,r2
1000b0a4:	1908983a 	sll	r4,r3,r4
1000b0a8:	d9400117 	ldw	r5,4(sp)
1000b0ac:	1886d83a 	srl	r3,r3,r2
1000b0b0:	2148b03a 	or	r4,r4,r5
1000b0b4:	99000515 	stw	r4,20(r19)
1000b0b8:	d8c00015 	stw	r3,0(sp)
1000b0bc:	003fca06 	br	1000afe8 <__alt_data_end+0xf800afe8>

1000b0c0 <__ratio>:
1000b0c0:	defff904 	addi	sp,sp,-28
1000b0c4:	dc400315 	stw	r17,12(sp)
1000b0c8:	2823883a 	mov	r17,r5
1000b0cc:	d9400104 	addi	r5,sp,4
1000b0d0:	dfc00615 	stw	ra,24(sp)
1000b0d4:	dcc00515 	stw	r19,20(sp)
1000b0d8:	dc800415 	stw	r18,16(sp)
1000b0dc:	2027883a 	mov	r19,r4
1000b0e0:	dc000215 	stw	r16,8(sp)
1000b0e4:	000ae680 	call	1000ae68 <__b2d>
1000b0e8:	d80b883a 	mov	r5,sp
1000b0ec:	8809883a 	mov	r4,r17
1000b0f0:	1025883a 	mov	r18,r2
1000b0f4:	1821883a 	mov	r16,r3
1000b0f8:	000ae680 	call	1000ae68 <__b2d>
1000b0fc:	8a000417 	ldw	r8,16(r17)
1000b100:	99000417 	ldw	r4,16(r19)
1000b104:	d9400117 	ldw	r5,4(sp)
1000b108:	2209c83a 	sub	r4,r4,r8
1000b10c:	2010917a 	slli	r8,r4,5
1000b110:	d9000017 	ldw	r4,0(sp)
1000b114:	2909c83a 	sub	r4,r5,r4
1000b118:	4109883a 	add	r4,r8,r4
1000b11c:	01000e0e 	bge	zero,r4,1000b158 <__ratio+0x98>
1000b120:	2008953a 	slli	r4,r4,20
1000b124:	2421883a 	add	r16,r4,r16
1000b128:	100d883a 	mov	r6,r2
1000b12c:	180f883a 	mov	r7,r3
1000b130:	9009883a 	mov	r4,r18
1000b134:	800b883a 	mov	r5,r16
1000b138:	000f1580 	call	1000f158 <__divdf3>
1000b13c:	dfc00617 	ldw	ra,24(sp)
1000b140:	dcc00517 	ldw	r19,20(sp)
1000b144:	dc800417 	ldw	r18,16(sp)
1000b148:	dc400317 	ldw	r17,12(sp)
1000b14c:	dc000217 	ldw	r16,8(sp)
1000b150:	dec00704 	addi	sp,sp,28
1000b154:	f800283a 	ret
1000b158:	2008953a 	slli	r4,r4,20
1000b15c:	1907c83a 	sub	r3,r3,r4
1000b160:	003ff106 	br	1000b128 <__alt_data_end+0xf800b128>

1000b164 <_mprec_log10>:
1000b164:	defffe04 	addi	sp,sp,-8
1000b168:	dc000015 	stw	r16,0(sp)
1000b16c:	dfc00115 	stw	ra,4(sp)
1000b170:	008005c4 	movi	r2,23
1000b174:	2021883a 	mov	r16,r4
1000b178:	11000d0e 	bge	r2,r4,1000b1b0 <_mprec_log10+0x4c>
1000b17c:	0005883a 	mov	r2,zero
1000b180:	00cffc34 	movhi	r3,16368
1000b184:	843fffc4 	addi	r16,r16,-1
1000b188:	000d883a 	mov	r6,zero
1000b18c:	01d00934 	movhi	r7,16420
1000b190:	1009883a 	mov	r4,r2
1000b194:	180b883a 	mov	r5,r3
1000b198:	000fd800 	call	1000fd80 <__muldf3>
1000b19c:	803ff91e 	bne	r16,zero,1000b184 <__alt_data_end+0xf800b184>
1000b1a0:	dfc00117 	ldw	ra,4(sp)
1000b1a4:	dc000017 	ldw	r16,0(sp)
1000b1a8:	dec00204 	addi	sp,sp,8
1000b1ac:	f800283a 	ret
1000b1b0:	202090fa 	slli	r16,r4,3
1000b1b4:	00840074 	movhi	r2,4097
1000b1b8:	10907904 	addi	r2,r2,16868
1000b1bc:	1421883a 	add	r16,r2,r16
1000b1c0:	80800017 	ldw	r2,0(r16)
1000b1c4:	80c00117 	ldw	r3,4(r16)
1000b1c8:	dfc00117 	ldw	ra,4(sp)
1000b1cc:	dc000017 	ldw	r16,0(sp)
1000b1d0:	dec00204 	addi	sp,sp,8
1000b1d4:	f800283a 	ret

1000b1d8 <__copybits>:
1000b1d8:	297fffc4 	addi	r5,r5,-1
1000b1dc:	280fd17a 	srai	r7,r5,5
1000b1e0:	30c00417 	ldw	r3,16(r6)
1000b1e4:	30800504 	addi	r2,r6,20
1000b1e8:	39c00044 	addi	r7,r7,1
1000b1ec:	18c7883a 	add	r3,r3,r3
1000b1f0:	39cf883a 	add	r7,r7,r7
1000b1f4:	18c7883a 	add	r3,r3,r3
1000b1f8:	39cf883a 	add	r7,r7,r7
1000b1fc:	10c7883a 	add	r3,r2,r3
1000b200:	21cf883a 	add	r7,r4,r7
1000b204:	10c00d2e 	bgeu	r2,r3,1000b23c <__copybits+0x64>
1000b208:	200b883a 	mov	r5,r4
1000b20c:	12000017 	ldw	r8,0(r2)
1000b210:	29400104 	addi	r5,r5,4
1000b214:	10800104 	addi	r2,r2,4
1000b218:	2a3fff15 	stw	r8,-4(r5)
1000b21c:	10fffb36 	bltu	r2,r3,1000b20c <__alt_data_end+0xf800b20c>
1000b220:	1985c83a 	sub	r2,r3,r6
1000b224:	10bffac4 	addi	r2,r2,-21
1000b228:	1004d0ba 	srli	r2,r2,2
1000b22c:	10800044 	addi	r2,r2,1
1000b230:	1085883a 	add	r2,r2,r2
1000b234:	1085883a 	add	r2,r2,r2
1000b238:	2089883a 	add	r4,r4,r2
1000b23c:	21c0032e 	bgeu	r4,r7,1000b24c <__copybits+0x74>
1000b240:	20000015 	stw	zero,0(r4)
1000b244:	21000104 	addi	r4,r4,4
1000b248:	21fffd36 	bltu	r4,r7,1000b240 <__alt_data_end+0xf800b240>
1000b24c:	f800283a 	ret

1000b250 <__any_on>:
1000b250:	20c00417 	ldw	r3,16(r4)
1000b254:	2805d17a 	srai	r2,r5,5
1000b258:	21000504 	addi	r4,r4,20
1000b25c:	18800d0e 	bge	r3,r2,1000b294 <__any_on+0x44>
1000b260:	18c7883a 	add	r3,r3,r3
1000b264:	18c7883a 	add	r3,r3,r3
1000b268:	20c7883a 	add	r3,r4,r3
1000b26c:	20c0192e 	bgeu	r4,r3,1000b2d4 <__any_on+0x84>
1000b270:	18bfff17 	ldw	r2,-4(r3)
1000b274:	18ffff04 	addi	r3,r3,-4
1000b278:	1000041e 	bne	r2,zero,1000b28c <__any_on+0x3c>
1000b27c:	20c0142e 	bgeu	r4,r3,1000b2d0 <__any_on+0x80>
1000b280:	18ffff04 	addi	r3,r3,-4
1000b284:	19400017 	ldw	r5,0(r3)
1000b288:	283ffc26 	beq	r5,zero,1000b27c <__alt_data_end+0xf800b27c>
1000b28c:	00800044 	movi	r2,1
1000b290:	f800283a 	ret
1000b294:	10c00a0e 	bge	r2,r3,1000b2c0 <__any_on+0x70>
1000b298:	1085883a 	add	r2,r2,r2
1000b29c:	1085883a 	add	r2,r2,r2
1000b2a0:	294007cc 	andi	r5,r5,31
1000b2a4:	2087883a 	add	r3,r4,r2
1000b2a8:	283ff026 	beq	r5,zero,1000b26c <__alt_data_end+0xf800b26c>
1000b2ac:	19800017 	ldw	r6,0(r3)
1000b2b0:	3144d83a 	srl	r2,r6,r5
1000b2b4:	114a983a 	sll	r5,r2,r5
1000b2b8:	317ff41e 	bne	r6,r5,1000b28c <__alt_data_end+0xf800b28c>
1000b2bc:	003feb06 	br	1000b26c <__alt_data_end+0xf800b26c>
1000b2c0:	1085883a 	add	r2,r2,r2
1000b2c4:	1085883a 	add	r2,r2,r2
1000b2c8:	2087883a 	add	r3,r4,r2
1000b2cc:	003fe706 	br	1000b26c <__alt_data_end+0xf800b26c>
1000b2d0:	f800283a 	ret
1000b2d4:	0005883a 	mov	r2,zero
1000b2d8:	f800283a 	ret

1000b2dc <_realloc_r>:
1000b2dc:	defff604 	addi	sp,sp,-40
1000b2e0:	dc800215 	stw	r18,8(sp)
1000b2e4:	dfc00915 	stw	ra,36(sp)
1000b2e8:	df000815 	stw	fp,32(sp)
1000b2ec:	ddc00715 	stw	r23,28(sp)
1000b2f0:	dd800615 	stw	r22,24(sp)
1000b2f4:	dd400515 	stw	r21,20(sp)
1000b2f8:	dd000415 	stw	r20,16(sp)
1000b2fc:	dcc00315 	stw	r19,12(sp)
1000b300:	dc400115 	stw	r17,4(sp)
1000b304:	dc000015 	stw	r16,0(sp)
1000b308:	3025883a 	mov	r18,r6
1000b30c:	2800b726 	beq	r5,zero,1000b5ec <_realloc_r+0x310>
1000b310:	282b883a 	mov	r21,r5
1000b314:	2029883a 	mov	r20,r4
1000b318:	00116ec0 	call	100116ec <__malloc_lock>
1000b31c:	a8bfff17 	ldw	r2,-4(r21)
1000b320:	043fff04 	movi	r16,-4
1000b324:	90c002c4 	addi	r3,r18,11
1000b328:	01000584 	movi	r4,22
1000b32c:	acfffe04 	addi	r19,r21,-8
1000b330:	1420703a 	and	r16,r2,r16
1000b334:	20c0332e 	bgeu	r4,r3,1000b404 <_realloc_r+0x128>
1000b338:	047ffe04 	movi	r17,-8
1000b33c:	1c62703a 	and	r17,r3,r17
1000b340:	8807883a 	mov	r3,r17
1000b344:	88005816 	blt	r17,zero,1000b4a8 <_realloc_r+0x1cc>
1000b348:	8c805736 	bltu	r17,r18,1000b4a8 <_realloc_r+0x1cc>
1000b34c:	80c0300e 	bge	r16,r3,1000b410 <_realloc_r+0x134>
1000b350:	07040074 	movhi	fp,4097
1000b354:	e7110004 	addi	fp,fp,17408
1000b358:	e1c00217 	ldw	r7,8(fp)
1000b35c:	9c09883a 	add	r4,r19,r16
1000b360:	22000117 	ldw	r8,4(r4)
1000b364:	21c06326 	beq	r4,r7,1000b4f4 <_realloc_r+0x218>
1000b368:	017fff84 	movi	r5,-2
1000b36c:	414a703a 	and	r5,r8,r5
1000b370:	214b883a 	add	r5,r4,r5
1000b374:	29800117 	ldw	r6,4(r5)
1000b378:	3180004c 	andi	r6,r6,1
1000b37c:	30003f26 	beq	r6,zero,1000b47c <_realloc_r+0x1a0>
1000b380:	1080004c 	andi	r2,r2,1
1000b384:	10008326 	beq	r2,zero,1000b594 <_realloc_r+0x2b8>
1000b388:	900b883a 	mov	r5,r18
1000b38c:	a009883a 	mov	r4,r20
1000b390:	00042100 	call	10004210 <_malloc_r>
1000b394:	1025883a 	mov	r18,r2
1000b398:	10011e26 	beq	r2,zero,1000b814 <_realloc_r+0x538>
1000b39c:	a93fff17 	ldw	r4,-4(r21)
1000b3a0:	10fffe04 	addi	r3,r2,-8
1000b3a4:	00bfff84 	movi	r2,-2
1000b3a8:	2084703a 	and	r2,r4,r2
1000b3ac:	9885883a 	add	r2,r19,r2
1000b3b0:	1880ee26 	beq	r3,r2,1000b76c <_realloc_r+0x490>
1000b3b4:	81bfff04 	addi	r6,r16,-4
1000b3b8:	00800904 	movi	r2,36
1000b3bc:	1180b836 	bltu	r2,r6,1000b6a0 <_realloc_r+0x3c4>
1000b3c0:	00c004c4 	movi	r3,19
1000b3c4:	19809636 	bltu	r3,r6,1000b620 <_realloc_r+0x344>
1000b3c8:	9005883a 	mov	r2,r18
1000b3cc:	a807883a 	mov	r3,r21
1000b3d0:	19000017 	ldw	r4,0(r3)
1000b3d4:	11000015 	stw	r4,0(r2)
1000b3d8:	19000117 	ldw	r4,4(r3)
1000b3dc:	11000115 	stw	r4,4(r2)
1000b3e0:	18c00217 	ldw	r3,8(r3)
1000b3e4:	10c00215 	stw	r3,8(r2)
1000b3e8:	a80b883a 	mov	r5,r21
1000b3ec:	a009883a 	mov	r4,r20
1000b3f0:	000917c0 	call	1000917c <_free_r>
1000b3f4:	a009883a 	mov	r4,r20
1000b3f8:	00117100 	call	10011710 <__malloc_unlock>
1000b3fc:	9005883a 	mov	r2,r18
1000b400:	00001206 	br	1000b44c <_realloc_r+0x170>
1000b404:	00c00404 	movi	r3,16
1000b408:	1823883a 	mov	r17,r3
1000b40c:	003fce06 	br	1000b348 <__alt_data_end+0xf800b348>
1000b410:	a825883a 	mov	r18,r21
1000b414:	8445c83a 	sub	r2,r16,r17
1000b418:	00c003c4 	movi	r3,15
1000b41c:	18802636 	bltu	r3,r2,1000b4b8 <_realloc_r+0x1dc>
1000b420:	99800117 	ldw	r6,4(r19)
1000b424:	9c07883a 	add	r3,r19,r16
1000b428:	3180004c 	andi	r6,r6,1
1000b42c:	3420b03a 	or	r16,r6,r16
1000b430:	9c000115 	stw	r16,4(r19)
1000b434:	18800117 	ldw	r2,4(r3)
1000b438:	10800054 	ori	r2,r2,1
1000b43c:	18800115 	stw	r2,4(r3)
1000b440:	a009883a 	mov	r4,r20
1000b444:	00117100 	call	10011710 <__malloc_unlock>
1000b448:	9005883a 	mov	r2,r18
1000b44c:	dfc00917 	ldw	ra,36(sp)
1000b450:	df000817 	ldw	fp,32(sp)
1000b454:	ddc00717 	ldw	r23,28(sp)
1000b458:	dd800617 	ldw	r22,24(sp)
1000b45c:	dd400517 	ldw	r21,20(sp)
1000b460:	dd000417 	ldw	r20,16(sp)
1000b464:	dcc00317 	ldw	r19,12(sp)
1000b468:	dc800217 	ldw	r18,8(sp)
1000b46c:	dc400117 	ldw	r17,4(sp)
1000b470:	dc000017 	ldw	r16,0(sp)
1000b474:	dec00a04 	addi	sp,sp,40
1000b478:	f800283a 	ret
1000b47c:	017fff04 	movi	r5,-4
1000b480:	414a703a 	and	r5,r8,r5
1000b484:	814d883a 	add	r6,r16,r5
1000b488:	30c01f16 	blt	r6,r3,1000b508 <_realloc_r+0x22c>
1000b48c:	20800317 	ldw	r2,12(r4)
1000b490:	20c00217 	ldw	r3,8(r4)
1000b494:	a825883a 	mov	r18,r21
1000b498:	3021883a 	mov	r16,r6
1000b49c:	18800315 	stw	r2,12(r3)
1000b4a0:	10c00215 	stw	r3,8(r2)
1000b4a4:	003fdb06 	br	1000b414 <__alt_data_end+0xf800b414>
1000b4a8:	00800304 	movi	r2,12
1000b4ac:	a0800015 	stw	r2,0(r20)
1000b4b0:	0005883a 	mov	r2,zero
1000b4b4:	003fe506 	br	1000b44c <__alt_data_end+0xf800b44c>
1000b4b8:	98c00117 	ldw	r3,4(r19)
1000b4bc:	9c4b883a 	add	r5,r19,r17
1000b4c0:	11000054 	ori	r4,r2,1
1000b4c4:	18c0004c 	andi	r3,r3,1
1000b4c8:	1c62b03a 	or	r17,r3,r17
1000b4cc:	9c400115 	stw	r17,4(r19)
1000b4d0:	29000115 	stw	r4,4(r5)
1000b4d4:	2885883a 	add	r2,r5,r2
1000b4d8:	10c00117 	ldw	r3,4(r2)
1000b4dc:	29400204 	addi	r5,r5,8
1000b4e0:	a009883a 	mov	r4,r20
1000b4e4:	18c00054 	ori	r3,r3,1
1000b4e8:	10c00115 	stw	r3,4(r2)
1000b4ec:	000917c0 	call	1000917c <_free_r>
1000b4f0:	003fd306 	br	1000b440 <__alt_data_end+0xf800b440>
1000b4f4:	017fff04 	movi	r5,-4
1000b4f8:	414a703a 	and	r5,r8,r5
1000b4fc:	89800404 	addi	r6,r17,16
1000b500:	8151883a 	add	r8,r16,r5
1000b504:	4180590e 	bge	r8,r6,1000b66c <_realloc_r+0x390>
1000b508:	1080004c 	andi	r2,r2,1
1000b50c:	103f9e1e 	bne	r2,zero,1000b388 <__alt_data_end+0xf800b388>
1000b510:	adbffe17 	ldw	r22,-8(r21)
1000b514:	00bfff04 	movi	r2,-4
1000b518:	9dadc83a 	sub	r22,r19,r22
1000b51c:	b1800117 	ldw	r6,4(r22)
1000b520:	3084703a 	and	r2,r6,r2
1000b524:	20002026 	beq	r4,zero,1000b5a8 <_realloc_r+0x2cc>
1000b528:	80af883a 	add	r23,r16,r2
1000b52c:	b96f883a 	add	r23,r23,r5
1000b530:	21c05f26 	beq	r4,r7,1000b6b0 <_realloc_r+0x3d4>
1000b534:	b8c01c16 	blt	r23,r3,1000b5a8 <_realloc_r+0x2cc>
1000b538:	20800317 	ldw	r2,12(r4)
1000b53c:	20c00217 	ldw	r3,8(r4)
1000b540:	81bfff04 	addi	r6,r16,-4
1000b544:	01000904 	movi	r4,36
1000b548:	18800315 	stw	r2,12(r3)
1000b54c:	10c00215 	stw	r3,8(r2)
1000b550:	b0c00217 	ldw	r3,8(r22)
1000b554:	b0800317 	ldw	r2,12(r22)
1000b558:	b4800204 	addi	r18,r22,8
1000b55c:	18800315 	stw	r2,12(r3)
1000b560:	10c00215 	stw	r3,8(r2)
1000b564:	21801b36 	bltu	r4,r6,1000b5d4 <_realloc_r+0x2f8>
1000b568:	008004c4 	movi	r2,19
1000b56c:	1180352e 	bgeu	r2,r6,1000b644 <_realloc_r+0x368>
1000b570:	a8800017 	ldw	r2,0(r21)
1000b574:	b0800215 	stw	r2,8(r22)
1000b578:	a8800117 	ldw	r2,4(r21)
1000b57c:	b0800315 	stw	r2,12(r22)
1000b580:	008006c4 	movi	r2,27
1000b584:	11807f36 	bltu	r2,r6,1000b784 <_realloc_r+0x4a8>
1000b588:	b0800404 	addi	r2,r22,16
1000b58c:	ad400204 	addi	r21,r21,8
1000b590:	00002d06 	br	1000b648 <_realloc_r+0x36c>
1000b594:	adbffe17 	ldw	r22,-8(r21)
1000b598:	00bfff04 	movi	r2,-4
1000b59c:	9dadc83a 	sub	r22,r19,r22
1000b5a0:	b1000117 	ldw	r4,4(r22)
1000b5a4:	2084703a 	and	r2,r4,r2
1000b5a8:	b03f7726 	beq	r22,zero,1000b388 <__alt_data_end+0xf800b388>
1000b5ac:	80af883a 	add	r23,r16,r2
1000b5b0:	b8ff7516 	blt	r23,r3,1000b388 <__alt_data_end+0xf800b388>
1000b5b4:	b0800317 	ldw	r2,12(r22)
1000b5b8:	b0c00217 	ldw	r3,8(r22)
1000b5bc:	81bfff04 	addi	r6,r16,-4
1000b5c0:	01000904 	movi	r4,36
1000b5c4:	18800315 	stw	r2,12(r3)
1000b5c8:	10c00215 	stw	r3,8(r2)
1000b5cc:	b4800204 	addi	r18,r22,8
1000b5d0:	21bfe52e 	bgeu	r4,r6,1000b568 <__alt_data_end+0xf800b568>
1000b5d4:	a80b883a 	mov	r5,r21
1000b5d8:	9009883a 	mov	r4,r18
1000b5dc:	0009fa00 	call	10009fa0 <memmove>
1000b5e0:	b821883a 	mov	r16,r23
1000b5e4:	b027883a 	mov	r19,r22
1000b5e8:	003f8a06 	br	1000b414 <__alt_data_end+0xf800b414>
1000b5ec:	300b883a 	mov	r5,r6
1000b5f0:	dfc00917 	ldw	ra,36(sp)
1000b5f4:	df000817 	ldw	fp,32(sp)
1000b5f8:	ddc00717 	ldw	r23,28(sp)
1000b5fc:	dd800617 	ldw	r22,24(sp)
1000b600:	dd400517 	ldw	r21,20(sp)
1000b604:	dd000417 	ldw	r20,16(sp)
1000b608:	dcc00317 	ldw	r19,12(sp)
1000b60c:	dc800217 	ldw	r18,8(sp)
1000b610:	dc400117 	ldw	r17,4(sp)
1000b614:	dc000017 	ldw	r16,0(sp)
1000b618:	dec00a04 	addi	sp,sp,40
1000b61c:	00042101 	jmpi	10004210 <_malloc_r>
1000b620:	a8c00017 	ldw	r3,0(r21)
1000b624:	90c00015 	stw	r3,0(r18)
1000b628:	a8c00117 	ldw	r3,4(r21)
1000b62c:	90c00115 	stw	r3,4(r18)
1000b630:	00c006c4 	movi	r3,27
1000b634:	19804536 	bltu	r3,r6,1000b74c <_realloc_r+0x470>
1000b638:	90800204 	addi	r2,r18,8
1000b63c:	a8c00204 	addi	r3,r21,8
1000b640:	003f6306 	br	1000b3d0 <__alt_data_end+0xf800b3d0>
1000b644:	9005883a 	mov	r2,r18
1000b648:	a8c00017 	ldw	r3,0(r21)
1000b64c:	b821883a 	mov	r16,r23
1000b650:	b027883a 	mov	r19,r22
1000b654:	10c00015 	stw	r3,0(r2)
1000b658:	a8c00117 	ldw	r3,4(r21)
1000b65c:	10c00115 	stw	r3,4(r2)
1000b660:	a8c00217 	ldw	r3,8(r21)
1000b664:	10c00215 	stw	r3,8(r2)
1000b668:	003f6a06 	br	1000b414 <__alt_data_end+0xf800b414>
1000b66c:	9c67883a 	add	r19,r19,r17
1000b670:	4445c83a 	sub	r2,r8,r17
1000b674:	e4c00215 	stw	r19,8(fp)
1000b678:	10800054 	ori	r2,r2,1
1000b67c:	98800115 	stw	r2,4(r19)
1000b680:	a8bfff17 	ldw	r2,-4(r21)
1000b684:	a009883a 	mov	r4,r20
1000b688:	1080004c 	andi	r2,r2,1
1000b68c:	1462b03a 	or	r17,r2,r17
1000b690:	ac7fff15 	stw	r17,-4(r21)
1000b694:	00117100 	call	10011710 <__malloc_unlock>
1000b698:	a805883a 	mov	r2,r21
1000b69c:	003f6b06 	br	1000b44c <__alt_data_end+0xf800b44c>
1000b6a0:	a80b883a 	mov	r5,r21
1000b6a4:	9009883a 	mov	r4,r18
1000b6a8:	0009fa00 	call	10009fa0 <memmove>
1000b6ac:	003f4e06 	br	1000b3e8 <__alt_data_end+0xf800b3e8>
1000b6b0:	89000404 	addi	r4,r17,16
1000b6b4:	b93fbc16 	blt	r23,r4,1000b5a8 <__alt_data_end+0xf800b5a8>
1000b6b8:	b0800317 	ldw	r2,12(r22)
1000b6bc:	b0c00217 	ldw	r3,8(r22)
1000b6c0:	81bfff04 	addi	r6,r16,-4
1000b6c4:	01000904 	movi	r4,36
1000b6c8:	18800315 	stw	r2,12(r3)
1000b6cc:	10c00215 	stw	r3,8(r2)
1000b6d0:	b4800204 	addi	r18,r22,8
1000b6d4:	21804336 	bltu	r4,r6,1000b7e4 <_realloc_r+0x508>
1000b6d8:	008004c4 	movi	r2,19
1000b6dc:	11803f2e 	bgeu	r2,r6,1000b7dc <_realloc_r+0x500>
1000b6e0:	a8800017 	ldw	r2,0(r21)
1000b6e4:	b0800215 	stw	r2,8(r22)
1000b6e8:	a8800117 	ldw	r2,4(r21)
1000b6ec:	b0800315 	stw	r2,12(r22)
1000b6f0:	008006c4 	movi	r2,27
1000b6f4:	11803f36 	bltu	r2,r6,1000b7f4 <_realloc_r+0x518>
1000b6f8:	b0800404 	addi	r2,r22,16
1000b6fc:	ad400204 	addi	r21,r21,8
1000b700:	a8c00017 	ldw	r3,0(r21)
1000b704:	10c00015 	stw	r3,0(r2)
1000b708:	a8c00117 	ldw	r3,4(r21)
1000b70c:	10c00115 	stw	r3,4(r2)
1000b710:	a8c00217 	ldw	r3,8(r21)
1000b714:	10c00215 	stw	r3,8(r2)
1000b718:	b447883a 	add	r3,r22,r17
1000b71c:	bc45c83a 	sub	r2,r23,r17
1000b720:	e0c00215 	stw	r3,8(fp)
1000b724:	10800054 	ori	r2,r2,1
1000b728:	18800115 	stw	r2,4(r3)
1000b72c:	b0800117 	ldw	r2,4(r22)
1000b730:	a009883a 	mov	r4,r20
1000b734:	1080004c 	andi	r2,r2,1
1000b738:	1462b03a 	or	r17,r2,r17
1000b73c:	b4400115 	stw	r17,4(r22)
1000b740:	00117100 	call	10011710 <__malloc_unlock>
1000b744:	9005883a 	mov	r2,r18
1000b748:	003f4006 	br	1000b44c <__alt_data_end+0xf800b44c>
1000b74c:	a8c00217 	ldw	r3,8(r21)
1000b750:	90c00215 	stw	r3,8(r18)
1000b754:	a8c00317 	ldw	r3,12(r21)
1000b758:	90c00315 	stw	r3,12(r18)
1000b75c:	30801126 	beq	r6,r2,1000b7a4 <_realloc_r+0x4c8>
1000b760:	90800404 	addi	r2,r18,16
1000b764:	a8c00404 	addi	r3,r21,16
1000b768:	003f1906 	br	1000b3d0 <__alt_data_end+0xf800b3d0>
1000b76c:	90ffff17 	ldw	r3,-4(r18)
1000b770:	00bfff04 	movi	r2,-4
1000b774:	a825883a 	mov	r18,r21
1000b778:	1884703a 	and	r2,r3,r2
1000b77c:	80a1883a 	add	r16,r16,r2
1000b780:	003f2406 	br	1000b414 <__alt_data_end+0xf800b414>
1000b784:	a8800217 	ldw	r2,8(r21)
1000b788:	b0800415 	stw	r2,16(r22)
1000b78c:	a8800317 	ldw	r2,12(r21)
1000b790:	b0800515 	stw	r2,20(r22)
1000b794:	31000a26 	beq	r6,r4,1000b7c0 <_realloc_r+0x4e4>
1000b798:	b0800604 	addi	r2,r22,24
1000b79c:	ad400404 	addi	r21,r21,16
1000b7a0:	003fa906 	br	1000b648 <__alt_data_end+0xf800b648>
1000b7a4:	a9000417 	ldw	r4,16(r21)
1000b7a8:	90800604 	addi	r2,r18,24
1000b7ac:	a8c00604 	addi	r3,r21,24
1000b7b0:	91000415 	stw	r4,16(r18)
1000b7b4:	a9000517 	ldw	r4,20(r21)
1000b7b8:	91000515 	stw	r4,20(r18)
1000b7bc:	003f0406 	br	1000b3d0 <__alt_data_end+0xf800b3d0>
1000b7c0:	a8c00417 	ldw	r3,16(r21)
1000b7c4:	ad400604 	addi	r21,r21,24
1000b7c8:	b0800804 	addi	r2,r22,32
1000b7cc:	b0c00615 	stw	r3,24(r22)
1000b7d0:	a8ffff17 	ldw	r3,-4(r21)
1000b7d4:	b0c00715 	stw	r3,28(r22)
1000b7d8:	003f9b06 	br	1000b648 <__alt_data_end+0xf800b648>
1000b7dc:	9005883a 	mov	r2,r18
1000b7e0:	003fc706 	br	1000b700 <__alt_data_end+0xf800b700>
1000b7e4:	a80b883a 	mov	r5,r21
1000b7e8:	9009883a 	mov	r4,r18
1000b7ec:	0009fa00 	call	10009fa0 <memmove>
1000b7f0:	003fc906 	br	1000b718 <__alt_data_end+0xf800b718>
1000b7f4:	a8800217 	ldw	r2,8(r21)
1000b7f8:	b0800415 	stw	r2,16(r22)
1000b7fc:	a8800317 	ldw	r2,12(r21)
1000b800:	b0800515 	stw	r2,20(r22)
1000b804:	31000726 	beq	r6,r4,1000b824 <_realloc_r+0x548>
1000b808:	b0800604 	addi	r2,r22,24
1000b80c:	ad400404 	addi	r21,r21,16
1000b810:	003fbb06 	br	1000b700 <__alt_data_end+0xf800b700>
1000b814:	a009883a 	mov	r4,r20
1000b818:	00117100 	call	10011710 <__malloc_unlock>
1000b81c:	0005883a 	mov	r2,zero
1000b820:	003f0a06 	br	1000b44c <__alt_data_end+0xf800b44c>
1000b824:	a8c00417 	ldw	r3,16(r21)
1000b828:	ad400604 	addi	r21,r21,24
1000b82c:	b0800804 	addi	r2,r22,32
1000b830:	b0c00615 	stw	r3,24(r22)
1000b834:	a8ffff17 	ldw	r3,-4(r21)
1000b838:	b0c00715 	stw	r3,28(r22)
1000b83c:	003fb006 	br	1000b700 <__alt_data_end+0xf800b700>

1000b840 <__fpclassifyd>:
1000b840:	00a00034 	movhi	r2,32768
1000b844:	10bfffc4 	addi	r2,r2,-1
1000b848:	2884703a 	and	r2,r5,r2
1000b84c:	10000726 	beq	r2,zero,1000b86c <__fpclassifyd+0x2c>
1000b850:	00fffc34 	movhi	r3,65520
1000b854:	019ff834 	movhi	r6,32736
1000b858:	28c7883a 	add	r3,r5,r3
1000b85c:	31bfffc4 	addi	r6,r6,-1
1000b860:	30c00536 	bltu	r6,r3,1000b878 <__fpclassifyd+0x38>
1000b864:	00800104 	movi	r2,4
1000b868:	f800283a 	ret
1000b86c:	2000021e 	bne	r4,zero,1000b878 <__fpclassifyd+0x38>
1000b870:	00800084 	movi	r2,2
1000b874:	f800283a 	ret
1000b878:	00dffc34 	movhi	r3,32752
1000b87c:	019ff834 	movhi	r6,32736
1000b880:	28cb883a 	add	r5,r5,r3
1000b884:	31bfffc4 	addi	r6,r6,-1
1000b888:	317ff62e 	bgeu	r6,r5,1000b864 <__alt_data_end+0xf800b864>
1000b88c:	01400434 	movhi	r5,16
1000b890:	297fffc4 	addi	r5,r5,-1
1000b894:	28800236 	bltu	r5,r2,1000b8a0 <__fpclassifyd+0x60>
1000b898:	008000c4 	movi	r2,3
1000b89c:	f800283a 	ret
1000b8a0:	10c00226 	beq	r2,r3,1000b8ac <__fpclassifyd+0x6c>
1000b8a4:	0005883a 	mov	r2,zero
1000b8a8:	f800283a 	ret
1000b8ac:	2005003a 	cmpeq	r2,r4,zero
1000b8b0:	f800283a 	ret

1000b8b4 <__sread>:
1000b8b4:	defffe04 	addi	sp,sp,-8
1000b8b8:	dc000015 	stw	r16,0(sp)
1000b8bc:	2821883a 	mov	r16,r5
1000b8c0:	2940038f 	ldh	r5,14(r5)
1000b8c4:	dfc00115 	stw	ra,4(sp)
1000b8c8:	000d7700 	call	1000d770 <_read_r>
1000b8cc:	10000716 	blt	r2,zero,1000b8ec <__sread+0x38>
1000b8d0:	80c01417 	ldw	r3,80(r16)
1000b8d4:	1887883a 	add	r3,r3,r2
1000b8d8:	80c01415 	stw	r3,80(r16)
1000b8dc:	dfc00117 	ldw	ra,4(sp)
1000b8e0:	dc000017 	ldw	r16,0(sp)
1000b8e4:	dec00204 	addi	sp,sp,8
1000b8e8:	f800283a 	ret
1000b8ec:	80c0030b 	ldhu	r3,12(r16)
1000b8f0:	18fbffcc 	andi	r3,r3,61439
1000b8f4:	80c0030d 	sth	r3,12(r16)
1000b8f8:	dfc00117 	ldw	ra,4(sp)
1000b8fc:	dc000017 	ldw	r16,0(sp)
1000b900:	dec00204 	addi	sp,sp,8
1000b904:	f800283a 	ret

1000b908 <__seofread>:
1000b908:	0005883a 	mov	r2,zero
1000b90c:	f800283a 	ret

1000b910 <__swrite>:
1000b910:	2880030b 	ldhu	r2,12(r5)
1000b914:	defffb04 	addi	sp,sp,-20
1000b918:	dcc00315 	stw	r19,12(sp)
1000b91c:	dc800215 	stw	r18,8(sp)
1000b920:	dc400115 	stw	r17,4(sp)
1000b924:	dc000015 	stw	r16,0(sp)
1000b928:	dfc00415 	stw	ra,16(sp)
1000b92c:	10c0400c 	andi	r3,r2,256
1000b930:	2821883a 	mov	r16,r5
1000b934:	2023883a 	mov	r17,r4
1000b938:	3025883a 	mov	r18,r6
1000b93c:	3827883a 	mov	r19,r7
1000b940:	18000526 	beq	r3,zero,1000b958 <__swrite+0x48>
1000b944:	2940038f 	ldh	r5,14(r5)
1000b948:	01c00084 	movi	r7,2
1000b94c:	000d883a 	mov	r6,zero
1000b950:	000d7100 	call	1000d710 <_lseek_r>
1000b954:	8080030b 	ldhu	r2,12(r16)
1000b958:	8140038f 	ldh	r5,14(r16)
1000b95c:	10bbffcc 	andi	r2,r2,61439
1000b960:	980f883a 	mov	r7,r19
1000b964:	900d883a 	mov	r6,r18
1000b968:	8809883a 	mov	r4,r17
1000b96c:	8080030d 	sth	r2,12(r16)
1000b970:	dfc00417 	ldw	ra,16(sp)
1000b974:	dcc00317 	ldw	r19,12(sp)
1000b978:	dc800217 	ldw	r18,8(sp)
1000b97c:	dc400117 	ldw	r17,4(sp)
1000b980:	dc000017 	ldw	r16,0(sp)
1000b984:	dec00504 	addi	sp,sp,20
1000b988:	000d1c41 	jmpi	1000d1c4 <_write_r>

1000b98c <__sseek>:
1000b98c:	defffe04 	addi	sp,sp,-8
1000b990:	dc000015 	stw	r16,0(sp)
1000b994:	2821883a 	mov	r16,r5
1000b998:	2940038f 	ldh	r5,14(r5)
1000b99c:	dfc00115 	stw	ra,4(sp)
1000b9a0:	000d7100 	call	1000d710 <_lseek_r>
1000b9a4:	00ffffc4 	movi	r3,-1
1000b9a8:	10c00826 	beq	r2,r3,1000b9cc <__sseek+0x40>
1000b9ac:	80c0030b 	ldhu	r3,12(r16)
1000b9b0:	80801415 	stw	r2,80(r16)
1000b9b4:	18c40014 	ori	r3,r3,4096
1000b9b8:	80c0030d 	sth	r3,12(r16)
1000b9bc:	dfc00117 	ldw	ra,4(sp)
1000b9c0:	dc000017 	ldw	r16,0(sp)
1000b9c4:	dec00204 	addi	sp,sp,8
1000b9c8:	f800283a 	ret
1000b9cc:	80c0030b 	ldhu	r3,12(r16)
1000b9d0:	18fbffcc 	andi	r3,r3,61439
1000b9d4:	80c0030d 	sth	r3,12(r16)
1000b9d8:	dfc00117 	ldw	ra,4(sp)
1000b9dc:	dc000017 	ldw	r16,0(sp)
1000b9e0:	dec00204 	addi	sp,sp,8
1000b9e4:	f800283a 	ret

1000b9e8 <__sclose>:
1000b9e8:	2940038f 	ldh	r5,14(r5)
1000b9ec:	000d2241 	jmpi	1000d224 <_close_r>

1000b9f0 <strcmp>:
1000b9f0:	2144b03a 	or	r2,r4,r5
1000b9f4:	108000cc 	andi	r2,r2,3
1000b9f8:	1000171e 	bne	r2,zero,1000ba58 <strcmp+0x68>
1000b9fc:	20800017 	ldw	r2,0(r4)
1000ba00:	28c00017 	ldw	r3,0(r5)
1000ba04:	10c0141e 	bne	r2,r3,1000ba58 <strcmp+0x68>
1000ba08:	027fbff4 	movhi	r9,65279
1000ba0c:	4a7fbfc4 	addi	r9,r9,-257
1000ba10:	0086303a 	nor	r3,zero,r2
1000ba14:	02202074 	movhi	r8,32897
1000ba18:	1245883a 	add	r2,r2,r9
1000ba1c:	42202004 	addi	r8,r8,-32640
1000ba20:	10c4703a 	and	r2,r2,r3
1000ba24:	1204703a 	and	r2,r2,r8
1000ba28:	10000226 	beq	r2,zero,1000ba34 <strcmp+0x44>
1000ba2c:	00002306 	br	1000babc <strcmp+0xcc>
1000ba30:	1000221e 	bne	r2,zero,1000babc <strcmp+0xcc>
1000ba34:	21000104 	addi	r4,r4,4
1000ba38:	20c00017 	ldw	r3,0(r4)
1000ba3c:	29400104 	addi	r5,r5,4
1000ba40:	29800017 	ldw	r6,0(r5)
1000ba44:	1a4f883a 	add	r7,r3,r9
1000ba48:	00c4303a 	nor	r2,zero,r3
1000ba4c:	3884703a 	and	r2,r7,r2
1000ba50:	1204703a 	and	r2,r2,r8
1000ba54:	19bff626 	beq	r3,r6,1000ba30 <__alt_data_end+0xf800ba30>
1000ba58:	20800003 	ldbu	r2,0(r4)
1000ba5c:	10c03fcc 	andi	r3,r2,255
1000ba60:	18c0201c 	xori	r3,r3,128
1000ba64:	18ffe004 	addi	r3,r3,-128
1000ba68:	18000c26 	beq	r3,zero,1000ba9c <strcmp+0xac>
1000ba6c:	29800007 	ldb	r6,0(r5)
1000ba70:	19800326 	beq	r3,r6,1000ba80 <strcmp+0x90>
1000ba74:	00001306 	br	1000bac4 <strcmp+0xd4>
1000ba78:	29800007 	ldb	r6,0(r5)
1000ba7c:	11800b1e 	bne	r2,r6,1000baac <strcmp+0xbc>
1000ba80:	21000044 	addi	r4,r4,1
1000ba84:	20c00003 	ldbu	r3,0(r4)
1000ba88:	29400044 	addi	r5,r5,1
1000ba8c:	18803fcc 	andi	r2,r3,255
1000ba90:	1080201c 	xori	r2,r2,128
1000ba94:	10bfe004 	addi	r2,r2,-128
1000ba98:	103ff71e 	bne	r2,zero,1000ba78 <__alt_data_end+0xf800ba78>
1000ba9c:	0007883a 	mov	r3,zero
1000baa0:	28800003 	ldbu	r2,0(r5)
1000baa4:	1885c83a 	sub	r2,r3,r2
1000baa8:	f800283a 	ret
1000baac:	28800003 	ldbu	r2,0(r5)
1000bab0:	18c03fcc 	andi	r3,r3,255
1000bab4:	1885c83a 	sub	r2,r3,r2
1000bab8:	f800283a 	ret
1000babc:	0005883a 	mov	r2,zero
1000bac0:	f800283a 	ret
1000bac4:	10c03fcc 	andi	r3,r2,255
1000bac8:	003ff506 	br	1000baa0 <__alt_data_end+0xf800baa0>

1000bacc <__sprint_r.part.0>:
1000bacc:	28801917 	ldw	r2,100(r5)
1000bad0:	defff604 	addi	sp,sp,-40
1000bad4:	dd400515 	stw	r21,20(sp)
1000bad8:	dfc00915 	stw	ra,36(sp)
1000badc:	df000815 	stw	fp,32(sp)
1000bae0:	ddc00715 	stw	r23,28(sp)
1000bae4:	dd800615 	stw	r22,24(sp)
1000bae8:	dd000415 	stw	r20,16(sp)
1000baec:	dcc00315 	stw	r19,12(sp)
1000baf0:	dc800215 	stw	r18,8(sp)
1000baf4:	dc400115 	stw	r17,4(sp)
1000baf8:	dc000015 	stw	r16,0(sp)
1000bafc:	1088000c 	andi	r2,r2,8192
1000bb00:	302b883a 	mov	r21,r6
1000bb04:	10002e26 	beq	r2,zero,1000bbc0 <__sprint_r.part.0+0xf4>
1000bb08:	30800217 	ldw	r2,8(r6)
1000bb0c:	35800017 	ldw	r22,0(r6)
1000bb10:	10002926 	beq	r2,zero,1000bbb8 <__sprint_r.part.0+0xec>
1000bb14:	2827883a 	mov	r19,r5
1000bb18:	2029883a 	mov	r20,r4
1000bb1c:	b5c00104 	addi	r23,r22,4
1000bb20:	04bfffc4 	movi	r18,-1
1000bb24:	bc400017 	ldw	r17,0(r23)
1000bb28:	b4000017 	ldw	r16,0(r22)
1000bb2c:	0039883a 	mov	fp,zero
1000bb30:	8822d0ba 	srli	r17,r17,2
1000bb34:	8800031e 	bne	r17,zero,1000bb44 <__sprint_r.part.0+0x78>
1000bb38:	00001806 	br	1000bb9c <__sprint_r.part.0+0xd0>
1000bb3c:	84000104 	addi	r16,r16,4
1000bb40:	8f001526 	beq	r17,fp,1000bb98 <__sprint_r.part.0+0xcc>
1000bb44:	81400017 	ldw	r5,0(r16)
1000bb48:	980d883a 	mov	r6,r19
1000bb4c:	a009883a 	mov	r4,r20
1000bb50:	000d5bc0 	call	1000d5bc <_fputwc_r>
1000bb54:	e7000044 	addi	fp,fp,1
1000bb58:	14bff81e 	bne	r2,r18,1000bb3c <__alt_data_end+0xf800bb3c>
1000bb5c:	9005883a 	mov	r2,r18
1000bb60:	a8000215 	stw	zero,8(r21)
1000bb64:	a8000115 	stw	zero,4(r21)
1000bb68:	dfc00917 	ldw	ra,36(sp)
1000bb6c:	df000817 	ldw	fp,32(sp)
1000bb70:	ddc00717 	ldw	r23,28(sp)
1000bb74:	dd800617 	ldw	r22,24(sp)
1000bb78:	dd400517 	ldw	r21,20(sp)
1000bb7c:	dd000417 	ldw	r20,16(sp)
1000bb80:	dcc00317 	ldw	r19,12(sp)
1000bb84:	dc800217 	ldw	r18,8(sp)
1000bb88:	dc400117 	ldw	r17,4(sp)
1000bb8c:	dc000017 	ldw	r16,0(sp)
1000bb90:	dec00a04 	addi	sp,sp,40
1000bb94:	f800283a 	ret
1000bb98:	a8800217 	ldw	r2,8(r21)
1000bb9c:	8c63883a 	add	r17,r17,r17
1000bba0:	8c63883a 	add	r17,r17,r17
1000bba4:	1445c83a 	sub	r2,r2,r17
1000bba8:	a8800215 	stw	r2,8(r21)
1000bbac:	b5800204 	addi	r22,r22,8
1000bbb0:	bdc00204 	addi	r23,r23,8
1000bbb4:	103fdb1e 	bne	r2,zero,1000bb24 <__alt_data_end+0xf800bb24>
1000bbb8:	0005883a 	mov	r2,zero
1000bbbc:	003fe806 	br	1000bb60 <__alt_data_end+0xf800bb60>
1000bbc0:	000948c0 	call	1000948c <__sfvwrite_r>
1000bbc4:	003fe606 	br	1000bb60 <__alt_data_end+0xf800bb60>

1000bbc8 <__sprint_r>:
1000bbc8:	30c00217 	ldw	r3,8(r6)
1000bbcc:	18000126 	beq	r3,zero,1000bbd4 <__sprint_r+0xc>
1000bbd0:	000bacc1 	jmpi	1000bacc <__sprint_r.part.0>
1000bbd4:	30000115 	stw	zero,4(r6)
1000bbd8:	0005883a 	mov	r2,zero
1000bbdc:	f800283a 	ret

1000bbe0 <___vfiprintf_internal_r>:
1000bbe0:	deffca04 	addi	sp,sp,-216
1000bbe4:	dd403115 	stw	r21,196(sp)
1000bbe8:	dfc03515 	stw	ra,212(sp)
1000bbec:	df003415 	stw	fp,208(sp)
1000bbf0:	ddc03315 	stw	r23,204(sp)
1000bbf4:	dd803215 	stw	r22,200(sp)
1000bbf8:	dd003015 	stw	r20,192(sp)
1000bbfc:	dcc02f15 	stw	r19,188(sp)
1000bc00:	dc802e15 	stw	r18,184(sp)
1000bc04:	dc402d15 	stw	r17,180(sp)
1000bc08:	dc002c15 	stw	r16,176(sp)
1000bc0c:	d9002115 	stw	r4,132(sp)
1000bc10:	d9402015 	stw	r5,128(sp)
1000bc14:	d9c02215 	stw	r7,136(sp)
1000bc18:	302b883a 	mov	r21,r6
1000bc1c:	20000226 	beq	r4,zero,1000bc28 <___vfiprintf_internal_r+0x48>
1000bc20:	20800e17 	ldw	r2,56(r4)
1000bc24:	1000cf26 	beq	r2,zero,1000bf64 <___vfiprintf_internal_r+0x384>
1000bc28:	d8c02017 	ldw	r3,128(sp)
1000bc2c:	1880030b 	ldhu	r2,12(r3)
1000bc30:	10c8000c 	andi	r3,r2,8192
1000bc34:	1800071e 	bne	r3,zero,1000bc54 <___vfiprintf_internal_r+0x74>
1000bc38:	d9402017 	ldw	r5,128(sp)
1000bc3c:	00f7ffc4 	movi	r3,-8193
1000bc40:	10880014 	ori	r2,r2,8192
1000bc44:	29001917 	ldw	r4,100(r5)
1000bc48:	2880030d 	sth	r2,12(r5)
1000bc4c:	20c6703a 	and	r3,r4,r3
1000bc50:	28c01915 	stw	r3,100(r5)
1000bc54:	10c0020c 	andi	r3,r2,8
1000bc58:	1800a526 	beq	r3,zero,1000bef0 <___vfiprintf_internal_r+0x310>
1000bc5c:	d9002017 	ldw	r4,128(sp)
1000bc60:	20c00417 	ldw	r3,16(r4)
1000bc64:	1800a226 	beq	r3,zero,1000bef0 <___vfiprintf_internal_r+0x310>
1000bc68:	1080068c 	andi	r2,r2,26
1000bc6c:	00c00284 	movi	r3,10
1000bc70:	10c0a826 	beq	r2,r3,1000bf14 <___vfiprintf_internal_r+0x334>
1000bc74:	d9001a04 	addi	r4,sp,104
1000bc78:	d94019c4 	addi	r5,sp,103
1000bc7c:	04840074 	movhi	r18,4097
1000bc80:	2145c83a 	sub	r2,r4,r5
1000bc84:	9490ab04 	addi	r18,r18,17068
1000bc88:	d9001e15 	stw	r4,120(sp)
1000bc8c:	d9401f15 	stw	r5,124(sp)
1000bc90:	dec01a15 	stw	sp,104(sp)
1000bc94:	d8001c15 	stw	zero,112(sp)
1000bc98:	d8001b15 	stw	zero,108(sp)
1000bc9c:	d811883a 	mov	r8,sp
1000bca0:	d8002615 	stw	zero,152(sp)
1000bca4:	d8002415 	stw	zero,144(sp)
1000bca8:	d8802815 	stw	r2,160(sp)
1000bcac:	a82d883a 	mov	r22,r21
1000bcb0:	b0800007 	ldb	r2,0(r22)
1000bcb4:	10040d26 	beq	r2,zero,1000ccec <___vfiprintf_internal_r+0x110c>
1000bcb8:	00c00944 	movi	r3,37
1000bcbc:	b029883a 	mov	r20,r22
1000bcc0:	10c0021e 	bne	r2,r3,1000bccc <___vfiprintf_internal_r+0xec>
1000bcc4:	00001606 	br	1000bd20 <___vfiprintf_internal_r+0x140>
1000bcc8:	10c00326 	beq	r2,r3,1000bcd8 <___vfiprintf_internal_r+0xf8>
1000bccc:	a5000044 	addi	r20,r20,1
1000bcd0:	a0800007 	ldb	r2,0(r20)
1000bcd4:	103ffc1e 	bne	r2,zero,1000bcc8 <__alt_data_end+0xf800bcc8>
1000bcd8:	a5a1c83a 	sub	r16,r20,r22
1000bcdc:	80001026 	beq	r16,zero,1000bd20 <___vfiprintf_internal_r+0x140>
1000bce0:	d8c01c17 	ldw	r3,112(sp)
1000bce4:	d8801b17 	ldw	r2,108(sp)
1000bce8:	45800015 	stw	r22,0(r8)
1000bcec:	80c7883a 	add	r3,r16,r3
1000bcf0:	10800044 	addi	r2,r2,1
1000bcf4:	44000115 	stw	r16,4(r8)
1000bcf8:	d8c01c15 	stw	r3,112(sp)
1000bcfc:	d8801b15 	stw	r2,108(sp)
1000bd00:	010001c4 	movi	r4,7
1000bd04:	2080750e 	bge	r4,r2,1000bedc <___vfiprintf_internal_r+0x2fc>
1000bd08:	1803951e 	bne	r3,zero,1000cb60 <___vfiprintf_internal_r+0xf80>
1000bd0c:	d8c02417 	ldw	r3,144(sp)
1000bd10:	d8001b15 	stw	zero,108(sp)
1000bd14:	d811883a 	mov	r8,sp
1000bd18:	1c07883a 	add	r3,r3,r16
1000bd1c:	d8c02415 	stw	r3,144(sp)
1000bd20:	a0800007 	ldb	r2,0(r20)
1000bd24:	1002e026 	beq	r2,zero,1000c8a8 <___vfiprintf_internal_r+0xcc8>
1000bd28:	a5800044 	addi	r22,r20,1
1000bd2c:	a0c00047 	ldb	r3,1(r20)
1000bd30:	d8001d85 	stb	zero,118(sp)
1000bd34:	0027883a 	mov	r19,zero
1000bd38:	d8002305 	stb	zero,140(sp)
1000bd3c:	043fffc4 	movi	r16,-1
1000bd40:	d8002515 	stw	zero,148(sp)
1000bd44:	0023883a 	mov	r17,zero
1000bd48:	05001604 	movi	r20,88
1000bd4c:	05400244 	movi	r21,9
1000bd50:	402f883a 	mov	r23,r8
1000bd54:	b5800044 	addi	r22,r22,1
1000bd58:	18bff804 	addi	r2,r3,-32
1000bd5c:	a0827736 	bltu	r20,r2,1000c73c <___vfiprintf_internal_r+0xb5c>
1000bd60:	100490ba 	slli	r2,r2,2
1000bd64:	01040074 	movhi	r4,4097
1000bd68:	212f5e04 	addi	r4,r4,-17032
1000bd6c:	1105883a 	add	r2,r2,r4
1000bd70:	10800017 	ldw	r2,0(r2)
1000bd74:	1000683a 	jmp	r2
1000bd78:	1000c43c 	xorhi	zero,r2,784
1000bd7c:	1000c73c 	xorhi	zero,r2,796
1000bd80:	1000c73c 	xorhi	zero,r2,796
1000bd84:	1000c458 	cmpnei	zero,r2,785
1000bd88:	1000c73c 	xorhi	zero,r2,796
1000bd8c:	1000c73c 	xorhi	zero,r2,796
1000bd90:	1000c73c 	xorhi	zero,r2,796
1000bd94:	1000c73c 	xorhi	zero,r2,796
1000bd98:	1000c73c 	xorhi	zero,r2,796
1000bd9c:	1000c73c 	xorhi	zero,r2,796
1000bda0:	1000c660 	cmpeqi	zero,r2,793
1000bda4:	1000c684 	addi	zero,r2,794
1000bda8:	1000c73c 	xorhi	zero,r2,796
1000bdac:	1000bf7c 	xorhi	zero,r2,765
1000bdb0:	1000c698 	cmpnei	zero,r2,794
1000bdb4:	1000c73c 	xorhi	zero,r2,796
1000bdb8:	1000c464 	muli	zero,r2,785
1000bdbc:	1000c470 	cmpltui	zero,r2,785
1000bdc0:	1000c470 	cmpltui	zero,r2,785
1000bdc4:	1000c470 	cmpltui	zero,r2,785
1000bdc8:	1000c470 	cmpltui	zero,r2,785
1000bdcc:	1000c470 	cmpltui	zero,r2,785
1000bdd0:	1000c470 	cmpltui	zero,r2,785
1000bdd4:	1000c470 	cmpltui	zero,r2,785
1000bdd8:	1000c470 	cmpltui	zero,r2,785
1000bddc:	1000c470 	cmpltui	zero,r2,785
1000bde0:	1000c73c 	xorhi	zero,r2,796
1000bde4:	1000c73c 	xorhi	zero,r2,796
1000bde8:	1000c73c 	xorhi	zero,r2,796
1000bdec:	1000c73c 	xorhi	zero,r2,796
1000bdf0:	1000c73c 	xorhi	zero,r2,796
1000bdf4:	1000c73c 	xorhi	zero,r2,796
1000bdf8:	1000c73c 	xorhi	zero,r2,796
1000bdfc:	1000c73c 	xorhi	zero,r2,796
1000be00:	1000c73c 	xorhi	zero,r2,796
1000be04:	1000c73c 	xorhi	zero,r2,796
1000be08:	1000c4b0 	cmpltui	zero,r2,786
1000be0c:	1000c73c 	xorhi	zero,r2,796
1000be10:	1000c73c 	xorhi	zero,r2,796
1000be14:	1000c73c 	xorhi	zero,r2,796
1000be18:	1000c73c 	xorhi	zero,r2,796
1000be1c:	1000c73c 	xorhi	zero,r2,796
1000be20:	1000c73c 	xorhi	zero,r2,796
1000be24:	1000c73c 	xorhi	zero,r2,796
1000be28:	1000c73c 	xorhi	zero,r2,796
1000be2c:	1000c73c 	xorhi	zero,r2,796
1000be30:	1000c73c 	xorhi	zero,r2,796
1000be34:	1000c4ec 	andhi	zero,r2,787
1000be38:	1000c73c 	xorhi	zero,r2,796
1000be3c:	1000c73c 	xorhi	zero,r2,796
1000be40:	1000c73c 	xorhi	zero,r2,796
1000be44:	1000c73c 	xorhi	zero,r2,796
1000be48:	1000c73c 	xorhi	zero,r2,796
1000be4c:	1000c548 	cmpgei	zero,r2,789
1000be50:	1000c73c 	xorhi	zero,r2,796
1000be54:	1000c73c 	xorhi	zero,r2,796
1000be58:	1000c5bc 	xorhi	zero,r2,790
1000be5c:	1000c73c 	xorhi	zero,r2,796
1000be60:	1000c73c 	xorhi	zero,r2,796
1000be64:	1000c73c 	xorhi	zero,r2,796
1000be68:	1000c73c 	xorhi	zero,r2,796
1000be6c:	1000c73c 	xorhi	zero,r2,796
1000be70:	1000c73c 	xorhi	zero,r2,796
1000be74:	1000c73c 	xorhi	zero,r2,796
1000be78:	1000c73c 	xorhi	zero,r2,796
1000be7c:	1000c73c 	xorhi	zero,r2,796
1000be80:	1000c73c 	xorhi	zero,r2,796
1000be84:	1000c364 	muli	zero,r2,781
1000be88:	1000c394 	ori	zero,r2,782
1000be8c:	1000c73c 	xorhi	zero,r2,796
1000be90:	1000c73c 	xorhi	zero,r2,796
1000be94:	1000c73c 	xorhi	zero,r2,796
1000be98:	1000c6e4 	muli	zero,r2,795
1000be9c:	1000c394 	ori	zero,r2,782
1000bea0:	1000c73c 	xorhi	zero,r2,796
1000bea4:	1000c73c 	xorhi	zero,r2,796
1000bea8:	1000c23c 	xorhi	zero,r2,776
1000beac:	1000c73c 	xorhi	zero,r2,796
1000beb0:	1000c250 	cmplti	zero,r2,777
1000beb4:	1000c288 	cmpgei	zero,r2,778
1000beb8:	1000bf88 	cmpgei	zero,r2,766
1000bebc:	1000c230 	cmpltui	zero,r2,776
1000bec0:	1000c73c 	xorhi	zero,r2,796
1000bec4:	1000c5fc 	xorhi	zero,r2,791
1000bec8:	1000c73c 	xorhi	zero,r2,796
1000becc:	1000c648 	cmpgei	zero,r2,793
1000bed0:	1000c73c 	xorhi	zero,r2,796
1000bed4:	1000c73c 	xorhi	zero,r2,796
1000bed8:	1000c30c 	andi	zero,r2,780
1000bedc:	42000204 	addi	r8,r8,8
1000bee0:	d8c02417 	ldw	r3,144(sp)
1000bee4:	1c07883a 	add	r3,r3,r16
1000bee8:	d8c02415 	stw	r3,144(sp)
1000beec:	003f8c06 	br	1000bd20 <__alt_data_end+0xf800bd20>
1000bef0:	d9402017 	ldw	r5,128(sp)
1000bef4:	d9002117 	ldw	r4,132(sp)
1000bef8:	0006ffc0 	call	10006ffc <__swsetup_r>
1000befc:	1003c11e 	bne	r2,zero,1000ce04 <___vfiprintf_internal_r+0x1224>
1000bf00:	d9402017 	ldw	r5,128(sp)
1000bf04:	00c00284 	movi	r3,10
1000bf08:	2880030b 	ldhu	r2,12(r5)
1000bf0c:	1080068c 	andi	r2,r2,26
1000bf10:	10ff581e 	bne	r2,r3,1000bc74 <__alt_data_end+0xf800bc74>
1000bf14:	d8c02017 	ldw	r3,128(sp)
1000bf18:	1880038f 	ldh	r2,14(r3)
1000bf1c:	103f5516 	blt	r2,zero,1000bc74 <__alt_data_end+0xf800bc74>
1000bf20:	d9c02217 	ldw	r7,136(sp)
1000bf24:	d9002117 	ldw	r4,132(sp)
1000bf28:	a80d883a 	mov	r6,r21
1000bf2c:	180b883a 	mov	r5,r3
1000bf30:	000d1080 	call	1000d108 <__sbprintf>
1000bf34:	dfc03517 	ldw	ra,212(sp)
1000bf38:	df003417 	ldw	fp,208(sp)
1000bf3c:	ddc03317 	ldw	r23,204(sp)
1000bf40:	dd803217 	ldw	r22,200(sp)
1000bf44:	dd403117 	ldw	r21,196(sp)
1000bf48:	dd003017 	ldw	r20,192(sp)
1000bf4c:	dcc02f17 	ldw	r19,188(sp)
1000bf50:	dc802e17 	ldw	r18,184(sp)
1000bf54:	dc402d17 	ldw	r17,180(sp)
1000bf58:	dc002c17 	ldw	r16,176(sp)
1000bf5c:	dec03604 	addi	sp,sp,216
1000bf60:	f800283a 	ret
1000bf64:	00090080 	call	10009008 <__sinit>
1000bf68:	003f2f06 	br	1000bc28 <__alt_data_end+0xf800bc28>
1000bf6c:	d8c02517 	ldw	r3,148(sp)
1000bf70:	d8802215 	stw	r2,136(sp)
1000bf74:	00c7c83a 	sub	r3,zero,r3
1000bf78:	d8c02515 	stw	r3,148(sp)
1000bf7c:	8c400114 	ori	r17,r17,4
1000bf80:	b0c00007 	ldb	r3,0(r22)
1000bf84:	003f7306 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000bf88:	00800c04 	movi	r2,48
1000bf8c:	d9402217 	ldw	r5,136(sp)
1000bf90:	d8801d05 	stb	r2,116(sp)
1000bf94:	00801e04 	movi	r2,120
1000bf98:	d8801d45 	stb	r2,117(sp)
1000bf9c:	d8001d85 	stb	zero,118(sp)
1000bfa0:	b811883a 	mov	r8,r23
1000bfa4:	28c00104 	addi	r3,r5,4
1000bfa8:	2cc00017 	ldw	r19,0(r5)
1000bfac:	0029883a 	mov	r20,zero
1000bfb0:	88800094 	ori	r2,r17,2
1000bfb4:	80032516 	blt	r16,zero,1000cc4c <___vfiprintf_internal_r+0x106c>
1000bfb8:	00bfdfc4 	movi	r2,-129
1000bfbc:	88a2703a 	and	r17,r17,r2
1000bfc0:	d8c02215 	stw	r3,136(sp)
1000bfc4:	8c400094 	ori	r17,r17,2
1000bfc8:	98032a1e 	bne	r19,zero,1000cc74 <___vfiprintf_internal_r+0x1094>
1000bfcc:	00840074 	movhi	r2,4097
1000bfd0:	10904a04 	addi	r2,r2,16680
1000bfd4:	d8802615 	stw	r2,152(sp)
1000bfd8:	002b883a 	mov	r21,zero
1000bfdc:	8001741e 	bne	r16,zero,1000c5b0 <___vfiprintf_internal_r+0x9d0>
1000bfe0:	0021883a 	mov	r16,zero
1000bfe4:	0029883a 	mov	r20,zero
1000bfe8:	ddc01a04 	addi	r23,sp,104
1000bfec:	8027883a 	mov	r19,r16
1000bff0:	8500010e 	bge	r16,r20,1000bff8 <___vfiprintf_internal_r+0x418>
1000bff4:	a027883a 	mov	r19,r20
1000bff8:	ad403fcc 	andi	r21,r21,255
1000bffc:	ad40201c 	xori	r21,r21,128
1000c000:	ad7fe004 	addi	r21,r21,-128
1000c004:	a8000126 	beq	r21,zero,1000c00c <___vfiprintf_internal_r+0x42c>
1000c008:	9cc00044 	addi	r19,r19,1
1000c00c:	89c0008c 	andi	r7,r17,2
1000c010:	38000126 	beq	r7,zero,1000c018 <___vfiprintf_internal_r+0x438>
1000c014:	9cc00084 	addi	r19,r19,2
1000c018:	88c0210c 	andi	r3,r17,132
1000c01c:	1801dd1e 	bne	r3,zero,1000c794 <___vfiprintf_internal_r+0xbb4>
1000c020:	d9402517 	ldw	r5,148(sp)
1000c024:	2cebc83a 	sub	r21,r5,r19
1000c028:	0541da0e 	bge	zero,r21,1000c794 <___vfiprintf_internal_r+0xbb4>
1000c02c:	07000404 	movi	fp,16
1000c030:	d8801c17 	ldw	r2,112(sp)
1000c034:	e543be0e 	bge	fp,r21,1000cf30 <___vfiprintf_internal_r+0x1350>
1000c038:	01440074 	movhi	r5,4097
1000c03c:	2950af04 	addi	r5,r5,17084
1000c040:	dc002715 	stw	r16,156(sp)
1000c044:	d9801b17 	ldw	r6,108(sp)
1000c048:	a821883a 	mov	r16,r21
1000c04c:	d9402315 	stw	r5,140(sp)
1000c050:	028001c4 	movi	r10,7
1000c054:	d9c02915 	stw	r7,164(sp)
1000c058:	182b883a 	mov	r21,r3
1000c05c:	00000506 	br	1000c074 <___vfiprintf_internal_r+0x494>
1000c060:	31000084 	addi	r4,r6,2
1000c064:	42000204 	addi	r8,r8,8
1000c068:	180d883a 	mov	r6,r3
1000c06c:	843ffc04 	addi	r16,r16,-16
1000c070:	e4000f0e 	bge	fp,r16,1000c0b0 <___vfiprintf_internal_r+0x4d0>
1000c074:	01040074 	movhi	r4,4097
1000c078:	10800404 	addi	r2,r2,16
1000c07c:	30c00044 	addi	r3,r6,1
1000c080:	2110af04 	addi	r4,r4,17084
1000c084:	41000015 	stw	r4,0(r8)
1000c088:	47000115 	stw	fp,4(r8)
1000c08c:	d8801c15 	stw	r2,112(sp)
1000c090:	d8c01b15 	stw	r3,108(sp)
1000c094:	50fff20e 	bge	r10,r3,1000c060 <__alt_data_end+0xf800c060>
1000c098:	1001b21e 	bne	r2,zero,1000c764 <___vfiprintf_internal_r+0xb84>
1000c09c:	843ffc04 	addi	r16,r16,-16
1000c0a0:	000d883a 	mov	r6,zero
1000c0a4:	01000044 	movi	r4,1
1000c0a8:	d811883a 	mov	r8,sp
1000c0ac:	e43ff116 	blt	fp,r16,1000c074 <__alt_data_end+0xf800c074>
1000c0b0:	a807883a 	mov	r3,r21
1000c0b4:	d9c02917 	ldw	r7,164(sp)
1000c0b8:	802b883a 	mov	r21,r16
1000c0bc:	dc002717 	ldw	r16,156(sp)
1000c0c0:	d9402317 	ldw	r5,140(sp)
1000c0c4:	a885883a 	add	r2,r21,r2
1000c0c8:	45400115 	stw	r21,4(r8)
1000c0cc:	41400015 	stw	r5,0(r8)
1000c0d0:	d8801c15 	stw	r2,112(sp)
1000c0d4:	d9001b15 	stw	r4,108(sp)
1000c0d8:	014001c4 	movi	r5,7
1000c0dc:	29026216 	blt	r5,r4,1000ca68 <___vfiprintf_internal_r+0xe88>
1000c0e0:	d9801d87 	ldb	r6,118(sp)
1000c0e4:	42000204 	addi	r8,r8,8
1000c0e8:	21400044 	addi	r5,r4,1
1000c0ec:	3001ae1e 	bne	r6,zero,1000c7a8 <___vfiprintf_internal_r+0xbc8>
1000c0f0:	3801bb26 	beq	r7,zero,1000c7e0 <___vfiprintf_internal_r+0xc00>
1000c0f4:	d9001d04 	addi	r4,sp,116
1000c0f8:	10800084 	addi	r2,r2,2
1000c0fc:	41000015 	stw	r4,0(r8)
1000c100:	01000084 	movi	r4,2
1000c104:	41000115 	stw	r4,4(r8)
1000c108:	d8801c15 	stw	r2,112(sp)
1000c10c:	d9401b15 	stw	r5,108(sp)
1000c110:	010001c4 	movi	r4,7
1000c114:	2142680e 	bge	r4,r5,1000cab8 <___vfiprintf_internal_r+0xed8>
1000c118:	1002b11e 	bne	r2,zero,1000cbe0 <___vfiprintf_internal_r+0x1000>
1000c11c:	01802004 	movi	r6,128
1000c120:	01400044 	movi	r5,1
1000c124:	0009883a 	mov	r4,zero
1000c128:	d811883a 	mov	r8,sp
1000c12c:	1981ae1e 	bne	r3,r6,1000c7e8 <___vfiprintf_internal_r+0xc08>
1000c130:	d8c02517 	ldw	r3,148(sp)
1000c134:	1cf9c83a 	sub	fp,r3,r19
1000c138:	0701ab0e 	bge	zero,fp,1000c7e8 <___vfiprintf_internal_r+0xc08>
1000c13c:	05400404 	movi	r21,16
1000c140:	af03a90e 	bge	r21,fp,1000cfe8 <___vfiprintf_internal_r+0x1408>
1000c144:	01440074 	movhi	r5,4097
1000c148:	2950ab04 	addi	r5,r5,17068
1000c14c:	d9402315 	stw	r5,140(sp)
1000c150:	01c001c4 	movi	r7,7
1000c154:	00000506 	br	1000c16c <___vfiprintf_internal_r+0x58c>
1000c158:	21800084 	addi	r6,r4,2
1000c15c:	42000204 	addi	r8,r8,8
1000c160:	1809883a 	mov	r4,r3
1000c164:	e73ffc04 	addi	fp,fp,-16
1000c168:	af000d0e 	bge	r21,fp,1000c1a0 <___vfiprintf_internal_r+0x5c0>
1000c16c:	10800404 	addi	r2,r2,16
1000c170:	20c00044 	addi	r3,r4,1
1000c174:	44800015 	stw	r18,0(r8)
1000c178:	45400115 	stw	r21,4(r8)
1000c17c:	d8801c15 	stw	r2,112(sp)
1000c180:	d8c01b15 	stw	r3,108(sp)
1000c184:	38fff40e 	bge	r7,r3,1000c158 <__alt_data_end+0xf800c158>
1000c188:	10022b1e 	bne	r2,zero,1000ca38 <___vfiprintf_internal_r+0xe58>
1000c18c:	e73ffc04 	addi	fp,fp,-16
1000c190:	01800044 	movi	r6,1
1000c194:	0009883a 	mov	r4,zero
1000c198:	d811883a 	mov	r8,sp
1000c19c:	af3ff316 	blt	r21,fp,1000c16c <__alt_data_end+0xf800c16c>
1000c1a0:	d8c02317 	ldw	r3,140(sp)
1000c1a4:	1705883a 	add	r2,r2,fp
1000c1a8:	47000115 	stw	fp,4(r8)
1000c1ac:	40c00015 	stw	r3,0(r8)
1000c1b0:	d8801c15 	stw	r2,112(sp)
1000c1b4:	d9801b15 	stw	r6,108(sp)
1000c1b8:	00c001c4 	movi	r3,7
1000c1bc:	19829416 	blt	r3,r6,1000cc10 <___vfiprintf_internal_r+0x1030>
1000c1c0:	8521c83a 	sub	r16,r16,r20
1000c1c4:	42000204 	addi	r8,r8,8
1000c1c8:	31400044 	addi	r5,r6,1
1000c1cc:	3009883a 	mov	r4,r6
1000c1d0:	04018716 	blt	zero,r16,1000c7f0 <___vfiprintf_internal_r+0xc10>
1000c1d4:	a085883a 	add	r2,r20,r2
1000c1d8:	45c00015 	stw	r23,0(r8)
1000c1dc:	45000115 	stw	r20,4(r8)
1000c1e0:	d8801c15 	stw	r2,112(sp)
1000c1e4:	d9401b15 	stw	r5,108(sp)
1000c1e8:	00c001c4 	movi	r3,7
1000c1ec:	1941c20e 	bge	r3,r5,1000c8f8 <___vfiprintf_internal_r+0xd18>
1000c1f0:	1002531e 	bne	r2,zero,1000cb40 <___vfiprintf_internal_r+0xf60>
1000c1f4:	d8001b15 	stw	zero,108(sp)
1000c1f8:	8c40010c 	andi	r17,r17,4
1000c1fc:	88023226 	beq	r17,zero,1000cac8 <___vfiprintf_internal_r+0xee8>
1000c200:	d9002517 	ldw	r4,148(sp)
1000c204:	24e3c83a 	sub	r17,r4,r19
1000c208:	04432916 	blt	zero,r17,1000ceb0 <___vfiprintf_internal_r+0x12d0>
1000c20c:	d8802517 	ldw	r2,148(sp)
1000c210:	14c0010e 	bge	r2,r19,1000c218 <___vfiprintf_internal_r+0x638>
1000c214:	9805883a 	mov	r2,r19
1000c218:	d8c02417 	ldw	r3,144(sp)
1000c21c:	1887883a 	add	r3,r3,r2
1000c220:	d8c02415 	stw	r3,144(sp)
1000c224:	d8001b15 	stw	zero,108(sp)
1000c228:	d811883a 	mov	r8,sp
1000c22c:	003ea006 	br	1000bcb0 <__alt_data_end+0xf800bcb0>
1000c230:	8c400814 	ori	r17,r17,32
1000c234:	b0c00007 	ldb	r3,0(r22)
1000c238:	003ec606 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000c23c:	b0c00007 	ldb	r3,0(r22)
1000c240:	00801b04 	movi	r2,108
1000c244:	18832026 	beq	r3,r2,1000cec8 <___vfiprintf_internal_r+0x12e8>
1000c248:	8c400414 	ori	r17,r17,16
1000c24c:	003ec106 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000c250:	9cc03fcc 	andi	r19,r19,255
1000c254:	b811883a 	mov	r8,r23
1000c258:	9803981e 	bne	r19,zero,1000d0bc <___vfiprintf_internal_r+0x14dc>
1000c25c:	8880080c 	andi	r2,r17,32
1000c260:	1002be26 	beq	r2,zero,1000cd5c <___vfiprintf_internal_r+0x117c>
1000c264:	d9002217 	ldw	r4,136(sp)
1000c268:	d9402417 	ldw	r5,144(sp)
1000c26c:	20800017 	ldw	r2,0(r4)
1000c270:	2807d7fa 	srai	r3,r5,31
1000c274:	21000104 	addi	r4,r4,4
1000c278:	d9002215 	stw	r4,136(sp)
1000c27c:	11400015 	stw	r5,0(r2)
1000c280:	10c00115 	stw	r3,4(r2)
1000c284:	003e8a06 	br	1000bcb0 <__alt_data_end+0xf800bcb0>
1000c288:	9cc03fcc 	andi	r19,r19,255
1000c28c:	b811883a 	mov	r8,r23
1000c290:	9803871e 	bne	r19,zero,1000d0b0 <___vfiprintf_internal_r+0x14d0>
1000c294:	8880080c 	andi	r2,r17,32
1000c298:	10009a26 	beq	r2,zero,1000c504 <___vfiprintf_internal_r+0x924>
1000c29c:	d9002217 	ldw	r4,136(sp)
1000c2a0:	d8001d85 	stb	zero,118(sp)
1000c2a4:	20800204 	addi	r2,r4,8
1000c2a8:	24c00017 	ldw	r19,0(r4)
1000c2ac:	25000117 	ldw	r20,4(r4)
1000c2b0:	8002a416 	blt	r16,zero,1000cd44 <___vfiprintf_internal_r+0x1164>
1000c2b4:	013fdfc4 	movi	r4,-129
1000c2b8:	9d06b03a 	or	r3,r19,r20
1000c2bc:	d8802215 	stw	r2,136(sp)
1000c2c0:	8922703a 	and	r17,r17,r4
1000c2c4:	18009b26 	beq	r3,zero,1000c534 <___vfiprintf_internal_r+0x954>
1000c2c8:	002b883a 	mov	r21,zero
1000c2cc:	ddc01a04 	addi	r23,sp,104
1000c2d0:	9806d0fa 	srli	r3,r19,3
1000c2d4:	a008977a 	slli	r4,r20,29
1000c2d8:	a028d0fa 	srli	r20,r20,3
1000c2dc:	9cc001cc 	andi	r19,r19,7
1000c2e0:	98800c04 	addi	r2,r19,48
1000c2e4:	bdffffc4 	addi	r23,r23,-1
1000c2e8:	20e6b03a 	or	r19,r4,r3
1000c2ec:	b8800005 	stb	r2,0(r23)
1000c2f0:	9d06b03a 	or	r3,r19,r20
1000c2f4:	183ff61e 	bne	r3,zero,1000c2d0 <__alt_data_end+0xf800c2d0>
1000c2f8:	88c0004c 	andi	r3,r17,1
1000c2fc:	18021f1e 	bne	r3,zero,1000cb7c <___vfiprintf_internal_r+0xf9c>
1000c300:	d9401e17 	ldw	r5,120(sp)
1000c304:	2de9c83a 	sub	r20,r5,r23
1000c308:	003f3806 	br	1000bfec <__alt_data_end+0xf800bfec>
1000c30c:	9cc03fcc 	andi	r19,r19,255
1000c310:	b811883a 	mov	r8,r23
1000c314:	98034f1e 	bne	r19,zero,1000d054 <___vfiprintf_internal_r+0x1474>
1000c318:	00840074 	movhi	r2,4097
1000c31c:	10904a04 	addi	r2,r2,16680
1000c320:	d8802615 	stw	r2,152(sp)
1000c324:	8880080c 	andi	r2,r17,32
1000c328:	1000ac26 	beq	r2,zero,1000c5dc <___vfiprintf_internal_r+0x9fc>
1000c32c:	d9002217 	ldw	r4,136(sp)
1000c330:	24c00017 	ldw	r19,0(r4)
1000c334:	25000117 	ldw	r20,4(r4)
1000c338:	21000204 	addi	r4,r4,8
1000c33c:	d9002215 	stw	r4,136(sp)
1000c340:	8880004c 	andi	r2,r17,1
1000c344:	1001e726 	beq	r2,zero,1000cae4 <___vfiprintf_internal_r+0xf04>
1000c348:	9d04b03a 	or	r2,r19,r20
1000c34c:	10025c1e 	bne	r2,zero,1000ccc0 <___vfiprintf_internal_r+0x10e0>
1000c350:	d8001d85 	stb	zero,118(sp)
1000c354:	80024416 	blt	r16,zero,1000cc68 <___vfiprintf_internal_r+0x1088>
1000c358:	00bfdfc4 	movi	r2,-129
1000c35c:	88a2703a 	and	r17,r17,r2
1000c360:	003f1d06 	br	1000bfd8 <__alt_data_end+0xf800bfd8>
1000c364:	d8c02217 	ldw	r3,136(sp)
1000c368:	04c00044 	movi	r19,1
1000c36c:	b811883a 	mov	r8,r23
1000c370:	18800017 	ldw	r2,0(r3)
1000c374:	18c00104 	addi	r3,r3,4
1000c378:	d8001d85 	stb	zero,118(sp)
1000c37c:	d8801005 	stb	r2,64(sp)
1000c380:	d8c02215 	stw	r3,136(sp)
1000c384:	9829883a 	mov	r20,r19
1000c388:	ddc01004 	addi	r23,sp,64
1000c38c:	0021883a 	mov	r16,zero
1000c390:	003f1e06 	br	1000c00c <__alt_data_end+0xf800c00c>
1000c394:	9cc03fcc 	andi	r19,r19,255
1000c398:	b811883a 	mov	r8,r23
1000c39c:	9803331e 	bne	r19,zero,1000d06c <___vfiprintf_internal_r+0x148c>
1000c3a0:	8880080c 	andi	r2,r17,32
1000c3a4:	10004826 	beq	r2,zero,1000c4c8 <___vfiprintf_internal_r+0x8e8>
1000c3a8:	d9002217 	ldw	r4,136(sp)
1000c3ac:	20800117 	ldw	r2,4(r4)
1000c3b0:	24c00017 	ldw	r19,0(r4)
1000c3b4:	21000204 	addi	r4,r4,8
1000c3b8:	d9002215 	stw	r4,136(sp)
1000c3bc:	1029883a 	mov	r20,r2
1000c3c0:	10024c16 	blt	r2,zero,1000ccf4 <___vfiprintf_internal_r+0x1114>
1000c3c4:	dd401d83 	ldbu	r21,118(sp)
1000c3c8:	80007116 	blt	r16,zero,1000c590 <___vfiprintf_internal_r+0x9b0>
1000c3cc:	00ffdfc4 	movi	r3,-129
1000c3d0:	9d04b03a 	or	r2,r19,r20
1000c3d4:	88e2703a 	and	r17,r17,r3
1000c3d8:	1000d126 	beq	r2,zero,1000c720 <___vfiprintf_internal_r+0xb40>
1000c3dc:	a0023526 	beq	r20,zero,1000ccb4 <___vfiprintf_internal_r+0x10d4>
1000c3e0:	ddc01a04 	addi	r23,sp,104
1000c3e4:	4039883a 	mov	fp,r8
1000c3e8:	9809883a 	mov	r4,r19
1000c3ec:	a00b883a 	mov	r5,r20
1000c3f0:	01800284 	movi	r6,10
1000c3f4:	000f883a 	mov	r7,zero
1000c3f8:	000e10c0 	call	1000e10c <__umoddi3>
1000c3fc:	10800c04 	addi	r2,r2,48
1000c400:	bdffffc4 	addi	r23,r23,-1
1000c404:	9809883a 	mov	r4,r19
1000c408:	a00b883a 	mov	r5,r20
1000c40c:	b8800005 	stb	r2,0(r23)
1000c410:	01800284 	movi	r6,10
1000c414:	000f883a 	mov	r7,zero
1000c418:	000db100 	call	1000db10 <__udivdi3>
1000c41c:	1027883a 	mov	r19,r2
1000c420:	10c4b03a 	or	r2,r2,r3
1000c424:	1829883a 	mov	r20,r3
1000c428:	103fef1e 	bne	r2,zero,1000c3e8 <__alt_data_end+0xf800c3e8>
1000c42c:	d9001e17 	ldw	r4,120(sp)
1000c430:	e011883a 	mov	r8,fp
1000c434:	25e9c83a 	sub	r20,r4,r23
1000c438:	003eec06 	br	1000bfec <__alt_data_end+0xf800bfec>
1000c43c:	d8802307 	ldb	r2,140(sp)
1000c440:	1002361e 	bne	r2,zero,1000cd1c <___vfiprintf_internal_r+0x113c>
1000c444:	00c00804 	movi	r3,32
1000c448:	d8c02305 	stb	r3,140(sp)
1000c44c:	04c00044 	movi	r19,1
1000c450:	b0c00007 	ldb	r3,0(r22)
1000c454:	003e3f06 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000c458:	8c400054 	ori	r17,r17,1
1000c45c:	b0c00007 	ldb	r3,0(r22)
1000c460:	003e3c06 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000c464:	8c402014 	ori	r17,r17,128
1000c468:	b0c00007 	ldb	r3,0(r22)
1000c46c:	003e3906 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000c470:	dc002715 	stw	r16,156(sp)
1000c474:	d8002515 	stw	zero,148(sp)
1000c478:	1f3ff404 	addi	fp,r3,-48
1000c47c:	0009883a 	mov	r4,zero
1000c480:	b021883a 	mov	r16,r22
1000c484:	01400284 	movi	r5,10
1000c488:	000e8840 	call	1000e884 <__mulsi3>
1000c48c:	80c00007 	ldb	r3,0(r16)
1000c490:	e089883a 	add	r4,fp,r2
1000c494:	b5800044 	addi	r22,r22,1
1000c498:	1f3ff404 	addi	fp,r3,-48
1000c49c:	b021883a 	mov	r16,r22
1000c4a0:	af3ff82e 	bgeu	r21,fp,1000c484 <__alt_data_end+0xf800c484>
1000c4a4:	d9002515 	stw	r4,148(sp)
1000c4a8:	dc002717 	ldw	r16,156(sp)
1000c4ac:	003e2a06 	br	1000bd58 <__alt_data_end+0xf800bd58>
1000c4b0:	9cc03fcc 	andi	r19,r19,255
1000c4b4:	b811883a 	mov	r8,r23
1000c4b8:	9802e91e 	bne	r19,zero,1000d060 <___vfiprintf_internal_r+0x1480>
1000c4bc:	8c400414 	ori	r17,r17,16
1000c4c0:	8880080c 	andi	r2,r17,32
1000c4c4:	103fb81e 	bne	r2,zero,1000c3a8 <__alt_data_end+0xf800c3a8>
1000c4c8:	8880040c 	andi	r2,r17,16
1000c4cc:	10022e26 	beq	r2,zero,1000cd88 <___vfiprintf_internal_r+0x11a8>
1000c4d0:	d9402217 	ldw	r5,136(sp)
1000c4d4:	2cc00017 	ldw	r19,0(r5)
1000c4d8:	29400104 	addi	r5,r5,4
1000c4dc:	d9402215 	stw	r5,136(sp)
1000c4e0:	9829d7fa 	srai	r20,r19,31
1000c4e4:	a005883a 	mov	r2,r20
1000c4e8:	003fb506 	br	1000c3c0 <__alt_data_end+0xf800c3c0>
1000c4ec:	9cc03fcc 	andi	r19,r19,255
1000c4f0:	b811883a 	mov	r8,r23
1000c4f4:	9802fa1e 	bne	r19,zero,1000d0e0 <___vfiprintf_internal_r+0x1500>
1000c4f8:	8c400414 	ori	r17,r17,16
1000c4fc:	8880080c 	andi	r2,r17,32
1000c500:	103f661e 	bne	r2,zero,1000c29c <__alt_data_end+0xf800c29c>
1000c504:	8880040c 	andi	r2,r17,16
1000c508:	10020626 	beq	r2,zero,1000cd24 <___vfiprintf_internal_r+0x1144>
1000c50c:	d9402217 	ldw	r5,136(sp)
1000c510:	d8001d85 	stb	zero,118(sp)
1000c514:	0029883a 	mov	r20,zero
1000c518:	28800104 	addi	r2,r5,4
1000c51c:	2cc00017 	ldw	r19,0(r5)
1000c520:	80020816 	blt	r16,zero,1000cd44 <___vfiprintf_internal_r+0x1164>
1000c524:	00ffdfc4 	movi	r3,-129
1000c528:	d8802215 	stw	r2,136(sp)
1000c52c:	88e2703a 	and	r17,r17,r3
1000c530:	983f651e 	bne	r19,zero,1000c2c8 <__alt_data_end+0xf800c2c8>
1000c534:	002b883a 	mov	r21,zero
1000c538:	8002cf26 	beq	r16,zero,1000d078 <___vfiprintf_internal_r+0x1498>
1000c53c:	0027883a 	mov	r19,zero
1000c540:	0029883a 	mov	r20,zero
1000c544:	003f6106 	br	1000c2cc <__alt_data_end+0xf800c2cc>
1000c548:	9cc03fcc 	andi	r19,r19,255
1000c54c:	b811883a 	mov	r8,r23
1000c550:	9802e01e 	bne	r19,zero,1000d0d4 <___vfiprintf_internal_r+0x14f4>
1000c554:	8c400414 	ori	r17,r17,16
1000c558:	8880080c 	andi	r2,r17,32
1000c55c:	1000641e 	bne	r2,zero,1000c6f0 <___vfiprintf_internal_r+0xb10>
1000c560:	8880040c 	andi	r2,r17,16
1000c564:	1001c81e 	bne	r2,zero,1000cc88 <___vfiprintf_internal_r+0x10a8>
1000c568:	8880100c 	andi	r2,r17,64
1000c56c:	d8001d85 	stb	zero,118(sp)
1000c570:	1002281e 	bne	r2,zero,1000ce14 <___vfiprintf_internal_r+0x1234>
1000c574:	d9002217 	ldw	r4,136(sp)
1000c578:	0029883a 	mov	r20,zero
1000c57c:	20800104 	addi	r2,r4,4
1000c580:	24c00017 	ldw	r19,0(r4)
1000c584:	8001c60e 	bge	r16,zero,1000cca0 <___vfiprintf_internal_r+0x10c0>
1000c588:	d8802215 	stw	r2,136(sp)
1000c58c:	002b883a 	mov	r21,zero
1000c590:	9d04b03a 	or	r2,r19,r20
1000c594:	103f911e 	bne	r2,zero,1000c3dc <__alt_data_end+0xf800c3dc>
1000c598:	00800044 	movi	r2,1
1000c59c:	10803fcc 	andi	r2,r2,255
1000c5a0:	00c00044 	movi	r3,1
1000c5a4:	10c05f26 	beq	r2,r3,1000c724 <___vfiprintf_internal_r+0xb44>
1000c5a8:	00c00084 	movi	r3,2
1000c5ac:	10ffe31e 	bne	r2,r3,1000c53c <__alt_data_end+0xf800c53c>
1000c5b0:	0027883a 	mov	r19,zero
1000c5b4:	0029883a 	mov	r20,zero
1000c5b8:	00015106 	br	1000cb00 <___vfiprintf_internal_r+0xf20>
1000c5bc:	9cc03fcc 	andi	r19,r19,255
1000c5c0:	b811883a 	mov	r8,r23
1000c5c4:	9802c01e 	bne	r19,zero,1000d0c8 <___vfiprintf_internal_r+0x14e8>
1000c5c8:	01440074 	movhi	r5,4097
1000c5cc:	29504504 	addi	r5,r5,16660
1000c5d0:	d9402615 	stw	r5,152(sp)
1000c5d4:	8880080c 	andi	r2,r17,32
1000c5d8:	103f541e 	bne	r2,zero,1000c32c <__alt_data_end+0xf800c32c>
1000c5dc:	8880040c 	andi	r2,r17,16
1000c5e0:	1001f226 	beq	r2,zero,1000cdac <___vfiprintf_internal_r+0x11cc>
1000c5e4:	d9402217 	ldw	r5,136(sp)
1000c5e8:	0029883a 	mov	r20,zero
1000c5ec:	2cc00017 	ldw	r19,0(r5)
1000c5f0:	29400104 	addi	r5,r5,4
1000c5f4:	d9402215 	stw	r5,136(sp)
1000c5f8:	003f5106 	br	1000c340 <__alt_data_end+0xf800c340>
1000c5fc:	d8c02217 	ldw	r3,136(sp)
1000c600:	b811883a 	mov	r8,r23
1000c604:	d8001d85 	stb	zero,118(sp)
1000c608:	1dc00017 	ldw	r23,0(r3)
1000c60c:	1f000104 	addi	fp,r3,4
1000c610:	b8025926 	beq	r23,zero,1000cf78 <___vfiprintf_internal_r+0x1398>
1000c614:	80023316 	blt	r16,zero,1000cee4 <___vfiprintf_internal_r+0x1304>
1000c618:	800d883a 	mov	r6,r16
1000c61c:	000b883a 	mov	r5,zero
1000c620:	b809883a 	mov	r4,r23
1000c624:	da002a15 	stw	r8,168(sp)
1000c628:	0009d740 	call	10009d74 <memchr>
1000c62c:	da002a17 	ldw	r8,168(sp)
1000c630:	10026826 	beq	r2,zero,1000cfd4 <___vfiprintf_internal_r+0x13f4>
1000c634:	15e9c83a 	sub	r20,r2,r23
1000c638:	dd401d83 	ldbu	r21,118(sp)
1000c63c:	df002215 	stw	fp,136(sp)
1000c640:	0021883a 	mov	r16,zero
1000c644:	003e6906 	br	1000bfec <__alt_data_end+0xf800bfec>
1000c648:	9cc03fcc 	andi	r19,r19,255
1000c64c:	b811883a 	mov	r8,r23
1000c650:	983fc126 	beq	r19,zero,1000c558 <__alt_data_end+0xf800c558>
1000c654:	d8c02303 	ldbu	r3,140(sp)
1000c658:	d8c01d85 	stb	r3,118(sp)
1000c65c:	003fbe06 	br	1000c558 <__alt_data_end+0xf800c558>
1000c660:	d9002217 	ldw	r4,136(sp)
1000c664:	d9402217 	ldw	r5,136(sp)
1000c668:	21000017 	ldw	r4,0(r4)
1000c66c:	28800104 	addi	r2,r5,4
1000c670:	d9002515 	stw	r4,148(sp)
1000c674:	203e3d16 	blt	r4,zero,1000bf6c <__alt_data_end+0xf800bf6c>
1000c678:	d8802215 	stw	r2,136(sp)
1000c67c:	b0c00007 	ldb	r3,0(r22)
1000c680:	003db406 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000c684:	00c00ac4 	movi	r3,43
1000c688:	d8c02305 	stb	r3,140(sp)
1000c68c:	04c00044 	movi	r19,1
1000c690:	b0c00007 	ldb	r3,0(r22)
1000c694:	003daf06 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000c698:	b0c00007 	ldb	r3,0(r22)
1000c69c:	01000a84 	movi	r4,42
1000c6a0:	b4000044 	addi	r16,r22,1
1000c6a4:	19025e26 	beq	r3,r4,1000d020 <___vfiprintf_internal_r+0x1440>
1000c6a8:	1f3ff404 	addi	fp,r3,-48
1000c6ac:	0009883a 	mov	r4,zero
1000c6b0:	af025236 	bltu	r21,fp,1000cffc <___vfiprintf_internal_r+0x141c>
1000c6b4:	01400284 	movi	r5,10
1000c6b8:	000e8840 	call	1000e884 <__mulsi3>
1000c6bc:	80c00007 	ldb	r3,0(r16)
1000c6c0:	1709883a 	add	r4,r2,fp
1000c6c4:	85800044 	addi	r22,r16,1
1000c6c8:	1f3ff404 	addi	fp,r3,-48
1000c6cc:	b021883a 	mov	r16,r22
1000c6d0:	af3ff82e 	bgeu	r21,fp,1000c6b4 <__alt_data_end+0xf800c6b4>
1000c6d4:	2021883a 	mov	r16,r4
1000c6d8:	203d9f0e 	bge	r4,zero,1000bd58 <__alt_data_end+0xf800bd58>
1000c6dc:	043fffc4 	movi	r16,-1
1000c6e0:	003d9d06 	br	1000bd58 <__alt_data_end+0xf800bd58>
1000c6e4:	8c401014 	ori	r17,r17,64
1000c6e8:	b0c00007 	ldb	r3,0(r22)
1000c6ec:	003d9906 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000c6f0:	d9002217 	ldw	r4,136(sp)
1000c6f4:	d8001d85 	stb	zero,118(sp)
1000c6f8:	20c00204 	addi	r3,r4,8
1000c6fc:	24c00017 	ldw	r19,0(r4)
1000c700:	25000117 	ldw	r20,4(r4)
1000c704:	8001e716 	blt	r16,zero,1000cea4 <___vfiprintf_internal_r+0x12c4>
1000c708:	013fdfc4 	movi	r4,-129
1000c70c:	9d04b03a 	or	r2,r19,r20
1000c710:	d8c02215 	stw	r3,136(sp)
1000c714:	8922703a 	and	r17,r17,r4
1000c718:	002b883a 	mov	r21,zero
1000c71c:	103f2f1e 	bne	r2,zero,1000c3dc <__alt_data_end+0xf800c3dc>
1000c720:	803e2f26 	beq	r16,zero,1000bfe0 <__alt_data_end+0xf800bfe0>
1000c724:	0027883a 	mov	r19,zero
1000c728:	9cc00c04 	addi	r19,r19,48
1000c72c:	dcc019c5 	stb	r19,103(sp)
1000c730:	dd002817 	ldw	r20,160(sp)
1000c734:	ddc019c4 	addi	r23,sp,103
1000c738:	003e2c06 	br	1000bfec <__alt_data_end+0xf800bfec>
1000c73c:	9cc03fcc 	andi	r19,r19,255
1000c740:	b811883a 	mov	r8,r23
1000c744:	9802571e 	bne	r19,zero,1000d0a4 <___vfiprintf_internal_r+0x14c4>
1000c748:	18005726 	beq	r3,zero,1000c8a8 <___vfiprintf_internal_r+0xcc8>
1000c74c:	04c00044 	movi	r19,1
1000c750:	d8c01005 	stb	r3,64(sp)
1000c754:	d8001d85 	stb	zero,118(sp)
1000c758:	9829883a 	mov	r20,r19
1000c75c:	ddc01004 	addi	r23,sp,64
1000c760:	003f0a06 	br	1000c38c <__alt_data_end+0xf800c38c>
1000c764:	d9402017 	ldw	r5,128(sp)
1000c768:	d9002117 	ldw	r4,132(sp)
1000c76c:	d9801a04 	addi	r6,sp,104
1000c770:	da802a15 	stw	r10,168(sp)
1000c774:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000c778:	da802a17 	ldw	r10,168(sp)
1000c77c:	1000501e 	bne	r2,zero,1000c8c0 <___vfiprintf_internal_r+0xce0>
1000c780:	d9801b17 	ldw	r6,108(sp)
1000c784:	d8801c17 	ldw	r2,112(sp)
1000c788:	d811883a 	mov	r8,sp
1000c78c:	31000044 	addi	r4,r6,1
1000c790:	003e3606 	br	1000c06c <__alt_data_end+0xf800c06c>
1000c794:	d9001b17 	ldw	r4,108(sp)
1000c798:	d8801c17 	ldw	r2,112(sp)
1000c79c:	21400044 	addi	r5,r4,1
1000c7a0:	d9801d87 	ldb	r6,118(sp)
1000c7a4:	303e5226 	beq	r6,zero,1000c0f0 <__alt_data_end+0xf800c0f0>
1000c7a8:	01800044 	movi	r6,1
1000c7ac:	d9001d84 	addi	r4,sp,118
1000c7b0:	1185883a 	add	r2,r2,r6
1000c7b4:	41000015 	stw	r4,0(r8)
1000c7b8:	41800115 	stw	r6,4(r8)
1000c7bc:	d8801c15 	stw	r2,112(sp)
1000c7c0:	d9401b15 	stw	r5,108(sp)
1000c7c4:	010001c4 	movi	r4,7
1000c7c8:	2140b00e 	bge	r4,r5,1000ca8c <___vfiprintf_internal_r+0xeac>
1000c7cc:	1000f61e 	bne	r2,zero,1000cba8 <___vfiprintf_internal_r+0xfc8>
1000c7d0:	3800b31e 	bne	r7,zero,1000caa0 <___vfiprintf_internal_r+0xec0>
1000c7d4:	0009883a 	mov	r4,zero
1000c7d8:	300b883a 	mov	r5,r6
1000c7dc:	d811883a 	mov	r8,sp
1000c7e0:	01802004 	movi	r6,128
1000c7e4:	19be5226 	beq	r3,r6,1000c130 <__alt_data_end+0xf800c130>
1000c7e8:	8521c83a 	sub	r16,r16,r20
1000c7ec:	043e790e 	bge	zero,r16,1000c1d4 <__alt_data_end+0xf800c1d4>
1000c7f0:	05400404 	movi	r21,16
1000c7f4:	ac01b00e 	bge	r21,r16,1000ceb8 <___vfiprintf_internal_r+0x12d8>
1000c7f8:	01440074 	movhi	r5,4097
1000c7fc:	2950ab04 	addi	r5,r5,17068
1000c800:	d9402315 	stw	r5,140(sp)
1000c804:	070001c4 	movi	fp,7
1000c808:	00000506 	br	1000c820 <___vfiprintf_internal_r+0xc40>
1000c80c:	21400084 	addi	r5,r4,2
1000c810:	42000204 	addi	r8,r8,8
1000c814:	1809883a 	mov	r4,r3
1000c818:	843ffc04 	addi	r16,r16,-16
1000c81c:	ac000d0e 	bge	r21,r16,1000c854 <___vfiprintf_internal_r+0xc74>
1000c820:	10800404 	addi	r2,r2,16
1000c824:	20c00044 	addi	r3,r4,1
1000c828:	44800015 	stw	r18,0(r8)
1000c82c:	45400115 	stw	r21,4(r8)
1000c830:	d8801c15 	stw	r2,112(sp)
1000c834:	d8c01b15 	stw	r3,108(sp)
1000c838:	e0fff40e 	bge	fp,r3,1000c80c <__alt_data_end+0xf800c80c>
1000c83c:	1000101e 	bne	r2,zero,1000c880 <___vfiprintf_internal_r+0xca0>
1000c840:	843ffc04 	addi	r16,r16,-16
1000c844:	01400044 	movi	r5,1
1000c848:	0009883a 	mov	r4,zero
1000c84c:	d811883a 	mov	r8,sp
1000c850:	ac3ff316 	blt	r21,r16,1000c820 <__alt_data_end+0xf800c820>
1000c854:	d8c02317 	ldw	r3,140(sp)
1000c858:	1405883a 	add	r2,r2,r16
1000c85c:	44000115 	stw	r16,4(r8)
1000c860:	40c00015 	stw	r3,0(r8)
1000c864:	d8801c15 	stw	r2,112(sp)
1000c868:	d9401b15 	stw	r5,108(sp)
1000c86c:	00c001c4 	movi	r3,7
1000c870:	19401916 	blt	r3,r5,1000c8d8 <___vfiprintf_internal_r+0xcf8>
1000c874:	42000204 	addi	r8,r8,8
1000c878:	29400044 	addi	r5,r5,1
1000c87c:	003e5506 	br	1000c1d4 <__alt_data_end+0xf800c1d4>
1000c880:	d9402017 	ldw	r5,128(sp)
1000c884:	d9002117 	ldw	r4,132(sp)
1000c888:	d9801a04 	addi	r6,sp,104
1000c88c:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000c890:	10000b1e 	bne	r2,zero,1000c8c0 <___vfiprintf_internal_r+0xce0>
1000c894:	d9001b17 	ldw	r4,108(sp)
1000c898:	d8801c17 	ldw	r2,112(sp)
1000c89c:	d811883a 	mov	r8,sp
1000c8a0:	21400044 	addi	r5,r4,1
1000c8a4:	003fdc06 	br	1000c818 <__alt_data_end+0xf800c818>
1000c8a8:	d8801c17 	ldw	r2,112(sp)
1000c8ac:	10000426 	beq	r2,zero,1000c8c0 <___vfiprintf_internal_r+0xce0>
1000c8b0:	d9402017 	ldw	r5,128(sp)
1000c8b4:	d9002117 	ldw	r4,132(sp)
1000c8b8:	d9801a04 	addi	r6,sp,104
1000c8bc:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000c8c0:	d9402017 	ldw	r5,128(sp)
1000c8c4:	2880030b 	ldhu	r2,12(r5)
1000c8c8:	1080100c 	andi	r2,r2,64
1000c8cc:	10014d1e 	bne	r2,zero,1000ce04 <___vfiprintf_internal_r+0x1224>
1000c8d0:	d8802417 	ldw	r2,144(sp)
1000c8d4:	003d9706 	br	1000bf34 <__alt_data_end+0xf800bf34>
1000c8d8:	1000d21e 	bne	r2,zero,1000cc24 <___vfiprintf_internal_r+0x1044>
1000c8dc:	00c00044 	movi	r3,1
1000c8e0:	a005883a 	mov	r2,r20
1000c8e4:	ddc00015 	stw	r23,0(sp)
1000c8e8:	dd000115 	stw	r20,4(sp)
1000c8ec:	dd001c15 	stw	r20,112(sp)
1000c8f0:	d8c01b15 	stw	r3,108(sp)
1000c8f4:	d811883a 	mov	r8,sp
1000c8f8:	42000204 	addi	r8,r8,8
1000c8fc:	8c40010c 	andi	r17,r17,4
1000c900:	88004026 	beq	r17,zero,1000ca04 <___vfiprintf_internal_r+0xe24>
1000c904:	d9002517 	ldw	r4,148(sp)
1000c908:	24e3c83a 	sub	r17,r4,r19
1000c90c:	04403d0e 	bge	zero,r17,1000ca04 <___vfiprintf_internal_r+0xe24>
1000c910:	04000404 	movi	r16,16
1000c914:	8441a90e 	bge	r16,r17,1000cfbc <___vfiprintf_internal_r+0x13dc>
1000c918:	00c40074 	movhi	r3,4097
1000c91c:	18d0af04 	addi	r3,r3,17084
1000c920:	d9001b17 	ldw	r4,108(sp)
1000c924:	d8c02315 	stw	r3,140(sp)
1000c928:	050001c4 	movi	r20,7
1000c92c:	dd402117 	ldw	r21,132(sp)
1000c930:	ddc02017 	ldw	r23,128(sp)
1000c934:	00000506 	br	1000c94c <___vfiprintf_internal_r+0xd6c>
1000c938:	21400084 	addi	r5,r4,2
1000c93c:	42000204 	addi	r8,r8,8
1000c940:	1809883a 	mov	r4,r3
1000c944:	8c7ffc04 	addi	r17,r17,-16
1000c948:	84400f0e 	bge	r16,r17,1000c988 <___vfiprintf_internal_r+0xda8>
1000c94c:	01440074 	movhi	r5,4097
1000c950:	10800404 	addi	r2,r2,16
1000c954:	20c00044 	addi	r3,r4,1
1000c958:	2950af04 	addi	r5,r5,17084
1000c95c:	41400015 	stw	r5,0(r8)
1000c960:	44000115 	stw	r16,4(r8)
1000c964:	d8801c15 	stw	r2,112(sp)
1000c968:	d8c01b15 	stw	r3,108(sp)
1000c96c:	a0fff20e 	bge	r20,r3,1000c938 <__alt_data_end+0xf800c938>
1000c970:	1000141e 	bne	r2,zero,1000c9c4 <___vfiprintf_internal_r+0xde4>
1000c974:	8c7ffc04 	addi	r17,r17,-16
1000c978:	01400044 	movi	r5,1
1000c97c:	0009883a 	mov	r4,zero
1000c980:	d811883a 	mov	r8,sp
1000c984:	847ff116 	blt	r16,r17,1000c94c <__alt_data_end+0xf800c94c>
1000c988:	d8c02317 	ldw	r3,140(sp)
1000c98c:	1445883a 	add	r2,r2,r17
1000c990:	44400115 	stw	r17,4(r8)
1000c994:	40c00015 	stw	r3,0(r8)
1000c998:	d8801c15 	stw	r2,112(sp)
1000c99c:	d9401b15 	stw	r5,108(sp)
1000c9a0:	00c001c4 	movi	r3,7
1000c9a4:	1940170e 	bge	r3,r5,1000ca04 <___vfiprintf_internal_r+0xe24>
1000c9a8:	1000101e 	bne	r2,zero,1000c9ec <___vfiprintf_internal_r+0xe0c>
1000c9ac:	d8802517 	ldw	r2,148(sp)
1000c9b0:	14c11616 	blt	r2,r19,1000ce0c <___vfiprintf_internal_r+0x122c>
1000c9b4:	d9002417 	ldw	r4,144(sp)
1000c9b8:	2089883a 	add	r4,r4,r2
1000c9bc:	d9002415 	stw	r4,144(sp)
1000c9c0:	003e1806 	br	1000c224 <__alt_data_end+0xf800c224>
1000c9c4:	d9801a04 	addi	r6,sp,104
1000c9c8:	b80b883a 	mov	r5,r23
1000c9cc:	a809883a 	mov	r4,r21
1000c9d0:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000c9d4:	103fba1e 	bne	r2,zero,1000c8c0 <__alt_data_end+0xf800c8c0>
1000c9d8:	d9001b17 	ldw	r4,108(sp)
1000c9dc:	d8801c17 	ldw	r2,112(sp)
1000c9e0:	d811883a 	mov	r8,sp
1000c9e4:	21400044 	addi	r5,r4,1
1000c9e8:	003fd606 	br	1000c944 <__alt_data_end+0xf800c944>
1000c9ec:	d9402017 	ldw	r5,128(sp)
1000c9f0:	d9002117 	ldw	r4,132(sp)
1000c9f4:	d9801a04 	addi	r6,sp,104
1000c9f8:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000c9fc:	103fb01e 	bne	r2,zero,1000c8c0 <__alt_data_end+0xf800c8c0>
1000ca00:	d8801c17 	ldw	r2,112(sp)
1000ca04:	d8c02517 	ldw	r3,148(sp)
1000ca08:	1cc0010e 	bge	r3,r19,1000ca10 <___vfiprintf_internal_r+0xe30>
1000ca0c:	9807883a 	mov	r3,r19
1000ca10:	d9002417 	ldw	r4,144(sp)
1000ca14:	20c9883a 	add	r4,r4,r3
1000ca18:	d9002415 	stw	r4,144(sp)
1000ca1c:	103e0126 	beq	r2,zero,1000c224 <__alt_data_end+0xf800c224>
1000ca20:	d9402017 	ldw	r5,128(sp)
1000ca24:	d9002117 	ldw	r4,132(sp)
1000ca28:	d9801a04 	addi	r6,sp,104
1000ca2c:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000ca30:	103dfc26 	beq	r2,zero,1000c224 <__alt_data_end+0xf800c224>
1000ca34:	003fa206 	br	1000c8c0 <__alt_data_end+0xf800c8c0>
1000ca38:	d9402017 	ldw	r5,128(sp)
1000ca3c:	d9002117 	ldw	r4,132(sp)
1000ca40:	d9801a04 	addi	r6,sp,104
1000ca44:	d9c02b15 	stw	r7,172(sp)
1000ca48:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000ca4c:	d9c02b17 	ldw	r7,172(sp)
1000ca50:	103f9b1e 	bne	r2,zero,1000c8c0 <__alt_data_end+0xf800c8c0>
1000ca54:	d9001b17 	ldw	r4,108(sp)
1000ca58:	d8801c17 	ldw	r2,112(sp)
1000ca5c:	d811883a 	mov	r8,sp
1000ca60:	21800044 	addi	r6,r4,1
1000ca64:	003dbf06 	br	1000c164 <__alt_data_end+0xf800c164>
1000ca68:	1000d81e 	bne	r2,zero,1000cdcc <___vfiprintf_internal_r+0x11ec>
1000ca6c:	d9001d87 	ldb	r4,118(sp)
1000ca70:	20000a26 	beq	r4,zero,1000ca9c <___vfiprintf_internal_r+0xebc>
1000ca74:	00800044 	movi	r2,1
1000ca78:	d9001d84 	addi	r4,sp,118
1000ca7c:	100b883a 	mov	r5,r2
1000ca80:	d9000015 	stw	r4,0(sp)
1000ca84:	d8800115 	stw	r2,4(sp)
1000ca88:	d811883a 	mov	r8,sp
1000ca8c:	2809883a 	mov	r4,r5
1000ca90:	42000204 	addi	r8,r8,8
1000ca94:	29400044 	addi	r5,r5,1
1000ca98:	003d9506 	br	1000c0f0 <__alt_data_end+0xf800c0f0>
1000ca9c:	3800fd26 	beq	r7,zero,1000ce94 <___vfiprintf_internal_r+0x12b4>
1000caa0:	00800084 	movi	r2,2
1000caa4:	d9001d04 	addi	r4,sp,116
1000caa8:	d9000015 	stw	r4,0(sp)
1000caac:	d8800115 	stw	r2,4(sp)
1000cab0:	01400044 	movi	r5,1
1000cab4:	d811883a 	mov	r8,sp
1000cab8:	2809883a 	mov	r4,r5
1000cabc:	42000204 	addi	r8,r8,8
1000cac0:	29400044 	addi	r5,r5,1
1000cac4:	003f4606 	br	1000c7e0 <__alt_data_end+0xf800c7e0>
1000cac8:	d8802517 	ldw	r2,148(sp)
1000cacc:	14c0010e 	bge	r2,r19,1000cad4 <___vfiprintf_internal_r+0xef4>
1000cad0:	9805883a 	mov	r2,r19
1000cad4:	d9402417 	ldw	r5,144(sp)
1000cad8:	288b883a 	add	r5,r5,r2
1000cadc:	d9402415 	stw	r5,144(sp)
1000cae0:	003dd006 	br	1000c224 <__alt_data_end+0xf800c224>
1000cae4:	d8001d85 	stb	zero,118(sp)
1000cae8:	80005d16 	blt	r16,zero,1000cc60 <___vfiprintf_internal_r+0x1080>
1000caec:	00ffdfc4 	movi	r3,-129
1000caf0:	9d04b03a 	or	r2,r19,r20
1000caf4:	88e2703a 	and	r17,r17,r3
1000caf8:	103d3726 	beq	r2,zero,1000bfd8 <__alt_data_end+0xf800bfd8>
1000cafc:	002b883a 	mov	r21,zero
1000cb00:	d9002617 	ldw	r4,152(sp)
1000cb04:	ddc01a04 	addi	r23,sp,104
1000cb08:	988003cc 	andi	r2,r19,15
1000cb0c:	a006973a 	slli	r3,r20,28
1000cb10:	2085883a 	add	r2,r4,r2
1000cb14:	9826d13a 	srli	r19,r19,4
1000cb18:	10800003 	ldbu	r2,0(r2)
1000cb1c:	a028d13a 	srli	r20,r20,4
1000cb20:	bdffffc4 	addi	r23,r23,-1
1000cb24:	1ce6b03a 	or	r19,r3,r19
1000cb28:	b8800005 	stb	r2,0(r23)
1000cb2c:	9d04b03a 	or	r2,r19,r20
1000cb30:	103ff51e 	bne	r2,zero,1000cb08 <__alt_data_end+0xf800cb08>
1000cb34:	d8801e17 	ldw	r2,120(sp)
1000cb38:	15e9c83a 	sub	r20,r2,r23
1000cb3c:	003d2b06 	br	1000bfec <__alt_data_end+0xf800bfec>
1000cb40:	d9402017 	ldw	r5,128(sp)
1000cb44:	d9002117 	ldw	r4,132(sp)
1000cb48:	d9801a04 	addi	r6,sp,104
1000cb4c:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000cb50:	103f5b1e 	bne	r2,zero,1000c8c0 <__alt_data_end+0xf800c8c0>
1000cb54:	d8801c17 	ldw	r2,112(sp)
1000cb58:	d811883a 	mov	r8,sp
1000cb5c:	003f6706 	br	1000c8fc <__alt_data_end+0xf800c8fc>
1000cb60:	d9402017 	ldw	r5,128(sp)
1000cb64:	d9002117 	ldw	r4,132(sp)
1000cb68:	d9801a04 	addi	r6,sp,104
1000cb6c:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000cb70:	103f531e 	bne	r2,zero,1000c8c0 <__alt_data_end+0xf800c8c0>
1000cb74:	d811883a 	mov	r8,sp
1000cb78:	003cd906 	br	1000bee0 <__alt_data_end+0xf800bee0>
1000cb7c:	10803fcc 	andi	r2,r2,255
1000cb80:	1080201c 	xori	r2,r2,128
1000cb84:	10bfe004 	addi	r2,r2,-128
1000cb88:	00c00c04 	movi	r3,48
1000cb8c:	10ffe926 	beq	r2,r3,1000cb34 <__alt_data_end+0xf800cb34>
1000cb90:	b8ffffc5 	stb	r3,-1(r23)
1000cb94:	d8c01e17 	ldw	r3,120(sp)
1000cb98:	b8bfffc4 	addi	r2,r23,-1
1000cb9c:	102f883a 	mov	r23,r2
1000cba0:	18a9c83a 	sub	r20,r3,r2
1000cba4:	003d1106 	br	1000bfec <__alt_data_end+0xf800bfec>
1000cba8:	d9402017 	ldw	r5,128(sp)
1000cbac:	d9002117 	ldw	r4,132(sp)
1000cbb0:	d9801a04 	addi	r6,sp,104
1000cbb4:	d8c02a15 	stw	r3,168(sp)
1000cbb8:	d9c02b15 	stw	r7,172(sp)
1000cbbc:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000cbc0:	d8c02a17 	ldw	r3,168(sp)
1000cbc4:	d9c02b17 	ldw	r7,172(sp)
1000cbc8:	103f3d1e 	bne	r2,zero,1000c8c0 <__alt_data_end+0xf800c8c0>
1000cbcc:	d9001b17 	ldw	r4,108(sp)
1000cbd0:	d8801c17 	ldw	r2,112(sp)
1000cbd4:	d811883a 	mov	r8,sp
1000cbd8:	21400044 	addi	r5,r4,1
1000cbdc:	003d4406 	br	1000c0f0 <__alt_data_end+0xf800c0f0>
1000cbe0:	d9402017 	ldw	r5,128(sp)
1000cbe4:	d9002117 	ldw	r4,132(sp)
1000cbe8:	d9801a04 	addi	r6,sp,104
1000cbec:	d8c02a15 	stw	r3,168(sp)
1000cbf0:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000cbf4:	d8c02a17 	ldw	r3,168(sp)
1000cbf8:	103f311e 	bne	r2,zero,1000c8c0 <__alt_data_end+0xf800c8c0>
1000cbfc:	d9001b17 	ldw	r4,108(sp)
1000cc00:	d8801c17 	ldw	r2,112(sp)
1000cc04:	d811883a 	mov	r8,sp
1000cc08:	21400044 	addi	r5,r4,1
1000cc0c:	003ef406 	br	1000c7e0 <__alt_data_end+0xf800c7e0>
1000cc10:	1000bd1e 	bne	r2,zero,1000cf08 <___vfiprintf_internal_r+0x1328>
1000cc14:	01400044 	movi	r5,1
1000cc18:	0009883a 	mov	r4,zero
1000cc1c:	d811883a 	mov	r8,sp
1000cc20:	003ef106 	br	1000c7e8 <__alt_data_end+0xf800c7e8>
1000cc24:	d9402017 	ldw	r5,128(sp)
1000cc28:	d9002117 	ldw	r4,132(sp)
1000cc2c:	d9801a04 	addi	r6,sp,104
1000cc30:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000cc34:	103f221e 	bne	r2,zero,1000c8c0 <__alt_data_end+0xf800c8c0>
1000cc38:	d9401b17 	ldw	r5,108(sp)
1000cc3c:	d8801c17 	ldw	r2,112(sp)
1000cc40:	d811883a 	mov	r8,sp
1000cc44:	29400044 	addi	r5,r5,1
1000cc48:	003d6206 	br	1000c1d4 <__alt_data_end+0xf800c1d4>
1000cc4c:	01440074 	movhi	r5,4097
1000cc50:	29504a04 	addi	r5,r5,16680
1000cc54:	d9402615 	stw	r5,152(sp)
1000cc58:	d8c02215 	stw	r3,136(sp)
1000cc5c:	1023883a 	mov	r17,r2
1000cc60:	9d04b03a 	or	r2,r19,r20
1000cc64:	103fa51e 	bne	r2,zero,1000cafc <__alt_data_end+0xf800cafc>
1000cc68:	002b883a 	mov	r21,zero
1000cc6c:	00800084 	movi	r2,2
1000cc70:	003e4a06 	br	1000c59c <__alt_data_end+0xf800c59c>
1000cc74:	01440074 	movhi	r5,4097
1000cc78:	29504a04 	addi	r5,r5,16680
1000cc7c:	002b883a 	mov	r21,zero
1000cc80:	d9402615 	stw	r5,152(sp)
1000cc84:	003f9e06 	br	1000cb00 <__alt_data_end+0xf800cb00>
1000cc88:	d9402217 	ldw	r5,136(sp)
1000cc8c:	d8001d85 	stb	zero,118(sp)
1000cc90:	0029883a 	mov	r20,zero
1000cc94:	28800104 	addi	r2,r5,4
1000cc98:	2cc00017 	ldw	r19,0(r5)
1000cc9c:	803e3a16 	blt	r16,zero,1000c588 <__alt_data_end+0xf800c588>
1000cca0:	00ffdfc4 	movi	r3,-129
1000cca4:	d8802215 	stw	r2,136(sp)
1000cca8:	88e2703a 	and	r17,r17,r3
1000ccac:	002b883a 	mov	r21,zero
1000ccb0:	983e9b26 	beq	r19,zero,1000c720 <__alt_data_end+0xf800c720>
1000ccb4:	00800244 	movi	r2,9
1000ccb8:	14fdc936 	bltu	r2,r19,1000c3e0 <__alt_data_end+0xf800c3e0>
1000ccbc:	003e9a06 	br	1000c728 <__alt_data_end+0xf800c728>
1000ccc0:	00800c04 	movi	r2,48
1000ccc4:	d8c01d45 	stb	r3,117(sp)
1000ccc8:	d8801d05 	stb	r2,116(sp)
1000cccc:	d8001d85 	stb	zero,118(sp)
1000ccd0:	88c00094 	ori	r3,r17,2
1000ccd4:	80009c16 	blt	r16,zero,1000cf48 <___vfiprintf_internal_r+0x1368>
1000ccd8:	00bfdfc4 	movi	r2,-129
1000ccdc:	88a2703a 	and	r17,r17,r2
1000cce0:	8c400094 	ori	r17,r17,2
1000cce4:	002b883a 	mov	r21,zero
1000cce8:	003f8506 	br	1000cb00 <__alt_data_end+0xf800cb00>
1000ccec:	b029883a 	mov	r20,r22
1000ccf0:	003c0b06 	br	1000bd20 <__alt_data_end+0xf800bd20>
1000ccf4:	04e7c83a 	sub	r19,zero,r19
1000ccf8:	05400b44 	movi	r21,45
1000ccfc:	9804c03a 	cmpne	r2,r19,zero
1000cd00:	0529c83a 	sub	r20,zero,r20
1000cd04:	dd401d85 	stb	r21,118(sp)
1000cd08:	a0a9c83a 	sub	r20,r20,r2
1000cd0c:	80009716 	blt	r16,zero,1000cf6c <___vfiprintf_internal_r+0x138c>
1000cd10:	00bfdfc4 	movi	r2,-129
1000cd14:	88a2703a 	and	r17,r17,r2
1000cd18:	003db006 	br	1000c3dc <__alt_data_end+0xf800c3dc>
1000cd1c:	b0c00007 	ldb	r3,0(r22)
1000cd20:	003c0c06 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000cd24:	8880100c 	andi	r2,r17,64
1000cd28:	d8001d85 	stb	zero,118(sp)
1000cd2c:	1000461e 	bne	r2,zero,1000ce48 <___vfiprintf_internal_r+0x1268>
1000cd30:	d9002217 	ldw	r4,136(sp)
1000cd34:	0029883a 	mov	r20,zero
1000cd38:	20800104 	addi	r2,r4,4
1000cd3c:	24c00017 	ldw	r19,0(r4)
1000cd40:	803df80e 	bge	r16,zero,1000c524 <__alt_data_end+0xf800c524>
1000cd44:	9d06b03a 	or	r3,r19,r20
1000cd48:	d8802215 	stw	r2,136(sp)
1000cd4c:	183d5e1e 	bne	r3,zero,1000c2c8 <__alt_data_end+0xf800c2c8>
1000cd50:	002b883a 	mov	r21,zero
1000cd54:	0005883a 	mov	r2,zero
1000cd58:	003e1006 	br	1000c59c <__alt_data_end+0xf800c59c>
1000cd5c:	8880040c 	andi	r2,r17,16
1000cd60:	1000321e 	bne	r2,zero,1000ce2c <___vfiprintf_internal_r+0x124c>
1000cd64:	8c40100c 	andi	r17,r17,64
1000cd68:	88008d26 	beq	r17,zero,1000cfa0 <___vfiprintf_internal_r+0x13c0>
1000cd6c:	d9402217 	ldw	r5,136(sp)
1000cd70:	d8c02417 	ldw	r3,144(sp)
1000cd74:	28800017 	ldw	r2,0(r5)
1000cd78:	29400104 	addi	r5,r5,4
1000cd7c:	d9402215 	stw	r5,136(sp)
1000cd80:	10c0000d 	sth	r3,0(r2)
1000cd84:	003bca06 	br	1000bcb0 <__alt_data_end+0xf800bcb0>
1000cd88:	8880100c 	andi	r2,r17,64
1000cd8c:	10003a26 	beq	r2,zero,1000ce78 <___vfiprintf_internal_r+0x1298>
1000cd90:	d8802217 	ldw	r2,136(sp)
1000cd94:	14c0000f 	ldh	r19,0(r2)
1000cd98:	10800104 	addi	r2,r2,4
1000cd9c:	d8802215 	stw	r2,136(sp)
1000cda0:	9829d7fa 	srai	r20,r19,31
1000cda4:	a005883a 	mov	r2,r20
1000cda8:	003d8506 	br	1000c3c0 <__alt_data_end+0xf800c3c0>
1000cdac:	8880100c 	andi	r2,r17,64
1000cdb0:	10002b26 	beq	r2,zero,1000ce60 <___vfiprintf_internal_r+0x1280>
1000cdb4:	d8802217 	ldw	r2,136(sp)
1000cdb8:	0029883a 	mov	r20,zero
1000cdbc:	14c0000b 	ldhu	r19,0(r2)
1000cdc0:	10800104 	addi	r2,r2,4
1000cdc4:	d8802215 	stw	r2,136(sp)
1000cdc8:	003d5d06 	br	1000c340 <__alt_data_end+0xf800c340>
1000cdcc:	d9402017 	ldw	r5,128(sp)
1000cdd0:	d9002117 	ldw	r4,132(sp)
1000cdd4:	d9801a04 	addi	r6,sp,104
1000cdd8:	d8c02a15 	stw	r3,168(sp)
1000cddc:	d9c02b15 	stw	r7,172(sp)
1000cde0:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000cde4:	d8c02a17 	ldw	r3,168(sp)
1000cde8:	d9c02b17 	ldw	r7,172(sp)
1000cdec:	103eb41e 	bne	r2,zero,1000c8c0 <__alt_data_end+0xf800c8c0>
1000cdf0:	d9001b17 	ldw	r4,108(sp)
1000cdf4:	d8801c17 	ldw	r2,112(sp)
1000cdf8:	d811883a 	mov	r8,sp
1000cdfc:	21400044 	addi	r5,r4,1
1000ce00:	003e6706 	br	1000c7a0 <__alt_data_end+0xf800c7a0>
1000ce04:	00bfffc4 	movi	r2,-1
1000ce08:	003c4a06 	br	1000bf34 <__alt_data_end+0xf800bf34>
1000ce0c:	9805883a 	mov	r2,r19
1000ce10:	003ee806 	br	1000c9b4 <__alt_data_end+0xf800c9b4>
1000ce14:	d8c02217 	ldw	r3,136(sp)
1000ce18:	0029883a 	mov	r20,zero
1000ce1c:	18800104 	addi	r2,r3,4
1000ce20:	1cc0000b 	ldhu	r19,0(r3)
1000ce24:	803f9e0e 	bge	r16,zero,1000cca0 <__alt_data_end+0xf800cca0>
1000ce28:	003dd706 	br	1000c588 <__alt_data_end+0xf800c588>
1000ce2c:	d8c02217 	ldw	r3,136(sp)
1000ce30:	d9002417 	ldw	r4,144(sp)
1000ce34:	18800017 	ldw	r2,0(r3)
1000ce38:	18c00104 	addi	r3,r3,4
1000ce3c:	d8c02215 	stw	r3,136(sp)
1000ce40:	11000015 	stw	r4,0(r2)
1000ce44:	003b9a06 	br	1000bcb0 <__alt_data_end+0xf800bcb0>
1000ce48:	d8c02217 	ldw	r3,136(sp)
1000ce4c:	0029883a 	mov	r20,zero
1000ce50:	18800104 	addi	r2,r3,4
1000ce54:	1cc0000b 	ldhu	r19,0(r3)
1000ce58:	803db20e 	bge	r16,zero,1000c524 <__alt_data_end+0xf800c524>
1000ce5c:	003fb906 	br	1000cd44 <__alt_data_end+0xf800cd44>
1000ce60:	d9002217 	ldw	r4,136(sp)
1000ce64:	0029883a 	mov	r20,zero
1000ce68:	24c00017 	ldw	r19,0(r4)
1000ce6c:	21000104 	addi	r4,r4,4
1000ce70:	d9002215 	stw	r4,136(sp)
1000ce74:	003d3206 	br	1000c340 <__alt_data_end+0xf800c340>
1000ce78:	d8c02217 	ldw	r3,136(sp)
1000ce7c:	1cc00017 	ldw	r19,0(r3)
1000ce80:	18c00104 	addi	r3,r3,4
1000ce84:	d8c02215 	stw	r3,136(sp)
1000ce88:	9829d7fa 	srai	r20,r19,31
1000ce8c:	a005883a 	mov	r2,r20
1000ce90:	003d4b06 	br	1000c3c0 <__alt_data_end+0xf800c3c0>
1000ce94:	0009883a 	mov	r4,zero
1000ce98:	01400044 	movi	r5,1
1000ce9c:	d811883a 	mov	r8,sp
1000cea0:	003e4f06 	br	1000c7e0 <__alt_data_end+0xf800c7e0>
1000cea4:	d8c02215 	stw	r3,136(sp)
1000cea8:	002b883a 	mov	r21,zero
1000ceac:	003db806 	br	1000c590 <__alt_data_end+0xf800c590>
1000ceb0:	d811883a 	mov	r8,sp
1000ceb4:	003e9606 	br	1000c910 <__alt_data_end+0xf800c910>
1000ceb8:	01040074 	movhi	r4,4097
1000cebc:	2110ab04 	addi	r4,r4,17068
1000cec0:	d9002315 	stw	r4,140(sp)
1000cec4:	003e6306 	br	1000c854 <__alt_data_end+0xf800c854>
1000cec8:	b0c00043 	ldbu	r3,1(r22)
1000cecc:	8c400814 	ori	r17,r17,32
1000ced0:	b5800044 	addi	r22,r22,1
1000ced4:	18c03fcc 	andi	r3,r3,255
1000ced8:	18c0201c 	xori	r3,r3,128
1000cedc:	18ffe004 	addi	r3,r3,-128
1000cee0:	003b9c06 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000cee4:	b809883a 	mov	r4,r23
1000cee8:	da002a15 	stw	r8,168(sp)
1000ceec:	0004bb00 	call	10004bb0 <strlen>
1000cef0:	1029883a 	mov	r20,r2
1000cef4:	dd401d83 	ldbu	r21,118(sp)
1000cef8:	df002215 	stw	fp,136(sp)
1000cefc:	0021883a 	mov	r16,zero
1000cf00:	da002a17 	ldw	r8,168(sp)
1000cf04:	003c3906 	br	1000bfec <__alt_data_end+0xf800bfec>
1000cf08:	d9402017 	ldw	r5,128(sp)
1000cf0c:	d9002117 	ldw	r4,132(sp)
1000cf10:	d9801a04 	addi	r6,sp,104
1000cf14:	000bacc0 	call	1000bacc <__sprint_r.part.0>
1000cf18:	103e691e 	bne	r2,zero,1000c8c0 <__alt_data_end+0xf800c8c0>
1000cf1c:	d9001b17 	ldw	r4,108(sp)
1000cf20:	d8801c17 	ldw	r2,112(sp)
1000cf24:	d811883a 	mov	r8,sp
1000cf28:	21400044 	addi	r5,r4,1
1000cf2c:	003e2e06 	br	1000c7e8 <__alt_data_end+0xf800c7e8>
1000cf30:	01040074 	movhi	r4,4097
1000cf34:	2110af04 	addi	r4,r4,17084
1000cf38:	d9002315 	stw	r4,140(sp)
1000cf3c:	d9001b17 	ldw	r4,108(sp)
1000cf40:	21000044 	addi	r4,r4,1
1000cf44:	003c5e06 	br	1000c0c0 <__alt_data_end+0xf800c0c0>
1000cf48:	002b883a 	mov	r21,zero
1000cf4c:	00800084 	movi	r2,2
1000cf50:	10803fcc 	andi	r2,r2,255
1000cf54:	01000044 	movi	r4,1
1000cf58:	11002b26 	beq	r2,r4,1000d008 <___vfiprintf_internal_r+0x1428>
1000cf5c:	01000084 	movi	r4,2
1000cf60:	11002b1e 	bne	r2,r4,1000d010 <___vfiprintf_internal_r+0x1430>
1000cf64:	1823883a 	mov	r17,r3
1000cf68:	003ee506 	br	1000cb00 <__alt_data_end+0xf800cb00>
1000cf6c:	8807883a 	mov	r3,r17
1000cf70:	00800044 	movi	r2,1
1000cf74:	003ff606 	br	1000cf50 <__alt_data_end+0xf800cf50>
1000cf78:	00800184 	movi	r2,6
1000cf7c:	1400012e 	bgeu	r2,r16,1000cf84 <___vfiprintf_internal_r+0x13a4>
1000cf80:	1021883a 	mov	r16,r2
1000cf84:	8029883a 	mov	r20,r16
1000cf88:	8027883a 	mov	r19,r16
1000cf8c:	80002216 	blt	r16,zero,1000d018 <___vfiprintf_internal_r+0x1438>
1000cf90:	05c40074 	movhi	r23,4097
1000cf94:	df002215 	stw	fp,136(sp)
1000cf98:	bdd04f04 	addi	r23,r23,16700
1000cf9c:	003cfb06 	br	1000c38c <__alt_data_end+0xf800c38c>
1000cfa0:	d9002217 	ldw	r4,136(sp)
1000cfa4:	d9402417 	ldw	r5,144(sp)
1000cfa8:	20800017 	ldw	r2,0(r4)
1000cfac:	21000104 	addi	r4,r4,4
1000cfb0:	d9002215 	stw	r4,136(sp)
1000cfb4:	11400015 	stw	r5,0(r2)
1000cfb8:	003b3d06 	br	1000bcb0 <__alt_data_end+0xf800bcb0>
1000cfbc:	01440074 	movhi	r5,4097
1000cfc0:	2950af04 	addi	r5,r5,17084
1000cfc4:	d9402315 	stw	r5,140(sp)
1000cfc8:	d9401b17 	ldw	r5,108(sp)
1000cfcc:	29400044 	addi	r5,r5,1
1000cfd0:	003e6d06 	br	1000c988 <__alt_data_end+0xf800c988>
1000cfd4:	8029883a 	mov	r20,r16
1000cfd8:	dd401d83 	ldbu	r21,118(sp)
1000cfdc:	df002215 	stw	fp,136(sp)
1000cfe0:	0021883a 	mov	r16,zero
1000cfe4:	003c0106 	br	1000bfec <__alt_data_end+0xf800bfec>
1000cfe8:	00c40074 	movhi	r3,4097
1000cfec:	18d0ab04 	addi	r3,r3,17068
1000cff0:	d8c02315 	stw	r3,140(sp)
1000cff4:	280d883a 	mov	r6,r5
1000cff8:	003c6906 	br	1000c1a0 <__alt_data_end+0xf800c1a0>
1000cffc:	802d883a 	mov	r22,r16
1000d000:	0021883a 	mov	r16,zero
1000d004:	003b5406 	br	1000bd58 <__alt_data_end+0xf800bd58>
1000d008:	1823883a 	mov	r17,r3
1000d00c:	003cf306 	br	1000c3dc <__alt_data_end+0xf800c3dc>
1000d010:	1823883a 	mov	r17,r3
1000d014:	003cad06 	br	1000c2cc <__alt_data_end+0xf800c2cc>
1000d018:	0027883a 	mov	r19,zero
1000d01c:	003fdc06 	br	1000cf90 <__alt_data_end+0xf800cf90>
1000d020:	d9402217 	ldw	r5,136(sp)
1000d024:	8005883a 	mov	r2,r16
1000d028:	b0c00043 	ldbu	r3,1(r22)
1000d02c:	2c000017 	ldw	r16,0(r5)
1000d030:	29000104 	addi	r4,r5,4
1000d034:	d9002215 	stw	r4,136(sp)
1000d038:	102d883a 	mov	r22,r2
1000d03c:	803fa50e 	bge	r16,zero,1000ced4 <__alt_data_end+0xf800ced4>
1000d040:	18c03fcc 	andi	r3,r3,255
1000d044:	18c0201c 	xori	r3,r3,128
1000d048:	043fffc4 	movi	r16,-1
1000d04c:	18ffe004 	addi	r3,r3,-128
1000d050:	003b4006 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000d054:	d9402303 	ldbu	r5,140(sp)
1000d058:	d9401d85 	stb	r5,118(sp)
1000d05c:	003cae06 	br	1000c318 <__alt_data_end+0xf800c318>
1000d060:	d8c02303 	ldbu	r3,140(sp)
1000d064:	d8c01d85 	stb	r3,118(sp)
1000d068:	003d1406 	br	1000c4bc <__alt_data_end+0xf800c4bc>
1000d06c:	d8c02303 	ldbu	r3,140(sp)
1000d070:	d8c01d85 	stb	r3,118(sp)
1000d074:	003cca06 	br	1000c3a0 <__alt_data_end+0xf800c3a0>
1000d078:	8880004c 	andi	r2,r17,1
1000d07c:	002b883a 	mov	r21,zero
1000d080:	10000526 	beq	r2,zero,1000d098 <___vfiprintf_internal_r+0x14b8>
1000d084:	00800c04 	movi	r2,48
1000d088:	d88019c5 	stb	r2,103(sp)
1000d08c:	dd002817 	ldw	r20,160(sp)
1000d090:	ddc019c4 	addi	r23,sp,103
1000d094:	003bd506 	br	1000bfec <__alt_data_end+0xf800bfec>
1000d098:	0029883a 	mov	r20,zero
1000d09c:	ddc01a04 	addi	r23,sp,104
1000d0a0:	003bd206 	br	1000bfec <__alt_data_end+0xf800bfec>
1000d0a4:	d9002303 	ldbu	r4,140(sp)
1000d0a8:	d9001d85 	stb	r4,118(sp)
1000d0ac:	003da606 	br	1000c748 <__alt_data_end+0xf800c748>
1000d0b0:	d8c02303 	ldbu	r3,140(sp)
1000d0b4:	d8c01d85 	stb	r3,118(sp)
1000d0b8:	003c7606 	br	1000c294 <__alt_data_end+0xf800c294>
1000d0bc:	d8c02303 	ldbu	r3,140(sp)
1000d0c0:	d8c01d85 	stb	r3,118(sp)
1000d0c4:	003c6506 	br	1000c25c <__alt_data_end+0xf800c25c>
1000d0c8:	d9002303 	ldbu	r4,140(sp)
1000d0cc:	d9001d85 	stb	r4,118(sp)
1000d0d0:	003d3d06 	br	1000c5c8 <__alt_data_end+0xf800c5c8>
1000d0d4:	d8c02303 	ldbu	r3,140(sp)
1000d0d8:	d8c01d85 	stb	r3,118(sp)
1000d0dc:	003d1d06 	br	1000c554 <__alt_data_end+0xf800c554>
1000d0e0:	d8c02303 	ldbu	r3,140(sp)
1000d0e4:	d8c01d85 	stb	r3,118(sp)
1000d0e8:	003d0306 	br	1000c4f8 <__alt_data_end+0xf800c4f8>

1000d0ec <__vfiprintf_internal>:
1000d0ec:	00840074 	movhi	r2,4097
1000d0f0:	1097b004 	addi	r2,r2,24256
1000d0f4:	300f883a 	mov	r7,r6
1000d0f8:	280d883a 	mov	r6,r5
1000d0fc:	200b883a 	mov	r5,r4
1000d100:	11000017 	ldw	r4,0(r2)
1000d104:	000bbe01 	jmpi	1000bbe0 <___vfiprintf_internal_r>

1000d108 <__sbprintf>:
1000d108:	2880030b 	ldhu	r2,12(r5)
1000d10c:	2ac01917 	ldw	r11,100(r5)
1000d110:	2a80038b 	ldhu	r10,14(r5)
1000d114:	2a400717 	ldw	r9,28(r5)
1000d118:	2a000917 	ldw	r8,36(r5)
1000d11c:	defee204 	addi	sp,sp,-1144
1000d120:	00c10004 	movi	r3,1024
1000d124:	dc011a15 	stw	r16,1128(sp)
1000d128:	10bfff4c 	andi	r2,r2,65533
1000d12c:	2821883a 	mov	r16,r5
1000d130:	d8cb883a 	add	r5,sp,r3
1000d134:	dc811c15 	stw	r18,1136(sp)
1000d138:	dc411b15 	stw	r17,1132(sp)
1000d13c:	dfc11d15 	stw	ra,1140(sp)
1000d140:	2025883a 	mov	r18,r4
1000d144:	d881030d 	sth	r2,1036(sp)
1000d148:	dac11915 	stw	r11,1124(sp)
1000d14c:	da81038d 	sth	r10,1038(sp)
1000d150:	da410715 	stw	r9,1052(sp)
1000d154:	da010915 	stw	r8,1060(sp)
1000d158:	dec10015 	stw	sp,1024(sp)
1000d15c:	dec10415 	stw	sp,1040(sp)
1000d160:	d8c10215 	stw	r3,1032(sp)
1000d164:	d8c10515 	stw	r3,1044(sp)
1000d168:	d8010615 	stw	zero,1048(sp)
1000d16c:	000bbe00 	call	1000bbe0 <___vfiprintf_internal_r>
1000d170:	1023883a 	mov	r17,r2
1000d174:	10000416 	blt	r2,zero,1000d188 <__sbprintf+0x80>
1000d178:	d9410004 	addi	r5,sp,1024
1000d17c:	9009883a 	mov	r4,r18
1000d180:	0008c1c0 	call	10008c1c <_fflush_r>
1000d184:	10000d1e 	bne	r2,zero,1000d1bc <__sbprintf+0xb4>
1000d188:	d881030b 	ldhu	r2,1036(sp)
1000d18c:	1080100c 	andi	r2,r2,64
1000d190:	10000326 	beq	r2,zero,1000d1a0 <__sbprintf+0x98>
1000d194:	8080030b 	ldhu	r2,12(r16)
1000d198:	10801014 	ori	r2,r2,64
1000d19c:	8080030d 	sth	r2,12(r16)
1000d1a0:	8805883a 	mov	r2,r17
1000d1a4:	dfc11d17 	ldw	ra,1140(sp)
1000d1a8:	dc811c17 	ldw	r18,1136(sp)
1000d1ac:	dc411b17 	ldw	r17,1132(sp)
1000d1b0:	dc011a17 	ldw	r16,1128(sp)
1000d1b4:	dec11e04 	addi	sp,sp,1144
1000d1b8:	f800283a 	ret
1000d1bc:	047fffc4 	movi	r17,-1
1000d1c0:	003ff106 	br	1000d188 <__alt_data_end+0xf800d188>

1000d1c4 <_write_r>:
1000d1c4:	defffd04 	addi	sp,sp,-12
1000d1c8:	2805883a 	mov	r2,r5
1000d1cc:	dc000015 	stw	r16,0(sp)
1000d1d0:	04040074 	movhi	r16,4097
1000d1d4:	dc400115 	stw	r17,4(sp)
1000d1d8:	300b883a 	mov	r5,r6
1000d1dc:	841e9504 	addi	r16,r16,31316
1000d1e0:	2023883a 	mov	r17,r4
1000d1e4:	380d883a 	mov	r6,r7
1000d1e8:	1009883a 	mov	r4,r2
1000d1ec:	dfc00215 	stw	ra,8(sp)
1000d1f0:	80000015 	stw	zero,0(r16)
1000d1f4:	0011a140 	call	10011a14 <write>
1000d1f8:	00ffffc4 	movi	r3,-1
1000d1fc:	10c00526 	beq	r2,r3,1000d214 <_write_r+0x50>
1000d200:	dfc00217 	ldw	ra,8(sp)
1000d204:	dc400117 	ldw	r17,4(sp)
1000d208:	dc000017 	ldw	r16,0(sp)
1000d20c:	dec00304 	addi	sp,sp,12
1000d210:	f800283a 	ret
1000d214:	80c00017 	ldw	r3,0(r16)
1000d218:	183ff926 	beq	r3,zero,1000d200 <__alt_data_end+0xf800d200>
1000d21c:	88c00015 	stw	r3,0(r17)
1000d220:	003ff706 	br	1000d200 <__alt_data_end+0xf800d200>

1000d224 <_close_r>:
1000d224:	defffd04 	addi	sp,sp,-12
1000d228:	dc000015 	stw	r16,0(sp)
1000d22c:	04040074 	movhi	r16,4097
1000d230:	dc400115 	stw	r17,4(sp)
1000d234:	841e9504 	addi	r16,r16,31316
1000d238:	2023883a 	mov	r17,r4
1000d23c:	2809883a 	mov	r4,r5
1000d240:	dfc00215 	stw	ra,8(sp)
1000d244:	80000015 	stw	zero,0(r16)
1000d248:	001118c0 	call	1001118c <close>
1000d24c:	00ffffc4 	movi	r3,-1
1000d250:	10c00526 	beq	r2,r3,1000d268 <_close_r+0x44>
1000d254:	dfc00217 	ldw	ra,8(sp)
1000d258:	dc400117 	ldw	r17,4(sp)
1000d25c:	dc000017 	ldw	r16,0(sp)
1000d260:	dec00304 	addi	sp,sp,12
1000d264:	f800283a 	ret
1000d268:	80c00017 	ldw	r3,0(r16)
1000d26c:	183ff926 	beq	r3,zero,1000d254 <__alt_data_end+0xf800d254>
1000d270:	88c00015 	stw	r3,0(r17)
1000d274:	003ff706 	br	1000d254 <__alt_data_end+0xf800d254>

1000d278 <_calloc_r>:
1000d278:	defffe04 	addi	sp,sp,-8
1000d27c:	2805883a 	mov	r2,r5
1000d280:	dc000015 	stw	r16,0(sp)
1000d284:	300b883a 	mov	r5,r6
1000d288:	2021883a 	mov	r16,r4
1000d28c:	1009883a 	mov	r4,r2
1000d290:	dfc00115 	stw	ra,4(sp)
1000d294:	000e8840 	call	1000e884 <__mulsi3>
1000d298:	100b883a 	mov	r5,r2
1000d29c:	8009883a 	mov	r4,r16
1000d2a0:	00042100 	call	10004210 <_malloc_r>
1000d2a4:	10002926 	beq	r2,zero,1000d34c <_calloc_r+0xd4>
1000d2a8:	11bfff17 	ldw	r6,-4(r2)
1000d2ac:	1021883a 	mov	r16,r2
1000d2b0:	00bfff04 	movi	r2,-4
1000d2b4:	308c703a 	and	r6,r6,r2
1000d2b8:	00c00904 	movi	r3,36
1000d2bc:	308d883a 	add	r6,r6,r2
1000d2c0:	19801636 	bltu	r3,r6,1000d31c <_calloc_r+0xa4>
1000d2c4:	008004c4 	movi	r2,19
1000d2c8:	11800b2e 	bgeu	r2,r6,1000d2f8 <_calloc_r+0x80>
1000d2cc:	80000015 	stw	zero,0(r16)
1000d2d0:	80000115 	stw	zero,4(r16)
1000d2d4:	008006c4 	movi	r2,27
1000d2d8:	11801a2e 	bgeu	r2,r6,1000d344 <_calloc_r+0xcc>
1000d2dc:	80000215 	stw	zero,8(r16)
1000d2e0:	80000315 	stw	zero,12(r16)
1000d2e4:	30c0151e 	bne	r6,r3,1000d33c <_calloc_r+0xc4>
1000d2e8:	80000415 	stw	zero,16(r16)
1000d2ec:	80800604 	addi	r2,r16,24
1000d2f0:	80000515 	stw	zero,20(r16)
1000d2f4:	00000106 	br	1000d2fc <_calloc_r+0x84>
1000d2f8:	8005883a 	mov	r2,r16
1000d2fc:	10000015 	stw	zero,0(r2)
1000d300:	10000115 	stw	zero,4(r2)
1000d304:	10000215 	stw	zero,8(r2)
1000d308:	8005883a 	mov	r2,r16
1000d30c:	dfc00117 	ldw	ra,4(sp)
1000d310:	dc000017 	ldw	r16,0(sp)
1000d314:	dec00204 	addi	sp,sp,8
1000d318:	f800283a 	ret
1000d31c:	000b883a 	mov	r5,zero
1000d320:	8009883a 	mov	r4,r16
1000d324:	000a0fc0 	call	1000a0fc <memset>
1000d328:	8005883a 	mov	r2,r16
1000d32c:	dfc00117 	ldw	ra,4(sp)
1000d330:	dc000017 	ldw	r16,0(sp)
1000d334:	dec00204 	addi	sp,sp,8
1000d338:	f800283a 	ret
1000d33c:	80800404 	addi	r2,r16,16
1000d340:	003fee06 	br	1000d2fc <__alt_data_end+0xf800d2fc>
1000d344:	80800204 	addi	r2,r16,8
1000d348:	003fec06 	br	1000d2fc <__alt_data_end+0xf800d2fc>
1000d34c:	0005883a 	mov	r2,zero
1000d350:	003fee06 	br	1000d30c <__alt_data_end+0xf800d30c>

1000d354 <_fclose_r>:
1000d354:	28003926 	beq	r5,zero,1000d43c <_fclose_r+0xe8>
1000d358:	defffc04 	addi	sp,sp,-16
1000d35c:	dc400115 	stw	r17,4(sp)
1000d360:	dc000015 	stw	r16,0(sp)
1000d364:	dfc00315 	stw	ra,12(sp)
1000d368:	dc800215 	stw	r18,8(sp)
1000d36c:	2023883a 	mov	r17,r4
1000d370:	2821883a 	mov	r16,r5
1000d374:	20000226 	beq	r4,zero,1000d380 <_fclose_r+0x2c>
1000d378:	20800e17 	ldw	r2,56(r4)
1000d37c:	10002726 	beq	r2,zero,1000d41c <_fclose_r+0xc8>
1000d380:	8080030f 	ldh	r2,12(r16)
1000d384:	1000071e 	bne	r2,zero,1000d3a4 <_fclose_r+0x50>
1000d388:	0005883a 	mov	r2,zero
1000d38c:	dfc00317 	ldw	ra,12(sp)
1000d390:	dc800217 	ldw	r18,8(sp)
1000d394:	dc400117 	ldw	r17,4(sp)
1000d398:	dc000017 	ldw	r16,0(sp)
1000d39c:	dec00404 	addi	sp,sp,16
1000d3a0:	f800283a 	ret
1000d3a4:	800b883a 	mov	r5,r16
1000d3a8:	8809883a 	mov	r4,r17
1000d3ac:	0008a000 	call	10008a00 <__sflush_r>
1000d3b0:	1025883a 	mov	r18,r2
1000d3b4:	80800b17 	ldw	r2,44(r16)
1000d3b8:	10000426 	beq	r2,zero,1000d3cc <_fclose_r+0x78>
1000d3bc:	81400717 	ldw	r5,28(r16)
1000d3c0:	8809883a 	mov	r4,r17
1000d3c4:	103ee83a 	callr	r2
1000d3c8:	10001616 	blt	r2,zero,1000d424 <_fclose_r+0xd0>
1000d3cc:	8080030b 	ldhu	r2,12(r16)
1000d3d0:	1080200c 	andi	r2,r2,128
1000d3d4:	1000151e 	bne	r2,zero,1000d42c <_fclose_r+0xd8>
1000d3d8:	81400c17 	ldw	r5,48(r16)
1000d3dc:	28000526 	beq	r5,zero,1000d3f4 <_fclose_r+0xa0>
1000d3e0:	80801004 	addi	r2,r16,64
1000d3e4:	28800226 	beq	r5,r2,1000d3f0 <_fclose_r+0x9c>
1000d3e8:	8809883a 	mov	r4,r17
1000d3ec:	000917c0 	call	1000917c <_free_r>
1000d3f0:	80000c15 	stw	zero,48(r16)
1000d3f4:	81401117 	ldw	r5,68(r16)
1000d3f8:	28000326 	beq	r5,zero,1000d408 <_fclose_r+0xb4>
1000d3fc:	8809883a 	mov	r4,r17
1000d400:	000917c0 	call	1000917c <_free_r>
1000d404:	80001115 	stw	zero,68(r16)
1000d408:	00090180 	call	10009018 <__sfp_lock_acquire>
1000d40c:	8000030d 	sth	zero,12(r16)
1000d410:	000901c0 	call	1000901c <__sfp_lock_release>
1000d414:	9005883a 	mov	r2,r18
1000d418:	003fdc06 	br	1000d38c <__alt_data_end+0xf800d38c>
1000d41c:	00090080 	call	10009008 <__sinit>
1000d420:	003fd706 	br	1000d380 <__alt_data_end+0xf800d380>
1000d424:	04bfffc4 	movi	r18,-1
1000d428:	003fe806 	br	1000d3cc <__alt_data_end+0xf800d3cc>
1000d42c:	81400417 	ldw	r5,16(r16)
1000d430:	8809883a 	mov	r4,r17
1000d434:	000917c0 	call	1000917c <_free_r>
1000d438:	003fe706 	br	1000d3d8 <__alt_data_end+0xf800d3d8>
1000d43c:	0005883a 	mov	r2,zero
1000d440:	f800283a 	ret

1000d444 <fclose>:
1000d444:	00840074 	movhi	r2,4097
1000d448:	1097b004 	addi	r2,r2,24256
1000d44c:	200b883a 	mov	r5,r4
1000d450:	11000017 	ldw	r4,0(r2)
1000d454:	000d3541 	jmpi	1000d354 <_fclose_r>

1000d458 <__fputwc>:
1000d458:	defff804 	addi	sp,sp,-32
1000d45c:	dcc00415 	stw	r19,16(sp)
1000d460:	dc800315 	stw	r18,12(sp)
1000d464:	dc000115 	stw	r16,4(sp)
1000d468:	dfc00715 	stw	ra,28(sp)
1000d46c:	dd400615 	stw	r21,24(sp)
1000d470:	dd000515 	stw	r20,20(sp)
1000d474:	dc400215 	stw	r17,8(sp)
1000d478:	2027883a 	mov	r19,r4
1000d47c:	2825883a 	mov	r18,r5
1000d480:	3021883a 	mov	r16,r6
1000d484:	0009b640 	call	10009b64 <__locale_mb_cur_max>
1000d488:	00c00044 	movi	r3,1
1000d48c:	10c03e26 	beq	r2,r3,1000d588 <__fputwc+0x130>
1000d490:	81c01704 	addi	r7,r16,92
1000d494:	900d883a 	mov	r6,r18
1000d498:	d80b883a 	mov	r5,sp
1000d49c:	9809883a 	mov	r4,r19
1000d4a0:	000d9280 	call	1000d928 <_wcrtomb_r>
1000d4a4:	1029883a 	mov	r20,r2
1000d4a8:	00bfffc4 	movi	r2,-1
1000d4ac:	a0802026 	beq	r20,r2,1000d530 <__fputwc+0xd8>
1000d4b0:	d9400003 	ldbu	r5,0(sp)
1000d4b4:	a0001c26 	beq	r20,zero,1000d528 <__fputwc+0xd0>
1000d4b8:	0023883a 	mov	r17,zero
1000d4bc:	05400284 	movi	r21,10
1000d4c0:	00000906 	br	1000d4e8 <__fputwc+0x90>
1000d4c4:	80800017 	ldw	r2,0(r16)
1000d4c8:	11400005 	stb	r5,0(r2)
1000d4cc:	80c00017 	ldw	r3,0(r16)
1000d4d0:	18c00044 	addi	r3,r3,1
1000d4d4:	80c00015 	stw	r3,0(r16)
1000d4d8:	8c400044 	addi	r17,r17,1
1000d4dc:	dc45883a 	add	r2,sp,r17
1000d4e0:	8d00112e 	bgeu	r17,r20,1000d528 <__fputwc+0xd0>
1000d4e4:	11400003 	ldbu	r5,0(r2)
1000d4e8:	80c00217 	ldw	r3,8(r16)
1000d4ec:	18ffffc4 	addi	r3,r3,-1
1000d4f0:	80c00215 	stw	r3,8(r16)
1000d4f4:	183ff30e 	bge	r3,zero,1000d4c4 <__alt_data_end+0xf800d4c4>
1000d4f8:	80800617 	ldw	r2,24(r16)
1000d4fc:	18801916 	blt	r3,r2,1000d564 <__fputwc+0x10c>
1000d500:	80800017 	ldw	r2,0(r16)
1000d504:	11400005 	stb	r5,0(r2)
1000d508:	80800017 	ldw	r2,0(r16)
1000d50c:	10c00003 	ldbu	r3,0(r2)
1000d510:	10800044 	addi	r2,r2,1
1000d514:	1d402326 	beq	r3,r21,1000d5a4 <__fputwc+0x14c>
1000d518:	80800015 	stw	r2,0(r16)
1000d51c:	8c400044 	addi	r17,r17,1
1000d520:	dc45883a 	add	r2,sp,r17
1000d524:	8d3fef36 	bltu	r17,r20,1000d4e4 <__alt_data_end+0xf800d4e4>
1000d528:	9005883a 	mov	r2,r18
1000d52c:	00000406 	br	1000d540 <__fputwc+0xe8>
1000d530:	80c0030b 	ldhu	r3,12(r16)
1000d534:	a005883a 	mov	r2,r20
1000d538:	18c01014 	ori	r3,r3,64
1000d53c:	80c0030d 	sth	r3,12(r16)
1000d540:	dfc00717 	ldw	ra,28(sp)
1000d544:	dd400617 	ldw	r21,24(sp)
1000d548:	dd000517 	ldw	r20,20(sp)
1000d54c:	dcc00417 	ldw	r19,16(sp)
1000d550:	dc800317 	ldw	r18,12(sp)
1000d554:	dc400217 	ldw	r17,8(sp)
1000d558:	dc000117 	ldw	r16,4(sp)
1000d55c:	dec00804 	addi	sp,sp,32
1000d560:	f800283a 	ret
1000d564:	800d883a 	mov	r6,r16
1000d568:	29403fcc 	andi	r5,r5,255
1000d56c:	9809883a 	mov	r4,r19
1000d570:	000d7d00 	call	1000d7d0 <__swbuf_r>
1000d574:	10bfffe0 	cmpeqi	r2,r2,-1
1000d578:	10803fcc 	andi	r2,r2,255
1000d57c:	103fd626 	beq	r2,zero,1000d4d8 <__alt_data_end+0xf800d4d8>
1000d580:	00bfffc4 	movi	r2,-1
1000d584:	003fee06 	br	1000d540 <__alt_data_end+0xf800d540>
1000d588:	90ffffc4 	addi	r3,r18,-1
1000d58c:	01003f84 	movi	r4,254
1000d590:	20ffbf36 	bltu	r4,r3,1000d490 <__alt_data_end+0xf800d490>
1000d594:	900b883a 	mov	r5,r18
1000d598:	dc800005 	stb	r18,0(sp)
1000d59c:	1029883a 	mov	r20,r2
1000d5a0:	003fc506 	br	1000d4b8 <__alt_data_end+0xf800d4b8>
1000d5a4:	800d883a 	mov	r6,r16
1000d5a8:	a80b883a 	mov	r5,r21
1000d5ac:	9809883a 	mov	r4,r19
1000d5b0:	000d7d00 	call	1000d7d0 <__swbuf_r>
1000d5b4:	10bfffe0 	cmpeqi	r2,r2,-1
1000d5b8:	003fef06 	br	1000d578 <__alt_data_end+0xf800d578>

1000d5bc <_fputwc_r>:
1000d5bc:	3080030b 	ldhu	r2,12(r6)
1000d5c0:	10c8000c 	andi	r3,r2,8192
1000d5c4:	1800051e 	bne	r3,zero,1000d5dc <_fputwc_r+0x20>
1000d5c8:	30c01917 	ldw	r3,100(r6)
1000d5cc:	10880014 	ori	r2,r2,8192
1000d5d0:	3080030d 	sth	r2,12(r6)
1000d5d4:	18880014 	ori	r2,r3,8192
1000d5d8:	30801915 	stw	r2,100(r6)
1000d5dc:	000d4581 	jmpi	1000d458 <__fputwc>

1000d5e0 <fputwc>:
1000d5e0:	00840074 	movhi	r2,4097
1000d5e4:	defffc04 	addi	sp,sp,-16
1000d5e8:	1097b004 	addi	r2,r2,24256
1000d5ec:	dc000115 	stw	r16,4(sp)
1000d5f0:	14000017 	ldw	r16,0(r2)
1000d5f4:	dc400215 	stw	r17,8(sp)
1000d5f8:	dfc00315 	stw	ra,12(sp)
1000d5fc:	2023883a 	mov	r17,r4
1000d600:	80000226 	beq	r16,zero,1000d60c <fputwc+0x2c>
1000d604:	80800e17 	ldw	r2,56(r16)
1000d608:	10001026 	beq	r2,zero,1000d64c <fputwc+0x6c>
1000d60c:	2880030b 	ldhu	r2,12(r5)
1000d610:	10c8000c 	andi	r3,r2,8192
1000d614:	1800051e 	bne	r3,zero,1000d62c <fputwc+0x4c>
1000d618:	28c01917 	ldw	r3,100(r5)
1000d61c:	10880014 	ori	r2,r2,8192
1000d620:	2880030d 	sth	r2,12(r5)
1000d624:	18880014 	ori	r2,r3,8192
1000d628:	28801915 	stw	r2,100(r5)
1000d62c:	280d883a 	mov	r6,r5
1000d630:	8009883a 	mov	r4,r16
1000d634:	880b883a 	mov	r5,r17
1000d638:	dfc00317 	ldw	ra,12(sp)
1000d63c:	dc400217 	ldw	r17,8(sp)
1000d640:	dc000117 	ldw	r16,4(sp)
1000d644:	dec00404 	addi	sp,sp,16
1000d648:	000d4581 	jmpi	1000d458 <__fputwc>
1000d64c:	8009883a 	mov	r4,r16
1000d650:	d9400015 	stw	r5,0(sp)
1000d654:	00090080 	call	10009008 <__sinit>
1000d658:	d9400017 	ldw	r5,0(sp)
1000d65c:	003feb06 	br	1000d60c <__alt_data_end+0xf800d60c>

1000d660 <_fstat_r>:
1000d660:	defffd04 	addi	sp,sp,-12
1000d664:	2805883a 	mov	r2,r5
1000d668:	dc000015 	stw	r16,0(sp)
1000d66c:	04040074 	movhi	r16,4097
1000d670:	dc400115 	stw	r17,4(sp)
1000d674:	841e9504 	addi	r16,r16,31316
1000d678:	2023883a 	mov	r17,r4
1000d67c:	300b883a 	mov	r5,r6
1000d680:	1009883a 	mov	r4,r2
1000d684:	dfc00215 	stw	ra,8(sp)
1000d688:	80000015 	stw	zero,0(r16)
1000d68c:	00112cc0 	call	100112cc <fstat>
1000d690:	00ffffc4 	movi	r3,-1
1000d694:	10c00526 	beq	r2,r3,1000d6ac <_fstat_r+0x4c>
1000d698:	dfc00217 	ldw	ra,8(sp)
1000d69c:	dc400117 	ldw	r17,4(sp)
1000d6a0:	dc000017 	ldw	r16,0(sp)
1000d6a4:	dec00304 	addi	sp,sp,12
1000d6a8:	f800283a 	ret
1000d6ac:	80c00017 	ldw	r3,0(r16)
1000d6b0:	183ff926 	beq	r3,zero,1000d698 <__alt_data_end+0xf800d698>
1000d6b4:	88c00015 	stw	r3,0(r17)
1000d6b8:	003ff706 	br	1000d698 <__alt_data_end+0xf800d698>

1000d6bc <_isatty_r>:
1000d6bc:	defffd04 	addi	sp,sp,-12
1000d6c0:	dc000015 	stw	r16,0(sp)
1000d6c4:	04040074 	movhi	r16,4097
1000d6c8:	dc400115 	stw	r17,4(sp)
1000d6cc:	841e9504 	addi	r16,r16,31316
1000d6d0:	2023883a 	mov	r17,r4
1000d6d4:	2809883a 	mov	r4,r5
1000d6d8:	dfc00215 	stw	ra,8(sp)
1000d6dc:	80000015 	stw	zero,0(r16)
1000d6e0:	00113c00 	call	100113c0 <isatty>
1000d6e4:	00ffffc4 	movi	r3,-1
1000d6e8:	10c00526 	beq	r2,r3,1000d700 <_isatty_r+0x44>
1000d6ec:	dfc00217 	ldw	ra,8(sp)
1000d6f0:	dc400117 	ldw	r17,4(sp)
1000d6f4:	dc000017 	ldw	r16,0(sp)
1000d6f8:	dec00304 	addi	sp,sp,12
1000d6fc:	f800283a 	ret
1000d700:	80c00017 	ldw	r3,0(r16)
1000d704:	183ff926 	beq	r3,zero,1000d6ec <__alt_data_end+0xf800d6ec>
1000d708:	88c00015 	stw	r3,0(r17)
1000d70c:	003ff706 	br	1000d6ec <__alt_data_end+0xf800d6ec>

1000d710 <_lseek_r>:
1000d710:	defffd04 	addi	sp,sp,-12
1000d714:	2805883a 	mov	r2,r5
1000d718:	dc000015 	stw	r16,0(sp)
1000d71c:	04040074 	movhi	r16,4097
1000d720:	dc400115 	stw	r17,4(sp)
1000d724:	300b883a 	mov	r5,r6
1000d728:	841e9504 	addi	r16,r16,31316
1000d72c:	2023883a 	mov	r17,r4
1000d730:	380d883a 	mov	r6,r7
1000d734:	1009883a 	mov	r4,r2
1000d738:	dfc00215 	stw	ra,8(sp)
1000d73c:	80000015 	stw	zero,0(r16)
1000d740:	00115940 	call	10011594 <lseek>
1000d744:	00ffffc4 	movi	r3,-1
1000d748:	10c00526 	beq	r2,r3,1000d760 <_lseek_r+0x50>
1000d74c:	dfc00217 	ldw	ra,8(sp)
1000d750:	dc400117 	ldw	r17,4(sp)
1000d754:	dc000017 	ldw	r16,0(sp)
1000d758:	dec00304 	addi	sp,sp,12
1000d75c:	f800283a 	ret
1000d760:	80c00017 	ldw	r3,0(r16)
1000d764:	183ff926 	beq	r3,zero,1000d74c <__alt_data_end+0xf800d74c>
1000d768:	88c00015 	stw	r3,0(r17)
1000d76c:	003ff706 	br	1000d74c <__alt_data_end+0xf800d74c>

1000d770 <_read_r>:
1000d770:	defffd04 	addi	sp,sp,-12
1000d774:	2805883a 	mov	r2,r5
1000d778:	dc000015 	stw	r16,0(sp)
1000d77c:	04040074 	movhi	r16,4097
1000d780:	dc400115 	stw	r17,4(sp)
1000d784:	300b883a 	mov	r5,r6
1000d788:	841e9504 	addi	r16,r16,31316
1000d78c:	2023883a 	mov	r17,r4
1000d790:	380d883a 	mov	r6,r7
1000d794:	1009883a 	mov	r4,r2
1000d798:	dfc00215 	stw	ra,8(sp)
1000d79c:	80000015 	stw	zero,0(r16)
1000d7a0:	00117700 	call	10011770 <read>
1000d7a4:	00ffffc4 	movi	r3,-1
1000d7a8:	10c00526 	beq	r2,r3,1000d7c0 <_read_r+0x50>
1000d7ac:	dfc00217 	ldw	ra,8(sp)
1000d7b0:	dc400117 	ldw	r17,4(sp)
1000d7b4:	dc000017 	ldw	r16,0(sp)
1000d7b8:	dec00304 	addi	sp,sp,12
1000d7bc:	f800283a 	ret
1000d7c0:	80c00017 	ldw	r3,0(r16)
1000d7c4:	183ff926 	beq	r3,zero,1000d7ac <__alt_data_end+0xf800d7ac>
1000d7c8:	88c00015 	stw	r3,0(r17)
1000d7cc:	003ff706 	br	1000d7ac <__alt_data_end+0xf800d7ac>

1000d7d0 <__swbuf_r>:
1000d7d0:	defffb04 	addi	sp,sp,-20
1000d7d4:	dcc00315 	stw	r19,12(sp)
1000d7d8:	dc800215 	stw	r18,8(sp)
1000d7dc:	dc000015 	stw	r16,0(sp)
1000d7e0:	dfc00415 	stw	ra,16(sp)
1000d7e4:	dc400115 	stw	r17,4(sp)
1000d7e8:	2025883a 	mov	r18,r4
1000d7ec:	2827883a 	mov	r19,r5
1000d7f0:	3021883a 	mov	r16,r6
1000d7f4:	20000226 	beq	r4,zero,1000d800 <__swbuf_r+0x30>
1000d7f8:	20800e17 	ldw	r2,56(r4)
1000d7fc:	10004226 	beq	r2,zero,1000d908 <__swbuf_r+0x138>
1000d800:	80800617 	ldw	r2,24(r16)
1000d804:	8100030b 	ldhu	r4,12(r16)
1000d808:	80800215 	stw	r2,8(r16)
1000d80c:	2080020c 	andi	r2,r4,8
1000d810:	10003626 	beq	r2,zero,1000d8ec <__swbuf_r+0x11c>
1000d814:	80c00417 	ldw	r3,16(r16)
1000d818:	18003426 	beq	r3,zero,1000d8ec <__swbuf_r+0x11c>
1000d81c:	2088000c 	andi	r2,r4,8192
1000d820:	9c403fcc 	andi	r17,r19,255
1000d824:	10001a26 	beq	r2,zero,1000d890 <__swbuf_r+0xc0>
1000d828:	80800017 	ldw	r2,0(r16)
1000d82c:	81000517 	ldw	r4,20(r16)
1000d830:	10c7c83a 	sub	r3,r2,r3
1000d834:	1900200e 	bge	r3,r4,1000d8b8 <__swbuf_r+0xe8>
1000d838:	18c00044 	addi	r3,r3,1
1000d83c:	81000217 	ldw	r4,8(r16)
1000d840:	11400044 	addi	r5,r2,1
1000d844:	81400015 	stw	r5,0(r16)
1000d848:	213fffc4 	addi	r4,r4,-1
1000d84c:	81000215 	stw	r4,8(r16)
1000d850:	14c00005 	stb	r19,0(r2)
1000d854:	80800517 	ldw	r2,20(r16)
1000d858:	10c01e26 	beq	r2,r3,1000d8d4 <__swbuf_r+0x104>
1000d85c:	8080030b 	ldhu	r2,12(r16)
1000d860:	1080004c 	andi	r2,r2,1
1000d864:	10000226 	beq	r2,zero,1000d870 <__swbuf_r+0xa0>
1000d868:	00800284 	movi	r2,10
1000d86c:	88801926 	beq	r17,r2,1000d8d4 <__swbuf_r+0x104>
1000d870:	8805883a 	mov	r2,r17
1000d874:	dfc00417 	ldw	ra,16(sp)
1000d878:	dcc00317 	ldw	r19,12(sp)
1000d87c:	dc800217 	ldw	r18,8(sp)
1000d880:	dc400117 	ldw	r17,4(sp)
1000d884:	dc000017 	ldw	r16,0(sp)
1000d888:	dec00504 	addi	sp,sp,20
1000d88c:	f800283a 	ret
1000d890:	81401917 	ldw	r5,100(r16)
1000d894:	00b7ffc4 	movi	r2,-8193
1000d898:	21080014 	ori	r4,r4,8192
1000d89c:	2884703a 	and	r2,r5,r2
1000d8a0:	80801915 	stw	r2,100(r16)
1000d8a4:	80800017 	ldw	r2,0(r16)
1000d8a8:	8100030d 	sth	r4,12(r16)
1000d8ac:	81000517 	ldw	r4,20(r16)
1000d8b0:	10c7c83a 	sub	r3,r2,r3
1000d8b4:	193fe016 	blt	r3,r4,1000d838 <__alt_data_end+0xf800d838>
1000d8b8:	800b883a 	mov	r5,r16
1000d8bc:	9009883a 	mov	r4,r18
1000d8c0:	0008c1c0 	call	10008c1c <_fflush_r>
1000d8c4:	1000071e 	bne	r2,zero,1000d8e4 <__swbuf_r+0x114>
1000d8c8:	80800017 	ldw	r2,0(r16)
1000d8cc:	00c00044 	movi	r3,1
1000d8d0:	003fda06 	br	1000d83c <__alt_data_end+0xf800d83c>
1000d8d4:	800b883a 	mov	r5,r16
1000d8d8:	9009883a 	mov	r4,r18
1000d8dc:	0008c1c0 	call	10008c1c <_fflush_r>
1000d8e0:	103fe326 	beq	r2,zero,1000d870 <__alt_data_end+0xf800d870>
1000d8e4:	00bfffc4 	movi	r2,-1
1000d8e8:	003fe206 	br	1000d874 <__alt_data_end+0xf800d874>
1000d8ec:	800b883a 	mov	r5,r16
1000d8f0:	9009883a 	mov	r4,r18
1000d8f4:	0006ffc0 	call	10006ffc <__swsetup_r>
1000d8f8:	103ffa1e 	bne	r2,zero,1000d8e4 <__alt_data_end+0xf800d8e4>
1000d8fc:	8100030b 	ldhu	r4,12(r16)
1000d900:	80c00417 	ldw	r3,16(r16)
1000d904:	003fc506 	br	1000d81c <__alt_data_end+0xf800d81c>
1000d908:	00090080 	call	10009008 <__sinit>
1000d90c:	003fbc06 	br	1000d800 <__alt_data_end+0xf800d800>

1000d910 <__swbuf>:
1000d910:	00840074 	movhi	r2,4097
1000d914:	1097b004 	addi	r2,r2,24256
1000d918:	280d883a 	mov	r6,r5
1000d91c:	200b883a 	mov	r5,r4
1000d920:	11000017 	ldw	r4,0(r2)
1000d924:	000d7d01 	jmpi	1000d7d0 <__swbuf_r>

1000d928 <_wcrtomb_r>:
1000d928:	defff604 	addi	sp,sp,-40
1000d92c:	00840074 	movhi	r2,4097
1000d930:	dc800815 	stw	r18,32(sp)
1000d934:	dc400715 	stw	r17,28(sp)
1000d938:	dc000615 	stw	r16,24(sp)
1000d93c:	1097b204 	addi	r2,r2,24264
1000d940:	dfc00915 	stw	ra,36(sp)
1000d944:	2021883a 	mov	r16,r4
1000d948:	3823883a 	mov	r17,r7
1000d94c:	14800017 	ldw	r18,0(r2)
1000d950:	28001426 	beq	r5,zero,1000d9a4 <_wcrtomb_r+0x7c>
1000d954:	d9400415 	stw	r5,16(sp)
1000d958:	d9800515 	stw	r6,20(sp)
1000d95c:	0009b580 	call	10009b58 <__locale_charset>
1000d960:	d9800517 	ldw	r6,20(sp)
1000d964:	d9400417 	ldw	r5,16(sp)
1000d968:	100f883a 	mov	r7,r2
1000d96c:	dc400015 	stw	r17,0(sp)
1000d970:	8009883a 	mov	r4,r16
1000d974:	903ee83a 	callr	r18
1000d978:	00ffffc4 	movi	r3,-1
1000d97c:	10c0031e 	bne	r2,r3,1000d98c <_wcrtomb_r+0x64>
1000d980:	88000015 	stw	zero,0(r17)
1000d984:	00c02284 	movi	r3,138
1000d988:	80c00015 	stw	r3,0(r16)
1000d98c:	dfc00917 	ldw	ra,36(sp)
1000d990:	dc800817 	ldw	r18,32(sp)
1000d994:	dc400717 	ldw	r17,28(sp)
1000d998:	dc000617 	ldw	r16,24(sp)
1000d99c:	dec00a04 	addi	sp,sp,40
1000d9a0:	f800283a 	ret
1000d9a4:	0009b580 	call	10009b58 <__locale_charset>
1000d9a8:	100f883a 	mov	r7,r2
1000d9ac:	dc400015 	stw	r17,0(sp)
1000d9b0:	000d883a 	mov	r6,zero
1000d9b4:	d9400104 	addi	r5,sp,4
1000d9b8:	8009883a 	mov	r4,r16
1000d9bc:	903ee83a 	callr	r18
1000d9c0:	003fed06 	br	1000d978 <__alt_data_end+0xf800d978>

1000d9c4 <wcrtomb>:
1000d9c4:	defff604 	addi	sp,sp,-40
1000d9c8:	00840074 	movhi	r2,4097
1000d9cc:	dc800615 	stw	r18,24(sp)
1000d9d0:	dc400515 	stw	r17,20(sp)
1000d9d4:	1097b004 	addi	r2,r2,24256
1000d9d8:	dfc00915 	stw	ra,36(sp)
1000d9dc:	dd000815 	stw	r20,32(sp)
1000d9e0:	dcc00715 	stw	r19,28(sp)
1000d9e4:	dc000415 	stw	r16,16(sp)
1000d9e8:	3025883a 	mov	r18,r6
1000d9ec:	14400017 	ldw	r17,0(r2)
1000d9f0:	20001926 	beq	r4,zero,1000da58 <wcrtomb+0x94>
1000d9f4:	00840074 	movhi	r2,4097
1000d9f8:	1097b204 	addi	r2,r2,24264
1000d9fc:	15000017 	ldw	r20,0(r2)
1000da00:	2021883a 	mov	r16,r4
1000da04:	2827883a 	mov	r19,r5
1000da08:	0009b580 	call	10009b58 <__locale_charset>
1000da0c:	100f883a 	mov	r7,r2
1000da10:	dc800015 	stw	r18,0(sp)
1000da14:	980d883a 	mov	r6,r19
1000da18:	800b883a 	mov	r5,r16
1000da1c:	8809883a 	mov	r4,r17
1000da20:	a03ee83a 	callr	r20
1000da24:	00ffffc4 	movi	r3,-1
1000da28:	10c0031e 	bne	r2,r3,1000da38 <wcrtomb+0x74>
1000da2c:	90000015 	stw	zero,0(r18)
1000da30:	00c02284 	movi	r3,138
1000da34:	88c00015 	stw	r3,0(r17)
1000da38:	dfc00917 	ldw	ra,36(sp)
1000da3c:	dd000817 	ldw	r20,32(sp)
1000da40:	dcc00717 	ldw	r19,28(sp)
1000da44:	dc800617 	ldw	r18,24(sp)
1000da48:	dc400517 	ldw	r17,20(sp)
1000da4c:	dc000417 	ldw	r16,16(sp)
1000da50:	dec00a04 	addi	sp,sp,40
1000da54:	f800283a 	ret
1000da58:	00840074 	movhi	r2,4097
1000da5c:	1097b204 	addi	r2,r2,24264
1000da60:	14000017 	ldw	r16,0(r2)
1000da64:	0009b580 	call	10009b58 <__locale_charset>
1000da68:	100f883a 	mov	r7,r2
1000da6c:	dc800015 	stw	r18,0(sp)
1000da70:	000d883a 	mov	r6,zero
1000da74:	d9400104 	addi	r5,sp,4
1000da78:	8809883a 	mov	r4,r17
1000da7c:	803ee83a 	callr	r16
1000da80:	003fe806 	br	1000da24 <__alt_data_end+0xf800da24>

1000da84 <__ascii_wctomb>:
1000da84:	28000526 	beq	r5,zero,1000da9c <__ascii_wctomb+0x18>
1000da88:	00803fc4 	movi	r2,255
1000da8c:	11800536 	bltu	r2,r6,1000daa4 <__ascii_wctomb+0x20>
1000da90:	29800005 	stb	r6,0(r5)
1000da94:	00800044 	movi	r2,1
1000da98:	f800283a 	ret
1000da9c:	0005883a 	mov	r2,zero
1000daa0:	f800283a 	ret
1000daa4:	00802284 	movi	r2,138
1000daa8:	20800015 	stw	r2,0(r4)
1000daac:	00bfffc4 	movi	r2,-1
1000dab0:	f800283a 	ret

1000dab4 <_wctomb_r>:
1000dab4:	00840074 	movhi	r2,4097
1000dab8:	defff904 	addi	sp,sp,-28
1000dabc:	1097b204 	addi	r2,r2,24264
1000dac0:	dfc00615 	stw	ra,24(sp)
1000dac4:	dc400515 	stw	r17,20(sp)
1000dac8:	dc000415 	stw	r16,16(sp)
1000dacc:	3823883a 	mov	r17,r7
1000dad0:	14000017 	ldw	r16,0(r2)
1000dad4:	d9000115 	stw	r4,4(sp)
1000dad8:	d9400215 	stw	r5,8(sp)
1000dadc:	d9800315 	stw	r6,12(sp)
1000dae0:	0009b580 	call	10009b58 <__locale_charset>
1000dae4:	d9800317 	ldw	r6,12(sp)
1000dae8:	d9400217 	ldw	r5,8(sp)
1000daec:	d9000117 	ldw	r4,4(sp)
1000daf0:	100f883a 	mov	r7,r2
1000daf4:	dc400015 	stw	r17,0(sp)
1000daf8:	803ee83a 	callr	r16
1000dafc:	dfc00617 	ldw	ra,24(sp)
1000db00:	dc400517 	ldw	r17,20(sp)
1000db04:	dc000417 	ldw	r16,16(sp)
1000db08:	dec00704 	addi	sp,sp,28
1000db0c:	f800283a 	ret

1000db10 <__udivdi3>:
1000db10:	defff404 	addi	sp,sp,-48
1000db14:	dcc00515 	stw	r19,20(sp)
1000db18:	dc000215 	stw	r16,8(sp)
1000db1c:	dfc00b15 	stw	ra,44(sp)
1000db20:	df000a15 	stw	fp,40(sp)
1000db24:	ddc00915 	stw	r23,36(sp)
1000db28:	dd800815 	stw	r22,32(sp)
1000db2c:	dd400715 	stw	r21,28(sp)
1000db30:	dd000615 	stw	r20,24(sp)
1000db34:	dc800415 	stw	r18,16(sp)
1000db38:	dc400315 	stw	r17,12(sp)
1000db3c:	2027883a 	mov	r19,r4
1000db40:	2821883a 	mov	r16,r5
1000db44:	3800461e 	bne	r7,zero,1000dc60 <__udivdi3+0x150>
1000db48:	3023883a 	mov	r17,r6
1000db4c:	2025883a 	mov	r18,r4
1000db50:	2980572e 	bgeu	r5,r6,1000dcb0 <__udivdi3+0x1a0>
1000db54:	00bfffd4 	movui	r2,65535
1000db58:	282d883a 	mov	r22,r5
1000db5c:	1180b236 	bltu	r2,r6,1000de28 <__udivdi3+0x318>
1000db60:	00803fc4 	movi	r2,255
1000db64:	1185803a 	cmpltu	r2,r2,r6
1000db68:	100490fa 	slli	r2,r2,3
1000db6c:	3086d83a 	srl	r3,r6,r2
1000db70:	01040074 	movhi	r4,4097
1000db74:	2110b304 	addi	r4,r4,17100
1000db78:	20c7883a 	add	r3,r4,r3
1000db7c:	18c00003 	ldbu	r3,0(r3)
1000db80:	1885883a 	add	r2,r3,r2
1000db84:	00c00804 	movi	r3,32
1000db88:	1887c83a 	sub	r3,r3,r2
1000db8c:	18000526 	beq	r3,zero,1000dba4 <__udivdi3+0x94>
1000db90:	80e0983a 	sll	r16,r16,r3
1000db94:	9884d83a 	srl	r2,r19,r2
1000db98:	30e2983a 	sll	r17,r6,r3
1000db9c:	98e4983a 	sll	r18,r19,r3
1000dba0:	142cb03a 	or	r22,r2,r16
1000dba4:	882ad43a 	srli	r21,r17,16
1000dba8:	b009883a 	mov	r4,r22
1000dbac:	8d3fffcc 	andi	r20,r17,65535
1000dbb0:	a80b883a 	mov	r5,r21
1000dbb4:	000e82c0 	call	1000e82c <__umodsi3>
1000dbb8:	b009883a 	mov	r4,r22
1000dbbc:	a80b883a 	mov	r5,r21
1000dbc0:	1027883a 	mov	r19,r2
1000dbc4:	000e7c80 	call	1000e7c8 <__udivsi3>
1000dbc8:	100b883a 	mov	r5,r2
1000dbcc:	a009883a 	mov	r4,r20
1000dbd0:	102d883a 	mov	r22,r2
1000dbd4:	000e8840 	call	1000e884 <__mulsi3>
1000dbd8:	9826943a 	slli	r19,r19,16
1000dbdc:	9006d43a 	srli	r3,r18,16
1000dbe0:	1cc6b03a 	or	r3,r3,r19
1000dbe4:	1880052e 	bgeu	r3,r2,1000dbfc <__udivdi3+0xec>
1000dbe8:	1c47883a 	add	r3,r3,r17
1000dbec:	b13fffc4 	addi	r4,r22,-1
1000dbf0:	1c400136 	bltu	r3,r17,1000dbf8 <__udivdi3+0xe8>
1000dbf4:	18814236 	bltu	r3,r2,1000e100 <__udivdi3+0x5f0>
1000dbf8:	202d883a 	mov	r22,r4
1000dbfc:	18a1c83a 	sub	r16,r3,r2
1000dc00:	8009883a 	mov	r4,r16
1000dc04:	a80b883a 	mov	r5,r21
1000dc08:	000e82c0 	call	1000e82c <__umodsi3>
1000dc0c:	1027883a 	mov	r19,r2
1000dc10:	8009883a 	mov	r4,r16
1000dc14:	a80b883a 	mov	r5,r21
1000dc18:	9826943a 	slli	r19,r19,16
1000dc1c:	000e7c80 	call	1000e7c8 <__udivsi3>
1000dc20:	100b883a 	mov	r5,r2
1000dc24:	a009883a 	mov	r4,r20
1000dc28:	94bfffcc 	andi	r18,r18,65535
1000dc2c:	1021883a 	mov	r16,r2
1000dc30:	94e4b03a 	or	r18,r18,r19
1000dc34:	000e8840 	call	1000e884 <__mulsi3>
1000dc38:	9080052e 	bgeu	r18,r2,1000dc50 <__udivdi3+0x140>
1000dc3c:	8ca5883a 	add	r18,r17,r18
1000dc40:	80ffffc4 	addi	r3,r16,-1
1000dc44:	94410c36 	bltu	r18,r17,1000e078 <__udivdi3+0x568>
1000dc48:	90810b2e 	bgeu	r18,r2,1000e078 <__udivdi3+0x568>
1000dc4c:	843fff84 	addi	r16,r16,-2
1000dc50:	b004943a 	slli	r2,r22,16
1000dc54:	0007883a 	mov	r3,zero
1000dc58:	1404b03a 	or	r2,r2,r16
1000dc5c:	00005e06 	br	1000ddd8 <__udivdi3+0x2c8>
1000dc60:	29c05b36 	bltu	r5,r7,1000ddd0 <__udivdi3+0x2c0>
1000dc64:	00bfffd4 	movui	r2,65535
1000dc68:	11c0672e 	bgeu	r2,r7,1000de08 <__udivdi3+0x2f8>
1000dc6c:	00804034 	movhi	r2,256
1000dc70:	10bfffc4 	addi	r2,r2,-1
1000dc74:	11c10a36 	bltu	r2,r7,1000e0a0 <__udivdi3+0x590>
1000dc78:	00800404 	movi	r2,16
1000dc7c:	3886d83a 	srl	r3,r7,r2
1000dc80:	01040074 	movhi	r4,4097
1000dc84:	2110b304 	addi	r4,r4,17100
1000dc88:	20c7883a 	add	r3,r4,r3
1000dc8c:	18c00003 	ldbu	r3,0(r3)
1000dc90:	05c00804 	movi	r23,32
1000dc94:	1885883a 	add	r2,r3,r2
1000dc98:	b8afc83a 	sub	r23,r23,r2
1000dc9c:	b800671e 	bne	r23,zero,1000de3c <__udivdi3+0x32c>
1000dca0:	3c010536 	bltu	r7,r16,1000e0b8 <__udivdi3+0x5a8>
1000dca4:	9985403a 	cmpgeu	r2,r19,r6
1000dca8:	0007883a 	mov	r3,zero
1000dcac:	00004a06 	br	1000ddd8 <__udivdi3+0x2c8>
1000dcb0:	3000041e 	bne	r6,zero,1000dcc4 <__udivdi3+0x1b4>
1000dcb4:	000b883a 	mov	r5,zero
1000dcb8:	01000044 	movi	r4,1
1000dcbc:	000e7c80 	call	1000e7c8 <__udivsi3>
1000dcc0:	1023883a 	mov	r17,r2
1000dcc4:	00bfffd4 	movui	r2,65535
1000dcc8:	1440532e 	bgeu	r2,r17,1000de18 <__udivdi3+0x308>
1000dccc:	00804034 	movhi	r2,256
1000dcd0:	10bfffc4 	addi	r2,r2,-1
1000dcd4:	1440f436 	bltu	r2,r17,1000e0a8 <__udivdi3+0x598>
1000dcd8:	00800404 	movi	r2,16
1000dcdc:	8886d83a 	srl	r3,r17,r2
1000dce0:	01040074 	movhi	r4,4097
1000dce4:	2110b304 	addi	r4,r4,17100
1000dce8:	20c7883a 	add	r3,r4,r3
1000dcec:	18c00003 	ldbu	r3,0(r3)
1000dcf0:	1885883a 	add	r2,r3,r2
1000dcf4:	00c00804 	movi	r3,32
1000dcf8:	1887c83a 	sub	r3,r3,r2
1000dcfc:	1800a51e 	bne	r3,zero,1000df94 <__udivdi3+0x484>
1000dd00:	882ad43a 	srli	r21,r17,16
1000dd04:	8461c83a 	sub	r16,r16,r17
1000dd08:	8d3fffcc 	andi	r20,r17,65535
1000dd0c:	00c00044 	movi	r3,1
1000dd10:	a80b883a 	mov	r5,r21
1000dd14:	8009883a 	mov	r4,r16
1000dd18:	d8c00115 	stw	r3,4(sp)
1000dd1c:	000e82c0 	call	1000e82c <__umodsi3>
1000dd20:	a80b883a 	mov	r5,r21
1000dd24:	8009883a 	mov	r4,r16
1000dd28:	1027883a 	mov	r19,r2
1000dd2c:	000e7c80 	call	1000e7c8 <__udivsi3>
1000dd30:	a00b883a 	mov	r5,r20
1000dd34:	1009883a 	mov	r4,r2
1000dd38:	102d883a 	mov	r22,r2
1000dd3c:	000e8840 	call	1000e884 <__mulsi3>
1000dd40:	9826943a 	slli	r19,r19,16
1000dd44:	900ed43a 	srli	r7,r18,16
1000dd48:	d8c00117 	ldw	r3,4(sp)
1000dd4c:	3cceb03a 	or	r7,r7,r19
1000dd50:	3880052e 	bgeu	r7,r2,1000dd68 <__udivdi3+0x258>
1000dd54:	3c4f883a 	add	r7,r7,r17
1000dd58:	b13fffc4 	addi	r4,r22,-1
1000dd5c:	3c400136 	bltu	r7,r17,1000dd64 <__udivdi3+0x254>
1000dd60:	3880e436 	bltu	r7,r2,1000e0f4 <__udivdi3+0x5e4>
1000dd64:	202d883a 	mov	r22,r4
1000dd68:	38a1c83a 	sub	r16,r7,r2
1000dd6c:	8009883a 	mov	r4,r16
1000dd70:	a80b883a 	mov	r5,r21
1000dd74:	d8c00115 	stw	r3,4(sp)
1000dd78:	000e82c0 	call	1000e82c <__umodsi3>
1000dd7c:	1027883a 	mov	r19,r2
1000dd80:	8009883a 	mov	r4,r16
1000dd84:	a80b883a 	mov	r5,r21
1000dd88:	9826943a 	slli	r19,r19,16
1000dd8c:	000e7c80 	call	1000e7c8 <__udivsi3>
1000dd90:	a00b883a 	mov	r5,r20
1000dd94:	1009883a 	mov	r4,r2
1000dd98:	94bfffcc 	andi	r18,r18,65535
1000dd9c:	1021883a 	mov	r16,r2
1000dda0:	94e4b03a 	or	r18,r18,r19
1000dda4:	000e8840 	call	1000e884 <__mulsi3>
1000dda8:	d8c00117 	ldw	r3,4(sp)
1000ddac:	9080052e 	bgeu	r18,r2,1000ddc4 <__udivdi3+0x2b4>
1000ddb0:	8ca5883a 	add	r18,r17,r18
1000ddb4:	813fffc4 	addi	r4,r16,-1
1000ddb8:	9440ad36 	bltu	r18,r17,1000e070 <__udivdi3+0x560>
1000ddbc:	9080ac2e 	bgeu	r18,r2,1000e070 <__udivdi3+0x560>
1000ddc0:	843fff84 	addi	r16,r16,-2
1000ddc4:	b004943a 	slli	r2,r22,16
1000ddc8:	1404b03a 	or	r2,r2,r16
1000ddcc:	00000206 	br	1000ddd8 <__udivdi3+0x2c8>
1000ddd0:	0007883a 	mov	r3,zero
1000ddd4:	0005883a 	mov	r2,zero
1000ddd8:	dfc00b17 	ldw	ra,44(sp)
1000dddc:	df000a17 	ldw	fp,40(sp)
1000dde0:	ddc00917 	ldw	r23,36(sp)
1000dde4:	dd800817 	ldw	r22,32(sp)
1000dde8:	dd400717 	ldw	r21,28(sp)
1000ddec:	dd000617 	ldw	r20,24(sp)
1000ddf0:	dcc00517 	ldw	r19,20(sp)
1000ddf4:	dc800417 	ldw	r18,16(sp)
1000ddf8:	dc400317 	ldw	r17,12(sp)
1000ddfc:	dc000217 	ldw	r16,8(sp)
1000de00:	dec00c04 	addi	sp,sp,48
1000de04:	f800283a 	ret
1000de08:	00803fc4 	movi	r2,255
1000de0c:	11c5803a 	cmpltu	r2,r2,r7
1000de10:	100490fa 	slli	r2,r2,3
1000de14:	003f9906 	br	1000dc7c <__alt_data_end+0xf800dc7c>
1000de18:	00803fc4 	movi	r2,255
1000de1c:	1445803a 	cmpltu	r2,r2,r17
1000de20:	100490fa 	slli	r2,r2,3
1000de24:	003fad06 	br	1000dcdc <__alt_data_end+0xf800dcdc>
1000de28:	00804034 	movhi	r2,256
1000de2c:	10bfffc4 	addi	r2,r2,-1
1000de30:	11809f36 	bltu	r2,r6,1000e0b0 <__udivdi3+0x5a0>
1000de34:	00800404 	movi	r2,16
1000de38:	003f4c06 	br	1000db6c <__alt_data_end+0xf800db6c>
1000de3c:	3dce983a 	sll	r7,r7,r23
1000de40:	30b8d83a 	srl	fp,r6,r2
1000de44:	80a2d83a 	srl	r17,r16,r2
1000de48:	35cc983a 	sll	r6,r6,r23
1000de4c:	3f38b03a 	or	fp,r7,fp
1000de50:	e024d43a 	srli	r18,fp,16
1000de54:	9884d83a 	srl	r2,r19,r2
1000de58:	85e0983a 	sll	r16,r16,r23
1000de5c:	8809883a 	mov	r4,r17
1000de60:	900b883a 	mov	r5,r18
1000de64:	d9800015 	stw	r6,0(sp)
1000de68:	1420b03a 	or	r16,r2,r16
1000de6c:	000e82c0 	call	1000e82c <__umodsi3>
1000de70:	900b883a 	mov	r5,r18
1000de74:	8809883a 	mov	r4,r17
1000de78:	1029883a 	mov	r20,r2
1000de7c:	e5bfffcc 	andi	r22,fp,65535
1000de80:	000e7c80 	call	1000e7c8 <__udivsi3>
1000de84:	100b883a 	mov	r5,r2
1000de88:	b009883a 	mov	r4,r22
1000de8c:	102b883a 	mov	r21,r2
1000de90:	000e8840 	call	1000e884 <__mulsi3>
1000de94:	a028943a 	slli	r20,r20,16
1000de98:	8006d43a 	srli	r3,r16,16
1000de9c:	1d06b03a 	or	r3,r3,r20
1000dea0:	1880042e 	bgeu	r3,r2,1000deb4 <__udivdi3+0x3a4>
1000dea4:	1f07883a 	add	r3,r3,fp
1000dea8:	a93fffc4 	addi	r4,r21,-1
1000deac:	1f00892e 	bgeu	r3,fp,1000e0d4 <__udivdi3+0x5c4>
1000deb0:	202b883a 	mov	r21,r4
1000deb4:	18a3c83a 	sub	r17,r3,r2
1000deb8:	8809883a 	mov	r4,r17
1000debc:	900b883a 	mov	r5,r18
1000dec0:	000e82c0 	call	1000e82c <__umodsi3>
1000dec4:	1029883a 	mov	r20,r2
1000dec8:	8809883a 	mov	r4,r17
1000decc:	900b883a 	mov	r5,r18
1000ded0:	a028943a 	slli	r20,r20,16
1000ded4:	000e7c80 	call	1000e7c8 <__udivsi3>
1000ded8:	100b883a 	mov	r5,r2
1000dedc:	b009883a 	mov	r4,r22
1000dee0:	843fffcc 	andi	r16,r16,65535
1000dee4:	1023883a 	mov	r17,r2
1000dee8:	8520b03a 	or	r16,r16,r20
1000deec:	000e8840 	call	1000e884 <__mulsi3>
1000def0:	8080042e 	bgeu	r16,r2,1000df04 <__udivdi3+0x3f4>
1000def4:	8721883a 	add	r16,r16,fp
1000def8:	88ffffc4 	addi	r3,r17,-1
1000defc:	8700712e 	bgeu	r16,fp,1000e0c4 <__udivdi3+0x5b4>
1000df00:	1823883a 	mov	r17,r3
1000df04:	a80e943a 	slli	r7,r21,16
1000df08:	d8c00017 	ldw	r3,0(sp)
1000df0c:	80a1c83a 	sub	r16,r16,r2
1000df10:	3c64b03a 	or	r18,r7,r17
1000df14:	1d3fffcc 	andi	r20,r3,65535
1000df18:	9022d43a 	srli	r17,r18,16
1000df1c:	95bfffcc 	andi	r22,r18,65535
1000df20:	a00b883a 	mov	r5,r20
1000df24:	b009883a 	mov	r4,r22
1000df28:	182ad43a 	srli	r21,r3,16
1000df2c:	000e8840 	call	1000e884 <__mulsi3>
1000df30:	a00b883a 	mov	r5,r20
1000df34:	8809883a 	mov	r4,r17
1000df38:	1039883a 	mov	fp,r2
1000df3c:	000e8840 	call	1000e884 <__mulsi3>
1000df40:	8809883a 	mov	r4,r17
1000df44:	a80b883a 	mov	r5,r21
1000df48:	1029883a 	mov	r20,r2
1000df4c:	000e8840 	call	1000e884 <__mulsi3>
1000df50:	a80b883a 	mov	r5,r21
1000df54:	b009883a 	mov	r4,r22
1000df58:	1023883a 	mov	r17,r2
1000df5c:	000e8840 	call	1000e884 <__mulsi3>
1000df60:	e006d43a 	srli	r3,fp,16
1000df64:	1505883a 	add	r2,r2,r20
1000df68:	1887883a 	add	r3,r3,r2
1000df6c:	1d00022e 	bgeu	r3,r20,1000df78 <__udivdi3+0x468>
1000df70:	00800074 	movhi	r2,1
1000df74:	88a3883a 	add	r17,r17,r2
1000df78:	1804d43a 	srli	r2,r3,16
1000df7c:	1463883a 	add	r17,r2,r17
1000df80:	84404436 	bltu	r16,r17,1000e094 <__udivdi3+0x584>
1000df84:	84403e26 	beq	r16,r17,1000e080 <__udivdi3+0x570>
1000df88:	9005883a 	mov	r2,r18
1000df8c:	0007883a 	mov	r3,zero
1000df90:	003f9106 	br	1000ddd8 <__alt_data_end+0xf800ddd8>
1000df94:	88e2983a 	sll	r17,r17,r3
1000df98:	80aed83a 	srl	r23,r16,r2
1000df9c:	80e0983a 	sll	r16,r16,r3
1000dfa0:	882ad43a 	srli	r21,r17,16
1000dfa4:	9884d83a 	srl	r2,r19,r2
1000dfa8:	b809883a 	mov	r4,r23
1000dfac:	a80b883a 	mov	r5,r21
1000dfb0:	98e4983a 	sll	r18,r19,r3
1000dfb4:	142cb03a 	or	r22,r2,r16
1000dfb8:	000e82c0 	call	1000e82c <__umodsi3>
1000dfbc:	b809883a 	mov	r4,r23
1000dfc0:	a80b883a 	mov	r5,r21
1000dfc4:	1027883a 	mov	r19,r2
1000dfc8:	8d3fffcc 	andi	r20,r17,65535
1000dfcc:	000e7c80 	call	1000e7c8 <__udivsi3>
1000dfd0:	a009883a 	mov	r4,r20
1000dfd4:	100b883a 	mov	r5,r2
1000dfd8:	102f883a 	mov	r23,r2
1000dfdc:	000e8840 	call	1000e884 <__mulsi3>
1000dfe0:	9826943a 	slli	r19,r19,16
1000dfe4:	b008d43a 	srli	r4,r22,16
1000dfe8:	24c8b03a 	or	r4,r4,r19
1000dfec:	2080062e 	bgeu	r4,r2,1000e008 <__udivdi3+0x4f8>
1000dff0:	2449883a 	add	r4,r4,r17
1000dff4:	b8ffffc4 	addi	r3,r23,-1
1000dff8:	24403c36 	bltu	r4,r17,1000e0ec <__udivdi3+0x5dc>
1000dffc:	20803b2e 	bgeu	r4,r2,1000e0ec <__udivdi3+0x5dc>
1000e000:	bdffff84 	addi	r23,r23,-2
1000e004:	2449883a 	add	r4,r4,r17
1000e008:	20a1c83a 	sub	r16,r4,r2
1000e00c:	a80b883a 	mov	r5,r21
1000e010:	8009883a 	mov	r4,r16
1000e014:	000e82c0 	call	1000e82c <__umodsi3>
1000e018:	a80b883a 	mov	r5,r21
1000e01c:	8009883a 	mov	r4,r16
1000e020:	1027883a 	mov	r19,r2
1000e024:	000e7c80 	call	1000e7c8 <__udivsi3>
1000e028:	a009883a 	mov	r4,r20
1000e02c:	100b883a 	mov	r5,r2
1000e030:	9826943a 	slli	r19,r19,16
1000e034:	1039883a 	mov	fp,r2
1000e038:	000e8840 	call	1000e884 <__mulsi3>
1000e03c:	b13fffcc 	andi	r4,r22,65535
1000e040:	24c8b03a 	or	r4,r4,r19
1000e044:	2080062e 	bgeu	r4,r2,1000e060 <__udivdi3+0x550>
1000e048:	2449883a 	add	r4,r4,r17
1000e04c:	e0ffffc4 	addi	r3,fp,-1
1000e050:	24402436 	bltu	r4,r17,1000e0e4 <__udivdi3+0x5d4>
1000e054:	2080232e 	bgeu	r4,r2,1000e0e4 <__udivdi3+0x5d4>
1000e058:	e73fff84 	addi	fp,fp,-2
1000e05c:	2449883a 	add	r4,r4,r17
1000e060:	b82e943a 	slli	r23,r23,16
1000e064:	20a1c83a 	sub	r16,r4,r2
1000e068:	bf06b03a 	or	r3,r23,fp
1000e06c:	003f2806 	br	1000dd10 <__alt_data_end+0xf800dd10>
1000e070:	2021883a 	mov	r16,r4
1000e074:	003f5306 	br	1000ddc4 <__alt_data_end+0xf800ddc4>
1000e078:	1821883a 	mov	r16,r3
1000e07c:	003ef406 	br	1000dc50 <__alt_data_end+0xf800dc50>
1000e080:	1806943a 	slli	r3,r3,16
1000e084:	9de6983a 	sll	r19,r19,r23
1000e088:	e73fffcc 	andi	fp,fp,65535
1000e08c:	1f07883a 	add	r3,r3,fp
1000e090:	98ffbd2e 	bgeu	r19,r3,1000df88 <__alt_data_end+0xf800df88>
1000e094:	90bfffc4 	addi	r2,r18,-1
1000e098:	0007883a 	mov	r3,zero
1000e09c:	003f4e06 	br	1000ddd8 <__alt_data_end+0xf800ddd8>
1000e0a0:	00800604 	movi	r2,24
1000e0a4:	003ef506 	br	1000dc7c <__alt_data_end+0xf800dc7c>
1000e0a8:	00800604 	movi	r2,24
1000e0ac:	003f0b06 	br	1000dcdc <__alt_data_end+0xf800dcdc>
1000e0b0:	00800604 	movi	r2,24
1000e0b4:	003ead06 	br	1000db6c <__alt_data_end+0xf800db6c>
1000e0b8:	0007883a 	mov	r3,zero
1000e0bc:	00800044 	movi	r2,1
1000e0c0:	003f4506 	br	1000ddd8 <__alt_data_end+0xf800ddd8>
1000e0c4:	80bf8e2e 	bgeu	r16,r2,1000df00 <__alt_data_end+0xf800df00>
1000e0c8:	8c7fff84 	addi	r17,r17,-2
1000e0cc:	8721883a 	add	r16,r16,fp
1000e0d0:	003f8c06 	br	1000df04 <__alt_data_end+0xf800df04>
1000e0d4:	18bf762e 	bgeu	r3,r2,1000deb0 <__alt_data_end+0xf800deb0>
1000e0d8:	ad7fff84 	addi	r21,r21,-2
1000e0dc:	1f07883a 	add	r3,r3,fp
1000e0e0:	003f7406 	br	1000deb4 <__alt_data_end+0xf800deb4>
1000e0e4:	1839883a 	mov	fp,r3
1000e0e8:	003fdd06 	br	1000e060 <__alt_data_end+0xf800e060>
1000e0ec:	182f883a 	mov	r23,r3
1000e0f0:	003fc506 	br	1000e008 <__alt_data_end+0xf800e008>
1000e0f4:	b5bfff84 	addi	r22,r22,-2
1000e0f8:	3c4f883a 	add	r7,r7,r17
1000e0fc:	003f1a06 	br	1000dd68 <__alt_data_end+0xf800dd68>
1000e100:	b5bfff84 	addi	r22,r22,-2
1000e104:	1c47883a 	add	r3,r3,r17
1000e108:	003ebc06 	br	1000dbfc <__alt_data_end+0xf800dbfc>

1000e10c <__umoddi3>:
1000e10c:	defff304 	addi	sp,sp,-52
1000e110:	df000b15 	stw	fp,44(sp)
1000e114:	dc400415 	stw	r17,16(sp)
1000e118:	dc000315 	stw	r16,12(sp)
1000e11c:	dfc00c15 	stw	ra,48(sp)
1000e120:	ddc00a15 	stw	r23,40(sp)
1000e124:	dd800915 	stw	r22,36(sp)
1000e128:	dd400815 	stw	r21,32(sp)
1000e12c:	dd000715 	stw	r20,28(sp)
1000e130:	dcc00615 	stw	r19,24(sp)
1000e134:	dc800515 	stw	r18,20(sp)
1000e138:	2021883a 	mov	r16,r4
1000e13c:	2823883a 	mov	r17,r5
1000e140:	2839883a 	mov	fp,r5
1000e144:	3800401e 	bne	r7,zero,1000e248 <__umoddi3+0x13c>
1000e148:	3027883a 	mov	r19,r6
1000e14c:	2029883a 	mov	r20,r4
1000e150:	2980552e 	bgeu	r5,r6,1000e2a8 <__umoddi3+0x19c>
1000e154:	00bfffd4 	movui	r2,65535
1000e158:	1180a236 	bltu	r2,r6,1000e3e4 <__umoddi3+0x2d8>
1000e15c:	01003fc4 	movi	r4,255
1000e160:	2189803a 	cmpltu	r4,r4,r6
1000e164:	200890fa 	slli	r4,r4,3
1000e168:	3104d83a 	srl	r2,r6,r4
1000e16c:	00c40074 	movhi	r3,4097
1000e170:	18d0b304 	addi	r3,r3,17100
1000e174:	1885883a 	add	r2,r3,r2
1000e178:	10c00003 	ldbu	r3,0(r2)
1000e17c:	00800804 	movi	r2,32
1000e180:	1909883a 	add	r4,r3,r4
1000e184:	1125c83a 	sub	r18,r2,r4
1000e188:	90000526 	beq	r18,zero,1000e1a0 <__umoddi3+0x94>
1000e18c:	8ca2983a 	sll	r17,r17,r18
1000e190:	8108d83a 	srl	r4,r16,r4
1000e194:	34a6983a 	sll	r19,r6,r18
1000e198:	84a8983a 	sll	r20,r16,r18
1000e19c:	2478b03a 	or	fp,r4,r17
1000e1a0:	982cd43a 	srli	r22,r19,16
1000e1a4:	e009883a 	mov	r4,fp
1000e1a8:	9dffffcc 	andi	r23,r19,65535
1000e1ac:	b00b883a 	mov	r5,r22
1000e1b0:	000e82c0 	call	1000e82c <__umodsi3>
1000e1b4:	b00b883a 	mov	r5,r22
1000e1b8:	e009883a 	mov	r4,fp
1000e1bc:	102b883a 	mov	r21,r2
1000e1c0:	000e7c80 	call	1000e7c8 <__udivsi3>
1000e1c4:	100b883a 	mov	r5,r2
1000e1c8:	b809883a 	mov	r4,r23
1000e1cc:	000e8840 	call	1000e884 <__mulsi3>
1000e1d0:	a82a943a 	slli	r21,r21,16
1000e1d4:	a006d43a 	srli	r3,r20,16
1000e1d8:	1d46b03a 	or	r3,r3,r21
1000e1dc:	1880032e 	bgeu	r3,r2,1000e1ec <__umoddi3+0xe0>
1000e1e0:	1cc7883a 	add	r3,r3,r19
1000e1e4:	1cc00136 	bltu	r3,r19,1000e1ec <__umoddi3+0xe0>
1000e1e8:	18813136 	bltu	r3,r2,1000e6b0 <__umoddi3+0x5a4>
1000e1ec:	18a1c83a 	sub	r16,r3,r2
1000e1f0:	b00b883a 	mov	r5,r22
1000e1f4:	8009883a 	mov	r4,r16
1000e1f8:	000e82c0 	call	1000e82c <__umodsi3>
1000e1fc:	b00b883a 	mov	r5,r22
1000e200:	8009883a 	mov	r4,r16
1000e204:	1023883a 	mov	r17,r2
1000e208:	000e7c80 	call	1000e7c8 <__udivsi3>
1000e20c:	100b883a 	mov	r5,r2
1000e210:	b809883a 	mov	r4,r23
1000e214:	8822943a 	slli	r17,r17,16
1000e218:	000e8840 	call	1000e884 <__mulsi3>
1000e21c:	a0ffffcc 	andi	r3,r20,65535
1000e220:	1c46b03a 	or	r3,r3,r17
1000e224:	1880042e 	bgeu	r3,r2,1000e238 <__umoddi3+0x12c>
1000e228:	1cc7883a 	add	r3,r3,r19
1000e22c:	1cc00236 	bltu	r3,r19,1000e238 <__umoddi3+0x12c>
1000e230:	1880012e 	bgeu	r3,r2,1000e238 <__umoddi3+0x12c>
1000e234:	1cc7883a 	add	r3,r3,r19
1000e238:	1885c83a 	sub	r2,r3,r2
1000e23c:	1484d83a 	srl	r2,r2,r18
1000e240:	0007883a 	mov	r3,zero
1000e244:	00005306 	br	1000e394 <__umoddi3+0x288>
1000e248:	29c05036 	bltu	r5,r7,1000e38c <__umoddi3+0x280>
1000e24c:	00bfffd4 	movui	r2,65535
1000e250:	11c05c2e 	bgeu	r2,r7,1000e3c4 <__umoddi3+0x2b8>
1000e254:	00804034 	movhi	r2,256
1000e258:	10bfffc4 	addi	r2,r2,-1
1000e25c:	11c10636 	bltu	r2,r7,1000e678 <__umoddi3+0x56c>
1000e260:	01000404 	movi	r4,16
1000e264:	3904d83a 	srl	r2,r7,r4
1000e268:	00c40074 	movhi	r3,4097
1000e26c:	18d0b304 	addi	r3,r3,17100
1000e270:	1885883a 	add	r2,r3,r2
1000e274:	14c00003 	ldbu	r19,0(r2)
1000e278:	00c00804 	movi	r3,32
1000e27c:	9927883a 	add	r19,r19,r4
1000e280:	1ce9c83a 	sub	r20,r3,r19
1000e284:	a0005c1e 	bne	r20,zero,1000e3f8 <__umoddi3+0x2ec>
1000e288:	3c400136 	bltu	r7,r17,1000e290 <__umoddi3+0x184>
1000e28c:	81810a36 	bltu	r16,r6,1000e6b8 <__umoddi3+0x5ac>
1000e290:	8185c83a 	sub	r2,r16,r6
1000e294:	89e3c83a 	sub	r17,r17,r7
1000e298:	8089803a 	cmpltu	r4,r16,r2
1000e29c:	8939c83a 	sub	fp,r17,r4
1000e2a0:	e007883a 	mov	r3,fp
1000e2a4:	00003b06 	br	1000e394 <__umoddi3+0x288>
1000e2a8:	3000041e 	bne	r6,zero,1000e2bc <__umoddi3+0x1b0>
1000e2ac:	000b883a 	mov	r5,zero
1000e2b0:	01000044 	movi	r4,1
1000e2b4:	000e7c80 	call	1000e7c8 <__udivsi3>
1000e2b8:	1027883a 	mov	r19,r2
1000e2bc:	00bfffd4 	movui	r2,65535
1000e2c0:	14c0442e 	bgeu	r2,r19,1000e3d4 <__umoddi3+0x2c8>
1000e2c4:	00804034 	movhi	r2,256
1000e2c8:	10bfffc4 	addi	r2,r2,-1
1000e2cc:	14c0ec36 	bltu	r2,r19,1000e680 <__umoddi3+0x574>
1000e2d0:	00800404 	movi	r2,16
1000e2d4:	9886d83a 	srl	r3,r19,r2
1000e2d8:	01040074 	movhi	r4,4097
1000e2dc:	2110b304 	addi	r4,r4,17100
1000e2e0:	20c7883a 	add	r3,r4,r3
1000e2e4:	18c00003 	ldbu	r3,0(r3)
1000e2e8:	1887883a 	add	r3,r3,r2
1000e2ec:	00800804 	movi	r2,32
1000e2f0:	10e5c83a 	sub	r18,r2,r3
1000e2f4:	9000ab1e 	bne	r18,zero,1000e5a4 <__umoddi3+0x498>
1000e2f8:	982cd43a 	srli	r22,r19,16
1000e2fc:	8ce3c83a 	sub	r17,r17,r19
1000e300:	9dffffcc 	andi	r23,r19,65535
1000e304:	b00b883a 	mov	r5,r22
1000e308:	8809883a 	mov	r4,r17
1000e30c:	000e82c0 	call	1000e82c <__umodsi3>
1000e310:	b00b883a 	mov	r5,r22
1000e314:	8809883a 	mov	r4,r17
1000e318:	102b883a 	mov	r21,r2
1000e31c:	000e7c80 	call	1000e7c8 <__udivsi3>
1000e320:	b80b883a 	mov	r5,r23
1000e324:	1009883a 	mov	r4,r2
1000e328:	000e8840 	call	1000e884 <__mulsi3>
1000e32c:	a82a943a 	slli	r21,r21,16
1000e330:	a006d43a 	srli	r3,r20,16
1000e334:	1d46b03a 	or	r3,r3,r21
1000e338:	1880042e 	bgeu	r3,r2,1000e34c <__umoddi3+0x240>
1000e33c:	1cc7883a 	add	r3,r3,r19
1000e340:	1cc00236 	bltu	r3,r19,1000e34c <__umoddi3+0x240>
1000e344:	1880012e 	bgeu	r3,r2,1000e34c <__umoddi3+0x240>
1000e348:	1cc7883a 	add	r3,r3,r19
1000e34c:	18a1c83a 	sub	r16,r3,r2
1000e350:	b00b883a 	mov	r5,r22
1000e354:	8009883a 	mov	r4,r16
1000e358:	000e82c0 	call	1000e82c <__umodsi3>
1000e35c:	1023883a 	mov	r17,r2
1000e360:	b00b883a 	mov	r5,r22
1000e364:	8009883a 	mov	r4,r16
1000e368:	000e7c80 	call	1000e7c8 <__udivsi3>
1000e36c:	8822943a 	slli	r17,r17,16
1000e370:	b80b883a 	mov	r5,r23
1000e374:	1009883a 	mov	r4,r2
1000e378:	000e8840 	call	1000e884 <__mulsi3>
1000e37c:	a53fffcc 	andi	r20,r20,65535
1000e380:	a446b03a 	or	r3,r20,r17
1000e384:	18bfac2e 	bgeu	r3,r2,1000e238 <__alt_data_end+0xf800e238>
1000e388:	003fa706 	br	1000e228 <__alt_data_end+0xf800e228>
1000e38c:	2005883a 	mov	r2,r4
1000e390:	2807883a 	mov	r3,r5
1000e394:	dfc00c17 	ldw	ra,48(sp)
1000e398:	df000b17 	ldw	fp,44(sp)
1000e39c:	ddc00a17 	ldw	r23,40(sp)
1000e3a0:	dd800917 	ldw	r22,36(sp)
1000e3a4:	dd400817 	ldw	r21,32(sp)
1000e3a8:	dd000717 	ldw	r20,28(sp)
1000e3ac:	dcc00617 	ldw	r19,24(sp)
1000e3b0:	dc800517 	ldw	r18,20(sp)
1000e3b4:	dc400417 	ldw	r17,16(sp)
1000e3b8:	dc000317 	ldw	r16,12(sp)
1000e3bc:	dec00d04 	addi	sp,sp,52
1000e3c0:	f800283a 	ret
1000e3c4:	04c03fc4 	movi	r19,255
1000e3c8:	99c9803a 	cmpltu	r4,r19,r7
1000e3cc:	200890fa 	slli	r4,r4,3
1000e3d0:	003fa406 	br	1000e264 <__alt_data_end+0xf800e264>
1000e3d4:	00803fc4 	movi	r2,255
1000e3d8:	14c5803a 	cmpltu	r2,r2,r19
1000e3dc:	100490fa 	slli	r2,r2,3
1000e3e0:	003fbc06 	br	1000e2d4 <__alt_data_end+0xf800e2d4>
1000e3e4:	00804034 	movhi	r2,256
1000e3e8:	10bfffc4 	addi	r2,r2,-1
1000e3ec:	1180a636 	bltu	r2,r6,1000e688 <__umoddi3+0x57c>
1000e3f0:	01000404 	movi	r4,16
1000e3f4:	003f5c06 	br	1000e168 <__alt_data_end+0xf800e168>
1000e3f8:	3d0e983a 	sll	r7,r7,r20
1000e3fc:	34ead83a 	srl	r21,r6,r19
1000e400:	8cc6d83a 	srl	r3,r17,r19
1000e404:	8d10983a 	sll	r8,r17,r20
1000e408:	3d6ab03a 	or	r21,r7,r21
1000e40c:	a82cd43a 	srli	r22,r21,16
1000e410:	84e2d83a 	srl	r17,r16,r19
1000e414:	1809883a 	mov	r4,r3
1000e418:	b00b883a 	mov	r5,r22
1000e41c:	8a22b03a 	or	r17,r17,r8
1000e420:	3524983a 	sll	r18,r6,r20
1000e424:	dc400015 	stw	r17,0(sp)
1000e428:	d8c00115 	stw	r3,4(sp)
1000e42c:	000e82c0 	call	1000e82c <__umodsi3>
1000e430:	d8c00117 	ldw	r3,4(sp)
1000e434:	b00b883a 	mov	r5,r22
1000e438:	1039883a 	mov	fp,r2
1000e43c:	1809883a 	mov	r4,r3
1000e440:	000e7c80 	call	1000e7c8 <__udivsi3>
1000e444:	adffffcc 	andi	r23,r21,65535
1000e448:	100b883a 	mov	r5,r2
1000e44c:	b809883a 	mov	r4,r23
1000e450:	1023883a 	mov	r17,r2
1000e454:	000e8840 	call	1000e884 <__mulsi3>
1000e458:	d9400017 	ldw	r5,0(sp)
1000e45c:	e008943a 	slli	r4,fp,16
1000e460:	8520983a 	sll	r16,r16,r20
1000e464:	2806d43a 	srli	r3,r5,16
1000e468:	1906b03a 	or	r3,r3,r4
1000e46c:	1880042e 	bgeu	r3,r2,1000e480 <__umoddi3+0x374>
1000e470:	1d47883a 	add	r3,r3,r21
1000e474:	893fffc4 	addi	r4,r17,-1
1000e478:	1d40892e 	bgeu	r3,r21,1000e6a0 <__umoddi3+0x594>
1000e47c:	2023883a 	mov	r17,r4
1000e480:	18b9c83a 	sub	fp,r3,r2
1000e484:	b00b883a 	mov	r5,r22
1000e488:	e009883a 	mov	r4,fp
1000e48c:	000e82c0 	call	1000e82c <__umodsi3>
1000e490:	b00b883a 	mov	r5,r22
1000e494:	e009883a 	mov	r4,fp
1000e498:	d8800215 	stw	r2,8(sp)
1000e49c:	000e7c80 	call	1000e7c8 <__udivsi3>
1000e4a0:	100b883a 	mov	r5,r2
1000e4a4:	b809883a 	mov	r4,r23
1000e4a8:	102d883a 	mov	r22,r2
1000e4ac:	000e8840 	call	1000e884 <__mulsi3>
1000e4b0:	d9800217 	ldw	r6,8(sp)
1000e4b4:	d8c00017 	ldw	r3,0(sp)
1000e4b8:	300c943a 	slli	r6,r6,16
1000e4bc:	1a3fffcc 	andi	r8,r3,65535
1000e4c0:	4190b03a 	or	r8,r8,r6
1000e4c4:	4080042e 	bgeu	r8,r2,1000e4d8 <__umoddi3+0x3cc>
1000e4c8:	4551883a 	add	r8,r8,r21
1000e4cc:	b0ffffc4 	addi	r3,r22,-1
1000e4d0:	45406f2e 	bgeu	r8,r21,1000e690 <__umoddi3+0x584>
1000e4d4:	182d883a 	mov	r22,r3
1000e4d8:	880e943a 	slli	r7,r17,16
1000e4dc:	9006d43a 	srli	r3,r18,16
1000e4e0:	91bfffcc 	andi	r6,r18,65535
1000e4e4:	3dacb03a 	or	r22,r7,r22
1000e4e8:	b02ed43a 	srli	r23,r22,16
1000e4ec:	b5bfffcc 	andi	r22,r22,65535
1000e4f0:	300b883a 	mov	r5,r6
1000e4f4:	b009883a 	mov	r4,r22
1000e4f8:	40a3c83a 	sub	r17,r8,r2
1000e4fc:	d8c00115 	stw	r3,4(sp)
1000e500:	d9800215 	stw	r6,8(sp)
1000e504:	000e8840 	call	1000e884 <__mulsi3>
1000e508:	d9800217 	ldw	r6,8(sp)
1000e50c:	b809883a 	mov	r4,r23
1000e510:	1039883a 	mov	fp,r2
1000e514:	300b883a 	mov	r5,r6
1000e518:	000e8840 	call	1000e884 <__mulsi3>
1000e51c:	d8c00117 	ldw	r3,4(sp)
1000e520:	b809883a 	mov	r4,r23
1000e524:	d8800215 	stw	r2,8(sp)
1000e528:	180b883a 	mov	r5,r3
1000e52c:	000e8840 	call	1000e884 <__mulsi3>
1000e530:	d8c00117 	ldw	r3,4(sp)
1000e534:	b009883a 	mov	r4,r22
1000e538:	102f883a 	mov	r23,r2
1000e53c:	180b883a 	mov	r5,r3
1000e540:	000e8840 	call	1000e884 <__mulsi3>
1000e544:	d9800217 	ldw	r6,8(sp)
1000e548:	e006d43a 	srli	r3,fp,16
1000e54c:	1185883a 	add	r2,r2,r6
1000e550:	1885883a 	add	r2,r3,r2
1000e554:	1180022e 	bgeu	r2,r6,1000e560 <__umoddi3+0x454>
1000e558:	00c00074 	movhi	r3,1
1000e55c:	b8ef883a 	add	r23,r23,r3
1000e560:	1006d43a 	srli	r3,r2,16
1000e564:	1004943a 	slli	r2,r2,16
1000e568:	e73fffcc 	andi	fp,fp,65535
1000e56c:	1dc7883a 	add	r3,r3,r23
1000e570:	1739883a 	add	fp,r2,fp
1000e574:	88c03a36 	bltu	r17,r3,1000e660 <__umoddi3+0x554>
1000e578:	88c05126 	beq	r17,r3,1000e6c0 <__umoddi3+0x5b4>
1000e57c:	88c9c83a 	sub	r4,r17,r3
1000e580:	e00f883a 	mov	r7,fp
1000e584:	81cfc83a 	sub	r7,r16,r7
1000e588:	81c7803a 	cmpltu	r3,r16,r7
1000e58c:	20c7c83a 	sub	r3,r4,r3
1000e590:	1cc4983a 	sll	r2,r3,r19
1000e594:	3d0ed83a 	srl	r7,r7,r20
1000e598:	1d06d83a 	srl	r3,r3,r20
1000e59c:	11c4b03a 	or	r2,r2,r7
1000e5a0:	003f7c06 	br	1000e394 <__alt_data_end+0xf800e394>
1000e5a4:	9ca6983a 	sll	r19,r19,r18
1000e5a8:	88f8d83a 	srl	fp,r17,r3
1000e5ac:	80c4d83a 	srl	r2,r16,r3
1000e5b0:	982cd43a 	srli	r22,r19,16
1000e5b4:	8ca2983a 	sll	r17,r17,r18
1000e5b8:	e009883a 	mov	r4,fp
1000e5bc:	b00b883a 	mov	r5,r22
1000e5c0:	146ab03a 	or	r21,r2,r17
1000e5c4:	000e82c0 	call	1000e82c <__umodsi3>
1000e5c8:	b00b883a 	mov	r5,r22
1000e5cc:	e009883a 	mov	r4,fp
1000e5d0:	1029883a 	mov	r20,r2
1000e5d4:	9dffffcc 	andi	r23,r19,65535
1000e5d8:	000e7c80 	call	1000e7c8 <__udivsi3>
1000e5dc:	b809883a 	mov	r4,r23
1000e5e0:	100b883a 	mov	r5,r2
1000e5e4:	000e8840 	call	1000e884 <__mulsi3>
1000e5e8:	a008943a 	slli	r4,r20,16
1000e5ec:	a806d43a 	srli	r3,r21,16
1000e5f0:	84a8983a 	sll	r20,r16,r18
1000e5f4:	1906b03a 	or	r3,r3,r4
1000e5f8:	1880042e 	bgeu	r3,r2,1000e60c <__umoddi3+0x500>
1000e5fc:	1cc7883a 	add	r3,r3,r19
1000e600:	1cc00236 	bltu	r3,r19,1000e60c <__umoddi3+0x500>
1000e604:	1880012e 	bgeu	r3,r2,1000e60c <__umoddi3+0x500>
1000e608:	1cc7883a 	add	r3,r3,r19
1000e60c:	18a3c83a 	sub	r17,r3,r2
1000e610:	b00b883a 	mov	r5,r22
1000e614:	8809883a 	mov	r4,r17
1000e618:	000e82c0 	call	1000e82c <__umodsi3>
1000e61c:	b00b883a 	mov	r5,r22
1000e620:	8809883a 	mov	r4,r17
1000e624:	1021883a 	mov	r16,r2
1000e628:	000e7c80 	call	1000e7c8 <__udivsi3>
1000e62c:	100b883a 	mov	r5,r2
1000e630:	b809883a 	mov	r4,r23
1000e634:	8020943a 	slli	r16,r16,16
1000e638:	000e8840 	call	1000e884 <__mulsi3>
1000e63c:	a8ffffcc 	andi	r3,r21,65535
1000e640:	1c06b03a 	or	r3,r3,r16
1000e644:	1880042e 	bgeu	r3,r2,1000e658 <__umoddi3+0x54c>
1000e648:	1cc7883a 	add	r3,r3,r19
1000e64c:	1cc00236 	bltu	r3,r19,1000e658 <__umoddi3+0x54c>
1000e650:	1880012e 	bgeu	r3,r2,1000e658 <__umoddi3+0x54c>
1000e654:	1cc7883a 	add	r3,r3,r19
1000e658:	18a3c83a 	sub	r17,r3,r2
1000e65c:	003f2906 	br	1000e304 <__alt_data_end+0xf800e304>
1000e660:	e48fc83a 	sub	r7,fp,r18
1000e664:	1d49c83a 	sub	r4,r3,r21
1000e668:	e1f9803a 	cmpltu	fp,fp,r7
1000e66c:	2739c83a 	sub	fp,r4,fp
1000e670:	8f09c83a 	sub	r4,r17,fp
1000e674:	003fc306 	br	1000e584 <__alt_data_end+0xf800e584>
1000e678:	01000604 	movi	r4,24
1000e67c:	003ef906 	br	1000e264 <__alt_data_end+0xf800e264>
1000e680:	00800604 	movi	r2,24
1000e684:	003f1306 	br	1000e2d4 <__alt_data_end+0xf800e2d4>
1000e688:	01000604 	movi	r4,24
1000e68c:	003eb606 	br	1000e168 <__alt_data_end+0xf800e168>
1000e690:	40bf902e 	bgeu	r8,r2,1000e4d4 <__alt_data_end+0xf800e4d4>
1000e694:	b5bfff84 	addi	r22,r22,-2
1000e698:	4551883a 	add	r8,r8,r21
1000e69c:	003f8e06 	br	1000e4d8 <__alt_data_end+0xf800e4d8>
1000e6a0:	18bf762e 	bgeu	r3,r2,1000e47c <__alt_data_end+0xf800e47c>
1000e6a4:	8c7fff84 	addi	r17,r17,-2
1000e6a8:	1d47883a 	add	r3,r3,r21
1000e6ac:	003f7406 	br	1000e480 <__alt_data_end+0xf800e480>
1000e6b0:	1cc7883a 	add	r3,r3,r19
1000e6b4:	003ecd06 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e6b8:	8005883a 	mov	r2,r16
1000e6bc:	003ef806 	br	1000e2a0 <__alt_data_end+0xf800e2a0>
1000e6c0:	873fe736 	bltu	r16,fp,1000e660 <__alt_data_end+0xf800e660>
1000e6c4:	e00f883a 	mov	r7,fp
1000e6c8:	0009883a 	mov	r4,zero
1000e6cc:	003fad06 	br	1000e584 <__alt_data_end+0xf800e584>

1000e6d0 <__divsi3>:
1000e6d0:	20001b16 	blt	r4,zero,1000e740 <__divsi3+0x70>
1000e6d4:	000f883a 	mov	r7,zero
1000e6d8:	28001616 	blt	r5,zero,1000e734 <__divsi3+0x64>
1000e6dc:	200d883a 	mov	r6,r4
1000e6e0:	29001a2e 	bgeu	r5,r4,1000e74c <__divsi3+0x7c>
1000e6e4:	00800804 	movi	r2,32
1000e6e8:	00c00044 	movi	r3,1
1000e6ec:	00000106 	br	1000e6f4 <__divsi3+0x24>
1000e6f0:	10000d26 	beq	r2,zero,1000e728 <__divsi3+0x58>
1000e6f4:	294b883a 	add	r5,r5,r5
1000e6f8:	10bfffc4 	addi	r2,r2,-1
1000e6fc:	18c7883a 	add	r3,r3,r3
1000e700:	293ffb36 	bltu	r5,r4,1000e6f0 <__alt_data_end+0xf800e6f0>
1000e704:	0005883a 	mov	r2,zero
1000e708:	18000726 	beq	r3,zero,1000e728 <__divsi3+0x58>
1000e70c:	0005883a 	mov	r2,zero
1000e710:	31400236 	bltu	r6,r5,1000e71c <__divsi3+0x4c>
1000e714:	314dc83a 	sub	r6,r6,r5
1000e718:	10c4b03a 	or	r2,r2,r3
1000e71c:	1806d07a 	srli	r3,r3,1
1000e720:	280ad07a 	srli	r5,r5,1
1000e724:	183ffa1e 	bne	r3,zero,1000e710 <__alt_data_end+0xf800e710>
1000e728:	38000126 	beq	r7,zero,1000e730 <__divsi3+0x60>
1000e72c:	0085c83a 	sub	r2,zero,r2
1000e730:	f800283a 	ret
1000e734:	014bc83a 	sub	r5,zero,r5
1000e738:	39c0005c 	xori	r7,r7,1
1000e73c:	003fe706 	br	1000e6dc <__alt_data_end+0xf800e6dc>
1000e740:	0109c83a 	sub	r4,zero,r4
1000e744:	01c00044 	movi	r7,1
1000e748:	003fe306 	br	1000e6d8 <__alt_data_end+0xf800e6d8>
1000e74c:	00c00044 	movi	r3,1
1000e750:	003fee06 	br	1000e70c <__alt_data_end+0xf800e70c>

1000e754 <__modsi3>:
1000e754:	20001716 	blt	r4,zero,1000e7b4 <__modsi3+0x60>
1000e758:	000f883a 	mov	r7,zero
1000e75c:	2005883a 	mov	r2,r4
1000e760:	28001216 	blt	r5,zero,1000e7ac <__modsi3+0x58>
1000e764:	2900162e 	bgeu	r5,r4,1000e7c0 <__modsi3+0x6c>
1000e768:	01800804 	movi	r6,32
1000e76c:	00c00044 	movi	r3,1
1000e770:	00000106 	br	1000e778 <__modsi3+0x24>
1000e774:	30000a26 	beq	r6,zero,1000e7a0 <__modsi3+0x4c>
1000e778:	294b883a 	add	r5,r5,r5
1000e77c:	31bfffc4 	addi	r6,r6,-1
1000e780:	18c7883a 	add	r3,r3,r3
1000e784:	293ffb36 	bltu	r5,r4,1000e774 <__alt_data_end+0xf800e774>
1000e788:	18000526 	beq	r3,zero,1000e7a0 <__modsi3+0x4c>
1000e78c:	1806d07a 	srli	r3,r3,1
1000e790:	11400136 	bltu	r2,r5,1000e798 <__modsi3+0x44>
1000e794:	1145c83a 	sub	r2,r2,r5
1000e798:	280ad07a 	srli	r5,r5,1
1000e79c:	183ffb1e 	bne	r3,zero,1000e78c <__alt_data_end+0xf800e78c>
1000e7a0:	38000126 	beq	r7,zero,1000e7a8 <__modsi3+0x54>
1000e7a4:	0085c83a 	sub	r2,zero,r2
1000e7a8:	f800283a 	ret
1000e7ac:	014bc83a 	sub	r5,zero,r5
1000e7b0:	003fec06 	br	1000e764 <__alt_data_end+0xf800e764>
1000e7b4:	0109c83a 	sub	r4,zero,r4
1000e7b8:	01c00044 	movi	r7,1
1000e7bc:	003fe706 	br	1000e75c <__alt_data_end+0xf800e75c>
1000e7c0:	00c00044 	movi	r3,1
1000e7c4:	003ff106 	br	1000e78c <__alt_data_end+0xf800e78c>

1000e7c8 <__udivsi3>:
1000e7c8:	200d883a 	mov	r6,r4
1000e7cc:	2900152e 	bgeu	r5,r4,1000e824 <__udivsi3+0x5c>
1000e7d0:	28001416 	blt	r5,zero,1000e824 <__udivsi3+0x5c>
1000e7d4:	00800804 	movi	r2,32
1000e7d8:	00c00044 	movi	r3,1
1000e7dc:	00000206 	br	1000e7e8 <__udivsi3+0x20>
1000e7e0:	10000e26 	beq	r2,zero,1000e81c <__udivsi3+0x54>
1000e7e4:	28000516 	blt	r5,zero,1000e7fc <__udivsi3+0x34>
1000e7e8:	294b883a 	add	r5,r5,r5
1000e7ec:	10bfffc4 	addi	r2,r2,-1
1000e7f0:	18c7883a 	add	r3,r3,r3
1000e7f4:	293ffa36 	bltu	r5,r4,1000e7e0 <__alt_data_end+0xf800e7e0>
1000e7f8:	18000826 	beq	r3,zero,1000e81c <__udivsi3+0x54>
1000e7fc:	0005883a 	mov	r2,zero
1000e800:	31400236 	bltu	r6,r5,1000e80c <__udivsi3+0x44>
1000e804:	314dc83a 	sub	r6,r6,r5
1000e808:	10c4b03a 	or	r2,r2,r3
1000e80c:	1806d07a 	srli	r3,r3,1
1000e810:	280ad07a 	srli	r5,r5,1
1000e814:	183ffa1e 	bne	r3,zero,1000e800 <__alt_data_end+0xf800e800>
1000e818:	f800283a 	ret
1000e81c:	0005883a 	mov	r2,zero
1000e820:	f800283a 	ret
1000e824:	00c00044 	movi	r3,1
1000e828:	003ff406 	br	1000e7fc <__alt_data_end+0xf800e7fc>

1000e82c <__umodsi3>:
1000e82c:	2005883a 	mov	r2,r4
1000e830:	2900122e 	bgeu	r5,r4,1000e87c <__umodsi3+0x50>
1000e834:	28001116 	blt	r5,zero,1000e87c <__umodsi3+0x50>
1000e838:	01800804 	movi	r6,32
1000e83c:	00c00044 	movi	r3,1
1000e840:	00000206 	br	1000e84c <__umodsi3+0x20>
1000e844:	30000c26 	beq	r6,zero,1000e878 <__umodsi3+0x4c>
1000e848:	28000516 	blt	r5,zero,1000e860 <__umodsi3+0x34>
1000e84c:	294b883a 	add	r5,r5,r5
1000e850:	31bfffc4 	addi	r6,r6,-1
1000e854:	18c7883a 	add	r3,r3,r3
1000e858:	293ffa36 	bltu	r5,r4,1000e844 <__alt_data_end+0xf800e844>
1000e85c:	18000626 	beq	r3,zero,1000e878 <__umodsi3+0x4c>
1000e860:	1806d07a 	srli	r3,r3,1
1000e864:	11400136 	bltu	r2,r5,1000e86c <__umodsi3+0x40>
1000e868:	1145c83a 	sub	r2,r2,r5
1000e86c:	280ad07a 	srli	r5,r5,1
1000e870:	183ffb1e 	bne	r3,zero,1000e860 <__alt_data_end+0xf800e860>
1000e874:	f800283a 	ret
1000e878:	f800283a 	ret
1000e87c:	00c00044 	movi	r3,1
1000e880:	003ff706 	br	1000e860 <__alt_data_end+0xf800e860>

1000e884 <__mulsi3>:
1000e884:	0005883a 	mov	r2,zero
1000e888:	20000726 	beq	r4,zero,1000e8a8 <__mulsi3+0x24>
1000e88c:	20c0004c 	andi	r3,r4,1
1000e890:	2008d07a 	srli	r4,r4,1
1000e894:	18000126 	beq	r3,zero,1000e89c <__mulsi3+0x18>
1000e898:	1145883a 	add	r2,r2,r5
1000e89c:	294b883a 	add	r5,r5,r5
1000e8a0:	203ffa1e 	bne	r4,zero,1000e88c <__alt_data_end+0xf800e88c>
1000e8a4:	f800283a 	ret
1000e8a8:	f800283a 	ret

1000e8ac <__adddf3>:
1000e8ac:	02c00434 	movhi	r11,16
1000e8b0:	5affffc4 	addi	r11,r11,-1
1000e8b4:	2806d7fa 	srli	r3,r5,31
1000e8b8:	2ad4703a 	and	r10,r5,r11
1000e8bc:	3ad2703a 	and	r9,r7,r11
1000e8c0:	3804d53a 	srli	r2,r7,20
1000e8c4:	3018d77a 	srli	r12,r6,29
1000e8c8:	280ad53a 	srli	r5,r5,20
1000e8cc:	501490fa 	slli	r10,r10,3
1000e8d0:	2010d77a 	srli	r8,r4,29
1000e8d4:	481290fa 	slli	r9,r9,3
1000e8d8:	380ed7fa 	srli	r7,r7,31
1000e8dc:	defffb04 	addi	sp,sp,-20
1000e8e0:	dc800215 	stw	r18,8(sp)
1000e8e4:	dc400115 	stw	r17,4(sp)
1000e8e8:	dc000015 	stw	r16,0(sp)
1000e8ec:	dfc00415 	stw	ra,16(sp)
1000e8f0:	dcc00315 	stw	r19,12(sp)
1000e8f4:	1c803fcc 	andi	r18,r3,255
1000e8f8:	2c01ffcc 	andi	r16,r5,2047
1000e8fc:	5210b03a 	or	r8,r10,r8
1000e900:	202290fa 	slli	r17,r4,3
1000e904:	1081ffcc 	andi	r2,r2,2047
1000e908:	4b12b03a 	or	r9,r9,r12
1000e90c:	300c90fa 	slli	r6,r6,3
1000e910:	91c07526 	beq	r18,r7,1000eae8 <__adddf3+0x23c>
1000e914:	8087c83a 	sub	r3,r16,r2
1000e918:	00c0ab0e 	bge	zero,r3,1000ebc8 <__adddf3+0x31c>
1000e91c:	10002a1e 	bne	r2,zero,1000e9c8 <__adddf3+0x11c>
1000e920:	4984b03a 	or	r2,r9,r6
1000e924:	1000961e 	bne	r2,zero,1000eb80 <__adddf3+0x2d4>
1000e928:	888001cc 	andi	r2,r17,7
1000e92c:	10000726 	beq	r2,zero,1000e94c <__adddf3+0xa0>
1000e930:	888003cc 	andi	r2,r17,15
1000e934:	00c00104 	movi	r3,4
1000e938:	10c00426 	beq	r2,r3,1000e94c <__adddf3+0xa0>
1000e93c:	88c7883a 	add	r3,r17,r3
1000e940:	1c63803a 	cmpltu	r17,r3,r17
1000e944:	4451883a 	add	r8,r8,r17
1000e948:	1823883a 	mov	r17,r3
1000e94c:	4080202c 	andhi	r2,r8,128
1000e950:	10005926 	beq	r2,zero,1000eab8 <__adddf3+0x20c>
1000e954:	84000044 	addi	r16,r16,1
1000e958:	0081ffc4 	movi	r2,2047
1000e95c:	8080ba26 	beq	r16,r2,1000ec48 <__adddf3+0x39c>
1000e960:	00bfe034 	movhi	r2,65408
1000e964:	10bfffc4 	addi	r2,r2,-1
1000e968:	4090703a 	and	r8,r8,r2
1000e96c:	4004977a 	slli	r2,r8,29
1000e970:	4010927a 	slli	r8,r8,9
1000e974:	8822d0fa 	srli	r17,r17,3
1000e978:	8401ffcc 	andi	r16,r16,2047
1000e97c:	4010d33a 	srli	r8,r8,12
1000e980:	9007883a 	mov	r3,r18
1000e984:	1444b03a 	or	r2,r2,r17
1000e988:	8401ffcc 	andi	r16,r16,2047
1000e98c:	8020953a 	slli	r16,r16,20
1000e990:	18c03fcc 	andi	r3,r3,255
1000e994:	01000434 	movhi	r4,16
1000e998:	213fffc4 	addi	r4,r4,-1
1000e99c:	180697fa 	slli	r3,r3,31
1000e9a0:	4110703a 	and	r8,r8,r4
1000e9a4:	4410b03a 	or	r8,r8,r16
1000e9a8:	40c6b03a 	or	r3,r8,r3
1000e9ac:	dfc00417 	ldw	ra,16(sp)
1000e9b0:	dcc00317 	ldw	r19,12(sp)
1000e9b4:	dc800217 	ldw	r18,8(sp)
1000e9b8:	dc400117 	ldw	r17,4(sp)
1000e9bc:	dc000017 	ldw	r16,0(sp)
1000e9c0:	dec00504 	addi	sp,sp,20
1000e9c4:	f800283a 	ret
1000e9c8:	0081ffc4 	movi	r2,2047
1000e9cc:	80bfd626 	beq	r16,r2,1000e928 <__alt_data_end+0xf800e928>
1000e9d0:	4a402034 	orhi	r9,r9,128
1000e9d4:	00800e04 	movi	r2,56
1000e9d8:	10c09f16 	blt	r2,r3,1000ec58 <__adddf3+0x3ac>
1000e9dc:	008007c4 	movi	r2,31
1000e9e0:	10c0c216 	blt	r2,r3,1000ecec <__adddf3+0x440>
1000e9e4:	00800804 	movi	r2,32
1000e9e8:	10c5c83a 	sub	r2,r2,r3
1000e9ec:	488a983a 	sll	r5,r9,r2
1000e9f0:	30c8d83a 	srl	r4,r6,r3
1000e9f4:	3084983a 	sll	r2,r6,r2
1000e9f8:	48c6d83a 	srl	r3,r9,r3
1000e9fc:	290cb03a 	or	r6,r5,r4
1000ea00:	1004c03a 	cmpne	r2,r2,zero
1000ea04:	308cb03a 	or	r6,r6,r2
1000ea08:	898dc83a 	sub	r6,r17,r6
1000ea0c:	89a3803a 	cmpltu	r17,r17,r6
1000ea10:	40d1c83a 	sub	r8,r8,r3
1000ea14:	4451c83a 	sub	r8,r8,r17
1000ea18:	3023883a 	mov	r17,r6
1000ea1c:	4080202c 	andhi	r2,r8,128
1000ea20:	10002326 	beq	r2,zero,1000eab0 <__adddf3+0x204>
1000ea24:	04c02034 	movhi	r19,128
1000ea28:	9cffffc4 	addi	r19,r19,-1
1000ea2c:	44e6703a 	and	r19,r8,r19
1000ea30:	98007626 	beq	r19,zero,1000ec0c <__adddf3+0x360>
1000ea34:	9809883a 	mov	r4,r19
1000ea38:	00110ec0 	call	100110ec <__clzsi2>
1000ea3c:	10fffe04 	addi	r3,r2,-8
1000ea40:	010007c4 	movi	r4,31
1000ea44:	20c07716 	blt	r4,r3,1000ec24 <__adddf3+0x378>
1000ea48:	00800804 	movi	r2,32
1000ea4c:	10c5c83a 	sub	r2,r2,r3
1000ea50:	8884d83a 	srl	r2,r17,r2
1000ea54:	98d0983a 	sll	r8,r19,r3
1000ea58:	88e2983a 	sll	r17,r17,r3
1000ea5c:	1204b03a 	or	r2,r2,r8
1000ea60:	1c007416 	blt	r3,r16,1000ec34 <__adddf3+0x388>
1000ea64:	1c21c83a 	sub	r16,r3,r16
1000ea68:	82000044 	addi	r8,r16,1
1000ea6c:	00c007c4 	movi	r3,31
1000ea70:	1a009116 	blt	r3,r8,1000ecb8 <__adddf3+0x40c>
1000ea74:	00c00804 	movi	r3,32
1000ea78:	1a07c83a 	sub	r3,r3,r8
1000ea7c:	8a08d83a 	srl	r4,r17,r8
1000ea80:	88e2983a 	sll	r17,r17,r3
1000ea84:	10c6983a 	sll	r3,r2,r3
1000ea88:	1210d83a 	srl	r8,r2,r8
1000ea8c:	8804c03a 	cmpne	r2,r17,zero
1000ea90:	1906b03a 	or	r3,r3,r4
1000ea94:	18a2b03a 	or	r17,r3,r2
1000ea98:	0021883a 	mov	r16,zero
1000ea9c:	003fa206 	br	1000e928 <__alt_data_end+0xf800e928>
1000eaa0:	1890b03a 	or	r8,r3,r2
1000eaa4:	40017d26 	beq	r8,zero,1000f09c <__adddf3+0x7f0>
1000eaa8:	1011883a 	mov	r8,r2
1000eaac:	1823883a 	mov	r17,r3
1000eab0:	888001cc 	andi	r2,r17,7
1000eab4:	103f9e1e 	bne	r2,zero,1000e930 <__alt_data_end+0xf800e930>
1000eab8:	4004977a 	slli	r2,r8,29
1000eabc:	8822d0fa 	srli	r17,r17,3
1000eac0:	4010d0fa 	srli	r8,r8,3
1000eac4:	9007883a 	mov	r3,r18
1000eac8:	1444b03a 	or	r2,r2,r17
1000eacc:	0101ffc4 	movi	r4,2047
1000ead0:	81002426 	beq	r16,r4,1000eb64 <__adddf3+0x2b8>
1000ead4:	8120703a 	and	r16,r16,r4
1000ead8:	01000434 	movhi	r4,16
1000eadc:	213fffc4 	addi	r4,r4,-1
1000eae0:	4110703a 	and	r8,r8,r4
1000eae4:	003fa806 	br	1000e988 <__alt_data_end+0xf800e988>
1000eae8:	8089c83a 	sub	r4,r16,r2
1000eaec:	01005e0e 	bge	zero,r4,1000ec68 <__adddf3+0x3bc>
1000eaf0:	10002b26 	beq	r2,zero,1000eba0 <__adddf3+0x2f4>
1000eaf4:	0081ffc4 	movi	r2,2047
1000eaf8:	80bf8b26 	beq	r16,r2,1000e928 <__alt_data_end+0xf800e928>
1000eafc:	4a402034 	orhi	r9,r9,128
1000eb00:	00800e04 	movi	r2,56
1000eb04:	1100a40e 	bge	r2,r4,1000ed98 <__adddf3+0x4ec>
1000eb08:	498cb03a 	or	r6,r9,r6
1000eb0c:	300ac03a 	cmpne	r5,r6,zero
1000eb10:	0013883a 	mov	r9,zero
1000eb14:	2c4b883a 	add	r5,r5,r17
1000eb18:	2c63803a 	cmpltu	r17,r5,r17
1000eb1c:	4a11883a 	add	r8,r9,r8
1000eb20:	8a11883a 	add	r8,r17,r8
1000eb24:	2823883a 	mov	r17,r5
1000eb28:	4080202c 	andhi	r2,r8,128
1000eb2c:	103fe026 	beq	r2,zero,1000eab0 <__alt_data_end+0xf800eab0>
1000eb30:	84000044 	addi	r16,r16,1
1000eb34:	0081ffc4 	movi	r2,2047
1000eb38:	8080d226 	beq	r16,r2,1000ee84 <__adddf3+0x5d8>
1000eb3c:	00bfe034 	movhi	r2,65408
1000eb40:	10bfffc4 	addi	r2,r2,-1
1000eb44:	4090703a 	and	r8,r8,r2
1000eb48:	880ad07a 	srli	r5,r17,1
1000eb4c:	400897fa 	slli	r4,r8,31
1000eb50:	88c0004c 	andi	r3,r17,1
1000eb54:	28e2b03a 	or	r17,r5,r3
1000eb58:	4010d07a 	srli	r8,r8,1
1000eb5c:	2462b03a 	or	r17,r4,r17
1000eb60:	003f7106 	br	1000e928 <__alt_data_end+0xf800e928>
1000eb64:	4088b03a 	or	r4,r8,r2
1000eb68:	20014526 	beq	r4,zero,1000f080 <__adddf3+0x7d4>
1000eb6c:	01000434 	movhi	r4,16
1000eb70:	42000234 	orhi	r8,r8,8
1000eb74:	213fffc4 	addi	r4,r4,-1
1000eb78:	4110703a 	and	r8,r8,r4
1000eb7c:	003f8206 	br	1000e988 <__alt_data_end+0xf800e988>
1000eb80:	18ffffc4 	addi	r3,r3,-1
1000eb84:	1800491e 	bne	r3,zero,1000ecac <__adddf3+0x400>
1000eb88:	898bc83a 	sub	r5,r17,r6
1000eb8c:	8963803a 	cmpltu	r17,r17,r5
1000eb90:	4251c83a 	sub	r8,r8,r9
1000eb94:	4451c83a 	sub	r8,r8,r17
1000eb98:	2823883a 	mov	r17,r5
1000eb9c:	003f9f06 	br	1000ea1c <__alt_data_end+0xf800ea1c>
1000eba0:	4984b03a 	or	r2,r9,r6
1000eba4:	103f6026 	beq	r2,zero,1000e928 <__alt_data_end+0xf800e928>
1000eba8:	213fffc4 	addi	r4,r4,-1
1000ebac:	2000931e 	bne	r4,zero,1000edfc <__adddf3+0x550>
1000ebb0:	898d883a 	add	r6,r17,r6
1000ebb4:	3463803a 	cmpltu	r17,r6,r17
1000ebb8:	4251883a 	add	r8,r8,r9
1000ebbc:	8a11883a 	add	r8,r17,r8
1000ebc0:	3023883a 	mov	r17,r6
1000ebc4:	003fd806 	br	1000eb28 <__alt_data_end+0xf800eb28>
1000ebc8:	1800541e 	bne	r3,zero,1000ed1c <__adddf3+0x470>
1000ebcc:	80800044 	addi	r2,r16,1
1000ebd0:	1081ffcc 	andi	r2,r2,2047
1000ebd4:	00c00044 	movi	r3,1
1000ebd8:	1880a00e 	bge	r3,r2,1000ee5c <__adddf3+0x5b0>
1000ebdc:	8989c83a 	sub	r4,r17,r6
1000ebe0:	8905803a 	cmpltu	r2,r17,r4
1000ebe4:	4267c83a 	sub	r19,r8,r9
1000ebe8:	98a7c83a 	sub	r19,r19,r2
1000ebec:	9880202c 	andhi	r2,r19,128
1000ebf0:	10006326 	beq	r2,zero,1000ed80 <__adddf3+0x4d4>
1000ebf4:	3463c83a 	sub	r17,r6,r17
1000ebf8:	4a07c83a 	sub	r3,r9,r8
1000ebfc:	344d803a 	cmpltu	r6,r6,r17
1000ec00:	19a7c83a 	sub	r19,r3,r6
1000ec04:	3825883a 	mov	r18,r7
1000ec08:	983f8a1e 	bne	r19,zero,1000ea34 <__alt_data_end+0xf800ea34>
1000ec0c:	8809883a 	mov	r4,r17
1000ec10:	00110ec0 	call	100110ec <__clzsi2>
1000ec14:	10800804 	addi	r2,r2,32
1000ec18:	10fffe04 	addi	r3,r2,-8
1000ec1c:	010007c4 	movi	r4,31
1000ec20:	20ff890e 	bge	r4,r3,1000ea48 <__alt_data_end+0xf800ea48>
1000ec24:	10bff604 	addi	r2,r2,-40
1000ec28:	8884983a 	sll	r2,r17,r2
1000ec2c:	0023883a 	mov	r17,zero
1000ec30:	1c3f8c0e 	bge	r3,r16,1000ea64 <__alt_data_end+0xf800ea64>
1000ec34:	023fe034 	movhi	r8,65408
1000ec38:	423fffc4 	addi	r8,r8,-1
1000ec3c:	80e1c83a 	sub	r16,r16,r3
1000ec40:	1210703a 	and	r8,r2,r8
1000ec44:	003f3806 	br	1000e928 <__alt_data_end+0xf800e928>
1000ec48:	9007883a 	mov	r3,r18
1000ec4c:	0011883a 	mov	r8,zero
1000ec50:	0005883a 	mov	r2,zero
1000ec54:	003f4c06 	br	1000e988 <__alt_data_end+0xf800e988>
1000ec58:	498cb03a 	or	r6,r9,r6
1000ec5c:	300cc03a 	cmpne	r6,r6,zero
1000ec60:	0007883a 	mov	r3,zero
1000ec64:	003f6806 	br	1000ea08 <__alt_data_end+0xf800ea08>
1000ec68:	20009c1e 	bne	r4,zero,1000eedc <__adddf3+0x630>
1000ec6c:	80800044 	addi	r2,r16,1
1000ec70:	1141ffcc 	andi	r5,r2,2047
1000ec74:	01000044 	movi	r4,1
1000ec78:	2140670e 	bge	r4,r5,1000ee18 <__adddf3+0x56c>
1000ec7c:	0101ffc4 	movi	r4,2047
1000ec80:	11007f26 	beq	r2,r4,1000ee80 <__adddf3+0x5d4>
1000ec84:	898d883a 	add	r6,r17,r6
1000ec88:	4247883a 	add	r3,r8,r9
1000ec8c:	3451803a 	cmpltu	r8,r6,r17
1000ec90:	40d1883a 	add	r8,r8,r3
1000ec94:	402297fa 	slli	r17,r8,31
1000ec98:	300cd07a 	srli	r6,r6,1
1000ec9c:	4010d07a 	srli	r8,r8,1
1000eca0:	1021883a 	mov	r16,r2
1000eca4:	89a2b03a 	or	r17,r17,r6
1000eca8:	003f1f06 	br	1000e928 <__alt_data_end+0xf800e928>
1000ecac:	0081ffc4 	movi	r2,2047
1000ecb0:	80bf481e 	bne	r16,r2,1000e9d4 <__alt_data_end+0xf800e9d4>
1000ecb4:	003f1c06 	br	1000e928 <__alt_data_end+0xf800e928>
1000ecb8:	843ff844 	addi	r16,r16,-31
1000ecbc:	01000804 	movi	r4,32
1000ecc0:	1406d83a 	srl	r3,r2,r16
1000ecc4:	41005026 	beq	r8,r4,1000ee08 <__adddf3+0x55c>
1000ecc8:	01001004 	movi	r4,64
1000eccc:	2211c83a 	sub	r8,r4,r8
1000ecd0:	1204983a 	sll	r2,r2,r8
1000ecd4:	88a2b03a 	or	r17,r17,r2
1000ecd8:	8822c03a 	cmpne	r17,r17,zero
1000ecdc:	1c62b03a 	or	r17,r3,r17
1000ece0:	0011883a 	mov	r8,zero
1000ece4:	0021883a 	mov	r16,zero
1000ece8:	003f7106 	br	1000eab0 <__alt_data_end+0xf800eab0>
1000ecec:	193ff804 	addi	r4,r3,-32
1000ecf0:	00800804 	movi	r2,32
1000ecf4:	4908d83a 	srl	r4,r9,r4
1000ecf8:	18804526 	beq	r3,r2,1000ee10 <__adddf3+0x564>
1000ecfc:	00801004 	movi	r2,64
1000ed00:	10c5c83a 	sub	r2,r2,r3
1000ed04:	4886983a 	sll	r3,r9,r2
1000ed08:	198cb03a 	or	r6,r3,r6
1000ed0c:	300cc03a 	cmpne	r6,r6,zero
1000ed10:	218cb03a 	or	r6,r4,r6
1000ed14:	0007883a 	mov	r3,zero
1000ed18:	003f3b06 	br	1000ea08 <__alt_data_end+0xf800ea08>
1000ed1c:	80002a26 	beq	r16,zero,1000edc8 <__adddf3+0x51c>
1000ed20:	0101ffc4 	movi	r4,2047
1000ed24:	11006826 	beq	r2,r4,1000eec8 <__adddf3+0x61c>
1000ed28:	00c7c83a 	sub	r3,zero,r3
1000ed2c:	42002034 	orhi	r8,r8,128
1000ed30:	01000e04 	movi	r4,56
1000ed34:	20c07c16 	blt	r4,r3,1000ef28 <__adddf3+0x67c>
1000ed38:	010007c4 	movi	r4,31
1000ed3c:	20c0da16 	blt	r4,r3,1000f0a8 <__adddf3+0x7fc>
1000ed40:	01000804 	movi	r4,32
1000ed44:	20c9c83a 	sub	r4,r4,r3
1000ed48:	4114983a 	sll	r10,r8,r4
1000ed4c:	88cad83a 	srl	r5,r17,r3
1000ed50:	8908983a 	sll	r4,r17,r4
1000ed54:	40c6d83a 	srl	r3,r8,r3
1000ed58:	5162b03a 	or	r17,r10,r5
1000ed5c:	2008c03a 	cmpne	r4,r4,zero
1000ed60:	8922b03a 	or	r17,r17,r4
1000ed64:	3463c83a 	sub	r17,r6,r17
1000ed68:	48c7c83a 	sub	r3,r9,r3
1000ed6c:	344d803a 	cmpltu	r6,r6,r17
1000ed70:	1991c83a 	sub	r8,r3,r6
1000ed74:	1021883a 	mov	r16,r2
1000ed78:	3825883a 	mov	r18,r7
1000ed7c:	003f2706 	br	1000ea1c <__alt_data_end+0xf800ea1c>
1000ed80:	24d0b03a 	or	r8,r4,r19
1000ed84:	40001b1e 	bne	r8,zero,1000edf4 <__adddf3+0x548>
1000ed88:	0005883a 	mov	r2,zero
1000ed8c:	0007883a 	mov	r3,zero
1000ed90:	0021883a 	mov	r16,zero
1000ed94:	003f4d06 	br	1000eacc <__alt_data_end+0xf800eacc>
1000ed98:	008007c4 	movi	r2,31
1000ed9c:	11003c16 	blt	r2,r4,1000ee90 <__adddf3+0x5e4>
1000eda0:	00800804 	movi	r2,32
1000eda4:	1105c83a 	sub	r2,r2,r4
1000eda8:	488e983a 	sll	r7,r9,r2
1000edac:	310ad83a 	srl	r5,r6,r4
1000edb0:	3084983a 	sll	r2,r6,r2
1000edb4:	4912d83a 	srl	r9,r9,r4
1000edb8:	394ab03a 	or	r5,r7,r5
1000edbc:	1004c03a 	cmpne	r2,r2,zero
1000edc0:	288ab03a 	or	r5,r5,r2
1000edc4:	003f5306 	br	1000eb14 <__alt_data_end+0xf800eb14>
1000edc8:	4448b03a 	or	r4,r8,r17
1000edcc:	20003e26 	beq	r4,zero,1000eec8 <__adddf3+0x61c>
1000edd0:	00c6303a 	nor	r3,zero,r3
1000edd4:	18003a1e 	bne	r3,zero,1000eec0 <__adddf3+0x614>
1000edd8:	3463c83a 	sub	r17,r6,r17
1000eddc:	4a07c83a 	sub	r3,r9,r8
1000ede0:	344d803a 	cmpltu	r6,r6,r17
1000ede4:	1991c83a 	sub	r8,r3,r6
1000ede8:	1021883a 	mov	r16,r2
1000edec:	3825883a 	mov	r18,r7
1000edf0:	003f0a06 	br	1000ea1c <__alt_data_end+0xf800ea1c>
1000edf4:	2023883a 	mov	r17,r4
1000edf8:	003f0d06 	br	1000ea30 <__alt_data_end+0xf800ea30>
1000edfc:	0081ffc4 	movi	r2,2047
1000ee00:	80bf3f1e 	bne	r16,r2,1000eb00 <__alt_data_end+0xf800eb00>
1000ee04:	003ec806 	br	1000e928 <__alt_data_end+0xf800e928>
1000ee08:	0005883a 	mov	r2,zero
1000ee0c:	003fb106 	br	1000ecd4 <__alt_data_end+0xf800ecd4>
1000ee10:	0007883a 	mov	r3,zero
1000ee14:	003fbc06 	br	1000ed08 <__alt_data_end+0xf800ed08>
1000ee18:	4444b03a 	or	r2,r8,r17
1000ee1c:	8000871e 	bne	r16,zero,1000f03c <__adddf3+0x790>
1000ee20:	1000ba26 	beq	r2,zero,1000f10c <__adddf3+0x860>
1000ee24:	4984b03a 	or	r2,r9,r6
1000ee28:	103ebf26 	beq	r2,zero,1000e928 <__alt_data_end+0xf800e928>
1000ee2c:	8985883a 	add	r2,r17,r6
1000ee30:	4247883a 	add	r3,r8,r9
1000ee34:	1451803a 	cmpltu	r8,r2,r17
1000ee38:	40d1883a 	add	r8,r8,r3
1000ee3c:	40c0202c 	andhi	r3,r8,128
1000ee40:	1023883a 	mov	r17,r2
1000ee44:	183f1a26 	beq	r3,zero,1000eab0 <__alt_data_end+0xf800eab0>
1000ee48:	00bfe034 	movhi	r2,65408
1000ee4c:	10bfffc4 	addi	r2,r2,-1
1000ee50:	2021883a 	mov	r16,r4
1000ee54:	4090703a 	and	r8,r8,r2
1000ee58:	003eb306 	br	1000e928 <__alt_data_end+0xf800e928>
1000ee5c:	4444b03a 	or	r2,r8,r17
1000ee60:	8000291e 	bne	r16,zero,1000ef08 <__adddf3+0x65c>
1000ee64:	10004b1e 	bne	r2,zero,1000ef94 <__adddf3+0x6e8>
1000ee68:	4990b03a 	or	r8,r9,r6
1000ee6c:	40008b26 	beq	r8,zero,1000f09c <__adddf3+0x7f0>
1000ee70:	4811883a 	mov	r8,r9
1000ee74:	3023883a 	mov	r17,r6
1000ee78:	3825883a 	mov	r18,r7
1000ee7c:	003eaa06 	br	1000e928 <__alt_data_end+0xf800e928>
1000ee80:	1021883a 	mov	r16,r2
1000ee84:	0011883a 	mov	r8,zero
1000ee88:	0005883a 	mov	r2,zero
1000ee8c:	003f0f06 	br	1000eacc <__alt_data_end+0xf800eacc>
1000ee90:	217ff804 	addi	r5,r4,-32
1000ee94:	00800804 	movi	r2,32
1000ee98:	494ad83a 	srl	r5,r9,r5
1000ee9c:	20807d26 	beq	r4,r2,1000f094 <__adddf3+0x7e8>
1000eea0:	00801004 	movi	r2,64
1000eea4:	1109c83a 	sub	r4,r2,r4
1000eea8:	4912983a 	sll	r9,r9,r4
1000eeac:	498cb03a 	or	r6,r9,r6
1000eeb0:	300cc03a 	cmpne	r6,r6,zero
1000eeb4:	298ab03a 	or	r5,r5,r6
1000eeb8:	0013883a 	mov	r9,zero
1000eebc:	003f1506 	br	1000eb14 <__alt_data_end+0xf800eb14>
1000eec0:	0101ffc4 	movi	r4,2047
1000eec4:	113f9a1e 	bne	r2,r4,1000ed30 <__alt_data_end+0xf800ed30>
1000eec8:	4811883a 	mov	r8,r9
1000eecc:	3023883a 	mov	r17,r6
1000eed0:	1021883a 	mov	r16,r2
1000eed4:	3825883a 	mov	r18,r7
1000eed8:	003e9306 	br	1000e928 <__alt_data_end+0xf800e928>
1000eedc:	8000161e 	bne	r16,zero,1000ef38 <__adddf3+0x68c>
1000eee0:	444ab03a 	or	r5,r8,r17
1000eee4:	28005126 	beq	r5,zero,1000f02c <__adddf3+0x780>
1000eee8:	0108303a 	nor	r4,zero,r4
1000eeec:	20004d1e 	bne	r4,zero,1000f024 <__adddf3+0x778>
1000eef0:	89a3883a 	add	r17,r17,r6
1000eef4:	4253883a 	add	r9,r8,r9
1000eef8:	898d803a 	cmpltu	r6,r17,r6
1000eefc:	3251883a 	add	r8,r6,r9
1000ef00:	1021883a 	mov	r16,r2
1000ef04:	003f0806 	br	1000eb28 <__alt_data_end+0xf800eb28>
1000ef08:	1000301e 	bne	r2,zero,1000efcc <__adddf3+0x720>
1000ef0c:	4984b03a 	or	r2,r9,r6
1000ef10:	10007126 	beq	r2,zero,1000f0d8 <__adddf3+0x82c>
1000ef14:	4811883a 	mov	r8,r9
1000ef18:	3023883a 	mov	r17,r6
1000ef1c:	3825883a 	mov	r18,r7
1000ef20:	0401ffc4 	movi	r16,2047
1000ef24:	003e8006 	br	1000e928 <__alt_data_end+0xf800e928>
1000ef28:	4462b03a 	or	r17,r8,r17
1000ef2c:	8822c03a 	cmpne	r17,r17,zero
1000ef30:	0007883a 	mov	r3,zero
1000ef34:	003f8b06 	br	1000ed64 <__alt_data_end+0xf800ed64>
1000ef38:	0141ffc4 	movi	r5,2047
1000ef3c:	11403b26 	beq	r2,r5,1000f02c <__adddf3+0x780>
1000ef40:	0109c83a 	sub	r4,zero,r4
1000ef44:	42002034 	orhi	r8,r8,128
1000ef48:	01400e04 	movi	r5,56
1000ef4c:	29006716 	blt	r5,r4,1000f0ec <__adddf3+0x840>
1000ef50:	014007c4 	movi	r5,31
1000ef54:	29007016 	blt	r5,r4,1000f118 <__adddf3+0x86c>
1000ef58:	01400804 	movi	r5,32
1000ef5c:	290bc83a 	sub	r5,r5,r4
1000ef60:	4154983a 	sll	r10,r8,r5
1000ef64:	890ed83a 	srl	r7,r17,r4
1000ef68:	894a983a 	sll	r5,r17,r5
1000ef6c:	4108d83a 	srl	r4,r8,r4
1000ef70:	51e2b03a 	or	r17,r10,r7
1000ef74:	280ac03a 	cmpne	r5,r5,zero
1000ef78:	8962b03a 	or	r17,r17,r5
1000ef7c:	89a3883a 	add	r17,r17,r6
1000ef80:	2253883a 	add	r9,r4,r9
1000ef84:	898d803a 	cmpltu	r6,r17,r6
1000ef88:	3251883a 	add	r8,r6,r9
1000ef8c:	1021883a 	mov	r16,r2
1000ef90:	003ee506 	br	1000eb28 <__alt_data_end+0xf800eb28>
1000ef94:	4984b03a 	or	r2,r9,r6
1000ef98:	103e6326 	beq	r2,zero,1000e928 <__alt_data_end+0xf800e928>
1000ef9c:	8987c83a 	sub	r3,r17,r6
1000efa0:	88c9803a 	cmpltu	r4,r17,r3
1000efa4:	4245c83a 	sub	r2,r8,r9
1000efa8:	1105c83a 	sub	r2,r2,r4
1000efac:	1100202c 	andhi	r4,r2,128
1000efb0:	203ebb26 	beq	r4,zero,1000eaa0 <__alt_data_end+0xf800eaa0>
1000efb4:	3463c83a 	sub	r17,r6,r17
1000efb8:	4a07c83a 	sub	r3,r9,r8
1000efbc:	344d803a 	cmpltu	r6,r6,r17
1000efc0:	1991c83a 	sub	r8,r3,r6
1000efc4:	3825883a 	mov	r18,r7
1000efc8:	003e5706 	br	1000e928 <__alt_data_end+0xf800e928>
1000efcc:	4984b03a 	or	r2,r9,r6
1000efd0:	10002e26 	beq	r2,zero,1000f08c <__adddf3+0x7e0>
1000efd4:	4004d0fa 	srli	r2,r8,3
1000efd8:	8822d0fa 	srli	r17,r17,3
1000efdc:	4010977a 	slli	r8,r8,29
1000efe0:	10c0022c 	andhi	r3,r2,8
1000efe4:	4462b03a 	or	r17,r8,r17
1000efe8:	18000826 	beq	r3,zero,1000f00c <__adddf3+0x760>
1000efec:	4808d0fa 	srli	r4,r9,3
1000eff0:	20c0022c 	andhi	r3,r4,8
1000eff4:	1800051e 	bne	r3,zero,1000f00c <__adddf3+0x760>
1000eff8:	300cd0fa 	srli	r6,r6,3
1000effc:	4806977a 	slli	r3,r9,29
1000f000:	2005883a 	mov	r2,r4
1000f004:	3825883a 	mov	r18,r7
1000f008:	19a2b03a 	or	r17,r3,r6
1000f00c:	8810d77a 	srli	r8,r17,29
1000f010:	100490fa 	slli	r2,r2,3
1000f014:	882290fa 	slli	r17,r17,3
1000f018:	0401ffc4 	movi	r16,2047
1000f01c:	4090b03a 	or	r8,r8,r2
1000f020:	003e4106 	br	1000e928 <__alt_data_end+0xf800e928>
1000f024:	0141ffc4 	movi	r5,2047
1000f028:	117fc71e 	bne	r2,r5,1000ef48 <__alt_data_end+0xf800ef48>
1000f02c:	4811883a 	mov	r8,r9
1000f030:	3023883a 	mov	r17,r6
1000f034:	1021883a 	mov	r16,r2
1000f038:	003e3b06 	br	1000e928 <__alt_data_end+0xf800e928>
1000f03c:	10002f26 	beq	r2,zero,1000f0fc <__adddf3+0x850>
1000f040:	4984b03a 	or	r2,r9,r6
1000f044:	10001126 	beq	r2,zero,1000f08c <__adddf3+0x7e0>
1000f048:	4004d0fa 	srli	r2,r8,3
1000f04c:	8822d0fa 	srli	r17,r17,3
1000f050:	4010977a 	slli	r8,r8,29
1000f054:	10c0022c 	andhi	r3,r2,8
1000f058:	4462b03a 	or	r17,r8,r17
1000f05c:	183feb26 	beq	r3,zero,1000f00c <__alt_data_end+0xf800f00c>
1000f060:	4808d0fa 	srli	r4,r9,3
1000f064:	20c0022c 	andhi	r3,r4,8
1000f068:	183fe81e 	bne	r3,zero,1000f00c <__alt_data_end+0xf800f00c>
1000f06c:	300cd0fa 	srli	r6,r6,3
1000f070:	4806977a 	slli	r3,r9,29
1000f074:	2005883a 	mov	r2,r4
1000f078:	19a2b03a 	or	r17,r3,r6
1000f07c:	003fe306 	br	1000f00c <__alt_data_end+0xf800f00c>
1000f080:	0011883a 	mov	r8,zero
1000f084:	0005883a 	mov	r2,zero
1000f088:	003e3f06 	br	1000e988 <__alt_data_end+0xf800e988>
1000f08c:	0401ffc4 	movi	r16,2047
1000f090:	003e2506 	br	1000e928 <__alt_data_end+0xf800e928>
1000f094:	0013883a 	mov	r9,zero
1000f098:	003f8406 	br	1000eeac <__alt_data_end+0xf800eeac>
1000f09c:	0005883a 	mov	r2,zero
1000f0a0:	0007883a 	mov	r3,zero
1000f0a4:	003e8906 	br	1000eacc <__alt_data_end+0xf800eacc>
1000f0a8:	197ff804 	addi	r5,r3,-32
1000f0ac:	01000804 	movi	r4,32
1000f0b0:	414ad83a 	srl	r5,r8,r5
1000f0b4:	19002426 	beq	r3,r4,1000f148 <__adddf3+0x89c>
1000f0b8:	01001004 	movi	r4,64
1000f0bc:	20c7c83a 	sub	r3,r4,r3
1000f0c0:	40c6983a 	sll	r3,r8,r3
1000f0c4:	1c46b03a 	or	r3,r3,r17
1000f0c8:	1806c03a 	cmpne	r3,r3,zero
1000f0cc:	28e2b03a 	or	r17,r5,r3
1000f0d0:	0007883a 	mov	r3,zero
1000f0d4:	003f2306 	br	1000ed64 <__alt_data_end+0xf800ed64>
1000f0d8:	0007883a 	mov	r3,zero
1000f0dc:	5811883a 	mov	r8,r11
1000f0e0:	00bfffc4 	movi	r2,-1
1000f0e4:	0401ffc4 	movi	r16,2047
1000f0e8:	003e7806 	br	1000eacc <__alt_data_end+0xf800eacc>
1000f0ec:	4462b03a 	or	r17,r8,r17
1000f0f0:	8822c03a 	cmpne	r17,r17,zero
1000f0f4:	0009883a 	mov	r4,zero
1000f0f8:	003fa006 	br	1000ef7c <__alt_data_end+0xf800ef7c>
1000f0fc:	4811883a 	mov	r8,r9
1000f100:	3023883a 	mov	r17,r6
1000f104:	0401ffc4 	movi	r16,2047
1000f108:	003e0706 	br	1000e928 <__alt_data_end+0xf800e928>
1000f10c:	4811883a 	mov	r8,r9
1000f110:	3023883a 	mov	r17,r6
1000f114:	003e0406 	br	1000e928 <__alt_data_end+0xf800e928>
1000f118:	21fff804 	addi	r7,r4,-32
1000f11c:	01400804 	movi	r5,32
1000f120:	41ced83a 	srl	r7,r8,r7
1000f124:	21400a26 	beq	r4,r5,1000f150 <__adddf3+0x8a4>
1000f128:	01401004 	movi	r5,64
1000f12c:	2909c83a 	sub	r4,r5,r4
1000f130:	4108983a 	sll	r4,r8,r4
1000f134:	2448b03a 	or	r4,r4,r17
1000f138:	2008c03a 	cmpne	r4,r4,zero
1000f13c:	3922b03a 	or	r17,r7,r4
1000f140:	0009883a 	mov	r4,zero
1000f144:	003f8d06 	br	1000ef7c <__alt_data_end+0xf800ef7c>
1000f148:	0007883a 	mov	r3,zero
1000f14c:	003fdd06 	br	1000f0c4 <__alt_data_end+0xf800f0c4>
1000f150:	0009883a 	mov	r4,zero
1000f154:	003ff706 	br	1000f134 <__alt_data_end+0xf800f134>

1000f158 <__divdf3>:
1000f158:	defff004 	addi	sp,sp,-64
1000f15c:	dc800815 	stw	r18,32(sp)
1000f160:	2824d53a 	srli	r18,r5,20
1000f164:	dd800c15 	stw	r22,48(sp)
1000f168:	282cd7fa 	srli	r22,r5,31
1000f16c:	dc000615 	stw	r16,24(sp)
1000f170:	04000434 	movhi	r16,16
1000f174:	843fffc4 	addi	r16,r16,-1
1000f178:	dfc00f15 	stw	ra,60(sp)
1000f17c:	df000e15 	stw	fp,56(sp)
1000f180:	ddc00d15 	stw	r23,52(sp)
1000f184:	dd400b15 	stw	r21,44(sp)
1000f188:	dd000a15 	stw	r20,40(sp)
1000f18c:	dcc00915 	stw	r19,36(sp)
1000f190:	dc400715 	stw	r17,28(sp)
1000f194:	9481ffcc 	andi	r18,r18,2047
1000f198:	2c20703a 	and	r16,r5,r16
1000f19c:	b2003fcc 	andi	r8,r22,255
1000f1a0:	90006126 	beq	r18,zero,1000f328 <__divdf3+0x1d0>
1000f1a4:	0081ffc4 	movi	r2,2047
1000f1a8:	202b883a 	mov	r21,r4
1000f1ac:	90803726 	beq	r18,r2,1000f28c <__divdf3+0x134>
1000f1b0:	80800434 	orhi	r2,r16,16
1000f1b4:	100490fa 	slli	r2,r2,3
1000f1b8:	2020d77a 	srli	r16,r4,29
1000f1bc:	202a90fa 	slli	r21,r4,3
1000f1c0:	94bf0044 	addi	r18,r18,-1023
1000f1c4:	80a0b03a 	or	r16,r16,r2
1000f1c8:	0013883a 	mov	r9,zero
1000f1cc:	000b883a 	mov	r5,zero
1000f1d0:	3806d53a 	srli	r3,r7,20
1000f1d4:	382ed7fa 	srli	r23,r7,31
1000f1d8:	04400434 	movhi	r17,16
1000f1dc:	8c7fffc4 	addi	r17,r17,-1
1000f1e0:	18c1ffcc 	andi	r3,r3,2047
1000f1e4:	3029883a 	mov	r20,r6
1000f1e8:	3c62703a 	and	r17,r7,r17
1000f1ec:	bf003fcc 	andi	fp,r23,255
1000f1f0:	18006e26 	beq	r3,zero,1000f3ac <__divdf3+0x254>
1000f1f4:	0081ffc4 	movi	r2,2047
1000f1f8:	18806626 	beq	r3,r2,1000f394 <__divdf3+0x23c>
1000f1fc:	88800434 	orhi	r2,r17,16
1000f200:	100490fa 	slli	r2,r2,3
1000f204:	3022d77a 	srli	r17,r6,29
1000f208:	302890fa 	slli	r20,r6,3
1000f20c:	18ff0044 	addi	r3,r3,-1023
1000f210:	88a2b03a 	or	r17,r17,r2
1000f214:	000f883a 	mov	r7,zero
1000f218:	b5e6f03a 	xor	r19,r22,r23
1000f21c:	3a4cb03a 	or	r6,r7,r9
1000f220:	008003c4 	movi	r2,15
1000f224:	9809883a 	mov	r4,r19
1000f228:	90c7c83a 	sub	r3,r18,r3
1000f22c:	9cc03fcc 	andi	r19,r19,255
1000f230:	11809636 	bltu	r2,r6,1000f48c <__divdf3+0x334>
1000f234:	300c90ba 	slli	r6,r6,2
1000f238:	00840074 	movhi	r2,4097
1000f23c:	10bc9304 	addi	r2,r2,-3508
1000f240:	308d883a 	add	r6,r6,r2
1000f244:	30800017 	ldw	r2,0(r6)
1000f248:	1000683a 	jmp	r2
1000f24c:	1000f48c 	andi	zero,r2,978
1000f250:	1000f2c4 	addi	zero,r2,971
1000f254:	1000f47c 	xorhi	zero,r2,977
1000f258:	1000f2b8 	rdprs	zero,r2,970
1000f25c:	1000f47c 	xorhi	zero,r2,977
1000f260:	1000f450 	cmplti	zero,r2,977
1000f264:	1000f47c 	xorhi	zero,r2,977
1000f268:	1000f2b8 	rdprs	zero,r2,970
1000f26c:	1000f2c4 	addi	zero,r2,971
1000f270:	1000f2c4 	addi	zero,r2,971
1000f274:	1000f450 	cmplti	zero,r2,977
1000f278:	1000f2b8 	rdprs	zero,r2,970
1000f27c:	1000f2a8 	cmpgeui	zero,r2,970
1000f280:	1000f2a8 	cmpgeui	zero,r2,970
1000f284:	1000f2a8 	cmpgeui	zero,r2,970
1000f288:	1000f814 	ori	zero,r2,992
1000f28c:	2404b03a 	or	r2,r4,r16
1000f290:	10006c1e 	bne	r2,zero,1000f444 <__divdf3+0x2ec>
1000f294:	02400204 	movi	r9,8
1000f298:	0021883a 	mov	r16,zero
1000f29c:	002b883a 	mov	r21,zero
1000f2a0:	01400084 	movi	r5,2
1000f2a4:	003fca06 	br	1000f1d0 <__alt_data_end+0xf800f1d0>
1000f2a8:	8023883a 	mov	r17,r16
1000f2ac:	a829883a 	mov	r20,r21
1000f2b0:	4039883a 	mov	fp,r8
1000f2b4:	280f883a 	mov	r7,r5
1000f2b8:	00800084 	movi	r2,2
1000f2bc:	3881601e 	bne	r7,r2,1000f840 <__divdf3+0x6e8>
1000f2c0:	e027883a 	mov	r19,fp
1000f2c4:	9900004c 	andi	r4,r19,1
1000f2c8:	0081ffc4 	movi	r2,2047
1000f2cc:	0021883a 	mov	r16,zero
1000f2d0:	002b883a 	mov	r21,zero
1000f2d4:	1004953a 	slli	r2,r2,20
1000f2d8:	20c03fcc 	andi	r3,r4,255
1000f2dc:	01400434 	movhi	r5,16
1000f2e0:	297fffc4 	addi	r5,r5,-1
1000f2e4:	180697fa 	slli	r3,r3,31
1000f2e8:	8160703a 	and	r16,r16,r5
1000f2ec:	80a0b03a 	or	r16,r16,r2
1000f2f0:	80c6b03a 	or	r3,r16,r3
1000f2f4:	a805883a 	mov	r2,r21
1000f2f8:	dfc00f17 	ldw	ra,60(sp)
1000f2fc:	df000e17 	ldw	fp,56(sp)
1000f300:	ddc00d17 	ldw	r23,52(sp)
1000f304:	dd800c17 	ldw	r22,48(sp)
1000f308:	dd400b17 	ldw	r21,44(sp)
1000f30c:	dd000a17 	ldw	r20,40(sp)
1000f310:	dcc00917 	ldw	r19,36(sp)
1000f314:	dc800817 	ldw	r18,32(sp)
1000f318:	dc400717 	ldw	r17,28(sp)
1000f31c:	dc000617 	ldw	r16,24(sp)
1000f320:	dec01004 	addi	sp,sp,64
1000f324:	f800283a 	ret
1000f328:	2404b03a 	or	r2,r4,r16
1000f32c:	2023883a 	mov	r17,r4
1000f330:	10003f26 	beq	r2,zero,1000f430 <__divdf3+0x2d8>
1000f334:	80015e26 	beq	r16,zero,1000f8b0 <__divdf3+0x758>
1000f338:	8009883a 	mov	r4,r16
1000f33c:	d9800215 	stw	r6,8(sp)
1000f340:	d9c00515 	stw	r7,20(sp)
1000f344:	da000415 	stw	r8,16(sp)
1000f348:	00110ec0 	call	100110ec <__clzsi2>
1000f34c:	d9800217 	ldw	r6,8(sp)
1000f350:	d9c00517 	ldw	r7,20(sp)
1000f354:	da000417 	ldw	r8,16(sp)
1000f358:	113ffd44 	addi	r4,r2,-11
1000f35c:	00c00704 	movi	r3,28
1000f360:	19014f16 	blt	r3,r4,1000f8a0 <__divdf3+0x748>
1000f364:	00c00744 	movi	r3,29
1000f368:	157ffe04 	addi	r21,r2,-8
1000f36c:	1907c83a 	sub	r3,r3,r4
1000f370:	8560983a 	sll	r16,r16,r21
1000f374:	88c6d83a 	srl	r3,r17,r3
1000f378:	8d6a983a 	sll	r21,r17,r21
1000f37c:	1c20b03a 	or	r16,r3,r16
1000f380:	1080fcc4 	addi	r2,r2,1011
1000f384:	00a5c83a 	sub	r18,zero,r2
1000f388:	0013883a 	mov	r9,zero
1000f38c:	000b883a 	mov	r5,zero
1000f390:	003f8f06 	br	1000f1d0 <__alt_data_end+0xf800f1d0>
1000f394:	3444b03a 	or	r2,r6,r17
1000f398:	1000231e 	bne	r2,zero,1000f428 <__divdf3+0x2d0>
1000f39c:	0023883a 	mov	r17,zero
1000f3a0:	0029883a 	mov	r20,zero
1000f3a4:	01c00084 	movi	r7,2
1000f3a8:	003f9b06 	br	1000f218 <__alt_data_end+0xf800f218>
1000f3ac:	3444b03a 	or	r2,r6,r17
1000f3b0:	10001926 	beq	r2,zero,1000f418 <__divdf3+0x2c0>
1000f3b4:	88014b26 	beq	r17,zero,1000f8e4 <__divdf3+0x78c>
1000f3b8:	8809883a 	mov	r4,r17
1000f3bc:	d9400115 	stw	r5,4(sp)
1000f3c0:	d9800215 	stw	r6,8(sp)
1000f3c4:	da000415 	stw	r8,16(sp)
1000f3c8:	da400315 	stw	r9,12(sp)
1000f3cc:	00110ec0 	call	100110ec <__clzsi2>
1000f3d0:	d9400117 	ldw	r5,4(sp)
1000f3d4:	d9800217 	ldw	r6,8(sp)
1000f3d8:	da000417 	ldw	r8,16(sp)
1000f3dc:	da400317 	ldw	r9,12(sp)
1000f3e0:	113ffd44 	addi	r4,r2,-11
1000f3e4:	00c00704 	movi	r3,28
1000f3e8:	19013a16 	blt	r3,r4,1000f8d4 <__divdf3+0x77c>
1000f3ec:	00c00744 	movi	r3,29
1000f3f0:	153ffe04 	addi	r20,r2,-8
1000f3f4:	1907c83a 	sub	r3,r3,r4
1000f3f8:	8d22983a 	sll	r17,r17,r20
1000f3fc:	30c6d83a 	srl	r3,r6,r3
1000f400:	3528983a 	sll	r20,r6,r20
1000f404:	1c62b03a 	or	r17,r3,r17
1000f408:	1080fcc4 	addi	r2,r2,1011
1000f40c:	0087c83a 	sub	r3,zero,r2
1000f410:	000f883a 	mov	r7,zero
1000f414:	003f8006 	br	1000f218 <__alt_data_end+0xf800f218>
1000f418:	0023883a 	mov	r17,zero
1000f41c:	0029883a 	mov	r20,zero
1000f420:	01c00044 	movi	r7,1
1000f424:	003f7c06 	br	1000f218 <__alt_data_end+0xf800f218>
1000f428:	01c000c4 	movi	r7,3
1000f42c:	003f7a06 	br	1000f218 <__alt_data_end+0xf800f218>
1000f430:	02400104 	movi	r9,4
1000f434:	0021883a 	mov	r16,zero
1000f438:	002b883a 	mov	r21,zero
1000f43c:	01400044 	movi	r5,1
1000f440:	003f6306 	br	1000f1d0 <__alt_data_end+0xf800f1d0>
1000f444:	02400304 	movi	r9,12
1000f448:	014000c4 	movi	r5,3
1000f44c:	003f6006 	br	1000f1d0 <__alt_data_end+0xf800f1d0>
1000f450:	04000434 	movhi	r16,16
1000f454:	0009883a 	mov	r4,zero
1000f458:	843fffc4 	addi	r16,r16,-1
1000f45c:	057fffc4 	movi	r21,-1
1000f460:	0081ffc4 	movi	r2,2047
1000f464:	003f9b06 	br	1000f2d4 <__alt_data_end+0xf800f2d4>
1000f468:	00c00044 	movi	r3,1
1000f46c:	1887c83a 	sub	r3,r3,r2
1000f470:	01000e04 	movi	r4,56
1000f474:	20c1530e 	bge	r4,r3,1000f9c4 <__divdf3+0x86c>
1000f478:	9900004c 	andi	r4,r19,1
1000f47c:	0005883a 	mov	r2,zero
1000f480:	0021883a 	mov	r16,zero
1000f484:	002b883a 	mov	r21,zero
1000f488:	003f9206 	br	1000f2d4 <__alt_data_end+0xf800f2d4>
1000f48c:	8c012e36 	bltu	r17,r16,1000f948 <__divdf3+0x7f0>
1000f490:	84412c26 	beq	r16,r17,1000f944 <__divdf3+0x7ec>
1000f494:	a82f883a 	mov	r23,r21
1000f498:	18ffffc4 	addi	r3,r3,-1
1000f49c:	002b883a 	mov	r21,zero
1000f4a0:	a004d63a 	srli	r2,r20,24
1000f4a4:	8822923a 	slli	r17,r17,8
1000f4a8:	a028923a 	slli	r20,r20,8
1000f4ac:	8009883a 	mov	r4,r16
1000f4b0:	88acb03a 	or	r22,r17,r2
1000f4b4:	dd000015 	stw	r20,0(sp)
1000f4b8:	b028d43a 	srli	r20,r22,16
1000f4bc:	d8c00215 	stw	r3,8(sp)
1000f4c0:	b4bfffcc 	andi	r18,r22,65535
1000f4c4:	a00b883a 	mov	r5,r20
1000f4c8:	000e7c80 	call	1000e7c8 <__udivsi3>
1000f4cc:	100b883a 	mov	r5,r2
1000f4d0:	9009883a 	mov	r4,r18
1000f4d4:	1023883a 	mov	r17,r2
1000f4d8:	000e8840 	call	1000e884 <__mulsi3>
1000f4dc:	8009883a 	mov	r4,r16
1000f4e0:	a00b883a 	mov	r5,r20
1000f4e4:	1039883a 	mov	fp,r2
1000f4e8:	000e82c0 	call	1000e82c <__umodsi3>
1000f4ec:	1004943a 	slli	r2,r2,16
1000f4f0:	b808d43a 	srli	r4,r23,16
1000f4f4:	d8c00217 	ldw	r3,8(sp)
1000f4f8:	2084b03a 	or	r2,r4,r2
1000f4fc:	1700062e 	bgeu	r2,fp,1000f518 <__divdf3+0x3c0>
1000f500:	1585883a 	add	r2,r2,r22
1000f504:	893fffc4 	addi	r4,r17,-1
1000f508:	15811d36 	bltu	r2,r22,1000f980 <__divdf3+0x828>
1000f50c:	17011c2e 	bgeu	r2,fp,1000f980 <__divdf3+0x828>
1000f510:	8c7fff84 	addi	r17,r17,-2
1000f514:	1585883a 	add	r2,r2,r22
1000f518:	1739c83a 	sub	fp,r2,fp
1000f51c:	a00b883a 	mov	r5,r20
1000f520:	e009883a 	mov	r4,fp
1000f524:	d8c00215 	stw	r3,8(sp)
1000f528:	000e7c80 	call	1000e7c8 <__udivsi3>
1000f52c:	100b883a 	mov	r5,r2
1000f530:	9009883a 	mov	r4,r18
1000f534:	1021883a 	mov	r16,r2
1000f538:	000e8840 	call	1000e884 <__mulsi3>
1000f53c:	a00b883a 	mov	r5,r20
1000f540:	e009883a 	mov	r4,fp
1000f544:	d8800415 	stw	r2,16(sp)
1000f548:	000e82c0 	call	1000e82c <__umodsi3>
1000f54c:	1004943a 	slli	r2,r2,16
1000f550:	da000417 	ldw	r8,16(sp)
1000f554:	bdffffcc 	andi	r23,r23,65535
1000f558:	b884b03a 	or	r2,r23,r2
1000f55c:	d8c00217 	ldw	r3,8(sp)
1000f560:	1200062e 	bgeu	r2,r8,1000f57c <__divdf3+0x424>
1000f564:	1585883a 	add	r2,r2,r22
1000f568:	813fffc4 	addi	r4,r16,-1
1000f56c:	15810236 	bltu	r2,r22,1000f978 <__divdf3+0x820>
1000f570:	1201012e 	bgeu	r2,r8,1000f978 <__divdf3+0x820>
1000f574:	843fff84 	addi	r16,r16,-2
1000f578:	1585883a 	add	r2,r2,r22
1000f57c:	8822943a 	slli	r17,r17,16
1000f580:	d9800017 	ldw	r6,0(sp)
1000f584:	1211c83a 	sub	r8,r2,r8
1000f588:	8c22b03a 	or	r17,r17,r16
1000f58c:	373fffcc 	andi	fp,r6,65535
1000f590:	8abfffcc 	andi	r10,r17,65535
1000f594:	8820d43a 	srli	r16,r17,16
1000f598:	5009883a 	mov	r4,r10
1000f59c:	e00b883a 	mov	r5,fp
1000f5a0:	302ed43a 	srli	r23,r6,16
1000f5a4:	d8c00215 	stw	r3,8(sp)
1000f5a8:	da000415 	stw	r8,16(sp)
1000f5ac:	da800115 	stw	r10,4(sp)
1000f5b0:	000e8840 	call	1000e884 <__mulsi3>
1000f5b4:	800b883a 	mov	r5,r16
1000f5b8:	e009883a 	mov	r4,fp
1000f5bc:	d8800515 	stw	r2,20(sp)
1000f5c0:	000e8840 	call	1000e884 <__mulsi3>
1000f5c4:	8009883a 	mov	r4,r16
1000f5c8:	b80b883a 	mov	r5,r23
1000f5cc:	d8800315 	stw	r2,12(sp)
1000f5d0:	000e8840 	call	1000e884 <__mulsi3>
1000f5d4:	da800117 	ldw	r10,4(sp)
1000f5d8:	b80b883a 	mov	r5,r23
1000f5dc:	1021883a 	mov	r16,r2
1000f5e0:	5009883a 	mov	r4,r10
1000f5e4:	000e8840 	call	1000e884 <__mulsi3>
1000f5e8:	d9c00517 	ldw	r7,20(sp)
1000f5ec:	da400317 	ldw	r9,12(sp)
1000f5f0:	d8c00217 	ldw	r3,8(sp)
1000f5f4:	3808d43a 	srli	r4,r7,16
1000f5f8:	1245883a 	add	r2,r2,r9
1000f5fc:	da000417 	ldw	r8,16(sp)
1000f600:	2085883a 	add	r2,r4,r2
1000f604:	1240022e 	bgeu	r2,r9,1000f610 <__divdf3+0x4b8>
1000f608:	01000074 	movhi	r4,1
1000f60c:	8121883a 	add	r16,r16,r4
1000f610:	1008d43a 	srli	r4,r2,16
1000f614:	1004943a 	slli	r2,r2,16
1000f618:	39ffffcc 	andi	r7,r7,65535
1000f61c:	2409883a 	add	r4,r4,r16
1000f620:	11c5883a 	add	r2,r2,r7
1000f624:	4100bb36 	bltu	r8,r4,1000f914 <__divdf3+0x7bc>
1000f628:	4100d726 	beq	r8,r4,1000f988 <__divdf3+0x830>
1000f62c:	4109c83a 	sub	r4,r8,r4
1000f630:	a8a1c83a 	sub	r16,r21,r2
1000f634:	ac2b803a 	cmpltu	r21,r21,r16
1000f638:	256bc83a 	sub	r21,r4,r21
1000f63c:	b540d926 	beq	r22,r21,1000f9a4 <__divdf3+0x84c>
1000f640:	a00b883a 	mov	r5,r20
1000f644:	a809883a 	mov	r4,r21
1000f648:	d8c00215 	stw	r3,8(sp)
1000f64c:	000e7c80 	call	1000e7c8 <__udivsi3>
1000f650:	100b883a 	mov	r5,r2
1000f654:	9009883a 	mov	r4,r18
1000f658:	d8800515 	stw	r2,20(sp)
1000f65c:	000e8840 	call	1000e884 <__mulsi3>
1000f660:	a809883a 	mov	r4,r21
1000f664:	a00b883a 	mov	r5,r20
1000f668:	d8800415 	stw	r2,16(sp)
1000f66c:	000e82c0 	call	1000e82c <__umodsi3>
1000f670:	1004943a 	slli	r2,r2,16
1000f674:	8008d43a 	srli	r4,r16,16
1000f678:	da000417 	ldw	r8,16(sp)
1000f67c:	d8c00217 	ldw	r3,8(sp)
1000f680:	2084b03a 	or	r2,r4,r2
1000f684:	d9c00517 	ldw	r7,20(sp)
1000f688:	1200062e 	bgeu	r2,r8,1000f6a4 <__divdf3+0x54c>
1000f68c:	1585883a 	add	r2,r2,r22
1000f690:	393fffc4 	addi	r4,r7,-1
1000f694:	1580c536 	bltu	r2,r22,1000f9ac <__divdf3+0x854>
1000f698:	1200c42e 	bgeu	r2,r8,1000f9ac <__divdf3+0x854>
1000f69c:	39ffff84 	addi	r7,r7,-2
1000f6a0:	1585883a 	add	r2,r2,r22
1000f6a4:	122bc83a 	sub	r21,r2,r8
1000f6a8:	a00b883a 	mov	r5,r20
1000f6ac:	a809883a 	mov	r4,r21
1000f6b0:	d8c00215 	stw	r3,8(sp)
1000f6b4:	d9c00515 	stw	r7,20(sp)
1000f6b8:	000e7c80 	call	1000e7c8 <__udivsi3>
1000f6bc:	9009883a 	mov	r4,r18
1000f6c0:	100b883a 	mov	r5,r2
1000f6c4:	d8800415 	stw	r2,16(sp)
1000f6c8:	000e8840 	call	1000e884 <__mulsi3>
1000f6cc:	a809883a 	mov	r4,r21
1000f6d0:	a00b883a 	mov	r5,r20
1000f6d4:	1025883a 	mov	r18,r2
1000f6d8:	000e82c0 	call	1000e82c <__umodsi3>
1000f6dc:	1004943a 	slli	r2,r2,16
1000f6e0:	813fffcc 	andi	r4,r16,65535
1000f6e4:	d8c00217 	ldw	r3,8(sp)
1000f6e8:	20a0b03a 	or	r16,r4,r2
1000f6ec:	d9c00517 	ldw	r7,20(sp)
1000f6f0:	da000417 	ldw	r8,16(sp)
1000f6f4:	8480062e 	bgeu	r16,r18,1000f710 <__divdf3+0x5b8>
1000f6f8:	85a1883a 	add	r16,r16,r22
1000f6fc:	40bfffc4 	addi	r2,r8,-1
1000f700:	8580ac36 	bltu	r16,r22,1000f9b4 <__divdf3+0x85c>
1000f704:	8480ab2e 	bgeu	r16,r18,1000f9b4 <__divdf3+0x85c>
1000f708:	423fff84 	addi	r8,r8,-2
1000f70c:	85a1883a 	add	r16,r16,r22
1000f710:	3804943a 	slli	r2,r7,16
1000f714:	84a1c83a 	sub	r16,r16,r18
1000f718:	e009883a 	mov	r4,fp
1000f71c:	1228b03a 	or	r20,r2,r8
1000f720:	a1ffffcc 	andi	r7,r20,65535
1000f724:	a024d43a 	srli	r18,r20,16
1000f728:	380b883a 	mov	r5,r7
1000f72c:	d8c00215 	stw	r3,8(sp)
1000f730:	d9c00515 	stw	r7,20(sp)
1000f734:	000e8840 	call	1000e884 <__mulsi3>
1000f738:	900b883a 	mov	r5,r18
1000f73c:	e009883a 	mov	r4,fp
1000f740:	102b883a 	mov	r21,r2
1000f744:	000e8840 	call	1000e884 <__mulsi3>
1000f748:	900b883a 	mov	r5,r18
1000f74c:	b809883a 	mov	r4,r23
1000f750:	1039883a 	mov	fp,r2
1000f754:	000e8840 	call	1000e884 <__mulsi3>
1000f758:	d9c00517 	ldw	r7,20(sp)
1000f75c:	b80b883a 	mov	r5,r23
1000f760:	1025883a 	mov	r18,r2
1000f764:	3809883a 	mov	r4,r7
1000f768:	000e8840 	call	1000e884 <__mulsi3>
1000f76c:	a808d43a 	srli	r4,r21,16
1000f770:	1705883a 	add	r2,r2,fp
1000f774:	d8c00217 	ldw	r3,8(sp)
1000f778:	2085883a 	add	r2,r4,r2
1000f77c:	1700022e 	bgeu	r2,fp,1000f788 <__divdf3+0x630>
1000f780:	01000074 	movhi	r4,1
1000f784:	9125883a 	add	r18,r18,r4
1000f788:	1008d43a 	srli	r4,r2,16
1000f78c:	1004943a 	slli	r2,r2,16
1000f790:	ad7fffcc 	andi	r21,r21,65535
1000f794:	2489883a 	add	r4,r4,r18
1000f798:	1545883a 	add	r2,r2,r21
1000f79c:	81003836 	bltu	r16,r4,1000f880 <__divdf3+0x728>
1000f7a0:	81003626 	beq	r16,r4,1000f87c <__divdf3+0x724>
1000f7a4:	a5000054 	ori	r20,r20,1
1000f7a8:	1880ffc4 	addi	r2,r3,1023
1000f7ac:	00bf2e0e 	bge	zero,r2,1000f468 <__alt_data_end+0xf800f468>
1000f7b0:	a10001cc 	andi	r4,r20,7
1000f7b4:	20000726 	beq	r4,zero,1000f7d4 <__divdf3+0x67c>
1000f7b8:	a10003cc 	andi	r4,r20,15
1000f7bc:	01400104 	movi	r5,4
1000f7c0:	21400426 	beq	r4,r5,1000f7d4 <__divdf3+0x67c>
1000f7c4:	a149883a 	add	r4,r20,r5
1000f7c8:	2529803a 	cmpltu	r20,r4,r20
1000f7cc:	8d23883a 	add	r17,r17,r20
1000f7d0:	2029883a 	mov	r20,r4
1000f7d4:	8900402c 	andhi	r4,r17,256
1000f7d8:	20000426 	beq	r4,zero,1000f7ec <__divdf3+0x694>
1000f7dc:	18810004 	addi	r2,r3,1024
1000f7e0:	00ffc034 	movhi	r3,65280
1000f7e4:	18ffffc4 	addi	r3,r3,-1
1000f7e8:	88e2703a 	and	r17,r17,r3
1000f7ec:	00c1ff84 	movi	r3,2046
1000f7f0:	18beb416 	blt	r3,r2,1000f2c4 <__alt_data_end+0xf800f2c4>
1000f7f4:	a028d0fa 	srli	r20,r20,3
1000f7f8:	882a977a 	slli	r21,r17,29
1000f7fc:	8820927a 	slli	r16,r17,9
1000f800:	1081ffcc 	andi	r2,r2,2047
1000f804:	ad2ab03a 	or	r21,r21,r20
1000f808:	8020d33a 	srli	r16,r16,12
1000f80c:	9900004c 	andi	r4,r19,1
1000f810:	003eb006 	br	1000f2d4 <__alt_data_end+0xf800f2d4>
1000f814:	8080022c 	andhi	r2,r16,8
1000f818:	10001226 	beq	r2,zero,1000f864 <__divdf3+0x70c>
1000f81c:	8880022c 	andhi	r2,r17,8
1000f820:	1000101e 	bne	r2,zero,1000f864 <__divdf3+0x70c>
1000f824:	00800434 	movhi	r2,16
1000f828:	8c000234 	orhi	r16,r17,8
1000f82c:	10bfffc4 	addi	r2,r2,-1
1000f830:	b809883a 	mov	r4,r23
1000f834:	80a0703a 	and	r16,r16,r2
1000f838:	a02b883a 	mov	r21,r20
1000f83c:	003f0806 	br	1000f460 <__alt_data_end+0xf800f460>
1000f840:	008000c4 	movi	r2,3
1000f844:	3880b126 	beq	r7,r2,1000fb0c <__divdf3+0x9b4>
1000f848:	00800044 	movi	r2,1
1000f84c:	38805b1e 	bne	r7,r2,1000f9bc <__divdf3+0x864>
1000f850:	e009883a 	mov	r4,fp
1000f854:	0005883a 	mov	r2,zero
1000f858:	0021883a 	mov	r16,zero
1000f85c:	002b883a 	mov	r21,zero
1000f860:	003e9c06 	br	1000f2d4 <__alt_data_end+0xf800f2d4>
1000f864:	00800434 	movhi	r2,16
1000f868:	84000234 	orhi	r16,r16,8
1000f86c:	10bfffc4 	addi	r2,r2,-1
1000f870:	b009883a 	mov	r4,r22
1000f874:	80a0703a 	and	r16,r16,r2
1000f878:	003ef906 	br	1000f460 <__alt_data_end+0xf800f460>
1000f87c:	103fca26 	beq	r2,zero,1000f7a8 <__alt_data_end+0xf800f7a8>
1000f880:	b421883a 	add	r16,r22,r16
1000f884:	a17fffc4 	addi	r5,r20,-1
1000f888:	8580422e 	bgeu	r16,r22,1000f994 <__divdf3+0x83c>
1000f88c:	2829883a 	mov	r20,r5
1000f890:	813fc41e 	bne	r16,r4,1000f7a4 <__alt_data_end+0xf800f7a4>
1000f894:	d9800017 	ldw	r6,0(sp)
1000f898:	30bfc21e 	bne	r6,r2,1000f7a4 <__alt_data_end+0xf800f7a4>
1000f89c:	003fc206 	br	1000f7a8 <__alt_data_end+0xf800f7a8>
1000f8a0:	143ff604 	addi	r16,r2,-40
1000f8a4:	8c20983a 	sll	r16,r17,r16
1000f8a8:	002b883a 	mov	r21,zero
1000f8ac:	003eb406 	br	1000f380 <__alt_data_end+0xf800f380>
1000f8b0:	d9800215 	stw	r6,8(sp)
1000f8b4:	d9c00515 	stw	r7,20(sp)
1000f8b8:	da000415 	stw	r8,16(sp)
1000f8bc:	00110ec0 	call	100110ec <__clzsi2>
1000f8c0:	10800804 	addi	r2,r2,32
1000f8c4:	da000417 	ldw	r8,16(sp)
1000f8c8:	d9c00517 	ldw	r7,20(sp)
1000f8cc:	d9800217 	ldw	r6,8(sp)
1000f8d0:	003ea106 	br	1000f358 <__alt_data_end+0xf800f358>
1000f8d4:	147ff604 	addi	r17,r2,-40
1000f8d8:	3462983a 	sll	r17,r6,r17
1000f8dc:	0029883a 	mov	r20,zero
1000f8e0:	003ec906 	br	1000f408 <__alt_data_end+0xf800f408>
1000f8e4:	3009883a 	mov	r4,r6
1000f8e8:	d9400115 	stw	r5,4(sp)
1000f8ec:	d9800215 	stw	r6,8(sp)
1000f8f0:	da000415 	stw	r8,16(sp)
1000f8f4:	da400315 	stw	r9,12(sp)
1000f8f8:	00110ec0 	call	100110ec <__clzsi2>
1000f8fc:	10800804 	addi	r2,r2,32
1000f900:	da400317 	ldw	r9,12(sp)
1000f904:	da000417 	ldw	r8,16(sp)
1000f908:	d9800217 	ldw	r6,8(sp)
1000f90c:	d9400117 	ldw	r5,4(sp)
1000f910:	003eb306 	br	1000f3e0 <__alt_data_end+0xf800f3e0>
1000f914:	d9800017 	ldw	r6,0(sp)
1000f918:	a9ab883a 	add	r21,r21,r6
1000f91c:	a98b803a 	cmpltu	r5,r21,r6
1000f920:	2d8b883a 	add	r5,r5,r22
1000f924:	2a11883a 	add	r8,r5,r8
1000f928:	897fffc4 	addi	r5,r17,-1
1000f92c:	b2000c2e 	bgeu	r22,r8,1000f960 <__divdf3+0x808>
1000f930:	41003f36 	bltu	r8,r4,1000fa30 <__divdf3+0x8d8>
1000f934:	22006c26 	beq	r4,r8,1000fae8 <__divdf3+0x990>
1000f938:	4109c83a 	sub	r4,r8,r4
1000f93c:	2823883a 	mov	r17,r5
1000f940:	003f3b06 	br	1000f630 <__alt_data_end+0xf800f630>
1000f944:	ad3ed336 	bltu	r21,r20,1000f494 <__alt_data_end+0xf800f494>
1000f948:	a804d07a 	srli	r2,r21,1
1000f94c:	802e97fa 	slli	r23,r16,31
1000f950:	a82a97fa 	slli	r21,r21,31
1000f954:	8020d07a 	srli	r16,r16,1
1000f958:	b8aeb03a 	or	r23,r23,r2
1000f95c:	003ed006 	br	1000f4a0 <__alt_data_end+0xf800f4a0>
1000f960:	b23ff51e 	bne	r22,r8,1000f938 <__alt_data_end+0xf800f938>
1000f964:	d9800017 	ldw	r6,0(sp)
1000f968:	a9bff12e 	bgeu	r21,r6,1000f930 <__alt_data_end+0xf800f930>
1000f96c:	b109c83a 	sub	r4,r22,r4
1000f970:	2823883a 	mov	r17,r5
1000f974:	003f2e06 	br	1000f630 <__alt_data_end+0xf800f630>
1000f978:	2021883a 	mov	r16,r4
1000f97c:	003eff06 	br	1000f57c <__alt_data_end+0xf800f57c>
1000f980:	2023883a 	mov	r17,r4
1000f984:	003ee406 	br	1000f518 <__alt_data_end+0xf800f518>
1000f988:	a8bfe236 	bltu	r21,r2,1000f914 <__alt_data_end+0xf800f914>
1000f98c:	0009883a 	mov	r4,zero
1000f990:	003f2706 	br	1000f630 <__alt_data_end+0xf800f630>
1000f994:	81002d36 	bltu	r16,r4,1000fa4c <__divdf3+0x8f4>
1000f998:	24005626 	beq	r4,r16,1000faf4 <__divdf3+0x99c>
1000f99c:	2829883a 	mov	r20,r5
1000f9a0:	003f8006 	br	1000f7a4 <__alt_data_end+0xf800f7a4>
1000f9a4:	053fffc4 	movi	r20,-1
1000f9a8:	003f7f06 	br	1000f7a8 <__alt_data_end+0xf800f7a8>
1000f9ac:	200f883a 	mov	r7,r4
1000f9b0:	003f3c06 	br	1000f6a4 <__alt_data_end+0xf800f6a4>
1000f9b4:	1011883a 	mov	r8,r2
1000f9b8:	003f5506 	br	1000f710 <__alt_data_end+0xf800f710>
1000f9bc:	e027883a 	mov	r19,fp
1000f9c0:	003f7906 	br	1000f7a8 <__alt_data_end+0xf800f7a8>
1000f9c4:	010007c4 	movi	r4,31
1000f9c8:	20c02816 	blt	r4,r3,1000fa6c <__divdf3+0x914>
1000f9cc:	00800804 	movi	r2,32
1000f9d0:	10c5c83a 	sub	r2,r2,r3
1000f9d4:	888a983a 	sll	r5,r17,r2
1000f9d8:	a0c8d83a 	srl	r4,r20,r3
1000f9dc:	a084983a 	sll	r2,r20,r2
1000f9e0:	88e2d83a 	srl	r17,r17,r3
1000f9e4:	2906b03a 	or	r3,r5,r4
1000f9e8:	1004c03a 	cmpne	r2,r2,zero
1000f9ec:	1886b03a 	or	r3,r3,r2
1000f9f0:	188001cc 	andi	r2,r3,7
1000f9f4:	10000726 	beq	r2,zero,1000fa14 <__divdf3+0x8bc>
1000f9f8:	188003cc 	andi	r2,r3,15
1000f9fc:	01000104 	movi	r4,4
1000fa00:	11000426 	beq	r2,r4,1000fa14 <__divdf3+0x8bc>
1000fa04:	1805883a 	mov	r2,r3
1000fa08:	10c00104 	addi	r3,r2,4
1000fa0c:	1885803a 	cmpltu	r2,r3,r2
1000fa10:	88a3883a 	add	r17,r17,r2
1000fa14:	8880202c 	andhi	r2,r17,128
1000fa18:	10002926 	beq	r2,zero,1000fac0 <__divdf3+0x968>
1000fa1c:	9900004c 	andi	r4,r19,1
1000fa20:	00800044 	movi	r2,1
1000fa24:	0021883a 	mov	r16,zero
1000fa28:	002b883a 	mov	r21,zero
1000fa2c:	003e2906 	br	1000f2d4 <__alt_data_end+0xf800f2d4>
1000fa30:	d9800017 	ldw	r6,0(sp)
1000fa34:	8c7fff84 	addi	r17,r17,-2
1000fa38:	a9ab883a 	add	r21,r21,r6
1000fa3c:	a98b803a 	cmpltu	r5,r21,r6
1000fa40:	2d8b883a 	add	r5,r5,r22
1000fa44:	2a11883a 	add	r8,r5,r8
1000fa48:	003ef806 	br	1000f62c <__alt_data_end+0xf800f62c>
1000fa4c:	d9800017 	ldw	r6,0(sp)
1000fa50:	318f883a 	add	r7,r6,r6
1000fa54:	398b803a 	cmpltu	r5,r7,r6
1000fa58:	2d8d883a 	add	r6,r5,r22
1000fa5c:	81a1883a 	add	r16,r16,r6
1000fa60:	a17fff84 	addi	r5,r20,-2
1000fa64:	d9c00015 	stw	r7,0(sp)
1000fa68:	003f8806 	br	1000f88c <__alt_data_end+0xf800f88c>
1000fa6c:	013ff844 	movi	r4,-31
1000fa70:	2085c83a 	sub	r2,r4,r2
1000fa74:	8888d83a 	srl	r4,r17,r2
1000fa78:	00800804 	movi	r2,32
1000fa7c:	18802126 	beq	r3,r2,1000fb04 <__divdf3+0x9ac>
1000fa80:	04001004 	movi	r16,64
1000fa84:	80c7c83a 	sub	r3,r16,r3
1000fa88:	88e0983a 	sll	r16,r17,r3
1000fa8c:	8504b03a 	or	r2,r16,r20
1000fa90:	1004c03a 	cmpne	r2,r2,zero
1000fa94:	2084b03a 	or	r2,r4,r2
1000fa98:	144001cc 	andi	r17,r2,7
1000fa9c:	88000d1e 	bne	r17,zero,1000fad4 <__divdf3+0x97c>
1000faa0:	0021883a 	mov	r16,zero
1000faa4:	102ad0fa 	srli	r21,r2,3
1000faa8:	9900004c 	andi	r4,r19,1
1000faac:	0005883a 	mov	r2,zero
1000fab0:	ac6ab03a 	or	r21,r21,r17
1000fab4:	003e0706 	br	1000f2d4 <__alt_data_end+0xf800f2d4>
1000fab8:	1007883a 	mov	r3,r2
1000fabc:	0023883a 	mov	r17,zero
1000fac0:	8820927a 	slli	r16,r17,9
1000fac4:	1805883a 	mov	r2,r3
1000fac8:	8822977a 	slli	r17,r17,29
1000facc:	8020d33a 	srli	r16,r16,12
1000fad0:	003ff406 	br	1000faa4 <__alt_data_end+0xf800faa4>
1000fad4:	10c003cc 	andi	r3,r2,15
1000fad8:	01000104 	movi	r4,4
1000fadc:	193ff626 	beq	r3,r4,1000fab8 <__alt_data_end+0xf800fab8>
1000fae0:	0023883a 	mov	r17,zero
1000fae4:	003fc806 	br	1000fa08 <__alt_data_end+0xf800fa08>
1000fae8:	a8bfd136 	bltu	r21,r2,1000fa30 <__alt_data_end+0xf800fa30>
1000faec:	2823883a 	mov	r17,r5
1000faf0:	003fa606 	br	1000f98c <__alt_data_end+0xf800f98c>
1000faf4:	d9800017 	ldw	r6,0(sp)
1000faf8:	30bfd436 	bltu	r6,r2,1000fa4c <__alt_data_end+0xf800fa4c>
1000fafc:	2829883a 	mov	r20,r5
1000fb00:	003f6406 	br	1000f894 <__alt_data_end+0xf800f894>
1000fb04:	0021883a 	mov	r16,zero
1000fb08:	003fe006 	br	1000fa8c <__alt_data_end+0xf800fa8c>
1000fb0c:	00800434 	movhi	r2,16
1000fb10:	8c000234 	orhi	r16,r17,8
1000fb14:	10bfffc4 	addi	r2,r2,-1
1000fb18:	e009883a 	mov	r4,fp
1000fb1c:	80a0703a 	and	r16,r16,r2
1000fb20:	a02b883a 	mov	r21,r20
1000fb24:	003e4e06 	br	1000f460 <__alt_data_end+0xf800f460>

1000fb28 <__eqdf2>:
1000fb28:	2804d53a 	srli	r2,r5,20
1000fb2c:	3806d53a 	srli	r3,r7,20
1000fb30:	02000434 	movhi	r8,16
1000fb34:	423fffc4 	addi	r8,r8,-1
1000fb38:	1081ffcc 	andi	r2,r2,2047
1000fb3c:	0281ffc4 	movi	r10,2047
1000fb40:	2a12703a 	and	r9,r5,r8
1000fb44:	18c1ffcc 	andi	r3,r3,2047
1000fb48:	3a10703a 	and	r8,r7,r8
1000fb4c:	280ad7fa 	srli	r5,r5,31
1000fb50:	380ed7fa 	srli	r7,r7,31
1000fb54:	12801026 	beq	r2,r10,1000fb98 <__eqdf2+0x70>
1000fb58:	0281ffc4 	movi	r10,2047
1000fb5c:	1a800a26 	beq	r3,r10,1000fb88 <__eqdf2+0x60>
1000fb60:	10c00226 	beq	r2,r3,1000fb6c <__eqdf2+0x44>
1000fb64:	00800044 	movi	r2,1
1000fb68:	f800283a 	ret
1000fb6c:	4a3ffd1e 	bne	r9,r8,1000fb64 <__alt_data_end+0xf800fb64>
1000fb70:	21bffc1e 	bne	r4,r6,1000fb64 <__alt_data_end+0xf800fb64>
1000fb74:	29c00c26 	beq	r5,r7,1000fba8 <__eqdf2+0x80>
1000fb78:	103ffa1e 	bne	r2,zero,1000fb64 <__alt_data_end+0xf800fb64>
1000fb7c:	2244b03a 	or	r2,r4,r9
1000fb80:	1004c03a 	cmpne	r2,r2,zero
1000fb84:	f800283a 	ret
1000fb88:	3214b03a 	or	r10,r6,r8
1000fb8c:	503ff426 	beq	r10,zero,1000fb60 <__alt_data_end+0xf800fb60>
1000fb90:	00800044 	movi	r2,1
1000fb94:	f800283a 	ret
1000fb98:	2254b03a 	or	r10,r4,r9
1000fb9c:	503fee26 	beq	r10,zero,1000fb58 <__alt_data_end+0xf800fb58>
1000fba0:	00800044 	movi	r2,1
1000fba4:	f800283a 	ret
1000fba8:	0005883a 	mov	r2,zero
1000fbac:	f800283a 	ret

1000fbb0 <__gedf2>:
1000fbb0:	2804d53a 	srli	r2,r5,20
1000fbb4:	3806d53a 	srli	r3,r7,20
1000fbb8:	02000434 	movhi	r8,16
1000fbbc:	423fffc4 	addi	r8,r8,-1
1000fbc0:	1081ffcc 	andi	r2,r2,2047
1000fbc4:	0241ffc4 	movi	r9,2047
1000fbc8:	2a14703a 	and	r10,r5,r8
1000fbcc:	18c1ffcc 	andi	r3,r3,2047
1000fbd0:	3a10703a 	and	r8,r7,r8
1000fbd4:	280ad7fa 	srli	r5,r5,31
1000fbd8:	380ed7fa 	srli	r7,r7,31
1000fbdc:	12401d26 	beq	r2,r9,1000fc54 <__gedf2+0xa4>
1000fbe0:	0241ffc4 	movi	r9,2047
1000fbe4:	1a401226 	beq	r3,r9,1000fc30 <__gedf2+0x80>
1000fbe8:	1000081e 	bne	r2,zero,1000fc0c <__gedf2+0x5c>
1000fbec:	2296b03a 	or	r11,r4,r10
1000fbf0:	5813003a 	cmpeq	r9,r11,zero
1000fbf4:	1800091e 	bne	r3,zero,1000fc1c <__gedf2+0x6c>
1000fbf8:	3218b03a 	or	r12,r6,r8
1000fbfc:	6000071e 	bne	r12,zero,1000fc1c <__gedf2+0x6c>
1000fc00:	0005883a 	mov	r2,zero
1000fc04:	5800101e 	bne	r11,zero,1000fc48 <__gedf2+0x98>
1000fc08:	f800283a 	ret
1000fc0c:	18000c1e 	bne	r3,zero,1000fc40 <__gedf2+0x90>
1000fc10:	3212b03a 	or	r9,r6,r8
1000fc14:	48000c26 	beq	r9,zero,1000fc48 <__gedf2+0x98>
1000fc18:	0013883a 	mov	r9,zero
1000fc1c:	39c03fcc 	andi	r7,r7,255
1000fc20:	48000826 	beq	r9,zero,1000fc44 <__gedf2+0x94>
1000fc24:	38000926 	beq	r7,zero,1000fc4c <__gedf2+0x9c>
1000fc28:	00800044 	movi	r2,1
1000fc2c:	f800283a 	ret
1000fc30:	3212b03a 	or	r9,r6,r8
1000fc34:	483fec26 	beq	r9,zero,1000fbe8 <__alt_data_end+0xf800fbe8>
1000fc38:	00bfff84 	movi	r2,-2
1000fc3c:	f800283a 	ret
1000fc40:	39c03fcc 	andi	r7,r7,255
1000fc44:	29c00626 	beq	r5,r7,1000fc60 <__gedf2+0xb0>
1000fc48:	283ff726 	beq	r5,zero,1000fc28 <__alt_data_end+0xf800fc28>
1000fc4c:	00bfffc4 	movi	r2,-1
1000fc50:	f800283a 	ret
1000fc54:	2292b03a 	or	r9,r4,r10
1000fc58:	483fe126 	beq	r9,zero,1000fbe0 <__alt_data_end+0xf800fbe0>
1000fc5c:	003ff606 	br	1000fc38 <__alt_data_end+0xf800fc38>
1000fc60:	18bff916 	blt	r3,r2,1000fc48 <__alt_data_end+0xf800fc48>
1000fc64:	10c00316 	blt	r2,r3,1000fc74 <__gedf2+0xc4>
1000fc68:	42bff736 	bltu	r8,r10,1000fc48 <__alt_data_end+0xf800fc48>
1000fc6c:	52000326 	beq	r10,r8,1000fc7c <__gedf2+0xcc>
1000fc70:	5200042e 	bgeu	r10,r8,1000fc84 <__gedf2+0xd4>
1000fc74:	283fec1e 	bne	r5,zero,1000fc28 <__alt_data_end+0xf800fc28>
1000fc78:	003ff406 	br	1000fc4c <__alt_data_end+0xf800fc4c>
1000fc7c:	313ff236 	bltu	r6,r4,1000fc48 <__alt_data_end+0xf800fc48>
1000fc80:	21bffc36 	bltu	r4,r6,1000fc74 <__alt_data_end+0xf800fc74>
1000fc84:	0005883a 	mov	r2,zero
1000fc88:	f800283a 	ret

1000fc8c <__ledf2>:
1000fc8c:	2804d53a 	srli	r2,r5,20
1000fc90:	3810d53a 	srli	r8,r7,20
1000fc94:	00c00434 	movhi	r3,16
1000fc98:	18ffffc4 	addi	r3,r3,-1
1000fc9c:	1081ffcc 	andi	r2,r2,2047
1000fca0:	0241ffc4 	movi	r9,2047
1000fca4:	28d4703a 	and	r10,r5,r3
1000fca8:	4201ffcc 	andi	r8,r8,2047
1000fcac:	38c6703a 	and	r3,r7,r3
1000fcb0:	280ad7fa 	srli	r5,r5,31
1000fcb4:	380ed7fa 	srli	r7,r7,31
1000fcb8:	12401f26 	beq	r2,r9,1000fd38 <__ledf2+0xac>
1000fcbc:	0241ffc4 	movi	r9,2047
1000fcc0:	42401426 	beq	r8,r9,1000fd14 <__ledf2+0x88>
1000fcc4:	1000091e 	bne	r2,zero,1000fcec <__ledf2+0x60>
1000fcc8:	2296b03a 	or	r11,r4,r10
1000fccc:	5813003a 	cmpeq	r9,r11,zero
1000fcd0:	29403fcc 	andi	r5,r5,255
1000fcd4:	40000a1e 	bne	r8,zero,1000fd00 <__ledf2+0x74>
1000fcd8:	30d8b03a 	or	r12,r6,r3
1000fcdc:	6000081e 	bne	r12,zero,1000fd00 <__ledf2+0x74>
1000fce0:	0005883a 	mov	r2,zero
1000fce4:	5800111e 	bne	r11,zero,1000fd2c <__ledf2+0xa0>
1000fce8:	f800283a 	ret
1000fcec:	29403fcc 	andi	r5,r5,255
1000fcf0:	40000c1e 	bne	r8,zero,1000fd24 <__ledf2+0x98>
1000fcf4:	30d2b03a 	or	r9,r6,r3
1000fcf8:	48000c26 	beq	r9,zero,1000fd2c <__ledf2+0xa0>
1000fcfc:	0013883a 	mov	r9,zero
1000fd00:	39c03fcc 	andi	r7,r7,255
1000fd04:	48000826 	beq	r9,zero,1000fd28 <__ledf2+0x9c>
1000fd08:	38001126 	beq	r7,zero,1000fd50 <__ledf2+0xc4>
1000fd0c:	00800044 	movi	r2,1
1000fd10:	f800283a 	ret
1000fd14:	30d2b03a 	or	r9,r6,r3
1000fd18:	483fea26 	beq	r9,zero,1000fcc4 <__alt_data_end+0xf800fcc4>
1000fd1c:	00800084 	movi	r2,2
1000fd20:	f800283a 	ret
1000fd24:	39c03fcc 	andi	r7,r7,255
1000fd28:	39400726 	beq	r7,r5,1000fd48 <__ledf2+0xbc>
1000fd2c:	2800081e 	bne	r5,zero,1000fd50 <__ledf2+0xc4>
1000fd30:	00800044 	movi	r2,1
1000fd34:	f800283a 	ret
1000fd38:	2292b03a 	or	r9,r4,r10
1000fd3c:	483fdf26 	beq	r9,zero,1000fcbc <__alt_data_end+0xf800fcbc>
1000fd40:	00800084 	movi	r2,2
1000fd44:	f800283a 	ret
1000fd48:	4080030e 	bge	r8,r2,1000fd58 <__ledf2+0xcc>
1000fd4c:	383fef26 	beq	r7,zero,1000fd0c <__alt_data_end+0xf800fd0c>
1000fd50:	00bfffc4 	movi	r2,-1
1000fd54:	f800283a 	ret
1000fd58:	123feb16 	blt	r2,r8,1000fd08 <__alt_data_end+0xf800fd08>
1000fd5c:	1abff336 	bltu	r3,r10,1000fd2c <__alt_data_end+0xf800fd2c>
1000fd60:	50c00326 	beq	r10,r3,1000fd70 <__ledf2+0xe4>
1000fd64:	50c0042e 	bgeu	r10,r3,1000fd78 <__ledf2+0xec>
1000fd68:	283fe81e 	bne	r5,zero,1000fd0c <__alt_data_end+0xf800fd0c>
1000fd6c:	003ff806 	br	1000fd50 <__alt_data_end+0xf800fd50>
1000fd70:	313fee36 	bltu	r6,r4,1000fd2c <__alt_data_end+0xf800fd2c>
1000fd74:	21bffc36 	bltu	r4,r6,1000fd68 <__alt_data_end+0xf800fd68>
1000fd78:	0005883a 	mov	r2,zero
1000fd7c:	f800283a 	ret

1000fd80 <__muldf3>:
1000fd80:	deffee04 	addi	sp,sp,-72
1000fd84:	dd000c15 	stw	r20,48(sp)
1000fd88:	2828d53a 	srli	r20,r5,20
1000fd8c:	ddc00f15 	stw	r23,60(sp)
1000fd90:	282ed7fa 	srli	r23,r5,31
1000fd94:	dc000815 	stw	r16,32(sp)
1000fd98:	04000434 	movhi	r16,16
1000fd9c:	dcc00b15 	stw	r19,44(sp)
1000fda0:	843fffc4 	addi	r16,r16,-1
1000fda4:	dfc01115 	stw	ra,68(sp)
1000fda8:	df001015 	stw	fp,64(sp)
1000fdac:	dd800e15 	stw	r22,56(sp)
1000fdb0:	dd400d15 	stw	r21,52(sp)
1000fdb4:	dc800a15 	stw	r18,40(sp)
1000fdb8:	dc400915 	stw	r17,36(sp)
1000fdbc:	a501ffcc 	andi	r20,r20,2047
1000fdc0:	2c20703a 	and	r16,r5,r16
1000fdc4:	b827883a 	mov	r19,r23
1000fdc8:	ba403fcc 	andi	r9,r23,255
1000fdcc:	a0006026 	beq	r20,zero,1000ff50 <__muldf3+0x1d0>
1000fdd0:	0081ffc4 	movi	r2,2047
1000fdd4:	202d883a 	mov	r22,r4
1000fdd8:	a0803626 	beq	r20,r2,1000feb4 <__muldf3+0x134>
1000fddc:	84000434 	orhi	r16,r16,16
1000fde0:	200ad77a 	srli	r5,r4,29
1000fde4:	800490fa 	slli	r2,r16,3
1000fde8:	202c90fa 	slli	r22,r4,3
1000fdec:	a53f0044 	addi	r20,r20,-1023
1000fdf0:	28a0b03a 	or	r16,r5,r2
1000fdf4:	002b883a 	mov	r21,zero
1000fdf8:	000b883a 	mov	r5,zero
1000fdfc:	3804d53a 	srli	r2,r7,20
1000fe00:	3838d7fa 	srli	fp,r7,31
1000fe04:	04400434 	movhi	r17,16
1000fe08:	8c7fffc4 	addi	r17,r17,-1
1000fe0c:	1081ffcc 	andi	r2,r2,2047
1000fe10:	3025883a 	mov	r18,r6
1000fe14:	3c62703a 	and	r17,r7,r17
1000fe18:	e2803fcc 	andi	r10,fp,255
1000fe1c:	10006d26 	beq	r2,zero,1000ffd4 <__muldf3+0x254>
1000fe20:	00c1ffc4 	movi	r3,2047
1000fe24:	10c06526 	beq	r2,r3,1000ffbc <__muldf3+0x23c>
1000fe28:	8c400434 	orhi	r17,r17,16
1000fe2c:	300ed77a 	srli	r7,r6,29
1000fe30:	880690fa 	slli	r3,r17,3
1000fe34:	302490fa 	slli	r18,r6,3
1000fe38:	10bf0044 	addi	r2,r2,-1023
1000fe3c:	38e2b03a 	or	r17,r7,r3
1000fe40:	000f883a 	mov	r7,zero
1000fe44:	a087883a 	add	r3,r20,r2
1000fe48:	010003c4 	movi	r4,15
1000fe4c:	3d44b03a 	or	r2,r7,r21
1000fe50:	e5ccf03a 	xor	r6,fp,r23
1000fe54:	1a000044 	addi	r8,r3,1
1000fe58:	20809b36 	bltu	r4,r2,100100c8 <__muldf3+0x348>
1000fe5c:	100490ba 	slli	r2,r2,2
1000fe60:	01040074 	movhi	r4,4097
1000fe64:	213f9d04 	addi	r4,r4,-396
1000fe68:	1105883a 	add	r2,r2,r4
1000fe6c:	10800017 	ldw	r2,0(r2)
1000fe70:	1000683a 	jmp	r2
1000fe74:	100100c8 	cmpgei	zero,r2,1027
1000fe78:	1000fed4 	ori	zero,r2,1019
1000fe7c:	1000fed4 	ori	zero,r2,1019
1000fe80:	1000fed0 	cmplti	zero,r2,1019
1000fe84:	100100a4 	muli	zero,r2,1026
1000fe88:	100100a4 	muli	zero,r2,1026
1000fe8c:	1001008c 	andi	zero,r2,1026
1000fe90:	1000fed0 	cmplti	zero,r2,1019
1000fe94:	100100a4 	muli	zero,r2,1026
1000fe98:	1001008c 	andi	zero,r2,1026
1000fe9c:	100100a4 	muli	zero,r2,1026
1000fea0:	1000fed0 	cmplti	zero,r2,1019
1000fea4:	100100b4 	orhi	zero,r2,1026
1000fea8:	100100b4 	orhi	zero,r2,1026
1000feac:	100100b4 	orhi	zero,r2,1026
1000feb0:	10010414 	ori	zero,r2,1040
1000feb4:	2404b03a 	or	r2,r4,r16
1000feb8:	1000711e 	bne	r2,zero,10010080 <__muldf3+0x300>
1000febc:	05400204 	movi	r21,8
1000fec0:	0021883a 	mov	r16,zero
1000fec4:	002d883a 	mov	r22,zero
1000fec8:	01400084 	movi	r5,2
1000fecc:	003fcb06 	br	1000fdfc <__alt_data_end+0xf800fdfc>
1000fed0:	500d883a 	mov	r6,r10
1000fed4:	00800084 	movi	r2,2
1000fed8:	38805926 	beq	r7,r2,10010040 <__muldf3+0x2c0>
1000fedc:	008000c4 	movi	r2,3
1000fee0:	3881bb26 	beq	r7,r2,100105d0 <__muldf3+0x850>
1000fee4:	00800044 	movi	r2,1
1000fee8:	3881961e 	bne	r7,r2,10010544 <__muldf3+0x7c4>
1000feec:	3027883a 	mov	r19,r6
1000fef0:	0005883a 	mov	r2,zero
1000fef4:	0021883a 	mov	r16,zero
1000fef8:	002d883a 	mov	r22,zero
1000fefc:	1004953a 	slli	r2,r2,20
1000ff00:	98c03fcc 	andi	r3,r19,255
1000ff04:	04400434 	movhi	r17,16
1000ff08:	8c7fffc4 	addi	r17,r17,-1
1000ff0c:	180697fa 	slli	r3,r3,31
1000ff10:	8460703a 	and	r16,r16,r17
1000ff14:	80a0b03a 	or	r16,r16,r2
1000ff18:	80c6b03a 	or	r3,r16,r3
1000ff1c:	b005883a 	mov	r2,r22
1000ff20:	dfc01117 	ldw	ra,68(sp)
1000ff24:	df001017 	ldw	fp,64(sp)
1000ff28:	ddc00f17 	ldw	r23,60(sp)
1000ff2c:	dd800e17 	ldw	r22,56(sp)
1000ff30:	dd400d17 	ldw	r21,52(sp)
1000ff34:	dd000c17 	ldw	r20,48(sp)
1000ff38:	dcc00b17 	ldw	r19,44(sp)
1000ff3c:	dc800a17 	ldw	r18,40(sp)
1000ff40:	dc400917 	ldw	r17,36(sp)
1000ff44:	dc000817 	ldw	r16,32(sp)
1000ff48:	dec01204 	addi	sp,sp,72
1000ff4c:	f800283a 	ret
1000ff50:	2404b03a 	or	r2,r4,r16
1000ff54:	202b883a 	mov	r21,r4
1000ff58:	10004426 	beq	r2,zero,1001006c <__muldf3+0x2ec>
1000ff5c:	80015126 	beq	r16,zero,100104a4 <__muldf3+0x724>
1000ff60:	8009883a 	mov	r4,r16
1000ff64:	d9800715 	stw	r6,28(sp)
1000ff68:	d9c00215 	stw	r7,8(sp)
1000ff6c:	da400415 	stw	r9,16(sp)
1000ff70:	00110ec0 	call	100110ec <__clzsi2>
1000ff74:	d9800717 	ldw	r6,28(sp)
1000ff78:	d9c00217 	ldw	r7,8(sp)
1000ff7c:	da400417 	ldw	r9,16(sp)
1000ff80:	113ffd44 	addi	r4,r2,-11
1000ff84:	00c00704 	movi	r3,28
1000ff88:	19014216 	blt	r3,r4,10010494 <__muldf3+0x714>
1000ff8c:	00c00744 	movi	r3,29
1000ff90:	15bffe04 	addi	r22,r2,-8
1000ff94:	1907c83a 	sub	r3,r3,r4
1000ff98:	85a0983a 	sll	r16,r16,r22
1000ff9c:	a8c6d83a 	srl	r3,r21,r3
1000ffa0:	adac983a 	sll	r22,r21,r22
1000ffa4:	1c20b03a 	or	r16,r3,r16
1000ffa8:	1080fcc4 	addi	r2,r2,1011
1000ffac:	00a9c83a 	sub	r20,zero,r2
1000ffb0:	002b883a 	mov	r21,zero
1000ffb4:	000b883a 	mov	r5,zero
1000ffb8:	003f9006 	br	1000fdfc <__alt_data_end+0xf800fdfc>
1000ffbc:	3446b03a 	or	r3,r6,r17
1000ffc0:	1800281e 	bne	r3,zero,10010064 <__muldf3+0x2e4>
1000ffc4:	0023883a 	mov	r17,zero
1000ffc8:	0025883a 	mov	r18,zero
1000ffcc:	01c00084 	movi	r7,2
1000ffd0:	003f9c06 	br	1000fe44 <__alt_data_end+0xf800fe44>
1000ffd4:	3446b03a 	or	r3,r6,r17
1000ffd8:	18001e26 	beq	r3,zero,10010054 <__muldf3+0x2d4>
1000ffdc:	88012126 	beq	r17,zero,10010464 <__muldf3+0x6e4>
1000ffe0:	8809883a 	mov	r4,r17
1000ffe4:	d9400215 	stw	r5,8(sp)
1000ffe8:	d9800715 	stw	r6,28(sp)
1000ffec:	da400415 	stw	r9,16(sp)
1000fff0:	da800315 	stw	r10,12(sp)
1000fff4:	00110ec0 	call	100110ec <__clzsi2>
1000fff8:	d9400217 	ldw	r5,8(sp)
1000fffc:	d9800717 	ldw	r6,28(sp)
10010000:	da400417 	ldw	r9,16(sp)
10010004:	da800317 	ldw	r10,12(sp)
10010008:	113ffd44 	addi	r4,r2,-11
1001000c:	00c00704 	movi	r3,28
10010010:	19011016 	blt	r3,r4,10010454 <__muldf3+0x6d4>
10010014:	00c00744 	movi	r3,29
10010018:	14bffe04 	addi	r18,r2,-8
1001001c:	1907c83a 	sub	r3,r3,r4
10010020:	8ca2983a 	sll	r17,r17,r18
10010024:	30c6d83a 	srl	r3,r6,r3
10010028:	34a4983a 	sll	r18,r6,r18
1001002c:	1c62b03a 	or	r17,r3,r17
10010030:	1080fcc4 	addi	r2,r2,1011
10010034:	0085c83a 	sub	r2,zero,r2
10010038:	000f883a 	mov	r7,zero
1001003c:	003f8106 	br	1000fe44 <__alt_data_end+0xf800fe44>
10010040:	3027883a 	mov	r19,r6
10010044:	0081ffc4 	movi	r2,2047
10010048:	0021883a 	mov	r16,zero
1001004c:	002d883a 	mov	r22,zero
10010050:	003faa06 	br	1000fefc <__alt_data_end+0xf800fefc>
10010054:	0023883a 	mov	r17,zero
10010058:	0025883a 	mov	r18,zero
1001005c:	01c00044 	movi	r7,1
10010060:	003f7806 	br	1000fe44 <__alt_data_end+0xf800fe44>
10010064:	01c000c4 	movi	r7,3
10010068:	003f7606 	br	1000fe44 <__alt_data_end+0xf800fe44>
1001006c:	05400104 	movi	r21,4
10010070:	0021883a 	mov	r16,zero
10010074:	002d883a 	mov	r22,zero
10010078:	01400044 	movi	r5,1
1001007c:	003f5f06 	br	1000fdfc <__alt_data_end+0xf800fdfc>
10010080:	05400304 	movi	r21,12
10010084:	014000c4 	movi	r5,3
10010088:	003f5c06 	br	1000fdfc <__alt_data_end+0xf800fdfc>
1001008c:	04000434 	movhi	r16,16
10010090:	0027883a 	mov	r19,zero
10010094:	843fffc4 	addi	r16,r16,-1
10010098:	05bfffc4 	movi	r22,-1
1001009c:	0081ffc4 	movi	r2,2047
100100a0:	003f9606 	br	1000fefc <__alt_data_end+0xf800fefc>
100100a4:	8023883a 	mov	r17,r16
100100a8:	b025883a 	mov	r18,r22
100100ac:	280f883a 	mov	r7,r5
100100b0:	003f8806 	br	1000fed4 <__alt_data_end+0xf800fed4>
100100b4:	8023883a 	mov	r17,r16
100100b8:	b025883a 	mov	r18,r22
100100bc:	480d883a 	mov	r6,r9
100100c0:	280f883a 	mov	r7,r5
100100c4:	003f8306 	br	1000fed4 <__alt_data_end+0xf800fed4>
100100c8:	b026d43a 	srli	r19,r22,16
100100cc:	902ed43a 	srli	r23,r18,16
100100d0:	b5bfffcc 	andi	r22,r22,65535
100100d4:	94bfffcc 	andi	r18,r18,65535
100100d8:	b00b883a 	mov	r5,r22
100100dc:	9009883a 	mov	r4,r18
100100e0:	d8c00515 	stw	r3,20(sp)
100100e4:	d9800715 	stw	r6,28(sp)
100100e8:	da000615 	stw	r8,24(sp)
100100ec:	000e8840 	call	1000e884 <__mulsi3>
100100f0:	980b883a 	mov	r5,r19
100100f4:	9009883a 	mov	r4,r18
100100f8:	1029883a 	mov	r20,r2
100100fc:	000e8840 	call	1000e884 <__mulsi3>
10010100:	b80b883a 	mov	r5,r23
10010104:	9809883a 	mov	r4,r19
10010108:	102b883a 	mov	r21,r2
1001010c:	000e8840 	call	1000e884 <__mulsi3>
10010110:	b809883a 	mov	r4,r23
10010114:	b00b883a 	mov	r5,r22
10010118:	1039883a 	mov	fp,r2
1001011c:	000e8840 	call	1000e884 <__mulsi3>
10010120:	a008d43a 	srli	r4,r20,16
10010124:	1545883a 	add	r2,r2,r21
10010128:	d8c00517 	ldw	r3,20(sp)
1001012c:	2085883a 	add	r2,r4,r2
10010130:	d9800717 	ldw	r6,28(sp)
10010134:	da000617 	ldw	r8,24(sp)
10010138:	1540022e 	bgeu	r2,r21,10010144 <__muldf3+0x3c4>
1001013c:	01000074 	movhi	r4,1
10010140:	e139883a 	add	fp,fp,r4
10010144:	100e943a 	slli	r7,r2,16
10010148:	1004d43a 	srli	r2,r2,16
1001014c:	882ad43a 	srli	r21,r17,16
10010150:	a53fffcc 	andi	r20,r20,65535
10010154:	8c7fffcc 	andi	r17,r17,65535
10010158:	3d29883a 	add	r20,r7,r20
1001015c:	b00b883a 	mov	r5,r22
10010160:	8809883a 	mov	r4,r17
10010164:	d8c00515 	stw	r3,20(sp)
10010168:	d9800715 	stw	r6,28(sp)
1001016c:	da000615 	stw	r8,24(sp)
10010170:	dd000115 	stw	r20,4(sp)
10010174:	d8800015 	stw	r2,0(sp)
10010178:	000e8840 	call	1000e884 <__mulsi3>
1001017c:	980b883a 	mov	r5,r19
10010180:	8809883a 	mov	r4,r17
10010184:	d8800215 	stw	r2,8(sp)
10010188:	000e8840 	call	1000e884 <__mulsi3>
1001018c:	9809883a 	mov	r4,r19
10010190:	a80b883a 	mov	r5,r21
10010194:	1029883a 	mov	r20,r2
10010198:	000e8840 	call	1000e884 <__mulsi3>
1001019c:	b00b883a 	mov	r5,r22
100101a0:	a809883a 	mov	r4,r21
100101a4:	d8800415 	stw	r2,16(sp)
100101a8:	000e8840 	call	1000e884 <__mulsi3>
100101ac:	d9c00217 	ldw	r7,8(sp)
100101b0:	1505883a 	add	r2,r2,r20
100101b4:	d8c00517 	ldw	r3,20(sp)
100101b8:	3826d43a 	srli	r19,r7,16
100101bc:	d9800717 	ldw	r6,28(sp)
100101c0:	da000617 	ldw	r8,24(sp)
100101c4:	9885883a 	add	r2,r19,r2
100101c8:	da400417 	ldw	r9,16(sp)
100101cc:	1500022e 	bgeu	r2,r20,100101d8 <__muldf3+0x458>
100101d0:	01000074 	movhi	r4,1
100101d4:	4913883a 	add	r9,r9,r4
100101d8:	1028d43a 	srli	r20,r2,16
100101dc:	1004943a 	slli	r2,r2,16
100101e0:	802cd43a 	srli	r22,r16,16
100101e4:	843fffcc 	andi	r16,r16,65535
100101e8:	3cffffcc 	andi	r19,r7,65535
100101ec:	9009883a 	mov	r4,r18
100101f0:	800b883a 	mov	r5,r16
100101f4:	a269883a 	add	r20,r20,r9
100101f8:	d8c00515 	stw	r3,20(sp)
100101fc:	d9800715 	stw	r6,28(sp)
10010200:	da000615 	stw	r8,24(sp)
10010204:	14e7883a 	add	r19,r2,r19
10010208:	000e8840 	call	1000e884 <__mulsi3>
1001020c:	9009883a 	mov	r4,r18
10010210:	b00b883a 	mov	r5,r22
10010214:	d8800315 	stw	r2,12(sp)
10010218:	000e8840 	call	1000e884 <__mulsi3>
1001021c:	b809883a 	mov	r4,r23
10010220:	b00b883a 	mov	r5,r22
10010224:	d8800215 	stw	r2,8(sp)
10010228:	000e8840 	call	1000e884 <__mulsi3>
1001022c:	b80b883a 	mov	r5,r23
10010230:	8009883a 	mov	r4,r16
10010234:	d8800415 	stw	r2,16(sp)
10010238:	000e8840 	call	1000e884 <__mulsi3>
1001023c:	da800317 	ldw	r10,12(sp)
10010240:	d9c00217 	ldw	r7,8(sp)
10010244:	d9000017 	ldw	r4,0(sp)
10010248:	502ed43a 	srli	r23,r10,16
1001024c:	11c5883a 	add	r2,r2,r7
10010250:	24e5883a 	add	r18,r4,r19
10010254:	b885883a 	add	r2,r23,r2
10010258:	d8c00517 	ldw	r3,20(sp)
1001025c:	d9800717 	ldw	r6,28(sp)
10010260:	da000617 	ldw	r8,24(sp)
10010264:	da400417 	ldw	r9,16(sp)
10010268:	11c0022e 	bgeu	r2,r7,10010274 <__muldf3+0x4f4>
1001026c:	01000074 	movhi	r4,1
10010270:	4913883a 	add	r9,r9,r4
10010274:	100ed43a 	srli	r7,r2,16
10010278:	1004943a 	slli	r2,r2,16
1001027c:	55ffffcc 	andi	r23,r10,65535
10010280:	3a53883a 	add	r9,r7,r9
10010284:	8809883a 	mov	r4,r17
10010288:	800b883a 	mov	r5,r16
1001028c:	d8c00515 	stw	r3,20(sp)
10010290:	d9800715 	stw	r6,28(sp)
10010294:	da000615 	stw	r8,24(sp)
10010298:	da400415 	stw	r9,16(sp)
1001029c:	15ef883a 	add	r23,r2,r23
100102a0:	000e8840 	call	1000e884 <__mulsi3>
100102a4:	8809883a 	mov	r4,r17
100102a8:	b00b883a 	mov	r5,r22
100102ac:	d8800215 	stw	r2,8(sp)
100102b0:	000e8840 	call	1000e884 <__mulsi3>
100102b4:	b00b883a 	mov	r5,r22
100102b8:	a809883a 	mov	r4,r21
100102bc:	d8800315 	stw	r2,12(sp)
100102c0:	000e8840 	call	1000e884 <__mulsi3>
100102c4:	8009883a 	mov	r4,r16
100102c8:	a80b883a 	mov	r5,r21
100102cc:	1023883a 	mov	r17,r2
100102d0:	000e8840 	call	1000e884 <__mulsi3>
100102d4:	d9c00217 	ldw	r7,8(sp)
100102d8:	da800317 	ldw	r10,12(sp)
100102dc:	d8c00517 	ldw	r3,20(sp)
100102e0:	3808d43a 	srli	r4,r7,16
100102e4:	1285883a 	add	r2,r2,r10
100102e8:	d9800717 	ldw	r6,28(sp)
100102ec:	2085883a 	add	r2,r4,r2
100102f0:	da000617 	ldw	r8,24(sp)
100102f4:	da400417 	ldw	r9,16(sp)
100102f8:	1280022e 	bgeu	r2,r10,10010304 <__muldf3+0x584>
100102fc:	01000074 	movhi	r4,1
10010300:	8923883a 	add	r17,r17,r4
10010304:	1008943a 	slli	r4,r2,16
10010308:	39ffffcc 	andi	r7,r7,65535
1001030c:	e4b9883a 	add	fp,fp,r18
10010310:	21cf883a 	add	r7,r4,r7
10010314:	e4e7803a 	cmpltu	r19,fp,r19
10010318:	3d0f883a 	add	r7,r7,r20
1001031c:	bf39883a 	add	fp,r23,fp
10010320:	99c9883a 	add	r4,r19,r7
10010324:	e5ef803a 	cmpltu	r23,fp,r23
10010328:	490b883a 	add	r5,r9,r4
1001032c:	1004d43a 	srli	r2,r2,16
10010330:	b965883a 	add	r18,r23,r5
10010334:	24c9803a 	cmpltu	r4,r4,r19
10010338:	3d29803a 	cmpltu	r20,r7,r20
1001033c:	a128b03a 	or	r20,r20,r4
10010340:	95ef803a 	cmpltu	r23,r18,r23
10010344:	2a53803a 	cmpltu	r9,r5,r9
10010348:	a0a9883a 	add	r20,r20,r2
1001034c:	4deeb03a 	or	r23,r9,r23
10010350:	a5ef883a 	add	r23,r20,r23
10010354:	bc63883a 	add	r17,r23,r17
10010358:	e004927a 	slli	r2,fp,9
1001035c:	d9000117 	ldw	r4,4(sp)
10010360:	882e927a 	slli	r23,r17,9
10010364:	9022d5fa 	srli	r17,r18,23
10010368:	e038d5fa 	srli	fp,fp,23
1001036c:	1104b03a 	or	r2,r2,r4
10010370:	9024927a 	slli	r18,r18,9
10010374:	1004c03a 	cmpne	r2,r2,zero
10010378:	bc62b03a 	or	r17,r23,r17
1001037c:	1738b03a 	or	fp,r2,fp
10010380:	8880402c 	andhi	r2,r17,256
10010384:	e4a4b03a 	or	r18,fp,r18
10010388:	10000726 	beq	r2,zero,100103a8 <__muldf3+0x628>
1001038c:	9006d07a 	srli	r3,r18,1
10010390:	880497fa 	slli	r2,r17,31
10010394:	9480004c 	andi	r18,r18,1
10010398:	8822d07a 	srli	r17,r17,1
1001039c:	1ca4b03a 	or	r18,r3,r18
100103a0:	14a4b03a 	or	r18,r2,r18
100103a4:	4007883a 	mov	r3,r8
100103a8:	1880ffc4 	addi	r2,r3,1023
100103ac:	0080460e 	bge	zero,r2,100104c8 <__muldf3+0x748>
100103b0:	910001cc 	andi	r4,r18,7
100103b4:	20000726 	beq	r4,zero,100103d4 <__muldf3+0x654>
100103b8:	910003cc 	andi	r4,r18,15
100103bc:	01400104 	movi	r5,4
100103c0:	21400426 	beq	r4,r5,100103d4 <__muldf3+0x654>
100103c4:	9149883a 	add	r4,r18,r5
100103c8:	24a5803a 	cmpltu	r18,r4,r18
100103cc:	8ca3883a 	add	r17,r17,r18
100103d0:	2025883a 	mov	r18,r4
100103d4:	8900402c 	andhi	r4,r17,256
100103d8:	20000426 	beq	r4,zero,100103ec <__muldf3+0x66c>
100103dc:	18810004 	addi	r2,r3,1024
100103e0:	00ffc034 	movhi	r3,65280
100103e4:	18ffffc4 	addi	r3,r3,-1
100103e8:	88e2703a 	and	r17,r17,r3
100103ec:	00c1ff84 	movi	r3,2046
100103f0:	18bf1316 	blt	r3,r2,10010040 <__alt_data_end+0xf8010040>
100103f4:	882c977a 	slli	r22,r17,29
100103f8:	9024d0fa 	srli	r18,r18,3
100103fc:	8822927a 	slli	r17,r17,9
10010400:	1081ffcc 	andi	r2,r2,2047
10010404:	b4acb03a 	or	r22,r22,r18
10010408:	8820d33a 	srli	r16,r17,12
1001040c:	3027883a 	mov	r19,r6
10010410:	003eba06 	br	1000fefc <__alt_data_end+0xf800fefc>
10010414:	8080022c 	andhi	r2,r16,8
10010418:	10000926 	beq	r2,zero,10010440 <__muldf3+0x6c0>
1001041c:	8880022c 	andhi	r2,r17,8
10010420:	1000071e 	bne	r2,zero,10010440 <__muldf3+0x6c0>
10010424:	00800434 	movhi	r2,16
10010428:	8c000234 	orhi	r16,r17,8
1001042c:	10bfffc4 	addi	r2,r2,-1
10010430:	e027883a 	mov	r19,fp
10010434:	80a0703a 	and	r16,r16,r2
10010438:	902d883a 	mov	r22,r18
1001043c:	003f1706 	br	1001009c <__alt_data_end+0xf801009c>
10010440:	00800434 	movhi	r2,16
10010444:	84000234 	orhi	r16,r16,8
10010448:	10bfffc4 	addi	r2,r2,-1
1001044c:	80a0703a 	and	r16,r16,r2
10010450:	003f1206 	br	1001009c <__alt_data_end+0xf801009c>
10010454:	147ff604 	addi	r17,r2,-40
10010458:	3462983a 	sll	r17,r6,r17
1001045c:	0025883a 	mov	r18,zero
10010460:	003ef306 	br	10010030 <__alt_data_end+0xf8010030>
10010464:	3009883a 	mov	r4,r6
10010468:	d9400215 	stw	r5,8(sp)
1001046c:	d9800715 	stw	r6,28(sp)
10010470:	da400415 	stw	r9,16(sp)
10010474:	da800315 	stw	r10,12(sp)
10010478:	00110ec0 	call	100110ec <__clzsi2>
1001047c:	10800804 	addi	r2,r2,32
10010480:	da800317 	ldw	r10,12(sp)
10010484:	da400417 	ldw	r9,16(sp)
10010488:	d9800717 	ldw	r6,28(sp)
1001048c:	d9400217 	ldw	r5,8(sp)
10010490:	003edd06 	br	10010008 <__alt_data_end+0xf8010008>
10010494:	143ff604 	addi	r16,r2,-40
10010498:	ac20983a 	sll	r16,r21,r16
1001049c:	002d883a 	mov	r22,zero
100104a0:	003ec106 	br	1000ffa8 <__alt_data_end+0xf800ffa8>
100104a4:	d9800715 	stw	r6,28(sp)
100104a8:	d9c00215 	stw	r7,8(sp)
100104ac:	da400415 	stw	r9,16(sp)
100104b0:	00110ec0 	call	100110ec <__clzsi2>
100104b4:	10800804 	addi	r2,r2,32
100104b8:	da400417 	ldw	r9,16(sp)
100104bc:	d9c00217 	ldw	r7,8(sp)
100104c0:	d9800717 	ldw	r6,28(sp)
100104c4:	003eae06 	br	1000ff80 <__alt_data_end+0xf800ff80>
100104c8:	00c00044 	movi	r3,1
100104cc:	1887c83a 	sub	r3,r3,r2
100104d0:	01000e04 	movi	r4,56
100104d4:	20fe8516 	blt	r4,r3,1000feec <__alt_data_end+0xf800feec>
100104d8:	010007c4 	movi	r4,31
100104dc:	20c01b16 	blt	r4,r3,1001054c <__muldf3+0x7cc>
100104e0:	00800804 	movi	r2,32
100104e4:	10c5c83a 	sub	r2,r2,r3
100104e8:	888a983a 	sll	r5,r17,r2
100104ec:	90c8d83a 	srl	r4,r18,r3
100104f0:	9084983a 	sll	r2,r18,r2
100104f4:	88e2d83a 	srl	r17,r17,r3
100104f8:	2906b03a 	or	r3,r5,r4
100104fc:	1004c03a 	cmpne	r2,r2,zero
10010500:	1886b03a 	or	r3,r3,r2
10010504:	188001cc 	andi	r2,r3,7
10010508:	10000726 	beq	r2,zero,10010528 <__muldf3+0x7a8>
1001050c:	188003cc 	andi	r2,r3,15
10010510:	01000104 	movi	r4,4
10010514:	11000426 	beq	r2,r4,10010528 <__muldf3+0x7a8>
10010518:	1805883a 	mov	r2,r3
1001051c:	10c00104 	addi	r3,r2,4
10010520:	1885803a 	cmpltu	r2,r3,r2
10010524:	88a3883a 	add	r17,r17,r2
10010528:	8880202c 	andhi	r2,r17,128
1001052c:	10001c26 	beq	r2,zero,100105a0 <__muldf3+0x820>
10010530:	3027883a 	mov	r19,r6
10010534:	00800044 	movi	r2,1
10010538:	0021883a 	mov	r16,zero
1001053c:	002d883a 	mov	r22,zero
10010540:	003e6e06 	br	1000fefc <__alt_data_end+0xf800fefc>
10010544:	4007883a 	mov	r3,r8
10010548:	003f9706 	br	100103a8 <__alt_data_end+0xf80103a8>
1001054c:	017ff844 	movi	r5,-31
10010550:	2885c83a 	sub	r2,r5,r2
10010554:	888ad83a 	srl	r5,r17,r2
10010558:	00800804 	movi	r2,32
1001055c:	18801a26 	beq	r3,r2,100105c8 <__muldf3+0x848>
10010560:	01001004 	movi	r4,64
10010564:	20c7c83a 	sub	r3,r4,r3
10010568:	88e2983a 	sll	r17,r17,r3
1001056c:	8ca4b03a 	or	r18,r17,r18
10010570:	9004c03a 	cmpne	r2,r18,zero
10010574:	2884b03a 	or	r2,r5,r2
10010578:	144001cc 	andi	r17,r2,7
1001057c:	88000d1e 	bne	r17,zero,100105b4 <__muldf3+0x834>
10010580:	0021883a 	mov	r16,zero
10010584:	102cd0fa 	srli	r22,r2,3
10010588:	3027883a 	mov	r19,r6
1001058c:	0005883a 	mov	r2,zero
10010590:	b46cb03a 	or	r22,r22,r17
10010594:	003e5906 	br	1000fefc <__alt_data_end+0xf800fefc>
10010598:	1007883a 	mov	r3,r2
1001059c:	0023883a 	mov	r17,zero
100105a0:	8820927a 	slli	r16,r17,9
100105a4:	1805883a 	mov	r2,r3
100105a8:	8822977a 	slli	r17,r17,29
100105ac:	8020d33a 	srli	r16,r16,12
100105b0:	003ff406 	br	10010584 <__alt_data_end+0xf8010584>
100105b4:	10c003cc 	andi	r3,r2,15
100105b8:	01000104 	movi	r4,4
100105bc:	193ff626 	beq	r3,r4,10010598 <__alt_data_end+0xf8010598>
100105c0:	0023883a 	mov	r17,zero
100105c4:	003fd506 	br	1001051c <__alt_data_end+0xf801051c>
100105c8:	0023883a 	mov	r17,zero
100105cc:	003fe706 	br	1001056c <__alt_data_end+0xf801056c>
100105d0:	00800434 	movhi	r2,16
100105d4:	8c000234 	orhi	r16,r17,8
100105d8:	10bfffc4 	addi	r2,r2,-1
100105dc:	3027883a 	mov	r19,r6
100105e0:	80a0703a 	and	r16,r16,r2
100105e4:	902d883a 	mov	r22,r18
100105e8:	003eac06 	br	1001009c <__alt_data_end+0xf801009c>

100105ec <__subdf3>:
100105ec:	02000434 	movhi	r8,16
100105f0:	423fffc4 	addi	r8,r8,-1
100105f4:	defffb04 	addi	sp,sp,-20
100105f8:	2a14703a 	and	r10,r5,r8
100105fc:	3812d53a 	srli	r9,r7,20
10010600:	3a10703a 	and	r8,r7,r8
10010604:	2006d77a 	srli	r3,r4,29
10010608:	3004d77a 	srli	r2,r6,29
1001060c:	dc000015 	stw	r16,0(sp)
10010610:	501490fa 	slli	r10,r10,3
10010614:	2820d53a 	srli	r16,r5,20
10010618:	401090fa 	slli	r8,r8,3
1001061c:	dc800215 	stw	r18,8(sp)
10010620:	dc400115 	stw	r17,4(sp)
10010624:	dfc00415 	stw	ra,16(sp)
10010628:	202290fa 	slli	r17,r4,3
1001062c:	dcc00315 	stw	r19,12(sp)
10010630:	4a41ffcc 	andi	r9,r9,2047
10010634:	0101ffc4 	movi	r4,2047
10010638:	2824d7fa 	srli	r18,r5,31
1001063c:	8401ffcc 	andi	r16,r16,2047
10010640:	50c6b03a 	or	r3,r10,r3
10010644:	380ed7fa 	srli	r7,r7,31
10010648:	408ab03a 	or	r5,r8,r2
1001064c:	300c90fa 	slli	r6,r6,3
10010650:	49009626 	beq	r9,r4,100108ac <__subdf3+0x2c0>
10010654:	39c0005c 	xori	r7,r7,1
10010658:	8245c83a 	sub	r2,r16,r9
1001065c:	3c807426 	beq	r7,r18,10010830 <__subdf3+0x244>
10010660:	0080af0e 	bge	zero,r2,10010920 <__subdf3+0x334>
10010664:	48002a1e 	bne	r9,zero,10010710 <__subdf3+0x124>
10010668:	2988b03a 	or	r4,r5,r6
1001066c:	20009a1e 	bne	r4,zero,100108d8 <__subdf3+0x2ec>
10010670:	888001cc 	andi	r2,r17,7
10010674:	10000726 	beq	r2,zero,10010694 <__subdf3+0xa8>
10010678:	888003cc 	andi	r2,r17,15
1001067c:	01000104 	movi	r4,4
10010680:	11000426 	beq	r2,r4,10010694 <__subdf3+0xa8>
10010684:	890b883a 	add	r5,r17,r4
10010688:	2c63803a 	cmpltu	r17,r5,r17
1001068c:	1c47883a 	add	r3,r3,r17
10010690:	2823883a 	mov	r17,r5
10010694:	1880202c 	andhi	r2,r3,128
10010698:	10005926 	beq	r2,zero,10010800 <__subdf3+0x214>
1001069c:	84000044 	addi	r16,r16,1
100106a0:	0081ffc4 	movi	r2,2047
100106a4:	8080be26 	beq	r16,r2,100109a0 <__subdf3+0x3b4>
100106a8:	017fe034 	movhi	r5,65408
100106ac:	297fffc4 	addi	r5,r5,-1
100106b0:	1946703a 	and	r3,r3,r5
100106b4:	1804977a 	slli	r2,r3,29
100106b8:	1806927a 	slli	r3,r3,9
100106bc:	8822d0fa 	srli	r17,r17,3
100106c0:	8401ffcc 	andi	r16,r16,2047
100106c4:	180ad33a 	srli	r5,r3,12
100106c8:	9100004c 	andi	r4,r18,1
100106cc:	1444b03a 	or	r2,r2,r17
100106d0:	80c1ffcc 	andi	r3,r16,2047
100106d4:	1820953a 	slli	r16,r3,20
100106d8:	20c03fcc 	andi	r3,r4,255
100106dc:	180897fa 	slli	r4,r3,31
100106e0:	00c00434 	movhi	r3,16
100106e4:	18ffffc4 	addi	r3,r3,-1
100106e8:	28c6703a 	and	r3,r5,r3
100106ec:	1c06b03a 	or	r3,r3,r16
100106f0:	1906b03a 	or	r3,r3,r4
100106f4:	dfc00417 	ldw	ra,16(sp)
100106f8:	dcc00317 	ldw	r19,12(sp)
100106fc:	dc800217 	ldw	r18,8(sp)
10010700:	dc400117 	ldw	r17,4(sp)
10010704:	dc000017 	ldw	r16,0(sp)
10010708:	dec00504 	addi	sp,sp,20
1001070c:	f800283a 	ret
10010710:	0101ffc4 	movi	r4,2047
10010714:	813fd626 	beq	r16,r4,10010670 <__alt_data_end+0xf8010670>
10010718:	29402034 	orhi	r5,r5,128
1001071c:	01000e04 	movi	r4,56
10010720:	2080a316 	blt	r4,r2,100109b0 <__subdf3+0x3c4>
10010724:	010007c4 	movi	r4,31
10010728:	2080c616 	blt	r4,r2,10010a44 <__subdf3+0x458>
1001072c:	01000804 	movi	r4,32
10010730:	2089c83a 	sub	r4,r4,r2
10010734:	2910983a 	sll	r8,r5,r4
10010738:	308ed83a 	srl	r7,r6,r2
1001073c:	3108983a 	sll	r4,r6,r4
10010740:	2884d83a 	srl	r2,r5,r2
10010744:	41ccb03a 	or	r6,r8,r7
10010748:	2008c03a 	cmpne	r4,r4,zero
1001074c:	310cb03a 	or	r6,r6,r4
10010750:	898dc83a 	sub	r6,r17,r6
10010754:	89a3803a 	cmpltu	r17,r17,r6
10010758:	1887c83a 	sub	r3,r3,r2
1001075c:	1c47c83a 	sub	r3,r3,r17
10010760:	3023883a 	mov	r17,r6
10010764:	1880202c 	andhi	r2,r3,128
10010768:	10002326 	beq	r2,zero,100107f8 <__subdf3+0x20c>
1001076c:	04c02034 	movhi	r19,128
10010770:	9cffffc4 	addi	r19,r19,-1
10010774:	1ce6703a 	and	r19,r3,r19
10010778:	98007a26 	beq	r19,zero,10010964 <__subdf3+0x378>
1001077c:	9809883a 	mov	r4,r19
10010780:	00110ec0 	call	100110ec <__clzsi2>
10010784:	113ffe04 	addi	r4,r2,-8
10010788:	00c007c4 	movi	r3,31
1001078c:	19007b16 	blt	r3,r4,1001097c <__subdf3+0x390>
10010790:	00800804 	movi	r2,32
10010794:	1105c83a 	sub	r2,r2,r4
10010798:	8884d83a 	srl	r2,r17,r2
1001079c:	9906983a 	sll	r3,r19,r4
100107a0:	8922983a 	sll	r17,r17,r4
100107a4:	10c4b03a 	or	r2,r2,r3
100107a8:	24007816 	blt	r4,r16,1001098c <__subdf3+0x3a0>
100107ac:	2421c83a 	sub	r16,r4,r16
100107b0:	80c00044 	addi	r3,r16,1
100107b4:	010007c4 	movi	r4,31
100107b8:	20c09516 	blt	r4,r3,10010a10 <__subdf3+0x424>
100107bc:	01400804 	movi	r5,32
100107c0:	28cbc83a 	sub	r5,r5,r3
100107c4:	88c8d83a 	srl	r4,r17,r3
100107c8:	8962983a 	sll	r17,r17,r5
100107cc:	114a983a 	sll	r5,r2,r5
100107d0:	10c6d83a 	srl	r3,r2,r3
100107d4:	8804c03a 	cmpne	r2,r17,zero
100107d8:	290ab03a 	or	r5,r5,r4
100107dc:	28a2b03a 	or	r17,r5,r2
100107e0:	0021883a 	mov	r16,zero
100107e4:	003fa206 	br	10010670 <__alt_data_end+0xf8010670>
100107e8:	2090b03a 	or	r8,r4,r2
100107ec:	40018e26 	beq	r8,zero,10010e28 <__subdf3+0x83c>
100107f0:	1007883a 	mov	r3,r2
100107f4:	2023883a 	mov	r17,r4
100107f8:	888001cc 	andi	r2,r17,7
100107fc:	103f9e1e 	bne	r2,zero,10010678 <__alt_data_end+0xf8010678>
10010800:	1804977a 	slli	r2,r3,29
10010804:	8822d0fa 	srli	r17,r17,3
10010808:	1810d0fa 	srli	r8,r3,3
1001080c:	9100004c 	andi	r4,r18,1
10010810:	1444b03a 	or	r2,r2,r17
10010814:	00c1ffc4 	movi	r3,2047
10010818:	80c02826 	beq	r16,r3,100108bc <__subdf3+0x2d0>
1001081c:	01400434 	movhi	r5,16
10010820:	297fffc4 	addi	r5,r5,-1
10010824:	80e0703a 	and	r16,r16,r3
10010828:	414a703a 	and	r5,r8,r5
1001082c:	003fa806 	br	100106d0 <__alt_data_end+0xf80106d0>
10010830:	0080630e 	bge	zero,r2,100109c0 <__subdf3+0x3d4>
10010834:	48003026 	beq	r9,zero,100108f8 <__subdf3+0x30c>
10010838:	0101ffc4 	movi	r4,2047
1001083c:	813f8c26 	beq	r16,r4,10010670 <__alt_data_end+0xf8010670>
10010840:	29402034 	orhi	r5,r5,128
10010844:	01000e04 	movi	r4,56
10010848:	2080a90e 	bge	r4,r2,10010af0 <__subdf3+0x504>
1001084c:	298cb03a 	or	r6,r5,r6
10010850:	3012c03a 	cmpne	r9,r6,zero
10010854:	0005883a 	mov	r2,zero
10010858:	4c53883a 	add	r9,r9,r17
1001085c:	4c63803a 	cmpltu	r17,r9,r17
10010860:	10c7883a 	add	r3,r2,r3
10010864:	88c7883a 	add	r3,r17,r3
10010868:	4823883a 	mov	r17,r9
1001086c:	1880202c 	andhi	r2,r3,128
10010870:	1000d026 	beq	r2,zero,10010bb4 <__subdf3+0x5c8>
10010874:	84000044 	addi	r16,r16,1
10010878:	0081ffc4 	movi	r2,2047
1001087c:	8080fe26 	beq	r16,r2,10010c78 <__subdf3+0x68c>
10010880:	00bfe034 	movhi	r2,65408
10010884:	10bfffc4 	addi	r2,r2,-1
10010888:	1886703a 	and	r3,r3,r2
1001088c:	880ad07a 	srli	r5,r17,1
10010890:	180497fa 	slli	r2,r3,31
10010894:	8900004c 	andi	r4,r17,1
10010898:	2922b03a 	or	r17,r5,r4
1001089c:	1806d07a 	srli	r3,r3,1
100108a0:	1462b03a 	or	r17,r2,r17
100108a4:	3825883a 	mov	r18,r7
100108a8:	003f7106 	br	10010670 <__alt_data_end+0xf8010670>
100108ac:	2984b03a 	or	r2,r5,r6
100108b0:	103f6826 	beq	r2,zero,10010654 <__alt_data_end+0xf8010654>
100108b4:	39c03fcc 	andi	r7,r7,255
100108b8:	003f6706 	br	10010658 <__alt_data_end+0xf8010658>
100108bc:	4086b03a 	or	r3,r8,r2
100108c0:	18015226 	beq	r3,zero,10010e0c <__subdf3+0x820>
100108c4:	00c00434 	movhi	r3,16
100108c8:	41400234 	orhi	r5,r8,8
100108cc:	18ffffc4 	addi	r3,r3,-1
100108d0:	28ca703a 	and	r5,r5,r3
100108d4:	003f7e06 	br	100106d0 <__alt_data_end+0xf80106d0>
100108d8:	10bfffc4 	addi	r2,r2,-1
100108dc:	1000491e 	bne	r2,zero,10010a04 <__subdf3+0x418>
100108e0:	898fc83a 	sub	r7,r17,r6
100108e4:	89e3803a 	cmpltu	r17,r17,r7
100108e8:	1947c83a 	sub	r3,r3,r5
100108ec:	1c47c83a 	sub	r3,r3,r17
100108f0:	3823883a 	mov	r17,r7
100108f4:	003f9b06 	br	10010764 <__alt_data_end+0xf8010764>
100108f8:	2988b03a 	or	r4,r5,r6
100108fc:	203f5c26 	beq	r4,zero,10010670 <__alt_data_end+0xf8010670>
10010900:	10bfffc4 	addi	r2,r2,-1
10010904:	1000931e 	bne	r2,zero,10010b54 <__subdf3+0x568>
10010908:	898d883a 	add	r6,r17,r6
1001090c:	3463803a 	cmpltu	r17,r6,r17
10010910:	1947883a 	add	r3,r3,r5
10010914:	88c7883a 	add	r3,r17,r3
10010918:	3023883a 	mov	r17,r6
1001091c:	003fd306 	br	1001086c <__alt_data_end+0xf801086c>
10010920:	1000541e 	bne	r2,zero,10010a74 <__subdf3+0x488>
10010924:	80800044 	addi	r2,r16,1
10010928:	1081ffcc 	andi	r2,r2,2047
1001092c:	01000044 	movi	r4,1
10010930:	2080a20e 	bge	r4,r2,10010bbc <__subdf3+0x5d0>
10010934:	8989c83a 	sub	r4,r17,r6
10010938:	8905803a 	cmpltu	r2,r17,r4
1001093c:	1967c83a 	sub	r19,r3,r5
10010940:	98a7c83a 	sub	r19,r19,r2
10010944:	9880202c 	andhi	r2,r19,128
10010948:	10006326 	beq	r2,zero,10010ad8 <__subdf3+0x4ec>
1001094c:	3463c83a 	sub	r17,r6,r17
10010950:	28c7c83a 	sub	r3,r5,r3
10010954:	344d803a 	cmpltu	r6,r6,r17
10010958:	19a7c83a 	sub	r19,r3,r6
1001095c:	3825883a 	mov	r18,r7
10010960:	983f861e 	bne	r19,zero,1001077c <__alt_data_end+0xf801077c>
10010964:	8809883a 	mov	r4,r17
10010968:	00110ec0 	call	100110ec <__clzsi2>
1001096c:	10800804 	addi	r2,r2,32
10010970:	113ffe04 	addi	r4,r2,-8
10010974:	00c007c4 	movi	r3,31
10010978:	193f850e 	bge	r3,r4,10010790 <__alt_data_end+0xf8010790>
1001097c:	10bff604 	addi	r2,r2,-40
10010980:	8884983a 	sll	r2,r17,r2
10010984:	0023883a 	mov	r17,zero
10010988:	243f880e 	bge	r4,r16,100107ac <__alt_data_end+0xf80107ac>
1001098c:	00ffe034 	movhi	r3,65408
10010990:	18ffffc4 	addi	r3,r3,-1
10010994:	8121c83a 	sub	r16,r16,r4
10010998:	10c6703a 	and	r3,r2,r3
1001099c:	003f3406 	br	10010670 <__alt_data_end+0xf8010670>
100109a0:	9100004c 	andi	r4,r18,1
100109a4:	000b883a 	mov	r5,zero
100109a8:	0005883a 	mov	r2,zero
100109ac:	003f4806 	br	100106d0 <__alt_data_end+0xf80106d0>
100109b0:	298cb03a 	or	r6,r5,r6
100109b4:	300cc03a 	cmpne	r6,r6,zero
100109b8:	0005883a 	mov	r2,zero
100109bc:	003f6406 	br	10010750 <__alt_data_end+0xf8010750>
100109c0:	10009a1e 	bne	r2,zero,10010c2c <__subdf3+0x640>
100109c4:	82400044 	addi	r9,r16,1
100109c8:	4881ffcc 	andi	r2,r9,2047
100109cc:	02800044 	movi	r10,1
100109d0:	5080670e 	bge	r10,r2,10010b70 <__subdf3+0x584>
100109d4:	0081ffc4 	movi	r2,2047
100109d8:	4880af26 	beq	r9,r2,10010c98 <__subdf3+0x6ac>
100109dc:	898d883a 	add	r6,r17,r6
100109e0:	1945883a 	add	r2,r3,r5
100109e4:	3447803a 	cmpltu	r3,r6,r17
100109e8:	1887883a 	add	r3,r3,r2
100109ec:	182297fa 	slli	r17,r3,31
100109f0:	300cd07a 	srli	r6,r6,1
100109f4:	1806d07a 	srli	r3,r3,1
100109f8:	4821883a 	mov	r16,r9
100109fc:	89a2b03a 	or	r17,r17,r6
10010a00:	003f1b06 	br	10010670 <__alt_data_end+0xf8010670>
10010a04:	0101ffc4 	movi	r4,2047
10010a08:	813f441e 	bne	r16,r4,1001071c <__alt_data_end+0xf801071c>
10010a0c:	003f1806 	br	10010670 <__alt_data_end+0xf8010670>
10010a10:	843ff844 	addi	r16,r16,-31
10010a14:	01400804 	movi	r5,32
10010a18:	1408d83a 	srl	r4,r2,r16
10010a1c:	19405026 	beq	r3,r5,10010b60 <__subdf3+0x574>
10010a20:	01401004 	movi	r5,64
10010a24:	28c7c83a 	sub	r3,r5,r3
10010a28:	10c4983a 	sll	r2,r2,r3
10010a2c:	88a2b03a 	or	r17,r17,r2
10010a30:	8822c03a 	cmpne	r17,r17,zero
10010a34:	2462b03a 	or	r17,r4,r17
10010a38:	0007883a 	mov	r3,zero
10010a3c:	0021883a 	mov	r16,zero
10010a40:	003f6d06 	br	100107f8 <__alt_data_end+0xf80107f8>
10010a44:	11fff804 	addi	r7,r2,-32
10010a48:	01000804 	movi	r4,32
10010a4c:	29ced83a 	srl	r7,r5,r7
10010a50:	11004526 	beq	r2,r4,10010b68 <__subdf3+0x57c>
10010a54:	01001004 	movi	r4,64
10010a58:	2089c83a 	sub	r4,r4,r2
10010a5c:	2904983a 	sll	r2,r5,r4
10010a60:	118cb03a 	or	r6,r2,r6
10010a64:	300cc03a 	cmpne	r6,r6,zero
10010a68:	398cb03a 	or	r6,r7,r6
10010a6c:	0005883a 	mov	r2,zero
10010a70:	003f3706 	br	10010750 <__alt_data_end+0xf8010750>
10010a74:	80002a26 	beq	r16,zero,10010b20 <__subdf3+0x534>
10010a78:	0101ffc4 	movi	r4,2047
10010a7c:	49006626 	beq	r9,r4,10010c18 <__subdf3+0x62c>
10010a80:	0085c83a 	sub	r2,zero,r2
10010a84:	18c02034 	orhi	r3,r3,128
10010a88:	01000e04 	movi	r4,56
10010a8c:	20807e16 	blt	r4,r2,10010c88 <__subdf3+0x69c>
10010a90:	010007c4 	movi	r4,31
10010a94:	2080e716 	blt	r4,r2,10010e34 <__subdf3+0x848>
10010a98:	01000804 	movi	r4,32
10010a9c:	2089c83a 	sub	r4,r4,r2
10010aa0:	1914983a 	sll	r10,r3,r4
10010aa4:	8890d83a 	srl	r8,r17,r2
10010aa8:	8908983a 	sll	r4,r17,r4
10010aac:	1884d83a 	srl	r2,r3,r2
10010ab0:	5222b03a 	or	r17,r10,r8
10010ab4:	2006c03a 	cmpne	r3,r4,zero
10010ab8:	88e2b03a 	or	r17,r17,r3
10010abc:	3463c83a 	sub	r17,r6,r17
10010ac0:	2885c83a 	sub	r2,r5,r2
10010ac4:	344d803a 	cmpltu	r6,r6,r17
10010ac8:	1187c83a 	sub	r3,r2,r6
10010acc:	4821883a 	mov	r16,r9
10010ad0:	3825883a 	mov	r18,r7
10010ad4:	003f2306 	br	10010764 <__alt_data_end+0xf8010764>
10010ad8:	24d0b03a 	or	r8,r4,r19
10010adc:	40001b1e 	bne	r8,zero,10010b4c <__subdf3+0x560>
10010ae0:	0005883a 	mov	r2,zero
10010ae4:	0009883a 	mov	r4,zero
10010ae8:	0021883a 	mov	r16,zero
10010aec:	003f4906 	br	10010814 <__alt_data_end+0xf8010814>
10010af0:	010007c4 	movi	r4,31
10010af4:	20803a16 	blt	r4,r2,10010be0 <__subdf3+0x5f4>
10010af8:	01000804 	movi	r4,32
10010afc:	2089c83a 	sub	r4,r4,r2
10010b00:	2912983a 	sll	r9,r5,r4
10010b04:	3090d83a 	srl	r8,r6,r2
10010b08:	3108983a 	sll	r4,r6,r4
10010b0c:	2884d83a 	srl	r2,r5,r2
10010b10:	4a12b03a 	or	r9,r9,r8
10010b14:	2008c03a 	cmpne	r4,r4,zero
10010b18:	4912b03a 	or	r9,r9,r4
10010b1c:	003f4e06 	br	10010858 <__alt_data_end+0xf8010858>
10010b20:	1c48b03a 	or	r4,r3,r17
10010b24:	20003c26 	beq	r4,zero,10010c18 <__subdf3+0x62c>
10010b28:	0084303a 	nor	r2,zero,r2
10010b2c:	1000381e 	bne	r2,zero,10010c10 <__subdf3+0x624>
10010b30:	3463c83a 	sub	r17,r6,r17
10010b34:	28c5c83a 	sub	r2,r5,r3
10010b38:	344d803a 	cmpltu	r6,r6,r17
10010b3c:	1187c83a 	sub	r3,r2,r6
10010b40:	4821883a 	mov	r16,r9
10010b44:	3825883a 	mov	r18,r7
10010b48:	003f0606 	br	10010764 <__alt_data_end+0xf8010764>
10010b4c:	2023883a 	mov	r17,r4
10010b50:	003f0906 	br	10010778 <__alt_data_end+0xf8010778>
10010b54:	0101ffc4 	movi	r4,2047
10010b58:	813f3a1e 	bne	r16,r4,10010844 <__alt_data_end+0xf8010844>
10010b5c:	003ec406 	br	10010670 <__alt_data_end+0xf8010670>
10010b60:	0005883a 	mov	r2,zero
10010b64:	003fb106 	br	10010a2c <__alt_data_end+0xf8010a2c>
10010b68:	0005883a 	mov	r2,zero
10010b6c:	003fbc06 	br	10010a60 <__alt_data_end+0xf8010a60>
10010b70:	1c44b03a 	or	r2,r3,r17
10010b74:	80008e1e 	bne	r16,zero,10010db0 <__subdf3+0x7c4>
10010b78:	1000c826 	beq	r2,zero,10010e9c <__subdf3+0x8b0>
10010b7c:	2984b03a 	or	r2,r5,r6
10010b80:	103ebb26 	beq	r2,zero,10010670 <__alt_data_end+0xf8010670>
10010b84:	8989883a 	add	r4,r17,r6
10010b88:	1945883a 	add	r2,r3,r5
10010b8c:	2447803a 	cmpltu	r3,r4,r17
10010b90:	1887883a 	add	r3,r3,r2
10010b94:	1880202c 	andhi	r2,r3,128
10010b98:	2023883a 	mov	r17,r4
10010b9c:	103f1626 	beq	r2,zero,100107f8 <__alt_data_end+0xf80107f8>
10010ba0:	00bfe034 	movhi	r2,65408
10010ba4:	10bfffc4 	addi	r2,r2,-1
10010ba8:	5021883a 	mov	r16,r10
10010bac:	1886703a 	and	r3,r3,r2
10010bb0:	003eaf06 	br	10010670 <__alt_data_end+0xf8010670>
10010bb4:	3825883a 	mov	r18,r7
10010bb8:	003f0f06 	br	100107f8 <__alt_data_end+0xf80107f8>
10010bbc:	1c44b03a 	or	r2,r3,r17
10010bc0:	8000251e 	bne	r16,zero,10010c58 <__subdf3+0x66c>
10010bc4:	1000661e 	bne	r2,zero,10010d60 <__subdf3+0x774>
10010bc8:	2990b03a 	or	r8,r5,r6
10010bcc:	40009626 	beq	r8,zero,10010e28 <__subdf3+0x83c>
10010bd0:	2807883a 	mov	r3,r5
10010bd4:	3023883a 	mov	r17,r6
10010bd8:	3825883a 	mov	r18,r7
10010bdc:	003ea406 	br	10010670 <__alt_data_end+0xf8010670>
10010be0:	127ff804 	addi	r9,r2,-32
10010be4:	01000804 	movi	r4,32
10010be8:	2a52d83a 	srl	r9,r5,r9
10010bec:	11008c26 	beq	r2,r4,10010e20 <__subdf3+0x834>
10010bf0:	01001004 	movi	r4,64
10010bf4:	2085c83a 	sub	r2,r4,r2
10010bf8:	2884983a 	sll	r2,r5,r2
10010bfc:	118cb03a 	or	r6,r2,r6
10010c00:	300cc03a 	cmpne	r6,r6,zero
10010c04:	4992b03a 	or	r9,r9,r6
10010c08:	0005883a 	mov	r2,zero
10010c0c:	003f1206 	br	10010858 <__alt_data_end+0xf8010858>
10010c10:	0101ffc4 	movi	r4,2047
10010c14:	493f9c1e 	bne	r9,r4,10010a88 <__alt_data_end+0xf8010a88>
10010c18:	2807883a 	mov	r3,r5
10010c1c:	3023883a 	mov	r17,r6
10010c20:	4821883a 	mov	r16,r9
10010c24:	3825883a 	mov	r18,r7
10010c28:	003e9106 	br	10010670 <__alt_data_end+0xf8010670>
10010c2c:	80001f1e 	bne	r16,zero,10010cac <__subdf3+0x6c0>
10010c30:	1c48b03a 	or	r4,r3,r17
10010c34:	20005a26 	beq	r4,zero,10010da0 <__subdf3+0x7b4>
10010c38:	0084303a 	nor	r2,zero,r2
10010c3c:	1000561e 	bne	r2,zero,10010d98 <__subdf3+0x7ac>
10010c40:	89a3883a 	add	r17,r17,r6
10010c44:	1945883a 	add	r2,r3,r5
10010c48:	898d803a 	cmpltu	r6,r17,r6
10010c4c:	3087883a 	add	r3,r6,r2
10010c50:	4821883a 	mov	r16,r9
10010c54:	003f0506 	br	1001086c <__alt_data_end+0xf801086c>
10010c58:	10002b1e 	bne	r2,zero,10010d08 <__subdf3+0x71c>
10010c5c:	2984b03a 	or	r2,r5,r6
10010c60:	10008026 	beq	r2,zero,10010e64 <__subdf3+0x878>
10010c64:	2807883a 	mov	r3,r5
10010c68:	3023883a 	mov	r17,r6
10010c6c:	3825883a 	mov	r18,r7
10010c70:	0401ffc4 	movi	r16,2047
10010c74:	003e7e06 	br	10010670 <__alt_data_end+0xf8010670>
10010c78:	3809883a 	mov	r4,r7
10010c7c:	0011883a 	mov	r8,zero
10010c80:	0005883a 	mov	r2,zero
10010c84:	003ee306 	br	10010814 <__alt_data_end+0xf8010814>
10010c88:	1c62b03a 	or	r17,r3,r17
10010c8c:	8822c03a 	cmpne	r17,r17,zero
10010c90:	0005883a 	mov	r2,zero
10010c94:	003f8906 	br	10010abc <__alt_data_end+0xf8010abc>
10010c98:	3809883a 	mov	r4,r7
10010c9c:	4821883a 	mov	r16,r9
10010ca0:	0011883a 	mov	r8,zero
10010ca4:	0005883a 	mov	r2,zero
10010ca8:	003eda06 	br	10010814 <__alt_data_end+0xf8010814>
10010cac:	0101ffc4 	movi	r4,2047
10010cb0:	49003b26 	beq	r9,r4,10010da0 <__subdf3+0x7b4>
10010cb4:	0085c83a 	sub	r2,zero,r2
10010cb8:	18c02034 	orhi	r3,r3,128
10010cbc:	01000e04 	movi	r4,56
10010cc0:	20806e16 	blt	r4,r2,10010e7c <__subdf3+0x890>
10010cc4:	010007c4 	movi	r4,31
10010cc8:	20807716 	blt	r4,r2,10010ea8 <__subdf3+0x8bc>
10010ccc:	01000804 	movi	r4,32
10010cd0:	2089c83a 	sub	r4,r4,r2
10010cd4:	1914983a 	sll	r10,r3,r4
10010cd8:	8890d83a 	srl	r8,r17,r2
10010cdc:	8908983a 	sll	r4,r17,r4
10010ce0:	1884d83a 	srl	r2,r3,r2
10010ce4:	5222b03a 	or	r17,r10,r8
10010ce8:	2006c03a 	cmpne	r3,r4,zero
10010cec:	88e2b03a 	or	r17,r17,r3
10010cf0:	89a3883a 	add	r17,r17,r6
10010cf4:	1145883a 	add	r2,r2,r5
10010cf8:	898d803a 	cmpltu	r6,r17,r6
10010cfc:	3087883a 	add	r3,r6,r2
10010d00:	4821883a 	mov	r16,r9
10010d04:	003ed906 	br	1001086c <__alt_data_end+0xf801086c>
10010d08:	2984b03a 	or	r2,r5,r6
10010d0c:	10004226 	beq	r2,zero,10010e18 <__subdf3+0x82c>
10010d10:	1808d0fa 	srli	r4,r3,3
10010d14:	8822d0fa 	srli	r17,r17,3
10010d18:	1806977a 	slli	r3,r3,29
10010d1c:	2080022c 	andhi	r2,r4,8
10010d20:	1c62b03a 	or	r17,r3,r17
10010d24:	10000826 	beq	r2,zero,10010d48 <__subdf3+0x75c>
10010d28:	2812d0fa 	srli	r9,r5,3
10010d2c:	4880022c 	andhi	r2,r9,8
10010d30:	1000051e 	bne	r2,zero,10010d48 <__subdf3+0x75c>
10010d34:	300cd0fa 	srli	r6,r6,3
10010d38:	2804977a 	slli	r2,r5,29
10010d3c:	4809883a 	mov	r4,r9
10010d40:	3825883a 	mov	r18,r7
10010d44:	11a2b03a 	or	r17,r2,r6
10010d48:	8806d77a 	srli	r3,r17,29
10010d4c:	200890fa 	slli	r4,r4,3
10010d50:	882290fa 	slli	r17,r17,3
10010d54:	0401ffc4 	movi	r16,2047
10010d58:	1906b03a 	or	r3,r3,r4
10010d5c:	003e4406 	br	10010670 <__alt_data_end+0xf8010670>
10010d60:	2984b03a 	or	r2,r5,r6
10010d64:	103e4226 	beq	r2,zero,10010670 <__alt_data_end+0xf8010670>
10010d68:	8989c83a 	sub	r4,r17,r6
10010d6c:	8911803a 	cmpltu	r8,r17,r4
10010d70:	1945c83a 	sub	r2,r3,r5
10010d74:	1205c83a 	sub	r2,r2,r8
10010d78:	1200202c 	andhi	r8,r2,128
10010d7c:	403e9a26 	beq	r8,zero,100107e8 <__alt_data_end+0xf80107e8>
10010d80:	3463c83a 	sub	r17,r6,r17
10010d84:	28c5c83a 	sub	r2,r5,r3
10010d88:	344d803a 	cmpltu	r6,r6,r17
10010d8c:	1187c83a 	sub	r3,r2,r6
10010d90:	3825883a 	mov	r18,r7
10010d94:	003e3606 	br	10010670 <__alt_data_end+0xf8010670>
10010d98:	0101ffc4 	movi	r4,2047
10010d9c:	493fc71e 	bne	r9,r4,10010cbc <__alt_data_end+0xf8010cbc>
10010da0:	2807883a 	mov	r3,r5
10010da4:	3023883a 	mov	r17,r6
10010da8:	4821883a 	mov	r16,r9
10010dac:	003e3006 	br	10010670 <__alt_data_end+0xf8010670>
10010db0:	10003626 	beq	r2,zero,10010e8c <__subdf3+0x8a0>
10010db4:	2984b03a 	or	r2,r5,r6
10010db8:	10001726 	beq	r2,zero,10010e18 <__subdf3+0x82c>
10010dbc:	1808d0fa 	srli	r4,r3,3
10010dc0:	8822d0fa 	srli	r17,r17,3
10010dc4:	1806977a 	slli	r3,r3,29
10010dc8:	2080022c 	andhi	r2,r4,8
10010dcc:	1c62b03a 	or	r17,r3,r17
10010dd0:	10000726 	beq	r2,zero,10010df0 <__subdf3+0x804>
10010dd4:	2812d0fa 	srli	r9,r5,3
10010dd8:	4880022c 	andhi	r2,r9,8
10010ddc:	1000041e 	bne	r2,zero,10010df0 <__subdf3+0x804>
10010de0:	300cd0fa 	srli	r6,r6,3
10010de4:	2804977a 	slli	r2,r5,29
10010de8:	4809883a 	mov	r4,r9
10010dec:	11a2b03a 	or	r17,r2,r6
10010df0:	8806d77a 	srli	r3,r17,29
10010df4:	200890fa 	slli	r4,r4,3
10010df8:	882290fa 	slli	r17,r17,3
10010dfc:	3825883a 	mov	r18,r7
10010e00:	1906b03a 	or	r3,r3,r4
10010e04:	0401ffc4 	movi	r16,2047
10010e08:	003e1906 	br	10010670 <__alt_data_end+0xf8010670>
10010e0c:	000b883a 	mov	r5,zero
10010e10:	0005883a 	mov	r2,zero
10010e14:	003e2e06 	br	100106d0 <__alt_data_end+0xf80106d0>
10010e18:	0401ffc4 	movi	r16,2047
10010e1c:	003e1406 	br	10010670 <__alt_data_end+0xf8010670>
10010e20:	0005883a 	mov	r2,zero
10010e24:	003f7506 	br	10010bfc <__alt_data_end+0xf8010bfc>
10010e28:	0005883a 	mov	r2,zero
10010e2c:	0009883a 	mov	r4,zero
10010e30:	003e7806 	br	10010814 <__alt_data_end+0xf8010814>
10010e34:	123ff804 	addi	r8,r2,-32
10010e38:	01000804 	movi	r4,32
10010e3c:	1a10d83a 	srl	r8,r3,r8
10010e40:	11002526 	beq	r2,r4,10010ed8 <__subdf3+0x8ec>
10010e44:	01001004 	movi	r4,64
10010e48:	2085c83a 	sub	r2,r4,r2
10010e4c:	1884983a 	sll	r2,r3,r2
10010e50:	1444b03a 	or	r2,r2,r17
10010e54:	1004c03a 	cmpne	r2,r2,zero
10010e58:	40a2b03a 	or	r17,r8,r2
10010e5c:	0005883a 	mov	r2,zero
10010e60:	003f1606 	br	10010abc <__alt_data_end+0xf8010abc>
10010e64:	02000434 	movhi	r8,16
10010e68:	0009883a 	mov	r4,zero
10010e6c:	423fffc4 	addi	r8,r8,-1
10010e70:	00bfffc4 	movi	r2,-1
10010e74:	0401ffc4 	movi	r16,2047
10010e78:	003e6606 	br	10010814 <__alt_data_end+0xf8010814>
10010e7c:	1c62b03a 	or	r17,r3,r17
10010e80:	8822c03a 	cmpne	r17,r17,zero
10010e84:	0005883a 	mov	r2,zero
10010e88:	003f9906 	br	10010cf0 <__alt_data_end+0xf8010cf0>
10010e8c:	2807883a 	mov	r3,r5
10010e90:	3023883a 	mov	r17,r6
10010e94:	0401ffc4 	movi	r16,2047
10010e98:	003df506 	br	10010670 <__alt_data_end+0xf8010670>
10010e9c:	2807883a 	mov	r3,r5
10010ea0:	3023883a 	mov	r17,r6
10010ea4:	003df206 	br	10010670 <__alt_data_end+0xf8010670>
10010ea8:	123ff804 	addi	r8,r2,-32
10010eac:	01000804 	movi	r4,32
10010eb0:	1a10d83a 	srl	r8,r3,r8
10010eb4:	11000a26 	beq	r2,r4,10010ee0 <__subdf3+0x8f4>
10010eb8:	01001004 	movi	r4,64
10010ebc:	2085c83a 	sub	r2,r4,r2
10010ec0:	1884983a 	sll	r2,r3,r2
10010ec4:	1444b03a 	or	r2,r2,r17
10010ec8:	1004c03a 	cmpne	r2,r2,zero
10010ecc:	40a2b03a 	or	r17,r8,r2
10010ed0:	0005883a 	mov	r2,zero
10010ed4:	003f8606 	br	10010cf0 <__alt_data_end+0xf8010cf0>
10010ed8:	0005883a 	mov	r2,zero
10010edc:	003fdc06 	br	10010e50 <__alt_data_end+0xf8010e50>
10010ee0:	0005883a 	mov	r2,zero
10010ee4:	003ff706 	br	10010ec4 <__alt_data_end+0xf8010ec4>

10010ee8 <__fixdfsi>:
10010ee8:	280cd53a 	srli	r6,r5,20
10010eec:	00c00434 	movhi	r3,16
10010ef0:	18ffffc4 	addi	r3,r3,-1
10010ef4:	3181ffcc 	andi	r6,r6,2047
10010ef8:	01c0ff84 	movi	r7,1022
10010efc:	28c6703a 	and	r3,r5,r3
10010f00:	280ad7fa 	srli	r5,r5,31
10010f04:	3980120e 	bge	r7,r6,10010f50 <__fixdfsi+0x68>
10010f08:	00810744 	movi	r2,1053
10010f0c:	11800c16 	blt	r2,r6,10010f40 <__fixdfsi+0x58>
10010f10:	00810cc4 	movi	r2,1075
10010f14:	1185c83a 	sub	r2,r2,r6
10010f18:	01c007c4 	movi	r7,31
10010f1c:	18c00434 	orhi	r3,r3,16
10010f20:	38800d16 	blt	r7,r2,10010f58 <__fixdfsi+0x70>
10010f24:	31befb44 	addi	r6,r6,-1043
10010f28:	2084d83a 	srl	r2,r4,r2
10010f2c:	1986983a 	sll	r3,r3,r6
10010f30:	1884b03a 	or	r2,r3,r2
10010f34:	28000726 	beq	r5,zero,10010f54 <__fixdfsi+0x6c>
10010f38:	0085c83a 	sub	r2,zero,r2
10010f3c:	f800283a 	ret
10010f40:	00a00034 	movhi	r2,32768
10010f44:	10bfffc4 	addi	r2,r2,-1
10010f48:	2885883a 	add	r2,r5,r2
10010f4c:	f800283a 	ret
10010f50:	0005883a 	mov	r2,zero
10010f54:	f800283a 	ret
10010f58:	008104c4 	movi	r2,1043
10010f5c:	1185c83a 	sub	r2,r2,r6
10010f60:	1884d83a 	srl	r2,r3,r2
10010f64:	003ff306 	br	10010f34 <__alt_data_end+0xf8010f34>

10010f68 <__floatsidf>:
10010f68:	defffd04 	addi	sp,sp,-12
10010f6c:	dfc00215 	stw	ra,8(sp)
10010f70:	dc400115 	stw	r17,4(sp)
10010f74:	dc000015 	stw	r16,0(sp)
10010f78:	20002b26 	beq	r4,zero,10011028 <__floatsidf+0xc0>
10010f7c:	2023883a 	mov	r17,r4
10010f80:	2020d7fa 	srli	r16,r4,31
10010f84:	20002d16 	blt	r4,zero,1001103c <__floatsidf+0xd4>
10010f88:	8809883a 	mov	r4,r17
10010f8c:	00110ec0 	call	100110ec <__clzsi2>
10010f90:	01410784 	movi	r5,1054
10010f94:	288bc83a 	sub	r5,r5,r2
10010f98:	01010cc4 	movi	r4,1075
10010f9c:	2149c83a 	sub	r4,r4,r5
10010fa0:	00c007c4 	movi	r3,31
10010fa4:	1900160e 	bge	r3,r4,10011000 <__floatsidf+0x98>
10010fa8:	00c104c4 	movi	r3,1043
10010fac:	1947c83a 	sub	r3,r3,r5
10010fb0:	88c6983a 	sll	r3,r17,r3
10010fb4:	00800434 	movhi	r2,16
10010fb8:	10bfffc4 	addi	r2,r2,-1
10010fbc:	1886703a 	and	r3,r3,r2
10010fc0:	2941ffcc 	andi	r5,r5,2047
10010fc4:	800d883a 	mov	r6,r16
10010fc8:	0005883a 	mov	r2,zero
10010fcc:	280a953a 	slli	r5,r5,20
10010fd0:	31803fcc 	andi	r6,r6,255
10010fd4:	01000434 	movhi	r4,16
10010fd8:	300c97fa 	slli	r6,r6,31
10010fdc:	213fffc4 	addi	r4,r4,-1
10010fe0:	1906703a 	and	r3,r3,r4
10010fe4:	1946b03a 	or	r3,r3,r5
10010fe8:	1986b03a 	or	r3,r3,r6
10010fec:	dfc00217 	ldw	ra,8(sp)
10010ff0:	dc400117 	ldw	r17,4(sp)
10010ff4:	dc000017 	ldw	r16,0(sp)
10010ff8:	dec00304 	addi	sp,sp,12
10010ffc:	f800283a 	ret
10011000:	00c002c4 	movi	r3,11
10011004:	1887c83a 	sub	r3,r3,r2
10011008:	88c6d83a 	srl	r3,r17,r3
1001100c:	8904983a 	sll	r2,r17,r4
10011010:	01000434 	movhi	r4,16
10011014:	213fffc4 	addi	r4,r4,-1
10011018:	2941ffcc 	andi	r5,r5,2047
1001101c:	1906703a 	and	r3,r3,r4
10011020:	800d883a 	mov	r6,r16
10011024:	003fe906 	br	10010fcc <__alt_data_end+0xf8010fcc>
10011028:	000d883a 	mov	r6,zero
1001102c:	000b883a 	mov	r5,zero
10011030:	0007883a 	mov	r3,zero
10011034:	0005883a 	mov	r2,zero
10011038:	003fe406 	br	10010fcc <__alt_data_end+0xf8010fcc>
1001103c:	0123c83a 	sub	r17,zero,r4
10011040:	003fd106 	br	10010f88 <__alt_data_end+0xf8010f88>

10011044 <__floatunsidf>:
10011044:	defffe04 	addi	sp,sp,-8
10011048:	dc000015 	stw	r16,0(sp)
1001104c:	dfc00115 	stw	ra,4(sp)
10011050:	2021883a 	mov	r16,r4
10011054:	20002226 	beq	r4,zero,100110e0 <__floatunsidf+0x9c>
10011058:	00110ec0 	call	100110ec <__clzsi2>
1001105c:	01010784 	movi	r4,1054
10011060:	2089c83a 	sub	r4,r4,r2
10011064:	01810cc4 	movi	r6,1075
10011068:	310dc83a 	sub	r6,r6,r4
1001106c:	00c007c4 	movi	r3,31
10011070:	1980120e 	bge	r3,r6,100110bc <__floatunsidf+0x78>
10011074:	00c104c4 	movi	r3,1043
10011078:	1907c83a 	sub	r3,r3,r4
1001107c:	80ca983a 	sll	r5,r16,r3
10011080:	00800434 	movhi	r2,16
10011084:	10bfffc4 	addi	r2,r2,-1
10011088:	2101ffcc 	andi	r4,r4,2047
1001108c:	0021883a 	mov	r16,zero
10011090:	288a703a 	and	r5,r5,r2
10011094:	2008953a 	slli	r4,r4,20
10011098:	00c00434 	movhi	r3,16
1001109c:	18ffffc4 	addi	r3,r3,-1
100110a0:	28c6703a 	and	r3,r5,r3
100110a4:	8005883a 	mov	r2,r16
100110a8:	1906b03a 	or	r3,r3,r4
100110ac:	dfc00117 	ldw	ra,4(sp)
100110b0:	dc000017 	ldw	r16,0(sp)
100110b4:	dec00204 	addi	sp,sp,8
100110b8:	f800283a 	ret
100110bc:	00c002c4 	movi	r3,11
100110c0:	188bc83a 	sub	r5,r3,r2
100110c4:	814ad83a 	srl	r5,r16,r5
100110c8:	00c00434 	movhi	r3,16
100110cc:	18ffffc4 	addi	r3,r3,-1
100110d0:	81a0983a 	sll	r16,r16,r6
100110d4:	2101ffcc 	andi	r4,r4,2047
100110d8:	28ca703a 	and	r5,r5,r3
100110dc:	003fed06 	br	10011094 <__alt_data_end+0xf8011094>
100110e0:	0009883a 	mov	r4,zero
100110e4:	000b883a 	mov	r5,zero
100110e8:	003fea06 	br	10011094 <__alt_data_end+0xf8011094>

100110ec <__clzsi2>:
100110ec:	00bfffd4 	movui	r2,65535
100110f0:	11000536 	bltu	r2,r4,10011108 <__clzsi2+0x1c>
100110f4:	00803fc4 	movi	r2,255
100110f8:	11000f36 	bltu	r2,r4,10011138 <__clzsi2+0x4c>
100110fc:	00800804 	movi	r2,32
10011100:	0007883a 	mov	r3,zero
10011104:	00000506 	br	1001111c <__clzsi2+0x30>
10011108:	00804034 	movhi	r2,256
1001110c:	10bfffc4 	addi	r2,r2,-1
10011110:	11000c2e 	bgeu	r2,r4,10011144 <__clzsi2+0x58>
10011114:	00800204 	movi	r2,8
10011118:	00c00604 	movi	r3,24
1001111c:	20c8d83a 	srl	r4,r4,r3
10011120:	00c40074 	movhi	r3,4097
10011124:	18d0b304 	addi	r3,r3,17100
10011128:	1909883a 	add	r4,r3,r4
1001112c:	20c00003 	ldbu	r3,0(r4)
10011130:	10c5c83a 	sub	r2,r2,r3
10011134:	f800283a 	ret
10011138:	00800604 	movi	r2,24
1001113c:	00c00204 	movi	r3,8
10011140:	003ff606 	br	1001111c <__alt_data_end+0xf801111c>
10011144:	00800404 	movi	r2,16
10011148:	1007883a 	mov	r3,r2
1001114c:	003ff306 	br	1001111c <__alt_data_end+0xf801111c>

10011150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011150:	defffe04 	addi	sp,sp,-8
10011154:	dfc00115 	stw	ra,4(sp)
10011158:	df000015 	stw	fp,0(sp)
1001115c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011160:	d0a00d17 	ldw	r2,-32716(gp)
10011164:	10000326 	beq	r2,zero,10011174 <alt_get_errno+0x24>
10011168:	d0a00d17 	ldw	r2,-32716(gp)
1001116c:	103ee83a 	callr	r2
10011170:	00000106 	br	10011178 <alt_get_errno+0x28>
10011174:	d0a6ea04 	addi	r2,gp,-25688
}
10011178:	e037883a 	mov	sp,fp
1001117c:	dfc00117 	ldw	ra,4(sp)
10011180:	df000017 	ldw	fp,0(sp)
10011184:	dec00204 	addi	sp,sp,8
10011188:	f800283a 	ret

1001118c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1001118c:	defffb04 	addi	sp,sp,-20
10011190:	dfc00415 	stw	ra,16(sp)
10011194:	df000315 	stw	fp,12(sp)
10011198:	df000304 	addi	fp,sp,12
1001119c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100111a0:	e0bfff17 	ldw	r2,-4(fp)
100111a4:	10000816 	blt	r2,zero,100111c8 <close+0x3c>
100111a8:	01400304 	movi	r5,12
100111ac:	e13fff17 	ldw	r4,-4(fp)
100111b0:	000e8840 	call	1000e884 <__mulsi3>
100111b4:	1007883a 	mov	r3,r2
100111b8:	00840074 	movhi	r2,4097
100111bc:	10933304 	addi	r2,r2,19660
100111c0:	1885883a 	add	r2,r3,r2
100111c4:	00000106 	br	100111cc <close+0x40>
100111c8:	0005883a 	mov	r2,zero
100111cc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100111d0:	e0bffd17 	ldw	r2,-12(fp)
100111d4:	10001926 	beq	r2,zero,1001123c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100111d8:	e0bffd17 	ldw	r2,-12(fp)
100111dc:	10800017 	ldw	r2,0(r2)
100111e0:	10800417 	ldw	r2,16(r2)
100111e4:	10000626 	beq	r2,zero,10011200 <close+0x74>
100111e8:	e0bffd17 	ldw	r2,-12(fp)
100111ec:	10800017 	ldw	r2,0(r2)
100111f0:	10800417 	ldw	r2,16(r2)
100111f4:	e13ffd17 	ldw	r4,-12(fp)
100111f8:	103ee83a 	callr	r2
100111fc:	00000106 	br	10011204 <close+0x78>
10011200:	0005883a 	mov	r2,zero
10011204:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10011208:	e13fff17 	ldw	r4,-4(fp)
1001120c:	00118740 	call	10011874 <alt_release_fd>
    if (rval < 0)
10011210:	e0bffe17 	ldw	r2,-8(fp)
10011214:	1000070e 	bge	r2,zero,10011234 <close+0xa8>
    {
      ALT_ERRNO = -rval;
10011218:	00111500 	call	10011150 <alt_get_errno>
1001121c:	1007883a 	mov	r3,r2
10011220:	e0bffe17 	ldw	r2,-8(fp)
10011224:	0085c83a 	sub	r2,zero,r2
10011228:	18800015 	stw	r2,0(r3)
      return -1;
1001122c:	00bfffc4 	movi	r2,-1
10011230:	00000706 	br	10011250 <close+0xc4>
    }
    return 0;
10011234:	0005883a 	mov	r2,zero
10011238:	00000506 	br	10011250 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001123c:	00111500 	call	10011150 <alt_get_errno>
10011240:	1007883a 	mov	r3,r2
10011244:	00801444 	movi	r2,81
10011248:	18800015 	stw	r2,0(r3)
    return -1;
1001124c:	00bfffc4 	movi	r2,-1
  }
}
10011250:	e037883a 	mov	sp,fp
10011254:	dfc00117 	ldw	ra,4(sp)
10011258:	df000017 	ldw	fp,0(sp)
1001125c:	dec00204 	addi	sp,sp,8
10011260:	f800283a 	ret

10011264 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10011264:	defffc04 	addi	sp,sp,-16
10011268:	df000315 	stw	fp,12(sp)
1001126c:	df000304 	addi	fp,sp,12
10011270:	e13ffd15 	stw	r4,-12(fp)
10011274:	e17ffe15 	stw	r5,-8(fp)
10011278:	e1bfff15 	stw	r6,-4(fp)
  return len;
1001127c:	e0bfff17 	ldw	r2,-4(fp)
}
10011280:	e037883a 	mov	sp,fp
10011284:	df000017 	ldw	fp,0(sp)
10011288:	dec00104 	addi	sp,sp,4
1001128c:	f800283a 	ret

10011290 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011290:	defffe04 	addi	sp,sp,-8
10011294:	dfc00115 	stw	ra,4(sp)
10011298:	df000015 	stw	fp,0(sp)
1001129c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100112a0:	d0a00d17 	ldw	r2,-32716(gp)
100112a4:	10000326 	beq	r2,zero,100112b4 <alt_get_errno+0x24>
100112a8:	d0a00d17 	ldw	r2,-32716(gp)
100112ac:	103ee83a 	callr	r2
100112b0:	00000106 	br	100112b8 <alt_get_errno+0x28>
100112b4:	d0a6ea04 	addi	r2,gp,-25688
}
100112b8:	e037883a 	mov	sp,fp
100112bc:	dfc00117 	ldw	ra,4(sp)
100112c0:	df000017 	ldw	fp,0(sp)
100112c4:	dec00204 	addi	sp,sp,8
100112c8:	f800283a 	ret

100112cc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100112cc:	defffb04 	addi	sp,sp,-20
100112d0:	dfc00415 	stw	ra,16(sp)
100112d4:	df000315 	stw	fp,12(sp)
100112d8:	df000304 	addi	fp,sp,12
100112dc:	e13ffe15 	stw	r4,-8(fp)
100112e0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100112e4:	e0bffe17 	ldw	r2,-8(fp)
100112e8:	10000816 	blt	r2,zero,1001130c <fstat+0x40>
100112ec:	01400304 	movi	r5,12
100112f0:	e13ffe17 	ldw	r4,-8(fp)
100112f4:	000e8840 	call	1000e884 <__mulsi3>
100112f8:	1007883a 	mov	r3,r2
100112fc:	00840074 	movhi	r2,4097
10011300:	10933304 	addi	r2,r2,19660
10011304:	1885883a 	add	r2,r3,r2
10011308:	00000106 	br	10011310 <fstat+0x44>
1001130c:	0005883a 	mov	r2,zero
10011310:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10011314:	e0bffd17 	ldw	r2,-12(fp)
10011318:	10001026 	beq	r2,zero,1001135c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1001131c:	e0bffd17 	ldw	r2,-12(fp)
10011320:	10800017 	ldw	r2,0(r2)
10011324:	10800817 	ldw	r2,32(r2)
10011328:	10000726 	beq	r2,zero,10011348 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1001132c:	e0bffd17 	ldw	r2,-12(fp)
10011330:	10800017 	ldw	r2,0(r2)
10011334:	10800817 	ldw	r2,32(r2)
10011338:	e17fff17 	ldw	r5,-4(fp)
1001133c:	e13ffd17 	ldw	r4,-12(fp)
10011340:	103ee83a 	callr	r2
10011344:	00000a06 	br	10011370 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10011348:	e0bfff17 	ldw	r2,-4(fp)
1001134c:	00c80004 	movi	r3,8192
10011350:	10c00115 	stw	r3,4(r2)
      return 0;
10011354:	0005883a 	mov	r2,zero
10011358:	00000506 	br	10011370 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001135c:	00112900 	call	10011290 <alt_get_errno>
10011360:	1007883a 	mov	r3,r2
10011364:	00801444 	movi	r2,81
10011368:	18800015 	stw	r2,0(r3)
    return -1;
1001136c:	00bfffc4 	movi	r2,-1
  }
}
10011370:	e037883a 	mov	sp,fp
10011374:	dfc00117 	ldw	ra,4(sp)
10011378:	df000017 	ldw	fp,0(sp)
1001137c:	dec00204 	addi	sp,sp,8
10011380:	f800283a 	ret

10011384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011384:	defffe04 	addi	sp,sp,-8
10011388:	dfc00115 	stw	ra,4(sp)
1001138c:	df000015 	stw	fp,0(sp)
10011390:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011394:	d0a00d17 	ldw	r2,-32716(gp)
10011398:	10000326 	beq	r2,zero,100113a8 <alt_get_errno+0x24>
1001139c:	d0a00d17 	ldw	r2,-32716(gp)
100113a0:	103ee83a 	callr	r2
100113a4:	00000106 	br	100113ac <alt_get_errno+0x28>
100113a8:	d0a6ea04 	addi	r2,gp,-25688
}
100113ac:	e037883a 	mov	sp,fp
100113b0:	dfc00117 	ldw	ra,4(sp)
100113b4:	df000017 	ldw	fp,0(sp)
100113b8:	dec00204 	addi	sp,sp,8
100113bc:	f800283a 	ret

100113c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100113c0:	deffed04 	addi	sp,sp,-76
100113c4:	dfc01215 	stw	ra,72(sp)
100113c8:	df001115 	stw	fp,68(sp)
100113cc:	df001104 	addi	fp,sp,68
100113d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100113d4:	e0bfff17 	ldw	r2,-4(fp)
100113d8:	10000816 	blt	r2,zero,100113fc <isatty+0x3c>
100113dc:	01400304 	movi	r5,12
100113e0:	e13fff17 	ldw	r4,-4(fp)
100113e4:	000e8840 	call	1000e884 <__mulsi3>
100113e8:	1007883a 	mov	r3,r2
100113ec:	00840074 	movhi	r2,4097
100113f0:	10933304 	addi	r2,r2,19660
100113f4:	1885883a 	add	r2,r3,r2
100113f8:	00000106 	br	10011400 <isatty+0x40>
100113fc:	0005883a 	mov	r2,zero
10011400:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10011404:	e0bfef17 	ldw	r2,-68(fp)
10011408:	10000e26 	beq	r2,zero,10011444 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1001140c:	e0bfef17 	ldw	r2,-68(fp)
10011410:	10800017 	ldw	r2,0(r2)
10011414:	10800817 	ldw	r2,32(r2)
10011418:	1000021e 	bne	r2,zero,10011424 <isatty+0x64>
    {
      return 1;
1001141c:	00800044 	movi	r2,1
10011420:	00000d06 	br	10011458 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10011424:	e0bff004 	addi	r2,fp,-64
10011428:	100b883a 	mov	r5,r2
1001142c:	e13fff17 	ldw	r4,-4(fp)
10011430:	00112cc0 	call	100112cc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10011434:	e0bff117 	ldw	r2,-60(fp)
10011438:	10880020 	cmpeqi	r2,r2,8192
1001143c:	10803fcc 	andi	r2,r2,255
10011440:	00000506 	br	10011458 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011444:	00113840 	call	10011384 <alt_get_errno>
10011448:	1007883a 	mov	r3,r2
1001144c:	00801444 	movi	r2,81
10011450:	18800015 	stw	r2,0(r3)
    return 0;
10011454:	0005883a 	mov	r2,zero
  }
}
10011458:	e037883a 	mov	sp,fp
1001145c:	dfc00117 	ldw	ra,4(sp)
10011460:	df000017 	ldw	fp,0(sp)
10011464:	dec00204 	addi	sp,sp,8
10011468:	f800283a 	ret

1001146c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1001146c:	defffc04 	addi	sp,sp,-16
10011470:	df000315 	stw	fp,12(sp)
10011474:	df000304 	addi	fp,sp,12
10011478:	e13ffd15 	stw	r4,-12(fp)
1001147c:	e17ffe15 	stw	r5,-8(fp)
10011480:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10011484:	e0fffe17 	ldw	r3,-8(fp)
10011488:	e0bffd17 	ldw	r2,-12(fp)
1001148c:	18800c26 	beq	r3,r2,100114c0 <alt_load_section+0x54>
  {
    while( to != end )
10011490:	00000806 	br	100114b4 <alt_load_section+0x48>
    {
      *to++ = *from++;
10011494:	e0bffe17 	ldw	r2,-8(fp)
10011498:	10c00104 	addi	r3,r2,4
1001149c:	e0fffe15 	stw	r3,-8(fp)
100114a0:	e0fffd17 	ldw	r3,-12(fp)
100114a4:	19000104 	addi	r4,r3,4
100114a8:	e13ffd15 	stw	r4,-12(fp)
100114ac:	18c00017 	ldw	r3,0(r3)
100114b0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
100114b4:	e0fffe17 	ldw	r3,-8(fp)
100114b8:	e0bfff17 	ldw	r2,-4(fp)
100114bc:	18bff51e 	bne	r3,r2,10011494 <__alt_data_end+0xf8011494>
    {
      *to++ = *from++;
    }
  }
}
100114c0:	0001883a 	nop
100114c4:	e037883a 	mov	sp,fp
100114c8:	df000017 	ldw	fp,0(sp)
100114cc:	dec00104 	addi	sp,sp,4
100114d0:	f800283a 	ret

100114d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
100114d4:	defffe04 	addi	sp,sp,-8
100114d8:	dfc00115 	stw	ra,4(sp)
100114dc:	df000015 	stw	fp,0(sp)
100114e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
100114e4:	01840074 	movhi	r6,4097
100114e8:	3197bd04 	addi	r6,r6,24308
100114ec:	01440074 	movhi	r5,4097
100114f0:	29510004 	addi	r5,r5,17408
100114f4:	01040074 	movhi	r4,4097
100114f8:	2117bd04 	addi	r4,r4,24308
100114fc:	001146c0 	call	1001146c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10011500:	01840034 	movhi	r6,4096
10011504:	31808c04 	addi	r6,r6,560
10011508:	01440034 	movhi	r5,4096
1001150c:	29400804 	addi	r5,r5,32
10011510:	01040034 	movhi	r4,4096
10011514:	21000804 	addi	r4,r4,32
10011518:	001146c0 	call	1001146c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1001151c:	01840074 	movhi	r6,4097
10011520:	31910004 	addi	r6,r6,17408
10011524:	01440074 	movhi	r5,4097
10011528:	294e5c04 	addi	r5,r5,14704
1001152c:	01040074 	movhi	r4,4097
10011530:	210e5c04 	addi	r4,r4,14704
10011534:	001146c0 	call	1001146c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10011538:	00128b80 	call	100128b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
1001153c:	0012a780 	call	10012a78 <alt_icache_flush_all>
}
10011540:	0001883a 	nop
10011544:	e037883a 	mov	sp,fp
10011548:	dfc00117 	ldw	ra,4(sp)
1001154c:	df000017 	ldw	fp,0(sp)
10011550:	dec00204 	addi	sp,sp,8
10011554:	f800283a 	ret

10011558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011558:	defffe04 	addi	sp,sp,-8
1001155c:	dfc00115 	stw	ra,4(sp)
10011560:	df000015 	stw	fp,0(sp)
10011564:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011568:	d0a00d17 	ldw	r2,-32716(gp)
1001156c:	10000326 	beq	r2,zero,1001157c <alt_get_errno+0x24>
10011570:	d0a00d17 	ldw	r2,-32716(gp)
10011574:	103ee83a 	callr	r2
10011578:	00000106 	br	10011580 <alt_get_errno+0x28>
1001157c:	d0a6ea04 	addi	r2,gp,-25688
}
10011580:	e037883a 	mov	sp,fp
10011584:	dfc00117 	ldw	ra,4(sp)
10011588:	df000017 	ldw	fp,0(sp)
1001158c:	dec00204 	addi	sp,sp,8
10011590:	f800283a 	ret

10011594 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10011594:	defff904 	addi	sp,sp,-28
10011598:	dfc00615 	stw	ra,24(sp)
1001159c:	df000515 	stw	fp,20(sp)
100115a0:	df000504 	addi	fp,sp,20
100115a4:	e13ffd15 	stw	r4,-12(fp)
100115a8:	e17ffe15 	stw	r5,-8(fp)
100115ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
100115b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100115b4:	e0bffd17 	ldw	r2,-12(fp)
100115b8:	10000816 	blt	r2,zero,100115dc <lseek+0x48>
100115bc:	01400304 	movi	r5,12
100115c0:	e13ffd17 	ldw	r4,-12(fp)
100115c4:	000e8840 	call	1000e884 <__mulsi3>
100115c8:	1007883a 	mov	r3,r2
100115cc:	00840074 	movhi	r2,4097
100115d0:	10933304 	addi	r2,r2,19660
100115d4:	1885883a 	add	r2,r3,r2
100115d8:	00000106 	br	100115e0 <lseek+0x4c>
100115dc:	0005883a 	mov	r2,zero
100115e0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100115e4:	e0bffc17 	ldw	r2,-16(fp)
100115e8:	10001026 	beq	r2,zero,1001162c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100115ec:	e0bffc17 	ldw	r2,-16(fp)
100115f0:	10800017 	ldw	r2,0(r2)
100115f4:	10800717 	ldw	r2,28(r2)
100115f8:	10000926 	beq	r2,zero,10011620 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100115fc:	e0bffc17 	ldw	r2,-16(fp)
10011600:	10800017 	ldw	r2,0(r2)
10011604:	10800717 	ldw	r2,28(r2)
10011608:	e1bfff17 	ldw	r6,-4(fp)
1001160c:	e17ffe17 	ldw	r5,-8(fp)
10011610:	e13ffc17 	ldw	r4,-16(fp)
10011614:	103ee83a 	callr	r2
10011618:	e0bffb15 	stw	r2,-20(fp)
1001161c:	00000506 	br	10011634 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10011620:	00bfde84 	movi	r2,-134
10011624:	e0bffb15 	stw	r2,-20(fp)
10011628:	00000206 	br	10011634 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1001162c:	00bfebc4 	movi	r2,-81
10011630:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10011634:	e0bffb17 	ldw	r2,-20(fp)
10011638:	1000070e 	bge	r2,zero,10011658 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1001163c:	00115580 	call	10011558 <alt_get_errno>
10011640:	1007883a 	mov	r3,r2
10011644:	e0bffb17 	ldw	r2,-20(fp)
10011648:	0085c83a 	sub	r2,zero,r2
1001164c:	18800015 	stw	r2,0(r3)
    rc = -1;
10011650:	00bfffc4 	movi	r2,-1
10011654:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10011658:	e0bffb17 	ldw	r2,-20(fp)
}
1001165c:	e037883a 	mov	sp,fp
10011660:	dfc00117 	ldw	ra,4(sp)
10011664:	df000017 	ldw	fp,0(sp)
10011668:	dec00204 	addi	sp,sp,8
1001166c:	f800283a 	ret

10011670 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10011670:	defffd04 	addi	sp,sp,-12
10011674:	dfc00215 	stw	ra,8(sp)
10011678:	df000115 	stw	fp,4(sp)
1001167c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10011680:	0009883a 	mov	r4,zero
10011684:	0011b480 	call	10011b48 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10011688:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1001168c:	0011b800 	call	10011b80 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10011690:	01840074 	movhi	r6,4097
10011694:	3190f604 	addi	r6,r6,17368
10011698:	01440074 	movhi	r5,4097
1001169c:	2950f604 	addi	r5,r5,17368
100116a0:	01040074 	movhi	r4,4097
100116a4:	2110f604 	addi	r4,r4,17368
100116a8:	0012e1c0 	call	10012e1c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100116ac:	00129b80 	call	100129b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100116b0:	01040074 	movhi	r4,4097
100116b4:	210a8604 	addi	r4,r4,10776
100116b8:	00135dc0 	call	100135dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100116bc:	d0a6ee17 	ldw	r2,-25672(gp)
100116c0:	d0e6ef17 	ldw	r3,-25668(gp)
100116c4:	d126f017 	ldw	r4,-25664(gp)
100116c8:	200d883a 	mov	r6,r4
100116cc:	180b883a 	mov	r5,r3
100116d0:	1009883a 	mov	r4,r2
100116d4:	00022f00 	call	100022f0 <main>
100116d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100116dc:	01000044 	movi	r4,1
100116e0:	001118c0 	call	1001118c <close>
  exit (result);
100116e4:	e13fff17 	ldw	r4,-4(fp)
100116e8:	00135f00 	call	100135f0 <exit>

100116ec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
100116ec:	defffe04 	addi	sp,sp,-8
100116f0:	df000115 	stw	fp,4(sp)
100116f4:	df000104 	addi	fp,sp,4
100116f8:	e13fff15 	stw	r4,-4(fp)
}
100116fc:	0001883a 	nop
10011700:	e037883a 	mov	sp,fp
10011704:	df000017 	ldw	fp,0(sp)
10011708:	dec00104 	addi	sp,sp,4
1001170c:	f800283a 	ret

10011710 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10011710:	defffe04 	addi	sp,sp,-8
10011714:	df000115 	stw	fp,4(sp)
10011718:	df000104 	addi	fp,sp,4
1001171c:	e13fff15 	stw	r4,-4(fp)
}
10011720:	0001883a 	nop
10011724:	e037883a 	mov	sp,fp
10011728:	df000017 	ldw	fp,0(sp)
1001172c:	dec00104 	addi	sp,sp,4
10011730:	f800283a 	ret

10011734 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011734:	defffe04 	addi	sp,sp,-8
10011738:	dfc00115 	stw	ra,4(sp)
1001173c:	df000015 	stw	fp,0(sp)
10011740:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011744:	d0a00d17 	ldw	r2,-32716(gp)
10011748:	10000326 	beq	r2,zero,10011758 <alt_get_errno+0x24>
1001174c:	d0a00d17 	ldw	r2,-32716(gp)
10011750:	103ee83a 	callr	r2
10011754:	00000106 	br	1001175c <alt_get_errno+0x28>
10011758:	d0a6ea04 	addi	r2,gp,-25688
}
1001175c:	e037883a 	mov	sp,fp
10011760:	dfc00117 	ldw	ra,4(sp)
10011764:	df000017 	ldw	fp,0(sp)
10011768:	dec00204 	addi	sp,sp,8
1001176c:	f800283a 	ret

10011770 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10011770:	defff904 	addi	sp,sp,-28
10011774:	dfc00615 	stw	ra,24(sp)
10011778:	df000515 	stw	fp,20(sp)
1001177c:	df000504 	addi	fp,sp,20
10011780:	e13ffd15 	stw	r4,-12(fp)
10011784:	e17ffe15 	stw	r5,-8(fp)
10011788:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001178c:	e0bffd17 	ldw	r2,-12(fp)
10011790:	10000816 	blt	r2,zero,100117b4 <read+0x44>
10011794:	01400304 	movi	r5,12
10011798:	e13ffd17 	ldw	r4,-12(fp)
1001179c:	000e8840 	call	1000e884 <__mulsi3>
100117a0:	1007883a 	mov	r3,r2
100117a4:	00840074 	movhi	r2,4097
100117a8:	10933304 	addi	r2,r2,19660
100117ac:	1885883a 	add	r2,r3,r2
100117b0:	00000106 	br	100117b8 <read+0x48>
100117b4:	0005883a 	mov	r2,zero
100117b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100117bc:	e0bffb17 	ldw	r2,-20(fp)
100117c0:	10002226 	beq	r2,zero,1001184c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100117c4:	e0bffb17 	ldw	r2,-20(fp)
100117c8:	10800217 	ldw	r2,8(r2)
100117cc:	108000cc 	andi	r2,r2,3
100117d0:	10800060 	cmpeqi	r2,r2,1
100117d4:	1000181e 	bne	r2,zero,10011838 <read+0xc8>
        (fd->dev->read))
100117d8:	e0bffb17 	ldw	r2,-20(fp)
100117dc:	10800017 	ldw	r2,0(r2)
100117e0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100117e4:	10001426 	beq	r2,zero,10011838 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
100117e8:	e0bffb17 	ldw	r2,-20(fp)
100117ec:	10800017 	ldw	r2,0(r2)
100117f0:	10800517 	ldw	r2,20(r2)
100117f4:	e0ffff17 	ldw	r3,-4(fp)
100117f8:	180d883a 	mov	r6,r3
100117fc:	e17ffe17 	ldw	r5,-8(fp)
10011800:	e13ffb17 	ldw	r4,-20(fp)
10011804:	103ee83a 	callr	r2
10011808:	e0bffc15 	stw	r2,-16(fp)
1001180c:	e0bffc17 	ldw	r2,-16(fp)
10011810:	1000070e 	bge	r2,zero,10011830 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10011814:	00117340 	call	10011734 <alt_get_errno>
10011818:	1007883a 	mov	r3,r2
1001181c:	e0bffc17 	ldw	r2,-16(fp)
10011820:	0085c83a 	sub	r2,zero,r2
10011824:	18800015 	stw	r2,0(r3)
          return -1;
10011828:	00bfffc4 	movi	r2,-1
1001182c:	00000c06 	br	10011860 <read+0xf0>
        }
        return rval;
10011830:	e0bffc17 	ldw	r2,-16(fp)
10011834:	00000a06 	br	10011860 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10011838:	00117340 	call	10011734 <alt_get_errno>
1001183c:	1007883a 	mov	r3,r2
10011840:	00800344 	movi	r2,13
10011844:	18800015 	stw	r2,0(r3)
10011848:	00000406 	br	1001185c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1001184c:	00117340 	call	10011734 <alt_get_errno>
10011850:	1007883a 	mov	r3,r2
10011854:	00801444 	movi	r2,81
10011858:	18800015 	stw	r2,0(r3)
  }
  return -1;
1001185c:	00bfffc4 	movi	r2,-1
}
10011860:	e037883a 	mov	sp,fp
10011864:	dfc00117 	ldw	ra,4(sp)
10011868:	df000017 	ldw	fp,0(sp)
1001186c:	dec00204 	addi	sp,sp,8
10011870:	f800283a 	ret

10011874 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10011874:	defffc04 	addi	sp,sp,-16
10011878:	dfc00315 	stw	ra,12(sp)
1001187c:	df000215 	stw	fp,8(sp)
10011880:	dc000115 	stw	r16,4(sp)
10011884:	df000204 	addi	fp,sp,8
10011888:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1001188c:	e0bffe17 	ldw	r2,-8(fp)
10011890:	108000d0 	cmplti	r2,r2,3
10011894:	1000111e 	bne	r2,zero,100118dc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10011898:	04040074 	movhi	r16,4097
1001189c:	84133304 	addi	r16,r16,19660
100118a0:	e0bffe17 	ldw	r2,-8(fp)
100118a4:	01400304 	movi	r5,12
100118a8:	1009883a 	mov	r4,r2
100118ac:	000e8840 	call	1000e884 <__mulsi3>
100118b0:	8085883a 	add	r2,r16,r2
100118b4:	10800204 	addi	r2,r2,8
100118b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100118bc:	04040074 	movhi	r16,4097
100118c0:	84133304 	addi	r16,r16,19660
100118c4:	e0bffe17 	ldw	r2,-8(fp)
100118c8:	01400304 	movi	r5,12
100118cc:	1009883a 	mov	r4,r2
100118d0:	000e8840 	call	1000e884 <__mulsi3>
100118d4:	8085883a 	add	r2,r16,r2
100118d8:	10000015 	stw	zero,0(r2)
  }
}
100118dc:	0001883a 	nop
100118e0:	e6ffff04 	addi	sp,fp,-4
100118e4:	dfc00217 	ldw	ra,8(sp)
100118e8:	df000117 	ldw	fp,4(sp)
100118ec:	dc000017 	ldw	r16,0(sp)
100118f0:	dec00304 	addi	sp,sp,12
100118f4:	f800283a 	ret

100118f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100118f8:	defff904 	addi	sp,sp,-28
100118fc:	df000615 	stw	fp,24(sp)
10011900:	df000604 	addi	fp,sp,24
10011904:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011908:	0005303a 	rdctl	r2,status
1001190c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011910:	e0fffe17 	ldw	r3,-8(fp)
10011914:	00bfff84 	movi	r2,-2
10011918:	1884703a 	and	r2,r3,r2
1001191c:	1001703a 	wrctl	status,r2
  
  return context;
10011920:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10011924:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10011928:	d0a00e17 	ldw	r2,-32712(gp)
1001192c:	10c000c4 	addi	r3,r2,3
10011930:	00bfff04 	movi	r2,-4
10011934:	1884703a 	and	r2,r3,r2
10011938:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1001193c:	d0e00e17 	ldw	r3,-32712(gp)
10011940:	e0bfff17 	ldw	r2,-4(fp)
10011944:	1887883a 	add	r3,r3,r2
10011948:	00860034 	movhi	r2,6144
1001194c:	10800004 	addi	r2,r2,0
10011950:	10c0062e 	bgeu	r2,r3,1001196c <sbrk+0x74>
10011954:	e0bffb17 	ldw	r2,-20(fp)
10011958:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001195c:	e0bffa17 	ldw	r2,-24(fp)
10011960:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10011964:	00bfffc4 	movi	r2,-1
10011968:	00000b06 	br	10011998 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1001196c:	d0a00e17 	ldw	r2,-32712(gp)
10011970:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10011974:	d0e00e17 	ldw	r3,-32712(gp)
10011978:	e0bfff17 	ldw	r2,-4(fp)
1001197c:	1885883a 	add	r2,r3,r2
10011980:	d0a00e15 	stw	r2,-32712(gp)
10011984:	e0bffb17 	ldw	r2,-20(fp)
10011988:	e0bffc15 	stw	r2,-16(fp)
1001198c:	e0bffc17 	ldw	r2,-16(fp)
10011990:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10011994:	e0bffd17 	ldw	r2,-12(fp)
} 
10011998:	e037883a 	mov	sp,fp
1001199c:	df000017 	ldw	fp,0(sp)
100119a0:	dec00104 	addi	sp,sp,4
100119a4:	f800283a 	ret

100119a8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
100119a8:	defffd04 	addi	sp,sp,-12
100119ac:	dfc00215 	stw	ra,8(sp)
100119b0:	df000115 	stw	fp,4(sp)
100119b4:	df000104 	addi	fp,sp,4
100119b8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
100119bc:	e13fff17 	ldw	r4,-4(fp)
100119c0:	00127600 	call	10012760 <alt_busy_sleep>
}
100119c4:	e037883a 	mov	sp,fp
100119c8:	dfc00117 	ldw	ra,4(sp)
100119cc:	df000017 	ldw	fp,0(sp)
100119d0:	dec00204 	addi	sp,sp,8
100119d4:	f800283a 	ret

100119d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100119d8:	defffe04 	addi	sp,sp,-8
100119dc:	dfc00115 	stw	ra,4(sp)
100119e0:	df000015 	stw	fp,0(sp)
100119e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100119e8:	d0a00d17 	ldw	r2,-32716(gp)
100119ec:	10000326 	beq	r2,zero,100119fc <alt_get_errno+0x24>
100119f0:	d0a00d17 	ldw	r2,-32716(gp)
100119f4:	103ee83a 	callr	r2
100119f8:	00000106 	br	10011a00 <alt_get_errno+0x28>
100119fc:	d0a6ea04 	addi	r2,gp,-25688
}
10011a00:	e037883a 	mov	sp,fp
10011a04:	dfc00117 	ldw	ra,4(sp)
10011a08:	df000017 	ldw	fp,0(sp)
10011a0c:	dec00204 	addi	sp,sp,8
10011a10:	f800283a 	ret

10011a14 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10011a14:	defff904 	addi	sp,sp,-28
10011a18:	dfc00615 	stw	ra,24(sp)
10011a1c:	df000515 	stw	fp,20(sp)
10011a20:	df000504 	addi	fp,sp,20
10011a24:	e13ffd15 	stw	r4,-12(fp)
10011a28:	e17ffe15 	stw	r5,-8(fp)
10011a2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011a30:	e0bffd17 	ldw	r2,-12(fp)
10011a34:	10000816 	blt	r2,zero,10011a58 <write+0x44>
10011a38:	01400304 	movi	r5,12
10011a3c:	e13ffd17 	ldw	r4,-12(fp)
10011a40:	000e8840 	call	1000e884 <__mulsi3>
10011a44:	1007883a 	mov	r3,r2
10011a48:	00840074 	movhi	r2,4097
10011a4c:	10933304 	addi	r2,r2,19660
10011a50:	1885883a 	add	r2,r3,r2
10011a54:	00000106 	br	10011a5c <write+0x48>
10011a58:	0005883a 	mov	r2,zero
10011a5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10011a60:	e0bffb17 	ldw	r2,-20(fp)
10011a64:	10002126 	beq	r2,zero,10011aec <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10011a68:	e0bffb17 	ldw	r2,-20(fp)
10011a6c:	10800217 	ldw	r2,8(r2)
10011a70:	108000cc 	andi	r2,r2,3
10011a74:	10001826 	beq	r2,zero,10011ad8 <write+0xc4>
10011a78:	e0bffb17 	ldw	r2,-20(fp)
10011a7c:	10800017 	ldw	r2,0(r2)
10011a80:	10800617 	ldw	r2,24(r2)
10011a84:	10001426 	beq	r2,zero,10011ad8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10011a88:	e0bffb17 	ldw	r2,-20(fp)
10011a8c:	10800017 	ldw	r2,0(r2)
10011a90:	10800617 	ldw	r2,24(r2)
10011a94:	e0ffff17 	ldw	r3,-4(fp)
10011a98:	180d883a 	mov	r6,r3
10011a9c:	e17ffe17 	ldw	r5,-8(fp)
10011aa0:	e13ffb17 	ldw	r4,-20(fp)
10011aa4:	103ee83a 	callr	r2
10011aa8:	e0bffc15 	stw	r2,-16(fp)
10011aac:	e0bffc17 	ldw	r2,-16(fp)
10011ab0:	1000070e 	bge	r2,zero,10011ad0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10011ab4:	00119d80 	call	100119d8 <alt_get_errno>
10011ab8:	1007883a 	mov	r3,r2
10011abc:	e0bffc17 	ldw	r2,-16(fp)
10011ac0:	0085c83a 	sub	r2,zero,r2
10011ac4:	18800015 	stw	r2,0(r3)
        return -1;
10011ac8:	00bfffc4 	movi	r2,-1
10011acc:	00000c06 	br	10011b00 <write+0xec>
      }
      return rval;
10011ad0:	e0bffc17 	ldw	r2,-16(fp)
10011ad4:	00000a06 	br	10011b00 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10011ad8:	00119d80 	call	100119d8 <alt_get_errno>
10011adc:	1007883a 	mov	r3,r2
10011ae0:	00800344 	movi	r2,13
10011ae4:	18800015 	stw	r2,0(r3)
10011ae8:	00000406 	br	10011afc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10011aec:	00119d80 	call	100119d8 <alt_get_errno>
10011af0:	1007883a 	mov	r3,r2
10011af4:	00801444 	movi	r2,81
10011af8:	18800015 	stw	r2,0(r3)
  }
  return -1;
10011afc:	00bfffc4 	movi	r2,-1
}
10011b00:	e037883a 	mov	sp,fp
10011b04:	dfc00117 	ldw	ra,4(sp)
10011b08:	df000017 	ldw	fp,0(sp)
10011b0c:	dec00204 	addi	sp,sp,8
10011b10:	f800283a 	ret

10011b14 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10011b14:	defffd04 	addi	sp,sp,-12
10011b18:	dfc00215 	stw	ra,8(sp)
10011b1c:	df000115 	stw	fp,4(sp)
10011b20:	df000104 	addi	fp,sp,4
10011b24:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10011b28:	d1600a04 	addi	r5,gp,-32728
10011b2c:	e13fff17 	ldw	r4,-4(fp)
10011b30:	00129140 	call	10012914 <alt_dev_llist_insert>
}
10011b34:	e037883a 	mov	sp,fp
10011b38:	dfc00117 	ldw	ra,4(sp)
10011b3c:	df000017 	ldw	fp,0(sp)
10011b40:	dec00204 	addi	sp,sp,8
10011b44:	f800283a 	ret

10011b48 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10011b48:	defffd04 	addi	sp,sp,-12
10011b4c:	dfc00215 	stw	ra,8(sp)
10011b50:	df000115 	stw	fp,4(sp)
10011b54:	df000104 	addi	fp,sp,4
10011b58:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10011b5c:	00132c00 	call	100132c0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10011b60:	00800044 	movi	r2,1
10011b64:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10011b68:	0001883a 	nop
10011b6c:	e037883a 	mov	sp,fp
10011b70:	dfc00117 	ldw	ra,4(sp)
10011b74:	df000017 	ldw	fp,0(sp)
10011b78:	dec00204 	addi	sp,sp,8
10011b7c:	f800283a 	ret

10011b80 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10011b80:	defffe04 	addi	sp,sp,-8
10011b84:	dfc00115 	stw	ra,4(sp)
10011b88:	df000015 	stw	fp,0(sp)
10011b8c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10011b90:	01800144 	movi	r6,5
10011b94:	000b883a 	mov	r5,zero
10011b98:	01040074 	movhi	r4,4097
10011b9c:	21139d04 	addi	r4,r4,20084
10011ba0:	0011d300 	call	10011d30 <altera_avalon_jtag_uart_init>
10011ba4:	01040074 	movhi	r4,4097
10011ba8:	21139304 	addi	r4,r4,20044
10011bac:	0011b140 	call	10011b14 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10011bb0:	0001883a 	nop
}
10011bb4:	0001883a 	nop
10011bb8:	e037883a 	mov	sp,fp
10011bbc:	dfc00117 	ldw	ra,4(sp)
10011bc0:	df000017 	ldw	fp,0(sp)
10011bc4:	dec00204 	addi	sp,sp,8
10011bc8:	f800283a 	ret

10011bcc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10011bcc:	defffa04 	addi	sp,sp,-24
10011bd0:	dfc00515 	stw	ra,20(sp)
10011bd4:	df000415 	stw	fp,16(sp)
10011bd8:	df000404 	addi	fp,sp,16
10011bdc:	e13ffd15 	stw	r4,-12(fp)
10011be0:	e17ffe15 	stw	r5,-8(fp)
10011be4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10011be8:	e0bffd17 	ldw	r2,-12(fp)
10011bec:	10800017 	ldw	r2,0(r2)
10011bf0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10011bf4:	e0bffc17 	ldw	r2,-16(fp)
10011bf8:	10c00a04 	addi	r3,r2,40
10011bfc:	e0bffd17 	ldw	r2,-12(fp)
10011c00:	10800217 	ldw	r2,8(r2)
10011c04:	100f883a 	mov	r7,r2
10011c08:	e1bfff17 	ldw	r6,-4(fp)
10011c0c:	e17ffe17 	ldw	r5,-8(fp)
10011c10:	1809883a 	mov	r4,r3
10011c14:	00121f40 	call	100121f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10011c18:	e037883a 	mov	sp,fp
10011c1c:	dfc00117 	ldw	ra,4(sp)
10011c20:	df000017 	ldw	fp,0(sp)
10011c24:	dec00204 	addi	sp,sp,8
10011c28:	f800283a 	ret

10011c2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10011c2c:	defffa04 	addi	sp,sp,-24
10011c30:	dfc00515 	stw	ra,20(sp)
10011c34:	df000415 	stw	fp,16(sp)
10011c38:	df000404 	addi	fp,sp,16
10011c3c:	e13ffd15 	stw	r4,-12(fp)
10011c40:	e17ffe15 	stw	r5,-8(fp)
10011c44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10011c48:	e0bffd17 	ldw	r2,-12(fp)
10011c4c:	10800017 	ldw	r2,0(r2)
10011c50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10011c54:	e0bffc17 	ldw	r2,-16(fp)
10011c58:	10c00a04 	addi	r3,r2,40
10011c5c:	e0bffd17 	ldw	r2,-12(fp)
10011c60:	10800217 	ldw	r2,8(r2)
10011c64:	100f883a 	mov	r7,r2
10011c68:	e1bfff17 	ldw	r6,-4(fp)
10011c6c:	e17ffe17 	ldw	r5,-8(fp)
10011c70:	1809883a 	mov	r4,r3
10011c74:	00124100 	call	10012410 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10011c78:	e037883a 	mov	sp,fp
10011c7c:	dfc00117 	ldw	ra,4(sp)
10011c80:	df000017 	ldw	fp,0(sp)
10011c84:	dec00204 	addi	sp,sp,8
10011c88:	f800283a 	ret

10011c8c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10011c8c:	defffc04 	addi	sp,sp,-16
10011c90:	dfc00315 	stw	ra,12(sp)
10011c94:	df000215 	stw	fp,8(sp)
10011c98:	df000204 	addi	fp,sp,8
10011c9c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10011ca0:	e0bfff17 	ldw	r2,-4(fp)
10011ca4:	10800017 	ldw	r2,0(r2)
10011ca8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10011cac:	e0bffe17 	ldw	r2,-8(fp)
10011cb0:	10c00a04 	addi	r3,r2,40
10011cb4:	e0bfff17 	ldw	r2,-4(fp)
10011cb8:	10800217 	ldw	r2,8(r2)
10011cbc:	100b883a 	mov	r5,r2
10011cc0:	1809883a 	mov	r4,r3
10011cc4:	001209c0 	call	1001209c <altera_avalon_jtag_uart_close>
}
10011cc8:	e037883a 	mov	sp,fp
10011ccc:	dfc00117 	ldw	ra,4(sp)
10011cd0:	df000017 	ldw	fp,0(sp)
10011cd4:	dec00204 	addi	sp,sp,8
10011cd8:	f800283a 	ret

10011cdc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10011cdc:	defffa04 	addi	sp,sp,-24
10011ce0:	dfc00515 	stw	ra,20(sp)
10011ce4:	df000415 	stw	fp,16(sp)
10011ce8:	df000404 	addi	fp,sp,16
10011cec:	e13ffd15 	stw	r4,-12(fp)
10011cf0:	e17ffe15 	stw	r5,-8(fp)
10011cf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10011cf8:	e0bffd17 	ldw	r2,-12(fp)
10011cfc:	10800017 	ldw	r2,0(r2)
10011d00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10011d04:	e0bffc17 	ldw	r2,-16(fp)
10011d08:	10800a04 	addi	r2,r2,40
10011d0c:	e1bfff17 	ldw	r6,-4(fp)
10011d10:	e17ffe17 	ldw	r5,-8(fp)
10011d14:	1009883a 	mov	r4,r2
10011d18:	00121040 	call	10012104 <altera_avalon_jtag_uart_ioctl>
}
10011d1c:	e037883a 	mov	sp,fp
10011d20:	dfc00117 	ldw	ra,4(sp)
10011d24:	df000017 	ldw	fp,0(sp)
10011d28:	dec00204 	addi	sp,sp,8
10011d2c:	f800283a 	ret

10011d30 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10011d30:	defffa04 	addi	sp,sp,-24
10011d34:	dfc00515 	stw	ra,20(sp)
10011d38:	df000415 	stw	fp,16(sp)
10011d3c:	df000404 	addi	fp,sp,16
10011d40:	e13ffd15 	stw	r4,-12(fp)
10011d44:	e17ffe15 	stw	r5,-8(fp)
10011d48:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011d4c:	e0bffd17 	ldw	r2,-12(fp)
10011d50:	00c00044 	movi	r3,1
10011d54:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10011d58:	e0bffd17 	ldw	r2,-12(fp)
10011d5c:	10800017 	ldw	r2,0(r2)
10011d60:	10800104 	addi	r2,r2,4
10011d64:	1007883a 	mov	r3,r2
10011d68:	e0bffd17 	ldw	r2,-12(fp)
10011d6c:	10800817 	ldw	r2,32(r2)
10011d70:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10011d74:	e0bffe17 	ldw	r2,-8(fp)
10011d78:	e0ffff17 	ldw	r3,-4(fp)
10011d7c:	d8000015 	stw	zero,0(sp)
10011d80:	e1fffd17 	ldw	r7,-12(fp)
10011d84:	01840074 	movhi	r6,4097
10011d88:	31877c04 	addi	r6,r6,7664
10011d8c:	180b883a 	mov	r5,r3
10011d90:	1009883a 	mov	r4,r2
10011d94:	0012a980 	call	10012a98 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10011d98:	e0bffd17 	ldw	r2,-12(fp)
10011d9c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10011da0:	e0bffd17 	ldw	r2,-12(fp)
10011da4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10011da8:	d0e6f217 	ldw	r3,-25656(gp)
10011dac:	e1fffd17 	ldw	r7,-12(fp)
10011db0:	01840074 	movhi	r6,4097
10011db4:	3187ff04 	addi	r6,r6,8188
10011db8:	180b883a 	mov	r5,r3
10011dbc:	1009883a 	mov	r4,r2
10011dc0:	00126340 	call	10012634 <alt_alarm_start>
10011dc4:	1000040e 	bge	r2,zero,10011dd8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10011dc8:	e0fffd17 	ldw	r3,-12(fp)
10011dcc:	00a00034 	movhi	r2,32768
10011dd0:	10bfffc4 	addi	r2,r2,-1
10011dd4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10011dd8:	0001883a 	nop
10011ddc:	e037883a 	mov	sp,fp
10011de0:	dfc00117 	ldw	ra,4(sp)
10011de4:	df000017 	ldw	fp,0(sp)
10011de8:	dec00204 	addi	sp,sp,8
10011dec:	f800283a 	ret

10011df0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10011df0:	defff804 	addi	sp,sp,-32
10011df4:	df000715 	stw	fp,28(sp)
10011df8:	df000704 	addi	fp,sp,28
10011dfc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10011e00:	e0bfff17 	ldw	r2,-4(fp)
10011e04:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10011e08:	e0bffb17 	ldw	r2,-20(fp)
10011e0c:	10800017 	ldw	r2,0(r2)
10011e10:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011e14:	e0bffc17 	ldw	r2,-16(fp)
10011e18:	10800104 	addi	r2,r2,4
10011e1c:	10800037 	ldwio	r2,0(r2)
10011e20:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10011e24:	e0bffd17 	ldw	r2,-12(fp)
10011e28:	1080c00c 	andi	r2,r2,768
10011e2c:	10006d26 	beq	r2,zero,10011fe4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10011e30:	e0bffd17 	ldw	r2,-12(fp)
10011e34:	1080400c 	andi	r2,r2,256
10011e38:	10003526 	beq	r2,zero,10011f10 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10011e3c:	00800074 	movhi	r2,1
10011e40:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011e44:	e0bffb17 	ldw	r2,-20(fp)
10011e48:	10800a17 	ldw	r2,40(r2)
10011e4c:	10800044 	addi	r2,r2,1
10011e50:	1081ffcc 	andi	r2,r2,2047
10011e54:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10011e58:	e0bffb17 	ldw	r2,-20(fp)
10011e5c:	10c00b17 	ldw	r3,44(r2)
10011e60:	e0bffe17 	ldw	r2,-8(fp)
10011e64:	18801526 	beq	r3,r2,10011ebc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10011e68:	e0bffc17 	ldw	r2,-16(fp)
10011e6c:	10800037 	ldwio	r2,0(r2)
10011e70:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10011e74:	e0bff917 	ldw	r2,-28(fp)
10011e78:	10a0000c 	andi	r2,r2,32768
10011e7c:	10001126 	beq	r2,zero,10011ec4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10011e80:	e0bffb17 	ldw	r2,-20(fp)
10011e84:	10800a17 	ldw	r2,40(r2)
10011e88:	e0fff917 	ldw	r3,-28(fp)
10011e8c:	1809883a 	mov	r4,r3
10011e90:	e0fffb17 	ldw	r3,-20(fp)
10011e94:	1885883a 	add	r2,r3,r2
10011e98:	10800e04 	addi	r2,r2,56
10011e9c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011ea0:	e0bffb17 	ldw	r2,-20(fp)
10011ea4:	10800a17 	ldw	r2,40(r2)
10011ea8:	10800044 	addi	r2,r2,1
10011eac:	10c1ffcc 	andi	r3,r2,2047
10011eb0:	e0bffb17 	ldw	r2,-20(fp)
10011eb4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10011eb8:	003fe206 	br	10011e44 <__alt_data_end+0xf8011e44>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10011ebc:	0001883a 	nop
10011ec0:	00000106 	br	10011ec8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10011ec4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10011ec8:	e0bff917 	ldw	r2,-28(fp)
10011ecc:	10bfffec 	andhi	r2,r2,65535
10011ed0:	10000f26 	beq	r2,zero,10011f10 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011ed4:	e0bffb17 	ldw	r2,-20(fp)
10011ed8:	10c00817 	ldw	r3,32(r2)
10011edc:	00bfff84 	movi	r2,-2
10011ee0:	1886703a 	and	r3,r3,r2
10011ee4:	e0bffb17 	ldw	r2,-20(fp)
10011ee8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10011eec:	e0bffc17 	ldw	r2,-16(fp)
10011ef0:	10800104 	addi	r2,r2,4
10011ef4:	1007883a 	mov	r3,r2
10011ef8:	e0bffb17 	ldw	r2,-20(fp)
10011efc:	10800817 	ldw	r2,32(r2)
10011f00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011f04:	e0bffc17 	ldw	r2,-16(fp)
10011f08:	10800104 	addi	r2,r2,4
10011f0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10011f10:	e0bffd17 	ldw	r2,-12(fp)
10011f14:	1080800c 	andi	r2,r2,512
10011f18:	103fbe26 	beq	r2,zero,10011e14 <__alt_data_end+0xf8011e14>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10011f1c:	e0bffd17 	ldw	r2,-12(fp)
10011f20:	1004d43a 	srli	r2,r2,16
10011f24:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10011f28:	00001406 	br	10011f7c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10011f2c:	e0bffc17 	ldw	r2,-16(fp)
10011f30:	e0fffb17 	ldw	r3,-20(fp)
10011f34:	18c00d17 	ldw	r3,52(r3)
10011f38:	e13ffb17 	ldw	r4,-20(fp)
10011f3c:	20c7883a 	add	r3,r4,r3
10011f40:	18c20e04 	addi	r3,r3,2104
10011f44:	18c00003 	ldbu	r3,0(r3)
10011f48:	18c03fcc 	andi	r3,r3,255
10011f4c:	18c0201c 	xori	r3,r3,128
10011f50:	18ffe004 	addi	r3,r3,-128
10011f54:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011f58:	e0bffb17 	ldw	r2,-20(fp)
10011f5c:	10800d17 	ldw	r2,52(r2)
10011f60:	10800044 	addi	r2,r2,1
10011f64:	10c1ffcc 	andi	r3,r2,2047
10011f68:	e0bffb17 	ldw	r2,-20(fp)
10011f6c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10011f70:	e0bffa17 	ldw	r2,-24(fp)
10011f74:	10bfffc4 	addi	r2,r2,-1
10011f78:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10011f7c:	e0bffa17 	ldw	r2,-24(fp)
10011f80:	10000526 	beq	r2,zero,10011f98 <altera_avalon_jtag_uart_irq+0x1a8>
10011f84:	e0bffb17 	ldw	r2,-20(fp)
10011f88:	10c00d17 	ldw	r3,52(r2)
10011f8c:	e0bffb17 	ldw	r2,-20(fp)
10011f90:	10800c17 	ldw	r2,48(r2)
10011f94:	18bfe51e 	bne	r3,r2,10011f2c <__alt_data_end+0xf8011f2c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10011f98:	e0bffa17 	ldw	r2,-24(fp)
10011f9c:	103f9d26 	beq	r2,zero,10011e14 <__alt_data_end+0xf8011e14>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10011fa0:	e0bffb17 	ldw	r2,-20(fp)
10011fa4:	10c00817 	ldw	r3,32(r2)
10011fa8:	00bfff44 	movi	r2,-3
10011fac:	1886703a 	and	r3,r3,r2
10011fb0:	e0bffb17 	ldw	r2,-20(fp)
10011fb4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011fb8:	e0bffb17 	ldw	r2,-20(fp)
10011fbc:	10800017 	ldw	r2,0(r2)
10011fc0:	10800104 	addi	r2,r2,4
10011fc4:	1007883a 	mov	r3,r2
10011fc8:	e0bffb17 	ldw	r2,-20(fp)
10011fcc:	10800817 	ldw	r2,32(r2)
10011fd0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011fd4:	e0bffc17 	ldw	r2,-16(fp)
10011fd8:	10800104 	addi	r2,r2,4
10011fdc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10011fe0:	003f8c06 	br	10011e14 <__alt_data_end+0xf8011e14>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10011fe4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10011fe8:	0001883a 	nop
10011fec:	e037883a 	mov	sp,fp
10011ff0:	df000017 	ldw	fp,0(sp)
10011ff4:	dec00104 	addi	sp,sp,4
10011ff8:	f800283a 	ret

10011ffc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10011ffc:	defff804 	addi	sp,sp,-32
10012000:	df000715 	stw	fp,28(sp)
10012004:	df000704 	addi	fp,sp,28
10012008:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1001200c:	e0bffb17 	ldw	r2,-20(fp)
10012010:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10012014:	e0bff917 	ldw	r2,-28(fp)
10012018:	10800017 	ldw	r2,0(r2)
1001201c:	10800104 	addi	r2,r2,4
10012020:	10800037 	ldwio	r2,0(r2)
10012024:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10012028:	e0bffa17 	ldw	r2,-24(fp)
1001202c:	1081000c 	andi	r2,r2,1024
10012030:	10000b26 	beq	r2,zero,10012060 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10012034:	e0bff917 	ldw	r2,-28(fp)
10012038:	10800017 	ldw	r2,0(r2)
1001203c:	10800104 	addi	r2,r2,4
10012040:	1007883a 	mov	r3,r2
10012044:	e0bff917 	ldw	r2,-28(fp)
10012048:	10800817 	ldw	r2,32(r2)
1001204c:	10810014 	ori	r2,r2,1024
10012050:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10012054:	e0bff917 	ldw	r2,-28(fp)
10012058:	10000915 	stw	zero,36(r2)
1001205c:	00000a06 	br	10012088 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10012060:	e0bff917 	ldw	r2,-28(fp)
10012064:	10c00917 	ldw	r3,36(r2)
10012068:	00a00034 	movhi	r2,32768
1001206c:	10bfff04 	addi	r2,r2,-4
10012070:	10c00536 	bltu	r2,r3,10012088 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10012074:	e0bff917 	ldw	r2,-28(fp)
10012078:	10800917 	ldw	r2,36(r2)
1001207c:	10c00044 	addi	r3,r2,1
10012080:	e0bff917 	ldw	r2,-28(fp)
10012084:	10c00915 	stw	r3,36(r2)
10012088:	d0a6f217 	ldw	r2,-25656(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1001208c:	e037883a 	mov	sp,fp
10012090:	df000017 	ldw	fp,0(sp)
10012094:	dec00104 	addi	sp,sp,4
10012098:	f800283a 	ret

1001209c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1001209c:	defffd04 	addi	sp,sp,-12
100120a0:	df000215 	stw	fp,8(sp)
100120a4:	df000204 	addi	fp,sp,8
100120a8:	e13ffe15 	stw	r4,-8(fp)
100120ac:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100120b0:	00000506 	br	100120c8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100120b4:	e0bfff17 	ldw	r2,-4(fp)
100120b8:	1090000c 	andi	r2,r2,16384
100120bc:	10000226 	beq	r2,zero,100120c8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100120c0:	00bffd44 	movi	r2,-11
100120c4:	00000b06 	br	100120f4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100120c8:	e0bffe17 	ldw	r2,-8(fp)
100120cc:	10c00d17 	ldw	r3,52(r2)
100120d0:	e0bffe17 	ldw	r2,-8(fp)
100120d4:	10800c17 	ldw	r2,48(r2)
100120d8:	18800526 	beq	r3,r2,100120f0 <altera_avalon_jtag_uart_close+0x54>
100120dc:	e0bffe17 	ldw	r2,-8(fp)
100120e0:	10c00917 	ldw	r3,36(r2)
100120e4:	e0bffe17 	ldw	r2,-8(fp)
100120e8:	10800117 	ldw	r2,4(r2)
100120ec:	18bff136 	bltu	r3,r2,100120b4 <__alt_data_end+0xf80120b4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100120f0:	0005883a 	mov	r2,zero
}
100120f4:	e037883a 	mov	sp,fp
100120f8:	df000017 	ldw	fp,0(sp)
100120fc:	dec00104 	addi	sp,sp,4
10012100:	f800283a 	ret

10012104 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10012104:	defffa04 	addi	sp,sp,-24
10012108:	df000515 	stw	fp,20(sp)
1001210c:	df000504 	addi	fp,sp,20
10012110:	e13ffd15 	stw	r4,-12(fp)
10012114:	e17ffe15 	stw	r5,-8(fp)
10012118:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1001211c:	00bff9c4 	movi	r2,-25
10012120:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10012124:	e0bffe17 	ldw	r2,-8(fp)
10012128:	10da8060 	cmpeqi	r3,r2,27137
1001212c:	1800031e 	bne	r3,zero,1001213c <altera_avalon_jtag_uart_ioctl+0x38>
10012130:	109a80a0 	cmpeqi	r2,r2,27138
10012134:	1000181e 	bne	r2,zero,10012198 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10012138:	00002906 	br	100121e0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1001213c:	e0bffd17 	ldw	r2,-12(fp)
10012140:	10c00117 	ldw	r3,4(r2)
10012144:	00a00034 	movhi	r2,32768
10012148:	10bfffc4 	addi	r2,r2,-1
1001214c:	18802126 	beq	r3,r2,100121d4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10012150:	e0bfff17 	ldw	r2,-4(fp)
10012154:	10800017 	ldw	r2,0(r2)
10012158:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1001215c:	e0bffc17 	ldw	r2,-16(fp)
10012160:	10800090 	cmplti	r2,r2,2
10012164:	1000061e 	bne	r2,zero,10012180 <altera_avalon_jtag_uart_ioctl+0x7c>
10012168:	e0fffc17 	ldw	r3,-16(fp)
1001216c:	00a00034 	movhi	r2,32768
10012170:	10bfffc4 	addi	r2,r2,-1
10012174:	18800226 	beq	r3,r2,10012180 <altera_avalon_jtag_uart_ioctl+0x7c>
10012178:	e0bffc17 	ldw	r2,-16(fp)
1001217c:	00000206 	br	10012188 <altera_avalon_jtag_uart_ioctl+0x84>
10012180:	00a00034 	movhi	r2,32768
10012184:	10bfff84 	addi	r2,r2,-2
10012188:	e0fffd17 	ldw	r3,-12(fp)
1001218c:	18800115 	stw	r2,4(r3)
      rc = 0;
10012190:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012194:	00000f06 	br	100121d4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10012198:	e0bffd17 	ldw	r2,-12(fp)
1001219c:	10c00117 	ldw	r3,4(r2)
100121a0:	00a00034 	movhi	r2,32768
100121a4:	10bfffc4 	addi	r2,r2,-1
100121a8:	18800c26 	beq	r3,r2,100121dc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100121ac:	e0bffd17 	ldw	r2,-12(fp)
100121b0:	10c00917 	ldw	r3,36(r2)
100121b4:	e0bffd17 	ldw	r2,-12(fp)
100121b8:	10800117 	ldw	r2,4(r2)
100121bc:	1885803a 	cmpltu	r2,r3,r2
100121c0:	10c03fcc 	andi	r3,r2,255
100121c4:	e0bfff17 	ldw	r2,-4(fp)
100121c8:	10c00015 	stw	r3,0(r2)
      rc = 0;
100121cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100121d0:	00000206 	br	100121dc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
100121d4:	0001883a 	nop
100121d8:	00000106 	br	100121e0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
100121dc:	0001883a 	nop

  default:
    break;
  }

  return rc;
100121e0:	e0bffb17 	ldw	r2,-20(fp)
}
100121e4:	e037883a 	mov	sp,fp
100121e8:	df000017 	ldw	fp,0(sp)
100121ec:	dec00104 	addi	sp,sp,4
100121f0:	f800283a 	ret

100121f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100121f4:	defff304 	addi	sp,sp,-52
100121f8:	dfc00c15 	stw	ra,48(sp)
100121fc:	df000b15 	stw	fp,44(sp)
10012200:	df000b04 	addi	fp,sp,44
10012204:	e13ffc15 	stw	r4,-16(fp)
10012208:	e17ffd15 	stw	r5,-12(fp)
1001220c:	e1bffe15 	stw	r6,-8(fp)
10012210:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10012214:	e0bffd17 	ldw	r2,-12(fp)
10012218:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001221c:	00004706 	br	1001233c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10012220:	e0bffc17 	ldw	r2,-16(fp)
10012224:	10800a17 	ldw	r2,40(r2)
10012228:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1001222c:	e0bffc17 	ldw	r2,-16(fp)
10012230:	10800b17 	ldw	r2,44(r2)
10012234:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10012238:	e0fff717 	ldw	r3,-36(fp)
1001223c:	e0bff817 	ldw	r2,-32(fp)
10012240:	18800536 	bltu	r3,r2,10012258 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10012244:	e0fff717 	ldw	r3,-36(fp)
10012248:	e0bff817 	ldw	r2,-32(fp)
1001224c:	1885c83a 	sub	r2,r3,r2
10012250:	e0bff615 	stw	r2,-40(fp)
10012254:	00000406 	br	10012268 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10012258:	00c20004 	movi	r3,2048
1001225c:	e0bff817 	ldw	r2,-32(fp)
10012260:	1885c83a 	sub	r2,r3,r2
10012264:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012268:	e0bff617 	ldw	r2,-40(fp)
1001226c:	10001e26 	beq	r2,zero,100122e8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10012270:	e0fffe17 	ldw	r3,-8(fp)
10012274:	e0bff617 	ldw	r2,-40(fp)
10012278:	1880022e 	bgeu	r3,r2,10012284 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1001227c:	e0bffe17 	ldw	r2,-8(fp)
10012280:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10012284:	e0bffc17 	ldw	r2,-16(fp)
10012288:	10c00e04 	addi	r3,r2,56
1001228c:	e0bff817 	ldw	r2,-32(fp)
10012290:	1885883a 	add	r2,r3,r2
10012294:	e1bff617 	ldw	r6,-40(fp)
10012298:	100b883a 	mov	r5,r2
1001229c:	e13ff517 	ldw	r4,-44(fp)
100122a0:	0009e580 	call	10009e58 <memcpy>
      ptr   += n;
100122a4:	e0fff517 	ldw	r3,-44(fp)
100122a8:	e0bff617 	ldw	r2,-40(fp)
100122ac:	1885883a 	add	r2,r3,r2
100122b0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100122b4:	e0fffe17 	ldw	r3,-8(fp)
100122b8:	e0bff617 	ldw	r2,-40(fp)
100122bc:	1885c83a 	sub	r2,r3,r2
100122c0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100122c4:	e0fff817 	ldw	r3,-32(fp)
100122c8:	e0bff617 	ldw	r2,-40(fp)
100122cc:	1885883a 	add	r2,r3,r2
100122d0:	10c1ffcc 	andi	r3,r2,2047
100122d4:	e0bffc17 	ldw	r2,-16(fp)
100122d8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
100122dc:	e0bffe17 	ldw	r2,-8(fp)
100122e0:	00bfcf16 	blt	zero,r2,10012220 <__alt_data_end+0xf8012220>
100122e4:	00000106 	br	100122ec <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
100122e8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
100122ec:	e0fff517 	ldw	r3,-44(fp)
100122f0:	e0bffd17 	ldw	r2,-12(fp)
100122f4:	1880141e 	bne	r3,r2,10012348 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100122f8:	e0bfff17 	ldw	r2,-4(fp)
100122fc:	1090000c 	andi	r2,r2,16384
10012300:	1000131e 	bne	r2,zero,10012350 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10012304:	0001883a 	nop
10012308:	e0bffc17 	ldw	r2,-16(fp)
1001230c:	10c00a17 	ldw	r3,40(r2)
10012310:	e0bff717 	ldw	r2,-36(fp)
10012314:	1880051e 	bne	r3,r2,1001232c <altera_avalon_jtag_uart_read+0x138>
10012318:	e0bffc17 	ldw	r2,-16(fp)
1001231c:	10c00917 	ldw	r3,36(r2)
10012320:	e0bffc17 	ldw	r2,-16(fp)
10012324:	10800117 	ldw	r2,4(r2)
10012328:	18bff736 	bltu	r3,r2,10012308 <__alt_data_end+0xf8012308>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1001232c:	e0bffc17 	ldw	r2,-16(fp)
10012330:	10c00a17 	ldw	r3,40(r2)
10012334:	e0bff717 	ldw	r2,-36(fp)
10012338:	18800726 	beq	r3,r2,10012358 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001233c:	e0bffe17 	ldw	r2,-8(fp)
10012340:	00bfb716 	blt	zero,r2,10012220 <__alt_data_end+0xf8012220>
10012344:	00000506 	br	1001235c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10012348:	0001883a 	nop
1001234c:	00000306 	br	1001235c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10012350:	0001883a 	nop
10012354:	00000106 	br	1001235c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10012358:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1001235c:	e0fff517 	ldw	r3,-44(fp)
10012360:	e0bffd17 	ldw	r2,-12(fp)
10012364:	18801826 	beq	r3,r2,100123c8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012368:	0005303a 	rdctl	r2,status
1001236c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012370:	e0fffb17 	ldw	r3,-20(fp)
10012374:	00bfff84 	movi	r2,-2
10012378:	1884703a 	and	r2,r3,r2
1001237c:	1001703a 	wrctl	status,r2
  
  return context;
10012380:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10012384:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012388:	e0bffc17 	ldw	r2,-16(fp)
1001238c:	10800817 	ldw	r2,32(r2)
10012390:	10c00054 	ori	r3,r2,1
10012394:	e0bffc17 	ldw	r2,-16(fp)
10012398:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001239c:	e0bffc17 	ldw	r2,-16(fp)
100123a0:	10800017 	ldw	r2,0(r2)
100123a4:	10800104 	addi	r2,r2,4
100123a8:	1007883a 	mov	r3,r2
100123ac:	e0bffc17 	ldw	r2,-16(fp)
100123b0:	10800817 	ldw	r2,32(r2)
100123b4:	18800035 	stwio	r2,0(r3)
100123b8:	e0bffa17 	ldw	r2,-24(fp)
100123bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100123c0:	e0bff917 	ldw	r2,-28(fp)
100123c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100123c8:	e0fff517 	ldw	r3,-44(fp)
100123cc:	e0bffd17 	ldw	r2,-12(fp)
100123d0:	18800426 	beq	r3,r2,100123e4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
100123d4:	e0fff517 	ldw	r3,-44(fp)
100123d8:	e0bffd17 	ldw	r2,-12(fp)
100123dc:	1885c83a 	sub	r2,r3,r2
100123e0:	00000606 	br	100123fc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
100123e4:	e0bfff17 	ldw	r2,-4(fp)
100123e8:	1090000c 	andi	r2,r2,16384
100123ec:	10000226 	beq	r2,zero,100123f8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
100123f0:	00bffd44 	movi	r2,-11
100123f4:	00000106 	br	100123fc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
100123f8:	00bffec4 	movi	r2,-5
}
100123fc:	e037883a 	mov	sp,fp
10012400:	dfc00117 	ldw	ra,4(sp)
10012404:	df000017 	ldw	fp,0(sp)
10012408:	dec00204 	addi	sp,sp,8
1001240c:	f800283a 	ret

10012410 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10012410:	defff304 	addi	sp,sp,-52
10012414:	dfc00c15 	stw	ra,48(sp)
10012418:	df000b15 	stw	fp,44(sp)
1001241c:	df000b04 	addi	fp,sp,44
10012420:	e13ffc15 	stw	r4,-16(fp)
10012424:	e17ffd15 	stw	r5,-12(fp)
10012428:	e1bffe15 	stw	r6,-8(fp)
1001242c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10012430:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10012434:	e0bffd17 	ldw	r2,-12(fp)
10012438:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001243c:	00003706 	br	1001251c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10012440:	e0bffc17 	ldw	r2,-16(fp)
10012444:	10800c17 	ldw	r2,48(r2)
10012448:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1001244c:	e0bffc17 	ldw	r2,-16(fp)
10012450:	10800d17 	ldw	r2,52(r2)
10012454:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10012458:	e0fff917 	ldw	r3,-28(fp)
1001245c:	e0bff517 	ldw	r2,-44(fp)
10012460:	1880062e 	bgeu	r3,r2,1001247c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10012464:	e0fff517 	ldw	r3,-44(fp)
10012468:	e0bff917 	ldw	r2,-28(fp)
1001246c:	1885c83a 	sub	r2,r3,r2
10012470:	10bfffc4 	addi	r2,r2,-1
10012474:	e0bff615 	stw	r2,-40(fp)
10012478:	00000b06 	br	100124a8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1001247c:	e0bff517 	ldw	r2,-44(fp)
10012480:	10000526 	beq	r2,zero,10012498 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10012484:	00c20004 	movi	r3,2048
10012488:	e0bff917 	ldw	r2,-28(fp)
1001248c:	1885c83a 	sub	r2,r3,r2
10012490:	e0bff615 	stw	r2,-40(fp)
10012494:	00000406 	br	100124a8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10012498:	00c1ffc4 	movi	r3,2047
1001249c:	e0bff917 	ldw	r2,-28(fp)
100124a0:	1885c83a 	sub	r2,r3,r2
100124a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100124a8:	e0bff617 	ldw	r2,-40(fp)
100124ac:	10001e26 	beq	r2,zero,10012528 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
100124b0:	e0fffe17 	ldw	r3,-8(fp)
100124b4:	e0bff617 	ldw	r2,-40(fp)
100124b8:	1880022e 	bgeu	r3,r2,100124c4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
100124bc:	e0bffe17 	ldw	r2,-8(fp)
100124c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100124c4:	e0bffc17 	ldw	r2,-16(fp)
100124c8:	10c20e04 	addi	r3,r2,2104
100124cc:	e0bff917 	ldw	r2,-28(fp)
100124d0:	1885883a 	add	r2,r3,r2
100124d4:	e1bff617 	ldw	r6,-40(fp)
100124d8:	e17ffd17 	ldw	r5,-12(fp)
100124dc:	1009883a 	mov	r4,r2
100124e0:	0009e580 	call	10009e58 <memcpy>
      ptr   += n;
100124e4:	e0fffd17 	ldw	r3,-12(fp)
100124e8:	e0bff617 	ldw	r2,-40(fp)
100124ec:	1885883a 	add	r2,r3,r2
100124f0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100124f4:	e0fffe17 	ldw	r3,-8(fp)
100124f8:	e0bff617 	ldw	r2,-40(fp)
100124fc:	1885c83a 	sub	r2,r3,r2
10012500:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012504:	e0fff917 	ldw	r3,-28(fp)
10012508:	e0bff617 	ldw	r2,-40(fp)
1001250c:	1885883a 	add	r2,r3,r2
10012510:	10c1ffcc 	andi	r3,r2,2047
10012514:	e0bffc17 	ldw	r2,-16(fp)
10012518:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001251c:	e0bffe17 	ldw	r2,-8(fp)
10012520:	00bfc716 	blt	zero,r2,10012440 <__alt_data_end+0xf8012440>
10012524:	00000106 	br	1001252c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10012528:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001252c:	0005303a 	rdctl	r2,status
10012530:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012534:	e0fffb17 	ldw	r3,-20(fp)
10012538:	00bfff84 	movi	r2,-2
1001253c:	1884703a 	and	r2,r3,r2
10012540:	1001703a 	wrctl	status,r2
  
  return context;
10012544:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10012548:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1001254c:	e0bffc17 	ldw	r2,-16(fp)
10012550:	10800817 	ldw	r2,32(r2)
10012554:	10c00094 	ori	r3,r2,2
10012558:	e0bffc17 	ldw	r2,-16(fp)
1001255c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012560:	e0bffc17 	ldw	r2,-16(fp)
10012564:	10800017 	ldw	r2,0(r2)
10012568:	10800104 	addi	r2,r2,4
1001256c:	1007883a 	mov	r3,r2
10012570:	e0bffc17 	ldw	r2,-16(fp)
10012574:	10800817 	ldw	r2,32(r2)
10012578:	18800035 	stwio	r2,0(r3)
1001257c:	e0bffa17 	ldw	r2,-24(fp)
10012580:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012584:	e0bff817 	ldw	r2,-32(fp)
10012588:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1001258c:	e0bffe17 	ldw	r2,-8(fp)
10012590:	0080100e 	bge	zero,r2,100125d4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10012594:	e0bfff17 	ldw	r2,-4(fp)
10012598:	1090000c 	andi	r2,r2,16384
1001259c:	1000101e 	bne	r2,zero,100125e0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100125a0:	0001883a 	nop
100125a4:	e0bffc17 	ldw	r2,-16(fp)
100125a8:	10c00d17 	ldw	r3,52(r2)
100125ac:	e0bff517 	ldw	r2,-44(fp)
100125b0:	1880051e 	bne	r3,r2,100125c8 <altera_avalon_jtag_uart_write+0x1b8>
100125b4:	e0bffc17 	ldw	r2,-16(fp)
100125b8:	10c00917 	ldw	r3,36(r2)
100125bc:	e0bffc17 	ldw	r2,-16(fp)
100125c0:	10800117 	ldw	r2,4(r2)
100125c4:	18bff736 	bltu	r3,r2,100125a4 <__alt_data_end+0xf80125a4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100125c8:	e0bffc17 	ldw	r2,-16(fp)
100125cc:	10800917 	ldw	r2,36(r2)
100125d0:	1000051e 	bne	r2,zero,100125e8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
100125d4:	e0bffe17 	ldw	r2,-8(fp)
100125d8:	00bfd016 	blt	zero,r2,1001251c <__alt_data_end+0xf801251c>
100125dc:	00000306 	br	100125ec <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
100125e0:	0001883a 	nop
100125e4:	00000106 	br	100125ec <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
100125e8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100125ec:	e0fffd17 	ldw	r3,-12(fp)
100125f0:	e0bff717 	ldw	r2,-36(fp)
100125f4:	18800426 	beq	r3,r2,10012608 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
100125f8:	e0fffd17 	ldw	r3,-12(fp)
100125fc:	e0bff717 	ldw	r2,-36(fp)
10012600:	1885c83a 	sub	r2,r3,r2
10012604:	00000606 	br	10012620 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10012608:	e0bfff17 	ldw	r2,-4(fp)
1001260c:	1090000c 	andi	r2,r2,16384
10012610:	10000226 	beq	r2,zero,1001261c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10012614:	00bffd44 	movi	r2,-11
10012618:	00000106 	br	10012620 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1001261c:	00bffec4 	movi	r2,-5
}
10012620:	e037883a 	mov	sp,fp
10012624:	dfc00117 	ldw	ra,4(sp)
10012628:	df000017 	ldw	fp,0(sp)
1001262c:	dec00204 	addi	sp,sp,8
10012630:	f800283a 	ret

10012634 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10012634:	defff504 	addi	sp,sp,-44
10012638:	df000a15 	stw	fp,40(sp)
1001263c:	df000a04 	addi	fp,sp,40
10012640:	e13ffc15 	stw	r4,-16(fp)
10012644:	e17ffd15 	stw	r5,-12(fp)
10012648:	e1bffe15 	stw	r6,-8(fp)
1001264c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10012650:	e03ff615 	stw	zero,-40(fp)
10012654:	d0a6f217 	ldw	r2,-25656(gp)
  
  if (alt_ticks_per_second ())
10012658:	10003c26 	beq	r2,zero,1001274c <alt_alarm_start+0x118>
  {
    if (alarm)
1001265c:	e0bffc17 	ldw	r2,-16(fp)
10012660:	10003826 	beq	r2,zero,10012744 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10012664:	e0bffc17 	ldw	r2,-16(fp)
10012668:	e0fffe17 	ldw	r3,-8(fp)
1001266c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10012670:	e0bffc17 	ldw	r2,-16(fp)
10012674:	e0ffff17 	ldw	r3,-4(fp)
10012678:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001267c:	0005303a 	rdctl	r2,status
10012680:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012684:	e0fff917 	ldw	r3,-28(fp)
10012688:	00bfff84 	movi	r2,-2
1001268c:	1884703a 	and	r2,r3,r2
10012690:	1001703a 	wrctl	status,r2
  
  return context;
10012694:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10012698:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1001269c:	d0a6f317 	ldw	r2,-25652(gp)
      
      current_nticks = alt_nticks();
100126a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100126a4:	e0fffd17 	ldw	r3,-12(fp)
100126a8:	e0bff617 	ldw	r2,-40(fp)
100126ac:	1885883a 	add	r2,r3,r2
100126b0:	10c00044 	addi	r3,r2,1
100126b4:	e0bffc17 	ldw	r2,-16(fp)
100126b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100126bc:	e0bffc17 	ldw	r2,-16(fp)
100126c0:	10c00217 	ldw	r3,8(r2)
100126c4:	e0bff617 	ldw	r2,-40(fp)
100126c8:	1880042e 	bgeu	r3,r2,100126dc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
100126cc:	e0bffc17 	ldw	r2,-16(fp)
100126d0:	00c00044 	movi	r3,1
100126d4:	10c00405 	stb	r3,16(r2)
100126d8:	00000206 	br	100126e4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
100126dc:	e0bffc17 	ldw	r2,-16(fp)
100126e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100126e4:	e0bffc17 	ldw	r2,-16(fp)
100126e8:	d0e01004 	addi	r3,gp,-32704
100126ec:	e0fffa15 	stw	r3,-24(fp)
100126f0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100126f4:	e0bffb17 	ldw	r2,-20(fp)
100126f8:	e0fffa17 	ldw	r3,-24(fp)
100126fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10012700:	e0bffa17 	ldw	r2,-24(fp)
10012704:	10c00017 	ldw	r3,0(r2)
10012708:	e0bffb17 	ldw	r2,-20(fp)
1001270c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10012710:	e0bffa17 	ldw	r2,-24(fp)
10012714:	10800017 	ldw	r2,0(r2)
10012718:	e0fffb17 	ldw	r3,-20(fp)
1001271c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10012720:	e0bffa17 	ldw	r2,-24(fp)
10012724:	e0fffb17 	ldw	r3,-20(fp)
10012728:	10c00015 	stw	r3,0(r2)
1001272c:	e0bff817 	ldw	r2,-32(fp)
10012730:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012734:	e0bff717 	ldw	r2,-36(fp)
10012738:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1001273c:	0005883a 	mov	r2,zero
10012740:	00000306 	br	10012750 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10012744:	00bffa84 	movi	r2,-22
10012748:	00000106 	br	10012750 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
1001274c:	00bfde84 	movi	r2,-134
  }
}
10012750:	e037883a 	mov	sp,fp
10012754:	df000017 	ldw	fp,0(sp)
10012758:	dec00104 	addi	sp,sp,4
1001275c:	f800283a 	ret

10012760 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10012760:	defffa04 	addi	sp,sp,-24
10012764:	dfc00515 	stw	ra,20(sp)
10012768:	df000415 	stw	fp,16(sp)
1001276c:	df000404 	addi	fp,sp,16
10012770:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10012774:	00800244 	movi	r2,9
10012778:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1001277c:	014003f4 	movhi	r5,15
10012780:	29509004 	addi	r5,r5,16960
10012784:	e13ffd17 	ldw	r4,-12(fp)
10012788:	000e8840 	call	1000e884 <__mulsi3>
1001278c:	100b883a 	mov	r5,r2
10012790:	0100bef4 	movhi	r4,763
10012794:	213c2004 	addi	r4,r4,-3968
10012798:	000e7c80 	call	1000e7c8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1001279c:	100b883a 	mov	r5,r2
100127a0:	01200034 	movhi	r4,32768
100127a4:	213fffc4 	addi	r4,r4,-1
100127a8:	000e7c80 	call	1000e7c8 <__udivsi3>
100127ac:	100b883a 	mov	r5,r2
100127b0:	e13fff17 	ldw	r4,-4(fp)
100127b4:	000e7c80 	call	1000e7c8 <__udivsi3>
100127b8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
100127bc:	e0bffe17 	ldw	r2,-8(fp)
100127c0:	10002a26 	beq	r2,zero,1001286c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
100127c4:	e03ffc15 	stw	zero,-16(fp)
100127c8:	00001706 	br	10012828 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
100127cc:	00a00034 	movhi	r2,32768
100127d0:	10bfffc4 	addi	r2,r2,-1
100127d4:	10bfffc4 	addi	r2,r2,-1
100127d8:	103ffe1e 	bne	r2,zero,100127d4 <__alt_data_end+0xf80127d4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
100127dc:	014003f4 	movhi	r5,15
100127e0:	29509004 	addi	r5,r5,16960
100127e4:	e13ffd17 	ldw	r4,-12(fp)
100127e8:	000e8840 	call	1000e884 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
100127ec:	100b883a 	mov	r5,r2
100127f0:	0100bef4 	movhi	r4,763
100127f4:	213c2004 	addi	r4,r4,-3968
100127f8:	000e7c80 	call	1000e7c8 <__udivsi3>
100127fc:	100b883a 	mov	r5,r2
10012800:	01200034 	movhi	r4,32768
10012804:	213fffc4 	addi	r4,r4,-1
10012808:	000e7c80 	call	1000e7c8 <__udivsi3>
1001280c:	1007883a 	mov	r3,r2
10012810:	e0bfff17 	ldw	r2,-4(fp)
10012814:	10c5c83a 	sub	r2,r2,r3
10012818:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1001281c:	e0bffc17 	ldw	r2,-16(fp)
10012820:	10800044 	addi	r2,r2,1
10012824:	e0bffc15 	stw	r2,-16(fp)
10012828:	e0fffc17 	ldw	r3,-16(fp)
1001282c:	e0bffe17 	ldw	r2,-8(fp)
10012830:	18bfe616 	blt	r3,r2,100127cc <__alt_data_end+0xf80127cc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10012834:	014003f4 	movhi	r5,15
10012838:	29509004 	addi	r5,r5,16960
1001283c:	e13ffd17 	ldw	r4,-12(fp)
10012840:	000e8840 	call	1000e884 <__mulsi3>
10012844:	100b883a 	mov	r5,r2
10012848:	0100bef4 	movhi	r4,763
1001284c:	213c2004 	addi	r4,r4,-3968
10012850:	000e7c80 	call	1000e7c8 <__udivsi3>
10012854:	e17fff17 	ldw	r5,-4(fp)
10012858:	1009883a 	mov	r4,r2
1001285c:	000e8840 	call	1000e884 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10012860:	10bfffc4 	addi	r2,r2,-1
10012864:	103ffe1e 	bne	r2,zero,10012860 <__alt_data_end+0xf8012860>
10012868:	00000d06 	br	100128a0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1001286c:	014003f4 	movhi	r5,15
10012870:	29509004 	addi	r5,r5,16960
10012874:	e13ffd17 	ldw	r4,-12(fp)
10012878:	000e8840 	call	1000e884 <__mulsi3>
1001287c:	100b883a 	mov	r5,r2
10012880:	0100bef4 	movhi	r4,763
10012884:	213c2004 	addi	r4,r4,-3968
10012888:	000e7c80 	call	1000e7c8 <__udivsi3>
1001288c:	e17fff17 	ldw	r5,-4(fp)
10012890:	1009883a 	mov	r4,r2
10012894:	000e8840 	call	1000e884 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10012898:	10bfffc4 	addi	r2,r2,-1
1001289c:	00bffe16 	blt	zero,r2,10012898 <__alt_data_end+0xf8012898>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100128a0:	0005883a 	mov	r2,zero
}
100128a4:	e037883a 	mov	sp,fp
100128a8:	dfc00117 	ldw	ra,4(sp)
100128ac:	df000017 	ldw	fp,0(sp)
100128b0:	dec00204 	addi	sp,sp,8
100128b4:	f800283a 	ret

100128b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100128b8:	deffff04 	addi	sp,sp,-4
100128bc:	df000015 	stw	fp,0(sp)
100128c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100128c4:	0001883a 	nop
100128c8:	e037883a 	mov	sp,fp
100128cc:	df000017 	ldw	fp,0(sp)
100128d0:	dec00104 	addi	sp,sp,4
100128d4:	f800283a 	ret

100128d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100128d8:	defffe04 	addi	sp,sp,-8
100128dc:	dfc00115 	stw	ra,4(sp)
100128e0:	df000015 	stw	fp,0(sp)
100128e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100128e8:	d0a00d17 	ldw	r2,-32716(gp)
100128ec:	10000326 	beq	r2,zero,100128fc <alt_get_errno+0x24>
100128f0:	d0a00d17 	ldw	r2,-32716(gp)
100128f4:	103ee83a 	callr	r2
100128f8:	00000106 	br	10012900 <alt_get_errno+0x28>
100128fc:	d0a6ea04 	addi	r2,gp,-25688
}
10012900:	e037883a 	mov	sp,fp
10012904:	dfc00117 	ldw	ra,4(sp)
10012908:	df000017 	ldw	fp,0(sp)
1001290c:	dec00204 	addi	sp,sp,8
10012910:	f800283a 	ret

10012914 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10012914:	defffa04 	addi	sp,sp,-24
10012918:	dfc00515 	stw	ra,20(sp)
1001291c:	df000415 	stw	fp,16(sp)
10012920:	df000404 	addi	fp,sp,16
10012924:	e13ffe15 	stw	r4,-8(fp)
10012928:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1001292c:	e0bffe17 	ldw	r2,-8(fp)
10012930:	10000326 	beq	r2,zero,10012940 <alt_dev_llist_insert+0x2c>
10012934:	e0bffe17 	ldw	r2,-8(fp)
10012938:	10800217 	ldw	r2,8(r2)
1001293c:	1000061e 	bne	r2,zero,10012958 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10012940:	00128d80 	call	100128d8 <alt_get_errno>
10012944:	1007883a 	mov	r3,r2
10012948:	00800584 	movi	r2,22
1001294c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10012950:	00bffa84 	movi	r2,-22
10012954:	00001306 	br	100129a4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10012958:	e0bffe17 	ldw	r2,-8(fp)
1001295c:	e0ffff17 	ldw	r3,-4(fp)
10012960:	e0fffc15 	stw	r3,-16(fp)
10012964:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10012968:	e0bffd17 	ldw	r2,-12(fp)
1001296c:	e0fffc17 	ldw	r3,-16(fp)
10012970:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10012974:	e0bffc17 	ldw	r2,-16(fp)
10012978:	10c00017 	ldw	r3,0(r2)
1001297c:	e0bffd17 	ldw	r2,-12(fp)
10012980:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10012984:	e0bffc17 	ldw	r2,-16(fp)
10012988:	10800017 	ldw	r2,0(r2)
1001298c:	e0fffd17 	ldw	r3,-12(fp)
10012990:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10012994:	e0bffc17 	ldw	r2,-16(fp)
10012998:	e0fffd17 	ldw	r3,-12(fp)
1001299c:	10c00015 	stw	r3,0(r2)

  return 0;  
100129a0:	0005883a 	mov	r2,zero
}
100129a4:	e037883a 	mov	sp,fp
100129a8:	dfc00117 	ldw	ra,4(sp)
100129ac:	df000017 	ldw	fp,0(sp)
100129b0:	dec00204 	addi	sp,sp,8
100129b4:	f800283a 	ret

100129b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100129b8:	defffd04 	addi	sp,sp,-12
100129bc:	dfc00215 	stw	ra,8(sp)
100129c0:	df000115 	stw	fp,4(sp)
100129c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100129c8:	00840074 	movhi	r2,4097
100129cc:	108e5b04 	addi	r2,r2,14700
100129d0:	e0bfff15 	stw	r2,-4(fp)
100129d4:	00000606 	br	100129f0 <_do_ctors+0x38>
        (*ctor) (); 
100129d8:	e0bfff17 	ldw	r2,-4(fp)
100129dc:	10800017 	ldw	r2,0(r2)
100129e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100129e4:	e0bfff17 	ldw	r2,-4(fp)
100129e8:	10bfff04 	addi	r2,r2,-4
100129ec:	e0bfff15 	stw	r2,-4(fp)
100129f0:	e0ffff17 	ldw	r3,-4(fp)
100129f4:	00840074 	movhi	r2,4097
100129f8:	108e5c04 	addi	r2,r2,14704
100129fc:	18bff62e 	bgeu	r3,r2,100129d8 <__alt_data_end+0xf80129d8>
        (*ctor) (); 
}
10012a00:	0001883a 	nop
10012a04:	e037883a 	mov	sp,fp
10012a08:	dfc00117 	ldw	ra,4(sp)
10012a0c:	df000017 	ldw	fp,0(sp)
10012a10:	dec00204 	addi	sp,sp,8
10012a14:	f800283a 	ret

10012a18 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10012a18:	defffd04 	addi	sp,sp,-12
10012a1c:	dfc00215 	stw	ra,8(sp)
10012a20:	df000115 	stw	fp,4(sp)
10012a24:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10012a28:	00840074 	movhi	r2,4097
10012a2c:	108e5b04 	addi	r2,r2,14700
10012a30:	e0bfff15 	stw	r2,-4(fp)
10012a34:	00000606 	br	10012a50 <_do_dtors+0x38>
        (*dtor) (); 
10012a38:	e0bfff17 	ldw	r2,-4(fp)
10012a3c:	10800017 	ldw	r2,0(r2)
10012a40:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10012a44:	e0bfff17 	ldw	r2,-4(fp)
10012a48:	10bfff04 	addi	r2,r2,-4
10012a4c:	e0bfff15 	stw	r2,-4(fp)
10012a50:	e0ffff17 	ldw	r3,-4(fp)
10012a54:	00840074 	movhi	r2,4097
10012a58:	108e5c04 	addi	r2,r2,14704
10012a5c:	18bff62e 	bgeu	r3,r2,10012a38 <__alt_data_end+0xf8012a38>
        (*dtor) (); 
}
10012a60:	0001883a 	nop
10012a64:	e037883a 	mov	sp,fp
10012a68:	dfc00117 	ldw	ra,4(sp)
10012a6c:	df000017 	ldw	fp,0(sp)
10012a70:	dec00204 	addi	sp,sp,8
10012a74:	f800283a 	ret

10012a78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10012a78:	deffff04 	addi	sp,sp,-4
10012a7c:	df000015 	stw	fp,0(sp)
10012a80:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10012a84:	0001883a 	nop
10012a88:	e037883a 	mov	sp,fp
10012a8c:	df000017 	ldw	fp,0(sp)
10012a90:	dec00104 	addi	sp,sp,4
10012a94:	f800283a 	ret

10012a98 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10012a98:	defff904 	addi	sp,sp,-28
10012a9c:	dfc00615 	stw	ra,24(sp)
10012aa0:	df000515 	stw	fp,20(sp)
10012aa4:	df000504 	addi	fp,sp,20
10012aa8:	e13ffc15 	stw	r4,-16(fp)
10012aac:	e17ffd15 	stw	r5,-12(fp)
10012ab0:	e1bffe15 	stw	r6,-8(fp)
10012ab4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10012ab8:	e0800217 	ldw	r2,8(fp)
10012abc:	d8800015 	stw	r2,0(sp)
10012ac0:	e1ffff17 	ldw	r7,-4(fp)
10012ac4:	e1bffe17 	ldw	r6,-8(fp)
10012ac8:	e17ffd17 	ldw	r5,-12(fp)
10012acc:	e13ffc17 	ldw	r4,-16(fp)
10012ad0:	0012c480 	call	10012c48 <alt_iic_isr_register>
}  
10012ad4:	e037883a 	mov	sp,fp
10012ad8:	dfc00117 	ldw	ra,4(sp)
10012adc:	df000017 	ldw	fp,0(sp)
10012ae0:	dec00204 	addi	sp,sp,8
10012ae4:	f800283a 	ret

10012ae8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10012ae8:	defff904 	addi	sp,sp,-28
10012aec:	df000615 	stw	fp,24(sp)
10012af0:	df000604 	addi	fp,sp,24
10012af4:	e13ffe15 	stw	r4,-8(fp)
10012af8:	e17fff15 	stw	r5,-4(fp)
10012afc:	e0bfff17 	ldw	r2,-4(fp)
10012b00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012b04:	0005303a 	rdctl	r2,status
10012b08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012b0c:	e0fffb17 	ldw	r3,-20(fp)
10012b10:	00bfff84 	movi	r2,-2
10012b14:	1884703a 	and	r2,r3,r2
10012b18:	1001703a 	wrctl	status,r2
  
  return context;
10012b1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10012b20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10012b24:	00c00044 	movi	r3,1
10012b28:	e0bffa17 	ldw	r2,-24(fp)
10012b2c:	1884983a 	sll	r2,r3,r2
10012b30:	1007883a 	mov	r3,r2
10012b34:	d0a6f117 	ldw	r2,-25660(gp)
10012b38:	1884b03a 	or	r2,r3,r2
10012b3c:	d0a6f115 	stw	r2,-25660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10012b40:	d0a6f117 	ldw	r2,-25660(gp)
10012b44:	100170fa 	wrctl	ienable,r2
10012b48:	e0bffc17 	ldw	r2,-16(fp)
10012b4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012b50:	e0bffd17 	ldw	r2,-12(fp)
10012b54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10012b58:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10012b5c:	0001883a 	nop
}
10012b60:	e037883a 	mov	sp,fp
10012b64:	df000017 	ldw	fp,0(sp)
10012b68:	dec00104 	addi	sp,sp,4
10012b6c:	f800283a 	ret

10012b70 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10012b70:	defff904 	addi	sp,sp,-28
10012b74:	df000615 	stw	fp,24(sp)
10012b78:	df000604 	addi	fp,sp,24
10012b7c:	e13ffe15 	stw	r4,-8(fp)
10012b80:	e17fff15 	stw	r5,-4(fp)
10012b84:	e0bfff17 	ldw	r2,-4(fp)
10012b88:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012b8c:	0005303a 	rdctl	r2,status
10012b90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012b94:	e0fffb17 	ldw	r3,-20(fp)
10012b98:	00bfff84 	movi	r2,-2
10012b9c:	1884703a 	and	r2,r3,r2
10012ba0:	1001703a 	wrctl	status,r2
  
  return context;
10012ba4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10012ba8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10012bac:	00c00044 	movi	r3,1
10012bb0:	e0bffa17 	ldw	r2,-24(fp)
10012bb4:	1884983a 	sll	r2,r3,r2
10012bb8:	0084303a 	nor	r2,zero,r2
10012bbc:	1007883a 	mov	r3,r2
10012bc0:	d0a6f117 	ldw	r2,-25660(gp)
10012bc4:	1884703a 	and	r2,r3,r2
10012bc8:	d0a6f115 	stw	r2,-25660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10012bcc:	d0a6f117 	ldw	r2,-25660(gp)
10012bd0:	100170fa 	wrctl	ienable,r2
10012bd4:	e0bffc17 	ldw	r2,-16(fp)
10012bd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012bdc:	e0bffd17 	ldw	r2,-12(fp)
10012be0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10012be4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10012be8:	0001883a 	nop
}
10012bec:	e037883a 	mov	sp,fp
10012bf0:	df000017 	ldw	fp,0(sp)
10012bf4:	dec00104 	addi	sp,sp,4
10012bf8:	f800283a 	ret

10012bfc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10012bfc:	defffc04 	addi	sp,sp,-16
10012c00:	df000315 	stw	fp,12(sp)
10012c04:	df000304 	addi	fp,sp,12
10012c08:	e13ffe15 	stw	r4,-8(fp)
10012c0c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10012c10:	000530fa 	rdctl	r2,ienable
10012c14:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10012c18:	00c00044 	movi	r3,1
10012c1c:	e0bfff17 	ldw	r2,-4(fp)
10012c20:	1884983a 	sll	r2,r3,r2
10012c24:	1007883a 	mov	r3,r2
10012c28:	e0bffd17 	ldw	r2,-12(fp)
10012c2c:	1884703a 	and	r2,r3,r2
10012c30:	1004c03a 	cmpne	r2,r2,zero
10012c34:	10803fcc 	andi	r2,r2,255
}
10012c38:	e037883a 	mov	sp,fp
10012c3c:	df000017 	ldw	fp,0(sp)
10012c40:	dec00104 	addi	sp,sp,4
10012c44:	f800283a 	ret

10012c48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10012c48:	defff504 	addi	sp,sp,-44
10012c4c:	dfc00a15 	stw	ra,40(sp)
10012c50:	df000915 	stw	fp,36(sp)
10012c54:	df000904 	addi	fp,sp,36
10012c58:	e13ffc15 	stw	r4,-16(fp)
10012c5c:	e17ffd15 	stw	r5,-12(fp)
10012c60:	e1bffe15 	stw	r6,-8(fp)
10012c64:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10012c68:	00bffa84 	movi	r2,-22
10012c6c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10012c70:	e0bffd17 	ldw	r2,-12(fp)
10012c74:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10012c78:	e0bff817 	ldw	r2,-32(fp)
10012c7c:	10800808 	cmpgei	r2,r2,32
10012c80:	1000271e 	bne	r2,zero,10012d20 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012c84:	0005303a 	rdctl	r2,status
10012c88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012c8c:	e0fffb17 	ldw	r3,-20(fp)
10012c90:	00bfff84 	movi	r2,-2
10012c94:	1884703a 	and	r2,r3,r2
10012c98:	1001703a 	wrctl	status,r2
  
  return context;
10012c9c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10012ca0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10012ca4:	00840074 	movhi	r2,4097
10012ca8:	109eaa04 	addi	r2,r2,31400
10012cac:	e0fff817 	ldw	r3,-32(fp)
10012cb0:	180690fa 	slli	r3,r3,3
10012cb4:	10c5883a 	add	r2,r2,r3
10012cb8:	e0fffe17 	ldw	r3,-8(fp)
10012cbc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10012cc0:	00840074 	movhi	r2,4097
10012cc4:	109eaa04 	addi	r2,r2,31400
10012cc8:	e0fff817 	ldw	r3,-32(fp)
10012ccc:	180690fa 	slli	r3,r3,3
10012cd0:	10c5883a 	add	r2,r2,r3
10012cd4:	10800104 	addi	r2,r2,4
10012cd8:	e0ffff17 	ldw	r3,-4(fp)
10012cdc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10012ce0:	e0bffe17 	ldw	r2,-8(fp)
10012ce4:	10000526 	beq	r2,zero,10012cfc <alt_iic_isr_register+0xb4>
10012ce8:	e0bff817 	ldw	r2,-32(fp)
10012cec:	100b883a 	mov	r5,r2
10012cf0:	e13ffc17 	ldw	r4,-16(fp)
10012cf4:	0012ae80 	call	10012ae8 <alt_ic_irq_enable>
10012cf8:	00000406 	br	10012d0c <alt_iic_isr_register+0xc4>
10012cfc:	e0bff817 	ldw	r2,-32(fp)
10012d00:	100b883a 	mov	r5,r2
10012d04:	e13ffc17 	ldw	r4,-16(fp)
10012d08:	0012b700 	call	10012b70 <alt_ic_irq_disable>
10012d0c:	e0bff715 	stw	r2,-36(fp)
10012d10:	e0bffa17 	ldw	r2,-24(fp)
10012d14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012d18:	e0bff917 	ldw	r2,-28(fp)
10012d1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10012d20:	e0bff717 	ldw	r2,-36(fp)
}
10012d24:	e037883a 	mov	sp,fp
10012d28:	dfc00117 	ldw	ra,4(sp)
10012d2c:	df000017 	ldw	fp,0(sp)
10012d30:	dec00204 	addi	sp,sp,8
10012d34:	f800283a 	ret

10012d38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10012d38:	defff804 	addi	sp,sp,-32
10012d3c:	dfc00715 	stw	ra,28(sp)
10012d40:	df000615 	stw	fp,24(sp)
10012d44:	dc000515 	stw	r16,20(sp)
10012d48:	df000604 	addi	fp,sp,24
10012d4c:	e13ffb15 	stw	r4,-20(fp)
10012d50:	e17ffc15 	stw	r5,-16(fp)
10012d54:	e1bffd15 	stw	r6,-12(fp)
10012d58:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10012d5c:	e1bffe17 	ldw	r6,-8(fp)
10012d60:	e17ffd17 	ldw	r5,-12(fp)
10012d64:	e13ffc17 	ldw	r4,-16(fp)
10012d68:	0012fc00 	call	10012fc0 <open>
10012d6c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10012d70:	e0bffa17 	ldw	r2,-24(fp)
10012d74:	10002216 	blt	r2,zero,10012e00 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10012d78:	04040074 	movhi	r16,4097
10012d7c:	84133304 	addi	r16,r16,19660
10012d80:	e0bffa17 	ldw	r2,-24(fp)
10012d84:	01400304 	movi	r5,12
10012d88:	1009883a 	mov	r4,r2
10012d8c:	000e8840 	call	1000e884 <__mulsi3>
10012d90:	8085883a 	add	r2,r16,r2
10012d94:	10c00017 	ldw	r3,0(r2)
10012d98:	e0bffb17 	ldw	r2,-20(fp)
10012d9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10012da0:	04040074 	movhi	r16,4097
10012da4:	84133304 	addi	r16,r16,19660
10012da8:	e0bffa17 	ldw	r2,-24(fp)
10012dac:	01400304 	movi	r5,12
10012db0:	1009883a 	mov	r4,r2
10012db4:	000e8840 	call	1000e884 <__mulsi3>
10012db8:	8085883a 	add	r2,r16,r2
10012dbc:	10800104 	addi	r2,r2,4
10012dc0:	10c00017 	ldw	r3,0(r2)
10012dc4:	e0bffb17 	ldw	r2,-20(fp)
10012dc8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10012dcc:	04040074 	movhi	r16,4097
10012dd0:	84133304 	addi	r16,r16,19660
10012dd4:	e0bffa17 	ldw	r2,-24(fp)
10012dd8:	01400304 	movi	r5,12
10012ddc:	1009883a 	mov	r4,r2
10012de0:	000e8840 	call	1000e884 <__mulsi3>
10012de4:	8085883a 	add	r2,r16,r2
10012de8:	10800204 	addi	r2,r2,8
10012dec:	10c00017 	ldw	r3,0(r2)
10012df0:	e0bffb17 	ldw	r2,-20(fp)
10012df4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10012df8:	e13ffa17 	ldw	r4,-24(fp)
10012dfc:	00118740 	call	10011874 <alt_release_fd>
  }
} 
10012e00:	0001883a 	nop
10012e04:	e6ffff04 	addi	sp,fp,-4
10012e08:	dfc00217 	ldw	ra,8(sp)
10012e0c:	df000117 	ldw	fp,4(sp)
10012e10:	dc000017 	ldw	r16,0(sp)
10012e14:	dec00304 	addi	sp,sp,12
10012e18:	f800283a 	ret

10012e1c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10012e1c:	defffb04 	addi	sp,sp,-20
10012e20:	dfc00415 	stw	ra,16(sp)
10012e24:	df000315 	stw	fp,12(sp)
10012e28:	df000304 	addi	fp,sp,12
10012e2c:	e13ffd15 	stw	r4,-12(fp)
10012e30:	e17ffe15 	stw	r5,-8(fp)
10012e34:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10012e38:	01c07fc4 	movi	r7,511
10012e3c:	01800044 	movi	r6,1
10012e40:	e17ffd17 	ldw	r5,-12(fp)
10012e44:	01040074 	movhi	r4,4097
10012e48:	21133604 	addi	r4,r4,19672
10012e4c:	0012d380 	call	10012d38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10012e50:	01c07fc4 	movi	r7,511
10012e54:	000d883a 	mov	r6,zero
10012e58:	e17ffe17 	ldw	r5,-8(fp)
10012e5c:	01040074 	movhi	r4,4097
10012e60:	21133304 	addi	r4,r4,19660
10012e64:	0012d380 	call	10012d38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10012e68:	01c07fc4 	movi	r7,511
10012e6c:	01800044 	movi	r6,1
10012e70:	e17fff17 	ldw	r5,-4(fp)
10012e74:	01040074 	movhi	r4,4097
10012e78:	21133904 	addi	r4,r4,19684
10012e7c:	0012d380 	call	10012d38 <alt_open_fd>
}  
10012e80:	0001883a 	nop
10012e84:	e037883a 	mov	sp,fp
10012e88:	dfc00117 	ldw	ra,4(sp)
10012e8c:	df000017 	ldw	fp,0(sp)
10012e90:	dec00204 	addi	sp,sp,8
10012e94:	f800283a 	ret

10012e98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012e98:	defffe04 	addi	sp,sp,-8
10012e9c:	dfc00115 	stw	ra,4(sp)
10012ea0:	df000015 	stw	fp,0(sp)
10012ea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012ea8:	d0a00d17 	ldw	r2,-32716(gp)
10012eac:	10000326 	beq	r2,zero,10012ebc <alt_get_errno+0x24>
10012eb0:	d0a00d17 	ldw	r2,-32716(gp)
10012eb4:	103ee83a 	callr	r2
10012eb8:	00000106 	br	10012ec0 <alt_get_errno+0x28>
10012ebc:	d0a6ea04 	addi	r2,gp,-25688
}
10012ec0:	e037883a 	mov	sp,fp
10012ec4:	dfc00117 	ldw	ra,4(sp)
10012ec8:	df000017 	ldw	fp,0(sp)
10012ecc:	dec00204 	addi	sp,sp,8
10012ed0:	f800283a 	ret

10012ed4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10012ed4:	defffb04 	addi	sp,sp,-20
10012ed8:	dfc00415 	stw	ra,16(sp)
10012edc:	df000315 	stw	fp,12(sp)
10012ee0:	dc000215 	stw	r16,8(sp)
10012ee4:	df000304 	addi	fp,sp,12
10012ee8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10012eec:	e0bffe17 	ldw	r2,-8(fp)
10012ef0:	10800217 	ldw	r2,8(r2)
10012ef4:	10d00034 	orhi	r3,r2,16384
10012ef8:	e0bffe17 	ldw	r2,-8(fp)
10012efc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10012f00:	e03ffd15 	stw	zero,-12(fp)
10012f04:	00002306 	br	10012f94 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10012f08:	04040074 	movhi	r16,4097
10012f0c:	84133304 	addi	r16,r16,19660
10012f10:	e0bffd17 	ldw	r2,-12(fp)
10012f14:	01400304 	movi	r5,12
10012f18:	1009883a 	mov	r4,r2
10012f1c:	000e8840 	call	1000e884 <__mulsi3>
10012f20:	8085883a 	add	r2,r16,r2
10012f24:	10c00017 	ldw	r3,0(r2)
10012f28:	e0bffe17 	ldw	r2,-8(fp)
10012f2c:	10800017 	ldw	r2,0(r2)
10012f30:	1880151e 	bne	r3,r2,10012f88 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10012f34:	04040074 	movhi	r16,4097
10012f38:	84133304 	addi	r16,r16,19660
10012f3c:	e0bffd17 	ldw	r2,-12(fp)
10012f40:	01400304 	movi	r5,12
10012f44:	1009883a 	mov	r4,r2
10012f48:	000e8840 	call	1000e884 <__mulsi3>
10012f4c:	8085883a 	add	r2,r16,r2
10012f50:	10800204 	addi	r2,r2,8
10012f54:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10012f58:	10000b0e 	bge	r2,zero,10012f88 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10012f5c:	01400304 	movi	r5,12
10012f60:	e13ffd17 	ldw	r4,-12(fp)
10012f64:	000e8840 	call	1000e884 <__mulsi3>
10012f68:	1007883a 	mov	r3,r2
10012f6c:	00840074 	movhi	r2,4097
10012f70:	10933304 	addi	r2,r2,19660
10012f74:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10012f78:	e0bffe17 	ldw	r2,-8(fp)
10012f7c:	18800226 	beq	r3,r2,10012f88 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10012f80:	00bffcc4 	movi	r2,-13
10012f84:	00000806 	br	10012fa8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10012f88:	e0bffd17 	ldw	r2,-12(fp)
10012f8c:	10800044 	addi	r2,r2,1
10012f90:	e0bffd15 	stw	r2,-12(fp)
10012f94:	d0a00c17 	ldw	r2,-32720(gp)
10012f98:	1007883a 	mov	r3,r2
10012f9c:	e0bffd17 	ldw	r2,-12(fp)
10012fa0:	18bfd92e 	bgeu	r3,r2,10012f08 <__alt_data_end+0xf8012f08>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10012fa4:	0005883a 	mov	r2,zero
}
10012fa8:	e6ffff04 	addi	sp,fp,-4
10012fac:	dfc00217 	ldw	ra,8(sp)
10012fb0:	df000117 	ldw	fp,4(sp)
10012fb4:	dc000017 	ldw	r16,0(sp)
10012fb8:	dec00304 	addi	sp,sp,12
10012fbc:	f800283a 	ret

10012fc0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10012fc0:	defff604 	addi	sp,sp,-40
10012fc4:	dfc00915 	stw	ra,36(sp)
10012fc8:	df000815 	stw	fp,32(sp)
10012fcc:	df000804 	addi	fp,sp,32
10012fd0:	e13ffd15 	stw	r4,-12(fp)
10012fd4:	e17ffe15 	stw	r5,-8(fp)
10012fd8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10012fdc:	00bfffc4 	movi	r2,-1
10012fe0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10012fe4:	00bffb44 	movi	r2,-19
10012fe8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10012fec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10012ff0:	d1600a04 	addi	r5,gp,-32728
10012ff4:	e13ffd17 	ldw	r4,-12(fp)
10012ff8:	00132e40 	call	100132e4 <alt_find_dev>
10012ffc:	e0bff815 	stw	r2,-32(fp)
10013000:	e0bff817 	ldw	r2,-32(fp)
10013004:	1000051e 	bne	r2,zero,1001301c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10013008:	e13ffd17 	ldw	r4,-12(fp)
1001300c:	00133740 	call	10013374 <alt_find_file>
10013010:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10013014:	00800044 	movi	r2,1
10013018:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1001301c:	e0bff817 	ldw	r2,-32(fp)
10013020:	10002b26 	beq	r2,zero,100130d0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10013024:	e13ff817 	ldw	r4,-32(fp)
10013028:	001347c0 	call	1001347c <alt_get_fd>
1001302c:	e0bff915 	stw	r2,-28(fp)
10013030:	e0bff917 	ldw	r2,-28(fp)
10013034:	1000030e 	bge	r2,zero,10013044 <open+0x84>
    {
      status = index;
10013038:	e0bff917 	ldw	r2,-28(fp)
1001303c:	e0bffa15 	stw	r2,-24(fp)
10013040:	00002506 	br	100130d8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10013044:	01400304 	movi	r5,12
10013048:	e13ff917 	ldw	r4,-28(fp)
1001304c:	000e8840 	call	1000e884 <__mulsi3>
10013050:	1007883a 	mov	r3,r2
10013054:	00840074 	movhi	r2,4097
10013058:	10933304 	addi	r2,r2,19660
1001305c:	1885883a 	add	r2,r3,r2
10013060:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10013064:	e0fffe17 	ldw	r3,-8(fp)
10013068:	00900034 	movhi	r2,16384
1001306c:	10bfffc4 	addi	r2,r2,-1
10013070:	1886703a 	and	r3,r3,r2
10013074:	e0bffc17 	ldw	r2,-16(fp)
10013078:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1001307c:	e0bffb17 	ldw	r2,-20(fp)
10013080:	1000051e 	bne	r2,zero,10013098 <open+0xd8>
10013084:	e13ffc17 	ldw	r4,-16(fp)
10013088:	0012ed40 	call	10012ed4 <alt_file_locked>
1001308c:	e0bffa15 	stw	r2,-24(fp)
10013090:	e0bffa17 	ldw	r2,-24(fp)
10013094:	10001016 	blt	r2,zero,100130d8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10013098:	e0bff817 	ldw	r2,-32(fp)
1001309c:	10800317 	ldw	r2,12(r2)
100130a0:	10000826 	beq	r2,zero,100130c4 <open+0x104>
100130a4:	e0bff817 	ldw	r2,-32(fp)
100130a8:	10800317 	ldw	r2,12(r2)
100130ac:	e1ffff17 	ldw	r7,-4(fp)
100130b0:	e1bffe17 	ldw	r6,-8(fp)
100130b4:	e17ffd17 	ldw	r5,-12(fp)
100130b8:	e13ffc17 	ldw	r4,-16(fp)
100130bc:	103ee83a 	callr	r2
100130c0:	00000106 	br	100130c8 <open+0x108>
100130c4:	0005883a 	mov	r2,zero
100130c8:	e0bffa15 	stw	r2,-24(fp)
100130cc:	00000206 	br	100130d8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100130d0:	00bffb44 	movi	r2,-19
100130d4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100130d8:	e0bffa17 	ldw	r2,-24(fp)
100130dc:	1000090e 	bge	r2,zero,10013104 <open+0x144>
  {
    alt_release_fd (index);  
100130e0:	e13ff917 	ldw	r4,-28(fp)
100130e4:	00118740 	call	10011874 <alt_release_fd>
    ALT_ERRNO = -status;
100130e8:	0012e980 	call	10012e98 <alt_get_errno>
100130ec:	1007883a 	mov	r3,r2
100130f0:	e0bffa17 	ldw	r2,-24(fp)
100130f4:	0085c83a 	sub	r2,zero,r2
100130f8:	18800015 	stw	r2,0(r3)
    return -1;
100130fc:	00bfffc4 	movi	r2,-1
10013100:	00000106 	br	10013108 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10013104:	e0bff917 	ldw	r2,-28(fp)
}
10013108:	e037883a 	mov	sp,fp
1001310c:	dfc00117 	ldw	ra,4(sp)
10013110:	df000017 	ldw	fp,0(sp)
10013114:	dec00204 	addi	sp,sp,8
10013118:	f800283a 	ret

1001311c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1001311c:	defffa04 	addi	sp,sp,-24
10013120:	df000515 	stw	fp,20(sp)
10013124:	df000504 	addi	fp,sp,20
10013128:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001312c:	0005303a 	rdctl	r2,status
10013130:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013134:	e0fffc17 	ldw	r3,-16(fp)
10013138:	00bfff84 	movi	r2,-2
1001313c:	1884703a 	and	r2,r3,r2
10013140:	1001703a 	wrctl	status,r2
  
  return context;
10013144:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10013148:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1001314c:	e0bfff17 	ldw	r2,-4(fp)
10013150:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10013154:	e0bffd17 	ldw	r2,-12(fp)
10013158:	10800017 	ldw	r2,0(r2)
1001315c:	e0fffd17 	ldw	r3,-12(fp)
10013160:	18c00117 	ldw	r3,4(r3)
10013164:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10013168:	e0bffd17 	ldw	r2,-12(fp)
1001316c:	10800117 	ldw	r2,4(r2)
10013170:	e0fffd17 	ldw	r3,-12(fp)
10013174:	18c00017 	ldw	r3,0(r3)
10013178:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1001317c:	e0bffd17 	ldw	r2,-12(fp)
10013180:	e0fffd17 	ldw	r3,-12(fp)
10013184:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10013188:	e0bffd17 	ldw	r2,-12(fp)
1001318c:	e0fffd17 	ldw	r3,-12(fp)
10013190:	10c00015 	stw	r3,0(r2)
10013194:	e0bffb17 	ldw	r2,-20(fp)
10013198:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001319c:	e0bffe17 	ldw	r2,-8(fp)
100131a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100131a4:	0001883a 	nop
100131a8:	e037883a 	mov	sp,fp
100131ac:	df000017 	ldw	fp,0(sp)
100131b0:	dec00104 	addi	sp,sp,4
100131b4:	f800283a 	ret

100131b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100131b8:	defffb04 	addi	sp,sp,-20
100131bc:	dfc00415 	stw	ra,16(sp)
100131c0:	df000315 	stw	fp,12(sp)
100131c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100131c8:	d0a01017 	ldw	r2,-32704(gp)
100131cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100131d0:	d0a6f317 	ldw	r2,-25652(gp)
100131d4:	10800044 	addi	r2,r2,1
100131d8:	d0a6f315 	stw	r2,-25652(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100131dc:	00002e06 	br	10013298 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100131e0:	e0bffd17 	ldw	r2,-12(fp)
100131e4:	10800017 	ldw	r2,0(r2)
100131e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100131ec:	e0bffd17 	ldw	r2,-12(fp)
100131f0:	10800403 	ldbu	r2,16(r2)
100131f4:	10803fcc 	andi	r2,r2,255
100131f8:	10000426 	beq	r2,zero,1001320c <alt_tick+0x54>
100131fc:	d0a6f317 	ldw	r2,-25652(gp)
10013200:	1000021e 	bne	r2,zero,1001320c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10013204:	e0bffd17 	ldw	r2,-12(fp)
10013208:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1001320c:	e0bffd17 	ldw	r2,-12(fp)
10013210:	10800217 	ldw	r2,8(r2)
10013214:	d0e6f317 	ldw	r3,-25652(gp)
10013218:	18801d36 	bltu	r3,r2,10013290 <alt_tick+0xd8>
1001321c:	e0bffd17 	ldw	r2,-12(fp)
10013220:	10800403 	ldbu	r2,16(r2)
10013224:	10803fcc 	andi	r2,r2,255
10013228:	1000191e 	bne	r2,zero,10013290 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1001322c:	e0bffd17 	ldw	r2,-12(fp)
10013230:	10800317 	ldw	r2,12(r2)
10013234:	e0fffd17 	ldw	r3,-12(fp)
10013238:	18c00517 	ldw	r3,20(r3)
1001323c:	1809883a 	mov	r4,r3
10013240:	103ee83a 	callr	r2
10013244:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10013248:	e0bfff17 	ldw	r2,-4(fp)
1001324c:	1000031e 	bne	r2,zero,1001325c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10013250:	e13ffd17 	ldw	r4,-12(fp)
10013254:	001311c0 	call	1001311c <alt_alarm_stop>
10013258:	00000d06 	br	10013290 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1001325c:	e0bffd17 	ldw	r2,-12(fp)
10013260:	10c00217 	ldw	r3,8(r2)
10013264:	e0bfff17 	ldw	r2,-4(fp)
10013268:	1887883a 	add	r3,r3,r2
1001326c:	e0bffd17 	ldw	r2,-12(fp)
10013270:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10013274:	e0bffd17 	ldw	r2,-12(fp)
10013278:	10c00217 	ldw	r3,8(r2)
1001327c:	d0a6f317 	ldw	r2,-25652(gp)
10013280:	1880032e 	bgeu	r3,r2,10013290 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10013284:	e0bffd17 	ldw	r2,-12(fp)
10013288:	00c00044 	movi	r3,1
1001328c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10013290:	e0bffe17 	ldw	r2,-8(fp)
10013294:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013298:	e0fffd17 	ldw	r3,-12(fp)
1001329c:	d0a01004 	addi	r2,gp,-32704
100132a0:	18bfcf1e 	bne	r3,r2,100131e0 <__alt_data_end+0xf80131e0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100132a4:	0001883a 	nop
}
100132a8:	0001883a 	nop
100132ac:	e037883a 	mov	sp,fp
100132b0:	dfc00117 	ldw	ra,4(sp)
100132b4:	df000017 	ldw	fp,0(sp)
100132b8:	dec00204 	addi	sp,sp,8
100132bc:	f800283a 	ret

100132c0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100132c0:	deffff04 	addi	sp,sp,-4
100132c4:	df000015 	stw	fp,0(sp)
100132c8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100132cc:	000170fa 	wrctl	ienable,zero
}
100132d0:	0001883a 	nop
100132d4:	e037883a 	mov	sp,fp
100132d8:	df000017 	ldw	fp,0(sp)
100132dc:	dec00104 	addi	sp,sp,4
100132e0:	f800283a 	ret

100132e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100132e4:	defffa04 	addi	sp,sp,-24
100132e8:	dfc00515 	stw	ra,20(sp)
100132ec:	df000415 	stw	fp,16(sp)
100132f0:	df000404 	addi	fp,sp,16
100132f4:	e13ffe15 	stw	r4,-8(fp)
100132f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100132fc:	e0bfff17 	ldw	r2,-4(fp)
10013300:	10800017 	ldw	r2,0(r2)
10013304:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10013308:	e13ffe17 	ldw	r4,-8(fp)
1001330c:	0004bb00 	call	10004bb0 <strlen>
10013310:	10800044 	addi	r2,r2,1
10013314:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013318:	00000d06 	br	10013350 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1001331c:	e0bffc17 	ldw	r2,-16(fp)
10013320:	10800217 	ldw	r2,8(r2)
10013324:	e0fffd17 	ldw	r3,-12(fp)
10013328:	180d883a 	mov	r6,r3
1001332c:	e17ffe17 	ldw	r5,-8(fp)
10013330:	1009883a 	mov	r4,r2
10013334:	00136280 	call	10013628 <memcmp>
10013338:	1000021e 	bne	r2,zero,10013344 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1001333c:	e0bffc17 	ldw	r2,-16(fp)
10013340:	00000706 	br	10013360 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10013344:	e0bffc17 	ldw	r2,-16(fp)
10013348:	10800017 	ldw	r2,0(r2)
1001334c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013350:	e0fffc17 	ldw	r3,-16(fp)
10013354:	e0bfff17 	ldw	r2,-4(fp)
10013358:	18bff01e 	bne	r3,r2,1001331c <__alt_data_end+0xf801331c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1001335c:	0005883a 	mov	r2,zero
}
10013360:	e037883a 	mov	sp,fp
10013364:	dfc00117 	ldw	ra,4(sp)
10013368:	df000017 	ldw	fp,0(sp)
1001336c:	dec00204 	addi	sp,sp,8
10013370:	f800283a 	ret

10013374 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10013374:	defffb04 	addi	sp,sp,-20
10013378:	dfc00415 	stw	ra,16(sp)
1001337c:	df000315 	stw	fp,12(sp)
10013380:	df000304 	addi	fp,sp,12
10013384:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10013388:	d0a00817 	ldw	r2,-32736(gp)
1001338c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013390:	00003106 	br	10013458 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10013394:	e0bffd17 	ldw	r2,-12(fp)
10013398:	10800217 	ldw	r2,8(r2)
1001339c:	1009883a 	mov	r4,r2
100133a0:	0004bb00 	call	10004bb0 <strlen>
100133a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100133a8:	e0bffd17 	ldw	r2,-12(fp)
100133ac:	10c00217 	ldw	r3,8(r2)
100133b0:	e0bffe17 	ldw	r2,-8(fp)
100133b4:	10bfffc4 	addi	r2,r2,-1
100133b8:	1885883a 	add	r2,r3,r2
100133bc:	10800003 	ldbu	r2,0(r2)
100133c0:	10803fcc 	andi	r2,r2,255
100133c4:	1080201c 	xori	r2,r2,128
100133c8:	10bfe004 	addi	r2,r2,-128
100133cc:	10800bd8 	cmpnei	r2,r2,47
100133d0:	1000031e 	bne	r2,zero,100133e0 <alt_find_file+0x6c>
    {
      len -= 1;
100133d4:	e0bffe17 	ldw	r2,-8(fp)
100133d8:	10bfffc4 	addi	r2,r2,-1
100133dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100133e0:	e0bffe17 	ldw	r2,-8(fp)
100133e4:	e0ffff17 	ldw	r3,-4(fp)
100133e8:	1885883a 	add	r2,r3,r2
100133ec:	10800003 	ldbu	r2,0(r2)
100133f0:	10803fcc 	andi	r2,r2,255
100133f4:	1080201c 	xori	r2,r2,128
100133f8:	10bfe004 	addi	r2,r2,-128
100133fc:	10800be0 	cmpeqi	r2,r2,47
10013400:	1000081e 	bne	r2,zero,10013424 <alt_find_file+0xb0>
10013404:	e0bffe17 	ldw	r2,-8(fp)
10013408:	e0ffff17 	ldw	r3,-4(fp)
1001340c:	1885883a 	add	r2,r3,r2
10013410:	10800003 	ldbu	r2,0(r2)
10013414:	10803fcc 	andi	r2,r2,255
10013418:	1080201c 	xori	r2,r2,128
1001341c:	10bfe004 	addi	r2,r2,-128
10013420:	10000a1e 	bne	r2,zero,1001344c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10013424:	e0bffd17 	ldw	r2,-12(fp)
10013428:	10800217 	ldw	r2,8(r2)
1001342c:	e0fffe17 	ldw	r3,-8(fp)
10013430:	180d883a 	mov	r6,r3
10013434:	e17fff17 	ldw	r5,-4(fp)
10013438:	1009883a 	mov	r4,r2
1001343c:	00136280 	call	10013628 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013440:	1000021e 	bne	r2,zero,1001344c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10013444:	e0bffd17 	ldw	r2,-12(fp)
10013448:	00000706 	br	10013468 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
1001344c:	e0bffd17 	ldw	r2,-12(fp)
10013450:	10800017 	ldw	r2,0(r2)
10013454:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013458:	e0fffd17 	ldw	r3,-12(fp)
1001345c:	d0a00804 	addi	r2,gp,-32736
10013460:	18bfcc1e 	bne	r3,r2,10013394 <__alt_data_end+0xf8013394>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10013464:	0005883a 	mov	r2,zero
}
10013468:	e037883a 	mov	sp,fp
1001346c:	dfc00117 	ldw	ra,4(sp)
10013470:	df000017 	ldw	fp,0(sp)
10013474:	dec00204 	addi	sp,sp,8
10013478:	f800283a 	ret

1001347c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1001347c:	defffa04 	addi	sp,sp,-24
10013480:	dfc00515 	stw	ra,20(sp)
10013484:	df000415 	stw	fp,16(sp)
10013488:	dc000315 	stw	r16,12(sp)
1001348c:	df000404 	addi	fp,sp,16
10013490:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10013494:	00bffa04 	movi	r2,-24
10013498:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001349c:	e03ffc15 	stw	zero,-16(fp)
100134a0:	00001d06 	br	10013518 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
100134a4:	04040074 	movhi	r16,4097
100134a8:	84133304 	addi	r16,r16,19660
100134ac:	e0bffc17 	ldw	r2,-16(fp)
100134b0:	01400304 	movi	r5,12
100134b4:	1009883a 	mov	r4,r2
100134b8:	000e8840 	call	1000e884 <__mulsi3>
100134bc:	8085883a 	add	r2,r16,r2
100134c0:	10800017 	ldw	r2,0(r2)
100134c4:	1000111e 	bne	r2,zero,1001350c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
100134c8:	04040074 	movhi	r16,4097
100134cc:	84133304 	addi	r16,r16,19660
100134d0:	e0bffc17 	ldw	r2,-16(fp)
100134d4:	01400304 	movi	r5,12
100134d8:	1009883a 	mov	r4,r2
100134dc:	000e8840 	call	1000e884 <__mulsi3>
100134e0:	8085883a 	add	r2,r16,r2
100134e4:	e0fffe17 	ldw	r3,-8(fp)
100134e8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100134ec:	d0e00c17 	ldw	r3,-32720(gp)
100134f0:	e0bffc17 	ldw	r2,-16(fp)
100134f4:	1880020e 	bge	r3,r2,10013500 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
100134f8:	e0bffc17 	ldw	r2,-16(fp)
100134fc:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
10013500:	e0bffc17 	ldw	r2,-16(fp)
10013504:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10013508:	00000606 	br	10013524 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001350c:	e0bffc17 	ldw	r2,-16(fp)
10013510:	10800044 	addi	r2,r2,1
10013514:	e0bffc15 	stw	r2,-16(fp)
10013518:	e0bffc17 	ldw	r2,-16(fp)
1001351c:	10800810 	cmplti	r2,r2,32
10013520:	103fe01e 	bne	r2,zero,100134a4 <__alt_data_end+0xf80134a4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10013524:	e0bffd17 	ldw	r2,-12(fp)
}
10013528:	e6ffff04 	addi	sp,fp,-4
1001352c:	dfc00217 	ldw	ra,8(sp)
10013530:	df000117 	ldw	fp,4(sp)
10013534:	dc000017 	ldw	r16,0(sp)
10013538:	dec00304 	addi	sp,sp,12
1001353c:	f800283a 	ret

10013540 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10013540:	defffe04 	addi	sp,sp,-8
10013544:	df000115 	stw	fp,4(sp)
10013548:	df000104 	addi	fp,sp,4
1001354c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10013550:	e0bfff17 	ldw	r2,-4(fp)
10013554:	10bffe84 	addi	r2,r2,-6
10013558:	10c00428 	cmpgeui	r3,r2,16
1001355c:	18001a1e 	bne	r3,zero,100135c8 <alt_exception_cause_generated_bad_addr+0x88>
10013560:	100690ba 	slli	r3,r2,2
10013564:	00840074 	movhi	r2,4097
10013568:	108d5e04 	addi	r2,r2,13688
1001356c:	1885883a 	add	r2,r3,r2
10013570:	10800017 	ldw	r2,0(r2)
10013574:	1000683a 	jmp	r2
10013578:	100135b8 	rdprs	zero,r2,1238
1001357c:	100135b8 	rdprs	zero,r2,1238
10013580:	100135c8 	cmpgei	zero,r2,1239
10013584:	100135c8 	cmpgei	zero,r2,1239
10013588:	100135c8 	cmpgei	zero,r2,1239
1001358c:	100135b8 	rdprs	zero,r2,1238
10013590:	100135c0 	call	1100135c <_gp+0xfe34b0>
10013594:	100135c8 	cmpgei	zero,r2,1239
10013598:	100135b8 	rdprs	zero,r2,1238
1001359c:	100135b8 	rdprs	zero,r2,1238
100135a0:	100135c8 	cmpgei	zero,r2,1239
100135a4:	100135b8 	rdprs	zero,r2,1238
100135a8:	100135c0 	call	1100135c <_gp+0xfe34b0>
100135ac:	100135c8 	cmpgei	zero,r2,1239
100135b0:	100135c8 	cmpgei	zero,r2,1239
100135b4:	100135b8 	rdprs	zero,r2,1238
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
100135b8:	00800044 	movi	r2,1
100135bc:	00000306 	br	100135cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100135c0:	0005883a 	mov	r2,zero
100135c4:	00000106 	br	100135cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100135c8:	0005883a 	mov	r2,zero
  }
}
100135cc:	e037883a 	mov	sp,fp
100135d0:	df000017 	ldw	fp,0(sp)
100135d4:	dec00104 	addi	sp,sp,4
100135d8:	f800283a 	ret

100135dc <atexit>:
100135dc:	200b883a 	mov	r5,r4
100135e0:	000f883a 	mov	r7,zero
100135e4:	000d883a 	mov	r6,zero
100135e8:	0009883a 	mov	r4,zero
100135ec:	00136a41 	jmpi	100136a4 <__register_exitproc>

100135f0 <exit>:
100135f0:	defffe04 	addi	sp,sp,-8
100135f4:	000b883a 	mov	r5,zero
100135f8:	dc000015 	stw	r16,0(sp)
100135fc:	dfc00115 	stw	ra,4(sp)
10013600:	2021883a 	mov	r16,r4
10013604:	00137bc0 	call	100137bc <__call_exitprocs>
10013608:	00840074 	movhi	r2,4097
1001360c:	1097af04 	addi	r2,r2,24252
10013610:	11000017 	ldw	r4,0(r2)
10013614:	20800f17 	ldw	r2,60(r4)
10013618:	10000126 	beq	r2,zero,10013620 <exit+0x30>
1001361c:	103ee83a 	callr	r2
10013620:	8009883a 	mov	r4,r16
10013624:	001393c0 	call	1001393c <_exit>

10013628 <memcmp>:
10013628:	01c000c4 	movi	r7,3
1001362c:	3980192e 	bgeu	r7,r6,10013694 <memcmp+0x6c>
10013630:	2144b03a 	or	r2,r4,r5
10013634:	11c4703a 	and	r2,r2,r7
10013638:	10000f26 	beq	r2,zero,10013678 <memcmp+0x50>
1001363c:	20800003 	ldbu	r2,0(r4)
10013640:	28c00003 	ldbu	r3,0(r5)
10013644:	10c0151e 	bne	r2,r3,1001369c <memcmp+0x74>
10013648:	31bfff84 	addi	r6,r6,-2
1001364c:	01ffffc4 	movi	r7,-1
10013650:	00000406 	br	10013664 <memcmp+0x3c>
10013654:	20800003 	ldbu	r2,0(r4)
10013658:	28c00003 	ldbu	r3,0(r5)
1001365c:	31bfffc4 	addi	r6,r6,-1
10013660:	10c00e1e 	bne	r2,r3,1001369c <memcmp+0x74>
10013664:	21000044 	addi	r4,r4,1
10013668:	29400044 	addi	r5,r5,1
1001366c:	31fff91e 	bne	r6,r7,10013654 <__alt_data_end+0xf8013654>
10013670:	0005883a 	mov	r2,zero
10013674:	f800283a 	ret
10013678:	20c00017 	ldw	r3,0(r4)
1001367c:	28800017 	ldw	r2,0(r5)
10013680:	18bfee1e 	bne	r3,r2,1001363c <__alt_data_end+0xf801363c>
10013684:	31bfff04 	addi	r6,r6,-4
10013688:	21000104 	addi	r4,r4,4
1001368c:	29400104 	addi	r5,r5,4
10013690:	39bff936 	bltu	r7,r6,10013678 <__alt_data_end+0xf8013678>
10013694:	303fe91e 	bne	r6,zero,1001363c <__alt_data_end+0xf801363c>
10013698:	003ff506 	br	10013670 <__alt_data_end+0xf8013670>
1001369c:	10c5c83a 	sub	r2,r2,r3
100136a0:	f800283a 	ret

100136a4 <__register_exitproc>:
100136a4:	defffa04 	addi	sp,sp,-24
100136a8:	dc000315 	stw	r16,12(sp)
100136ac:	04040074 	movhi	r16,4097
100136b0:	8417af04 	addi	r16,r16,24252
100136b4:	80c00017 	ldw	r3,0(r16)
100136b8:	dc400415 	stw	r17,16(sp)
100136bc:	dfc00515 	stw	ra,20(sp)
100136c0:	18805217 	ldw	r2,328(r3)
100136c4:	2023883a 	mov	r17,r4
100136c8:	10003726 	beq	r2,zero,100137a8 <__register_exitproc+0x104>
100136cc:	10c00117 	ldw	r3,4(r2)
100136d0:	010007c4 	movi	r4,31
100136d4:	20c00e16 	blt	r4,r3,10013710 <__register_exitproc+0x6c>
100136d8:	1a000044 	addi	r8,r3,1
100136dc:	8800221e 	bne	r17,zero,10013768 <__register_exitproc+0xc4>
100136e0:	18c00084 	addi	r3,r3,2
100136e4:	18c7883a 	add	r3,r3,r3
100136e8:	18c7883a 	add	r3,r3,r3
100136ec:	12000115 	stw	r8,4(r2)
100136f0:	10c7883a 	add	r3,r2,r3
100136f4:	19400015 	stw	r5,0(r3)
100136f8:	0005883a 	mov	r2,zero
100136fc:	dfc00517 	ldw	ra,20(sp)
10013700:	dc400417 	ldw	r17,16(sp)
10013704:	dc000317 	ldw	r16,12(sp)
10013708:	dec00604 	addi	sp,sp,24
1001370c:	f800283a 	ret
10013710:	00840034 	movhi	r2,4096
10013714:	10907a04 	addi	r2,r2,16872
10013718:	10002626 	beq	r2,zero,100137b4 <__register_exitproc+0x110>
1001371c:	01006404 	movi	r4,400
10013720:	d9400015 	stw	r5,0(sp)
10013724:	d9800115 	stw	r6,4(sp)
10013728:	d9c00215 	stw	r7,8(sp)
1001372c:	00041e80 	call	100041e8 <malloc>
10013730:	d9400017 	ldw	r5,0(sp)
10013734:	d9800117 	ldw	r6,4(sp)
10013738:	d9c00217 	ldw	r7,8(sp)
1001373c:	10001d26 	beq	r2,zero,100137b4 <__register_exitproc+0x110>
10013740:	81000017 	ldw	r4,0(r16)
10013744:	10000115 	stw	zero,4(r2)
10013748:	02000044 	movi	r8,1
1001374c:	22405217 	ldw	r9,328(r4)
10013750:	0007883a 	mov	r3,zero
10013754:	12400015 	stw	r9,0(r2)
10013758:	20805215 	stw	r2,328(r4)
1001375c:	10006215 	stw	zero,392(r2)
10013760:	10006315 	stw	zero,396(r2)
10013764:	883fde26 	beq	r17,zero,100136e0 <__alt_data_end+0xf80136e0>
10013768:	18c9883a 	add	r4,r3,r3
1001376c:	2109883a 	add	r4,r4,r4
10013770:	1109883a 	add	r4,r2,r4
10013774:	21802215 	stw	r6,136(r4)
10013778:	01800044 	movi	r6,1
1001377c:	12406217 	ldw	r9,392(r2)
10013780:	30cc983a 	sll	r6,r6,r3
10013784:	4992b03a 	or	r9,r9,r6
10013788:	12406215 	stw	r9,392(r2)
1001378c:	21c04215 	stw	r7,264(r4)
10013790:	01000084 	movi	r4,2
10013794:	893fd21e 	bne	r17,r4,100136e0 <__alt_data_end+0xf80136e0>
10013798:	11006317 	ldw	r4,396(r2)
1001379c:	218cb03a 	or	r6,r4,r6
100137a0:	11806315 	stw	r6,396(r2)
100137a4:	003fce06 	br	100136e0 <__alt_data_end+0xf80136e0>
100137a8:	18805304 	addi	r2,r3,332
100137ac:	18805215 	stw	r2,328(r3)
100137b0:	003fc606 	br	100136cc <__alt_data_end+0xf80136cc>
100137b4:	00bfffc4 	movi	r2,-1
100137b8:	003fd006 	br	100136fc <__alt_data_end+0xf80136fc>

100137bc <__call_exitprocs>:
100137bc:	defff504 	addi	sp,sp,-44
100137c0:	df000915 	stw	fp,36(sp)
100137c4:	dd400615 	stw	r21,24(sp)
100137c8:	dc800315 	stw	r18,12(sp)
100137cc:	dfc00a15 	stw	ra,40(sp)
100137d0:	ddc00815 	stw	r23,32(sp)
100137d4:	dd800715 	stw	r22,28(sp)
100137d8:	dd000515 	stw	r20,20(sp)
100137dc:	dcc00415 	stw	r19,16(sp)
100137e0:	dc400215 	stw	r17,8(sp)
100137e4:	dc000115 	stw	r16,4(sp)
100137e8:	d9000015 	stw	r4,0(sp)
100137ec:	2839883a 	mov	fp,r5
100137f0:	04800044 	movi	r18,1
100137f4:	057fffc4 	movi	r21,-1
100137f8:	00840074 	movhi	r2,4097
100137fc:	1097af04 	addi	r2,r2,24252
10013800:	12000017 	ldw	r8,0(r2)
10013804:	45005217 	ldw	r20,328(r8)
10013808:	44c05204 	addi	r19,r8,328
1001380c:	a0001c26 	beq	r20,zero,10013880 <__call_exitprocs+0xc4>
10013810:	a0800117 	ldw	r2,4(r20)
10013814:	15ffffc4 	addi	r23,r2,-1
10013818:	b8000d16 	blt	r23,zero,10013850 <__call_exitprocs+0x94>
1001381c:	14000044 	addi	r16,r2,1
10013820:	8421883a 	add	r16,r16,r16
10013824:	8421883a 	add	r16,r16,r16
10013828:	84402004 	addi	r17,r16,128
1001382c:	a463883a 	add	r17,r20,r17
10013830:	a421883a 	add	r16,r20,r16
10013834:	e0001e26 	beq	fp,zero,100138b0 <__call_exitprocs+0xf4>
10013838:	80804017 	ldw	r2,256(r16)
1001383c:	e0801c26 	beq	fp,r2,100138b0 <__call_exitprocs+0xf4>
10013840:	bdffffc4 	addi	r23,r23,-1
10013844:	843fff04 	addi	r16,r16,-4
10013848:	8c7fff04 	addi	r17,r17,-4
1001384c:	bd7ff91e 	bne	r23,r21,10013834 <__alt_data_end+0xf8013834>
10013850:	00840034 	movhi	r2,4096
10013854:	10907f04 	addi	r2,r2,16892
10013858:	10000926 	beq	r2,zero,10013880 <__call_exitprocs+0xc4>
1001385c:	a0800117 	ldw	r2,4(r20)
10013860:	1000301e 	bne	r2,zero,10013924 <__call_exitprocs+0x168>
10013864:	a0800017 	ldw	r2,0(r20)
10013868:	10003226 	beq	r2,zero,10013934 <__call_exitprocs+0x178>
1001386c:	a009883a 	mov	r4,r20
10013870:	98800015 	stw	r2,0(r19)
10013874:	00041fc0 	call	100041fc <free>
10013878:	9d000017 	ldw	r20,0(r19)
1001387c:	a03fe41e 	bne	r20,zero,10013810 <__alt_data_end+0xf8013810>
10013880:	dfc00a17 	ldw	ra,40(sp)
10013884:	df000917 	ldw	fp,36(sp)
10013888:	ddc00817 	ldw	r23,32(sp)
1001388c:	dd800717 	ldw	r22,28(sp)
10013890:	dd400617 	ldw	r21,24(sp)
10013894:	dd000517 	ldw	r20,20(sp)
10013898:	dcc00417 	ldw	r19,16(sp)
1001389c:	dc800317 	ldw	r18,12(sp)
100138a0:	dc400217 	ldw	r17,8(sp)
100138a4:	dc000117 	ldw	r16,4(sp)
100138a8:	dec00b04 	addi	sp,sp,44
100138ac:	f800283a 	ret
100138b0:	a0800117 	ldw	r2,4(r20)
100138b4:	80c00017 	ldw	r3,0(r16)
100138b8:	10bfffc4 	addi	r2,r2,-1
100138bc:	15c01426 	beq	r2,r23,10013910 <__call_exitprocs+0x154>
100138c0:	80000015 	stw	zero,0(r16)
100138c4:	183fde26 	beq	r3,zero,10013840 <__alt_data_end+0xf8013840>
100138c8:	95c8983a 	sll	r4,r18,r23
100138cc:	a0806217 	ldw	r2,392(r20)
100138d0:	a5800117 	ldw	r22,4(r20)
100138d4:	2084703a 	and	r2,r4,r2
100138d8:	10000b26 	beq	r2,zero,10013908 <__call_exitprocs+0x14c>
100138dc:	a0806317 	ldw	r2,396(r20)
100138e0:	2088703a 	and	r4,r4,r2
100138e4:	20000c1e 	bne	r4,zero,10013918 <__call_exitprocs+0x15c>
100138e8:	89400017 	ldw	r5,0(r17)
100138ec:	d9000017 	ldw	r4,0(sp)
100138f0:	183ee83a 	callr	r3
100138f4:	a0800117 	ldw	r2,4(r20)
100138f8:	15bfbf1e 	bne	r2,r22,100137f8 <__alt_data_end+0xf80137f8>
100138fc:	98800017 	ldw	r2,0(r19)
10013900:	153fcf26 	beq	r2,r20,10013840 <__alt_data_end+0xf8013840>
10013904:	003fbc06 	br	100137f8 <__alt_data_end+0xf80137f8>
10013908:	183ee83a 	callr	r3
1001390c:	003ff906 	br	100138f4 <__alt_data_end+0xf80138f4>
10013910:	a5c00115 	stw	r23,4(r20)
10013914:	003feb06 	br	100138c4 <__alt_data_end+0xf80138c4>
10013918:	89000017 	ldw	r4,0(r17)
1001391c:	183ee83a 	callr	r3
10013920:	003ff406 	br	100138f4 <__alt_data_end+0xf80138f4>
10013924:	a0800017 	ldw	r2,0(r20)
10013928:	a027883a 	mov	r19,r20
1001392c:	1029883a 	mov	r20,r2
10013930:	003fb606 	br	1001380c <__alt_data_end+0xf801380c>
10013934:	0005883a 	mov	r2,zero
10013938:	003ffb06 	br	10013928 <__alt_data_end+0xf8013928>

1001393c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1001393c:	defffd04 	addi	sp,sp,-12
10013940:	df000215 	stw	fp,8(sp)
10013944:	df000204 	addi	fp,sp,8
10013948:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1001394c:	0001883a 	nop
10013950:	e0bfff17 	ldw	r2,-4(fp)
10013954:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10013958:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1001395c:	10000226 	beq	r2,zero,10013968 <_exit+0x2c>
    ALT_SIM_FAIL();
10013960:	002af070 	cmpltui	zero,zero,43969
10013964:	00000106 	br	1001396c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10013968:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1001396c:	003fff06 	br	1001396c <__alt_data_end+0xf801396c>
